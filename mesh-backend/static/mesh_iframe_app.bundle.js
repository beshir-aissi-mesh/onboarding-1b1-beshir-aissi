(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __typeError = (msg) => {
    throw TypeError(msg);
  };
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod3) => function __require() {
    return mod3 || (0, cb[__getOwnPropNames(cb)[0]])((mod3 = { exports: {} }).exports, mod3), mod3.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod3, isNodeMode, target) => (target = mod3 != null ? __create(__getProtoOf(mod3)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod3 || !mod3.__esModule ? __defProp(target, "default", { value: mod3, enumerable: true }) : target,
    mod3
  ));
  var __toCommonJS = (mod3) => __copyProps(__defProp({}, "__esModule", { value: true }), mod3);
  var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
  var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
  var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
  var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);
  var __privateWrapper = (obj, member, setter, getter) => ({
    set _(value) {
      __privateSet(obj, member, value, setter);
    },
    get _() {
      return __privateGet(obj, member, getter);
    }
  });

  // node_modules/@meshconnect/web-link-sdk/utils/types.js
  var init_types = __esm({
    "node_modules/@meshconnect/web-link-sdk/utils/types.js"() {
    }
  });

  // node_modules/@meshconnect/web-link-sdk/utils/event-types.js
  function isLinkEventTypeKey(key) {
    return LINK_EVENT_TYPE_KEYS.includes(key);
  }
  var LINK_EVENT_TYPE_KEYS;
  var init_event_types = __esm({
    "node_modules/@meshconnect/web-link-sdk/utils/event-types.js"() {
      LINK_EVENT_TYPE_KEYS = [
        "integrationConnected",
        "integrationConnectionError",
        "integrationMfaRequired",
        "integrationMfaEntered",
        "integrationOAuthStarted",
        "integrationAccountSelectionRequired",
        "transferCompleted",
        "integrationSelected",
        "credentialsEntered",
        "transferStarted",
        "transferPreviewed",
        "transferPreviewError",
        "transferExecutionError",
        "pageLoaded",
        "transferAssetSelected",
        "transferNetworkSelected",
        "transferAmountEntered",
        "transferMfaRequired",
        "transferMfaEntered",
        "transferKycRequired",
        "transferExecuted",
        "transferInitiated",
        "transferNoEligibleAssets",
        "walletMessageSigned",
        "verifyDonePage",
        "verifyWalletRejected",
        "connectionDeclined",
        "transferConfigureError",
        "connectionUnavailable",
        "transferDeclined",
        "done",
        "close",
        "SDKinjectedWalletProviders"
      ];
    }
  });

  // node_modules/@meshconnect/web-link-sdk/utils/style.js
  function getLinkStyle(url) {
    try {
      var params = new URLSearchParams(new URL(url).search);
      var style = params.get("link_style");
      return style && JSON.parse(window.atob(style));
    } catch (e) {
      return void 0;
    }
  }
  function getNumber(def, value) {
    return value !== void 0 ? value : def;
  }
  var init_style = __esm({
    "node_modules/@meshconnect/web-link-sdk/utils/style.js"() {
    }
  });

  // node_modules/@meshconnect/web-link-sdk/utils/popup.js
  function removePopup() {
    var _a2, _b;
    var existingPopup = window.document.getElementById(popupId);
    (_a2 = existingPopup === null || existingPopup === void 0 ? void 0 : existingPopup.parentElement) === null || _a2 === void 0 ? void 0 : _a2.removeChild(existingPopup);
    var existingStyles = window.document.getElementById(stylesId);
    (_b = existingStyles === null || existingStyles === void 0 ? void 0 : existingStyles.parentElement) === null || _b === void 0 ? void 0 : _b.removeChild(existingStyles);
  }
  function addPopup(iframeLink, language) {
    removePopup();
    var styleElement = document.createElement("style");
    styleElement.id = stylesId;
    var style = getLinkStyle(iframeLink);
    styleElement.textContent = getStylesContent(style);
    window.document.head.appendChild(styleElement);
    iframeLink = "".concat(iframeLink).concat(iframeLink.includes("?") ? "&" : "?", "lng=").concat(language || "en");
    var popupRootElement = document.createElement("div");
    popupRootElement.id = popupId;
    var popupBackdropElement = document.createElement("div");
    popupBackdropElement.id = backdropId;
    popupRootElement.appendChild(popupBackdropElement);
    var popupContentElement = document.createElement("div");
    popupContentElement.id = popupContentId;
    var iframeElement2 = document.createElement("iframe");
    iframeElement2.id = iframeId;
    iframeElement2.src = iframeLink;
    iframeElement2.allow = "clipboard-read *; clipboard-write *";
    popupContentElement.appendChild(iframeElement2);
    popupRootElement.appendChild(popupContentElement);
    window.document.body.appendChild(popupRootElement);
  }
  var popupId, backdropId, popupContentId, stylesId, iframeId, getStylesContent;
  var init_popup = __esm({
    "node_modules/@meshconnect/web-link-sdk/utils/popup.js"() {
      init_style();
      popupId = "mesh-link-popup";
      backdropId = "mesh-link-popup__backdrop";
      popupContentId = "mesh-link-popup__popup-content";
      stylesId = "mesh-link-popup__styles";
      iframeId = "mesh-link-popup__iframe";
      getStylesContent = function(style) {
        return "\n  body {\n    position: fixed;\n    left: 0;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    overflow: hidden;\n  }\n\n  #".concat(popupId, " {\n    all: unset;\n    position: fixed;\n    left: 0;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    z-index: 10000;\n  }\n\n  #").concat(backdropId, " {\n    position: absolute;\n    left: 0;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    z-index: 10000;\n    background: black;\n    opacity: ").concat(getNumber(0.6, style === null || style === void 0 ? void 0 : style.io), ";\n  }\n\n  #").concat(popupContentId, " {\n    position: absolute;\n    height: 80%;\n    max-height: 710px;\n    min-height: 685px;\n    margin: auto;\n    z-index: 10001;\n    width: 30%;\n    max-width: 430px;\n    min-width: 380px;\n    display: flex;\n    flex-direction: column;\n    border-radius: ").concat(getNumber(24, style === null || style === void 0 ? void 0 : style.ir), "px;\n    flex-grow: 1;\n  }\n\n  #").concat(popupContentId, " iframe {\n    border: none;\n    width: 100%;\n    flex-grow: 1;\n    border-radius: ").concat(getNumber(24, style === null || style === void 0 ? void 0 : style.ir), "px;\n  }\n\n  @media only screen and (max-width: 768px) {\n    #").concat(popupContentId, " {\n      height: 100vh;\n      width: 100vw;\n      max-width: 100%;\n      min-width: 100%;\n      max-height: 100%;\n      min-height: 100%;\n      border-radius: 0px;\n    }\n\n    #").concat(popupContentId, " iframe {\n      border-radius: 0px;\n    }\n  }\n\n  @media only screen and (max-height: 710px) {\n    #").concat(popupContentId, " {\n      max-height: 100%;\n      min-height: 100%;\n    }\n  }\n");
      };
    }
  });

  // node_modules/@meshconnect/web-link-sdk/utils/wallet-browser-event-types.js
  function isWalletBrowserEventTypeKey(key) {
    return WALLET_BROWSER_EVENT_TYPE_KEYS.includes(key);
  }
  var WALLET_BROWSER_EVENT_TYPE_KEYS;
  var init_wallet_browser_event_types = __esm({
    "node_modules/@meshconnect/web-link-sdk/utils/wallet-browser-event-types.js"() {
      WALLET_BROWSER_EVENT_TYPE_KEYS = [
        "walletBrowserInjectedWalletSelected",
        "walletBrowserSignRequest",
        "walletBrowserChainSwitchRequest",
        "walletBrowserTransferBalanceRequest",
        "walletBrowserNativeTransferRequest",
        "walletBrowserNonNativeTransferRequest",
        "walletBrowserNativeSmartDeposit",
        "walletBrowserNonNativeSmartDeposit",
        "walletBrowserDisconnect"
      ];
    }
  });

  // node_modules/@meshconnect/web-link-sdk/utils/version.js
  var sdkVersion;
  var init_version = __esm({
    "node_modules/@meshconnect/web-link-sdk/utils/version.js"() {
      sdkVersion = "3.1.12";
    }
  });

  // node_modules/@meshconnect/web-link-sdk/utils/sdk-specs.js
  var sdkSpecs;
  var init_sdk_specs = __esm({
    "node_modules/@meshconnect/web-link-sdk/utils/sdk-specs.js"() {
      init_version();
      sdkSpecs = {
        platform: "web",
        version: sdkVersion,
        origin: window.location.origin
      };
    }
  });

  // node_modules/@meshconnect/web-link-sdk/utils/wallet/WalletStrategy.js
  var BaseWalletStrategy;
  var init_WalletStrategy = __esm({
    "node_modules/@meshconnect/web-link-sdk/utils/wallet/WalletStrategy.js"() {
      BaseWalletStrategy = /** @class */
      function() {
        function BaseWalletStrategy2() {
        }
        BaseWalletStrategy2.prototype.handleError = function(error, operation) {
          console.error("".concat(operation, " error:"), error);
          if (error instanceof Error) {
            return error;
          }
          return new Error("Failed to ".concat(operation));
        };
        BaseWalletStrategy2.prototype.isUserRejection = function(error) {
          var _a2;
          if (!error)
            return false;
          var message = ((_a2 = error.message) === null || _a2 === void 0 ? void 0 : _a2.toLowerCase()) || "";
          var errorCodes = [4001, -32603];
          return message.includes("user rejected") || message.includes("declined") || message.includes("cancelled") || errorCodes.includes(error.code);
        };
        return BaseWalletStrategy2;
      }();
    }
  });

  // node_modules/@meshconnect/web-link-sdk/utils/connectors/evm/types.js
  var init_types2 = __esm({
    "node_modules/@meshconnect/web-link-sdk/utils/connectors/evm/types.js"() {
    }
  });

  // node_modules/ethers/lib.esm/_version.js
  var version;
  var init_version2 = __esm({
    "node_modules/ethers/lib.esm/_version.js"() {
      version = "6.14.0";
    }
  });

  // node_modules/ethers/lib.esm/utils/properties.js
  function checkType(value, type2, name) {
    const types = type2.split("|").map((t) => t.trim());
    for (let i = 0; i < types.length; i++) {
      switch (type2) {
        case "any":
          return;
        case "bigint":
        case "boolean":
        case "number":
        case "string":
          if (typeof value === type2) {
            return;
          }
      }
    }
    const error = new Error(`invalid value for type ${type2}`);
    error.code = "INVALID_ARGUMENT";
    error.argument = `value.${name}`;
    error.value = value;
    throw error;
  }
  async function resolveProperties(value) {
    const keys = Object.keys(value);
    const results = await Promise.all(keys.map((k) => Promise.resolve(value[k])));
    return results.reduce((accum, v, index) => {
      accum[keys[index]] = v;
      return accum;
    }, {});
  }
  function defineProperties(target, values, types) {
    for (let key in values) {
      let value = values[key];
      const type2 = types ? types[key] : null;
      if (type2) {
        checkType(value, type2, key);
      }
      Object.defineProperty(target, key, { enumerable: true, value, writable: false });
    }
  }
  var init_properties = __esm({
    "node_modules/ethers/lib.esm/utils/properties.js"() {
    }
  });

  // node_modules/ethers/lib.esm/utils/errors.js
  function stringify(value) {
    if (value == null) {
      return "null";
    }
    if (Array.isArray(value)) {
      return "[ " + value.map(stringify).join(", ") + " ]";
    }
    if (value instanceof Uint8Array) {
      const HEX = "0123456789abcdef";
      let result = "0x";
      for (let i = 0; i < value.length; i++) {
        result += HEX[value[i] >> 4];
        result += HEX[value[i] & 15];
      }
      return result;
    }
    if (typeof value === "object" && typeof value.toJSON === "function") {
      return stringify(value.toJSON());
    }
    switch (typeof value) {
      case "boolean":
      case "symbol":
        return value.toString();
      case "bigint":
        return BigInt(value).toString();
      case "number":
        return value.toString();
      case "string":
        return JSON.stringify(value);
      case "object": {
        const keys = Object.keys(value);
        keys.sort();
        return "{ " + keys.map((k) => `${stringify(k)}: ${stringify(value[k])}`).join(", ") + " }";
      }
    }
    return `[ COULD NOT SERIALIZE ]`;
  }
  function isError(error, code) {
    return error && error.code === code;
  }
  function isCallException(error) {
    return isError(error, "CALL_EXCEPTION");
  }
  function makeError(message, code, info) {
    let shortMessage = message;
    {
      const details = [];
      if (info) {
        if ("message" in info || "code" in info || "name" in info) {
          throw new Error(`value will overwrite populated values: ${stringify(info)}`);
        }
        for (const key in info) {
          if (key === "shortMessage") {
            continue;
          }
          const value = info[key];
          details.push(key + "=" + stringify(value));
        }
      }
      details.push(`code=${code}`);
      details.push(`version=${version}`);
      if (details.length) {
        message += " (" + details.join(", ") + ")";
      }
    }
    let error;
    switch (code) {
      case "INVALID_ARGUMENT":
        error = new TypeError(message);
        break;
      case "NUMERIC_FAULT":
      case "BUFFER_OVERRUN":
        error = new RangeError(message);
        break;
      default:
        error = new Error(message);
    }
    defineProperties(error, { code });
    if (info) {
      Object.assign(error, info);
    }
    if (error.shortMessage == null) {
      defineProperties(error, { shortMessage });
    }
    return error;
  }
  function assert(check, message, code, info) {
    if (!check) {
      throw makeError(message, code, info);
    }
  }
  function assertArgument(check, message, name, value) {
    assert(check, message, "INVALID_ARGUMENT", { argument: name, value });
  }
  function assertArgumentCount(count, expectedCount, message) {
    if (message == null) {
      message = "";
    }
    if (message) {
      message = ": " + message;
    }
    assert(count >= expectedCount, "missing argument" + message, "MISSING_ARGUMENT", {
      count,
      expectedCount
    });
    assert(count <= expectedCount, "too many arguments" + message, "UNEXPECTED_ARGUMENT", {
      count,
      expectedCount
    });
  }
  function assertNormalize(form) {
    assert(_normalizeForms.indexOf(form) >= 0, "platform missing String.prototype.normalize", "UNSUPPORTED_OPERATION", {
      operation: "String.prototype.normalize",
      info: { form }
    });
  }
  function assertPrivate(givenGuard, guard, className) {
    if (className == null) {
      className = "";
    }
    if (givenGuard !== guard) {
      let method = className, operation = "new";
      if (className) {
        method += ".";
        operation += " " + className;
      }
      assert(false, `private constructor; use ${method}from* methods`, "UNSUPPORTED_OPERATION", {
        operation
      });
    }
  }
  var _normalizeForms;
  var init_errors = __esm({
    "node_modules/ethers/lib.esm/utils/errors.js"() {
      init_version2();
      init_properties();
      _normalizeForms = ["NFD", "NFC", "NFKD", "NFKC"].reduce((accum, form) => {
        try {
          if ("test".normalize(form) !== "test") {
            throw new Error("bad");
          }
          ;
          if (form === "NFD") {
            const check = String.fromCharCode(233).normalize("NFD");
            const expected = String.fromCharCode(101, 769);
            if (check !== expected) {
              throw new Error("broken");
            }
          }
          accum.push(form);
        } catch (error) {
        }
        return accum;
      }, []);
    }
  });

  // node_modules/ethers/lib.esm/utils/data.js
  function _getBytes(value, name, copy4) {
    if (value instanceof Uint8Array) {
      if (copy4) {
        return new Uint8Array(value);
      }
      return value;
    }
    if (typeof value === "string" && value.match(/^0x(?:[0-9a-f][0-9a-f])*$/i)) {
      const result = new Uint8Array((value.length - 2) / 2);
      let offset2 = 2;
      for (let i = 0; i < result.length; i++) {
        result[i] = parseInt(value.substring(offset2, offset2 + 2), 16);
        offset2 += 2;
      }
      return result;
    }
    assertArgument(false, "invalid BytesLike value", name || "value", value);
  }
  function getBytes(value, name) {
    return _getBytes(value, name, false);
  }
  function getBytesCopy(value, name) {
    return _getBytes(value, name, true);
  }
  function isHexString(value, length) {
    if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
      return false;
    }
    if (typeof length === "number" && value.length !== 2 + 2 * length) {
      return false;
    }
    if (length === true && value.length % 2 !== 0) {
      return false;
    }
    return true;
  }
  function isBytesLike(value) {
    return isHexString(value, true) || value instanceof Uint8Array;
  }
  function hexlify(data) {
    const bytes2 = getBytes(data);
    let result = "0x";
    for (let i = 0; i < bytes2.length; i++) {
      const v = bytes2[i];
      result += HexCharacters[(v & 240) >> 4] + HexCharacters[v & 15];
    }
    return result;
  }
  function concat(datas) {
    return "0x" + datas.map((d) => hexlify(d).substring(2)).join("");
  }
  function dataLength(data) {
    if (isHexString(data, true)) {
      return (data.length - 2) / 2;
    }
    return getBytes(data).length;
  }
  function dataSlice(data, start, end) {
    const bytes2 = getBytes(data);
    if (end != null && end > bytes2.length) {
      assert(false, "cannot slice beyond data bounds", "BUFFER_OVERRUN", {
        buffer: bytes2,
        length: bytes2.length,
        offset: end
      });
    }
    return hexlify(bytes2.slice(start == null ? 0 : start, end == null ? bytes2.length : end));
  }
  function stripZerosLeft(data) {
    let bytes2 = hexlify(data).substring(2);
    while (bytes2.startsWith("00")) {
      bytes2 = bytes2.substring(2);
    }
    return "0x" + bytes2;
  }
  function zeroPad(data, length, left) {
    const bytes2 = getBytes(data);
    assert(length >= bytes2.length, "padding exceeds data length", "BUFFER_OVERRUN", {
      buffer: new Uint8Array(bytes2),
      length,
      offset: length + 1
    });
    const result = new Uint8Array(length);
    result.fill(0);
    if (left) {
      result.set(bytes2, length - bytes2.length);
    } else {
      result.set(bytes2, 0);
    }
    return hexlify(result);
  }
  function zeroPadValue(data, length) {
    return zeroPad(data, length, true);
  }
  function zeroPadBytes(data, length) {
    return zeroPad(data, length, false);
  }
  var HexCharacters;
  var init_data = __esm({
    "node_modules/ethers/lib.esm/utils/data.js"() {
      init_errors();
      HexCharacters = "0123456789abcdef";
    }
  });

  // node_modules/ethers/lib.esm/utils/maths.js
  function fromTwos(_value2, _width) {
    const value = getUint(_value2, "value");
    const width = BigInt(getNumber2(_width, "width"));
    assert(value >> width === BN_0, "overflow", "NUMERIC_FAULT", {
      operation: "fromTwos",
      fault: "overflow",
      value: _value2
    });
    if (value >> width - BN_1) {
      const mask3 = (BN_1 << width) - BN_1;
      return -((~value & mask3) + BN_1);
    }
    return value;
  }
  function toTwos(_value2, _width) {
    let value = getBigInt(_value2, "value");
    const width = BigInt(getNumber2(_width, "width"));
    const limit = BN_1 << width - BN_1;
    if (value < BN_0) {
      value = -value;
      assert(value <= limit, "too low", "NUMERIC_FAULT", {
        operation: "toTwos",
        fault: "overflow",
        value: _value2
      });
      const mask3 = (BN_1 << width) - BN_1;
      return (~value & mask3) + BN_1;
    } else {
      assert(value < limit, "too high", "NUMERIC_FAULT", {
        operation: "toTwos",
        fault: "overflow",
        value: _value2
      });
    }
    return value;
  }
  function mask(_value2, _bits) {
    const value = getUint(_value2, "value");
    const bits = BigInt(getNumber2(_bits, "bits"));
    return value & (BN_1 << bits) - BN_1;
  }
  function getBigInt(value, name) {
    switch (typeof value) {
      case "bigint":
        return value;
      case "number":
        assertArgument(Number.isInteger(value), "underflow", name || "value", value);
        assertArgument(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
        return BigInt(value);
      case "string":
        try {
          if (value === "") {
            throw new Error("empty string");
          }
          if (value[0] === "-" && value[1] !== "-") {
            return -BigInt(value.substring(1));
          }
          return BigInt(value);
        } catch (e) {
          assertArgument(false, `invalid BigNumberish string: ${e.message}`, name || "value", value);
        }
    }
    assertArgument(false, "invalid BigNumberish value", name || "value", value);
  }
  function getUint(value, name) {
    const result = getBigInt(value, name);
    assert(result >= BN_0, "unsigned value cannot be negative", "NUMERIC_FAULT", {
      fault: "overflow",
      operation: "getUint",
      value
    });
    return result;
  }
  function toBigInt(value) {
    if (value instanceof Uint8Array) {
      let result = "0x0";
      for (const v of value) {
        result += Nibbles[v >> 4];
        result += Nibbles[v & 15];
      }
      return BigInt(result);
    }
    return getBigInt(value);
  }
  function getNumber2(value, name) {
    switch (typeof value) {
      case "bigint":
        assertArgument(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
        return Number(value);
      case "number":
        assertArgument(Number.isInteger(value), "underflow", name || "value", value);
        assertArgument(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
        return value;
      case "string":
        try {
          if (value === "") {
            throw new Error("empty string");
          }
          return getNumber2(BigInt(value), name);
        } catch (e) {
          assertArgument(false, `invalid numeric string: ${e.message}`, name || "value", value);
        }
    }
    assertArgument(false, "invalid numeric value", name || "value", value);
  }
  function toNumber(value) {
    return getNumber2(toBigInt(value));
  }
  function toBeHex(_value2, _width) {
    const value = getUint(_value2, "value");
    let result = value.toString(16);
    if (_width == null) {
      if (result.length % 2) {
        result = "0" + result;
      }
    } else {
      const width = getNumber2(_width, "width");
      assert(width * 2 >= result.length, `value exceeds width (${width} bytes)`, "NUMERIC_FAULT", {
        operation: "toBeHex",
        fault: "overflow",
        value: _value2
      });
      while (result.length < width * 2) {
        result = "0" + result;
      }
    }
    return "0x" + result;
  }
  function toBeArray(_value2) {
    const value = getUint(_value2, "value");
    if (value === BN_0) {
      return new Uint8Array([]);
    }
    let hex = value.toString(16);
    if (hex.length % 2) {
      hex = "0" + hex;
    }
    const result = new Uint8Array(hex.length / 2);
    for (let i = 0; i < result.length; i++) {
      const offset2 = i * 2;
      result[i] = parseInt(hex.substring(offset2, offset2 + 2), 16);
    }
    return result;
  }
  function toQuantity(value) {
    let result = hexlify(isBytesLike(value) ? value : toBeArray(value)).substring(2);
    while (result.startsWith("0")) {
      result = result.substring(1);
    }
    if (result === "") {
      result = "0";
    }
    return "0x" + result;
  }
  var BN_0, BN_1, maxValue, Nibbles;
  var init_maths = __esm({
    "node_modules/ethers/lib.esm/utils/maths.js"() {
      init_data();
      init_errors();
      BN_0 = BigInt(0);
      BN_1 = BigInt(1);
      maxValue = 9007199254740991;
      Nibbles = "0123456789abcdef";
    }
  });

  // node_modules/ethers/lib.esm/utils/base58.js
  function getAlpha(letter) {
    if (Lookup == null) {
      Lookup = {};
      for (let i = 0; i < Alphabet.length; i++) {
        Lookup[Alphabet[i]] = BigInt(i);
      }
    }
    const result = Lookup[letter];
    assertArgument(result != null, `invalid base58 value`, "letter", letter);
    return result;
  }
  function encodeBase58(_value2) {
    const bytes2 = getBytes(_value2);
    let value = toBigInt(bytes2);
    let result = "";
    while (value) {
      result = Alphabet[Number(value % BN_58)] + result;
      value /= BN_58;
    }
    for (let i = 0; i < bytes2.length; i++) {
      if (bytes2[i]) {
        break;
      }
      result = Alphabet[0] + result;
    }
    return result;
  }
  function decodeBase58(value) {
    let result = BN_02;
    for (let i = 0; i < value.length; i++) {
      result *= BN_58;
      result += getAlpha(value[i]);
    }
    return result;
  }
  var Alphabet, Lookup, BN_02, BN_58;
  var init_base58 = __esm({
    "node_modules/ethers/lib.esm/utils/base58.js"() {
      init_data();
      init_errors();
      init_maths();
      Alphabet = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
      Lookup = null;
      BN_02 = BigInt(0);
      BN_58 = BigInt(58);
    }
  });

  // node_modules/ethers/lib.esm/utils/base64-browser.js
  function decodeBase64(textData) {
    textData = atob(textData);
    const data = new Uint8Array(textData.length);
    for (let i = 0; i < textData.length; i++) {
      data[i] = textData.charCodeAt(i);
    }
    return getBytes(data);
  }
  function encodeBase64(_data5) {
    const data = getBytes(_data5);
    let textData = "";
    for (let i = 0; i < data.length; i++) {
      textData += String.fromCharCode(data[i]);
    }
    return btoa(textData);
  }
  var init_base64_browser = __esm({
    "node_modules/ethers/lib.esm/utils/base64-browser.js"() {
      init_data();
    }
  });

  // node_modules/ethers/lib.esm/utils/events.js
  var _listener, EventPayload;
  var init_events = __esm({
    "node_modules/ethers/lib.esm/utils/events.js"() {
      init_properties();
      EventPayload = class {
        /**
         *  Create a new **EventPayload** for %%emitter%% with
         *  the %%listener%% and for %%filter%%.
         */
        constructor(emitter, listener, filter) {
          /**
           *  The event filter.
           */
          __publicField(this, "filter");
          /**
           *  The **EventEmitterable**.
           */
          __publicField(this, "emitter");
          __privateAdd(this, _listener);
          __privateSet(this, _listener, listener);
          defineProperties(this, { emitter, filter });
        }
        /**
         *  Unregister the triggered listener for future events.
         */
        async removeListener() {
          if (__privateGet(this, _listener) == null) {
            return;
          }
          await this.emitter.off(this.filter, __privateGet(this, _listener));
        }
      };
      _listener = new WeakMap();
    }
  });

  // node_modules/ethers/lib.esm/utils/utf8.js
  function errorFunc(reason, offset2, bytes2, output2, badCodepoint) {
    assertArgument(false, `invalid codepoint at offset ${offset2}; ${reason}`, "bytes", bytes2);
  }
  function ignoreFunc(reason, offset2, bytes2, output2, badCodepoint) {
    if (reason === "BAD_PREFIX" || reason === "UNEXPECTED_CONTINUE") {
      let i = 0;
      for (let o = offset2 + 1; o < bytes2.length; o++) {
        if (bytes2[o] >> 6 !== 2) {
          break;
        }
        i++;
      }
      return i;
    }
    if (reason === "OVERRUN") {
      return bytes2.length - offset2 - 1;
    }
    return 0;
  }
  function replaceFunc(reason, offset2, bytes2, output2, badCodepoint) {
    if (reason === "OVERLONG") {
      assertArgument(typeof badCodepoint === "number", "invalid bad code point for replacement", "badCodepoint", badCodepoint);
      output2.push(badCodepoint);
      return 0;
    }
    output2.push(65533);
    return ignoreFunc(reason, offset2, bytes2, output2, badCodepoint);
  }
  function getUtf8CodePoints(_bytes, onError) {
    if (onError == null) {
      onError = Utf8ErrorFuncs.error;
    }
    const bytes2 = getBytes(_bytes, "bytes");
    const result = [];
    let i = 0;
    while (i < bytes2.length) {
      const c = bytes2[i++];
      if (c >> 7 === 0) {
        result.push(c);
        continue;
      }
      let extraLength = null;
      let overlongMask = null;
      if ((c & 224) === 192) {
        extraLength = 1;
        overlongMask = 127;
      } else if ((c & 240) === 224) {
        extraLength = 2;
        overlongMask = 2047;
      } else if ((c & 248) === 240) {
        extraLength = 3;
        overlongMask = 65535;
      } else {
        if ((c & 192) === 128) {
          i += onError("UNEXPECTED_CONTINUE", i - 1, bytes2, result);
        } else {
          i += onError("BAD_PREFIX", i - 1, bytes2, result);
        }
        continue;
      }
      if (i - 1 + extraLength >= bytes2.length) {
        i += onError("OVERRUN", i - 1, bytes2, result);
        continue;
      }
      let res = c & (1 << 8 - extraLength - 1) - 1;
      for (let j = 0; j < extraLength; j++) {
        let nextChar = bytes2[i];
        if ((nextChar & 192) != 128) {
          i += onError("MISSING_CONTINUE", i, bytes2, result);
          res = null;
          break;
        }
        ;
        res = res << 6 | nextChar & 63;
        i++;
      }
      if (res === null) {
        continue;
      }
      if (res > 1114111) {
        i += onError("OUT_OF_RANGE", i - 1 - extraLength, bytes2, result, res);
        continue;
      }
      if (res >= 55296 && res <= 57343) {
        i += onError("UTF16_SURROGATE", i - 1 - extraLength, bytes2, result, res);
        continue;
      }
      if (res <= overlongMask) {
        i += onError("OVERLONG", i - 1 - extraLength, bytes2, result, res);
        continue;
      }
      result.push(res);
    }
    return result;
  }
  function toUtf8Bytes(str, form) {
    assertArgument(typeof str === "string", "invalid string value", "str", str);
    if (form != null) {
      assertNormalize(form);
      str = str.normalize(form);
    }
    let result = [];
    for (let i = 0; i < str.length; i++) {
      const c = str.charCodeAt(i);
      if (c < 128) {
        result.push(c);
      } else if (c < 2048) {
        result.push(c >> 6 | 192);
        result.push(c & 63 | 128);
      } else if ((c & 64512) == 55296) {
        i++;
        const c2 = str.charCodeAt(i);
        assertArgument(i < str.length && (c2 & 64512) === 56320, "invalid surrogate pair", "str", str);
        const pair = 65536 + ((c & 1023) << 10) + (c2 & 1023);
        result.push(pair >> 18 | 240);
        result.push(pair >> 12 & 63 | 128);
        result.push(pair >> 6 & 63 | 128);
        result.push(pair & 63 | 128);
      } else {
        result.push(c >> 12 | 224);
        result.push(c >> 6 & 63 | 128);
        result.push(c & 63 | 128);
      }
    }
    return new Uint8Array(result);
  }
  function _toUtf8String(codePoints) {
    return codePoints.map((codePoint) => {
      if (codePoint <= 65535) {
        return String.fromCharCode(codePoint);
      }
      codePoint -= 65536;
      return String.fromCharCode((codePoint >> 10 & 1023) + 55296, (codePoint & 1023) + 56320);
    }).join("");
  }
  function toUtf8String(bytes2, onError) {
    return _toUtf8String(getUtf8CodePoints(bytes2, onError));
  }
  function toUtf8CodePoints(str, form) {
    return getUtf8CodePoints(toUtf8Bytes(str, form));
  }
  var Utf8ErrorFuncs;
  var init_utf8 = __esm({
    "node_modules/ethers/lib.esm/utils/utf8.js"() {
      init_data();
      init_errors();
      Utf8ErrorFuncs = Object.freeze({
        error: errorFunc,
        ignore: ignoreFunc,
        replace: replaceFunc
      });
    }
  });

  // node_modules/ethers/lib.esm/utils/geturl-browser.js
  function createGetUrl(options) {
    async function getUrl2(req, _signal2) {
      assert(_signal2 == null || !_signal2.cancelled, "request cancelled before sending", "CANCELLED");
      const protocol = req.url.split(":")[0].toLowerCase();
      assert(protocol === "http" || protocol === "https", `unsupported protocol ${protocol}`, "UNSUPPORTED_OPERATION", {
        info: { protocol },
        operation: "request"
      });
      assert(protocol === "https" || !req.credentials || req.allowInsecureAuthentication, "insecure authorized connections unsupported", "UNSUPPORTED_OPERATION", {
        operation: "request"
      });
      let error = null;
      const controller = new AbortController();
      const timer = setTimeout(() => {
        error = makeError("request timeout", "TIMEOUT");
        controller.abort();
      }, req.timeout);
      if (_signal2) {
        _signal2.addListener(() => {
          error = makeError("request cancelled", "CANCELLED");
          controller.abort();
        });
      }
      const init2 = Object.assign({}, options, {
        method: req.method,
        headers: new Headers(Array.from(req)),
        body: req.body || void 0,
        signal: controller.signal
      });
      let resp;
      try {
        resp = await fetch(req.url, init2);
      } catch (_error2) {
        clearTimeout(timer);
        if (error) {
          throw error;
        }
        throw _error2;
      }
      clearTimeout(timer);
      const headers = {};
      resp.headers.forEach((value, key) => {
        headers[key.toLowerCase()] = value;
      });
      const respBody = await resp.arrayBuffer();
      const body = respBody == null ? null : new Uint8Array(respBody);
      return {
        statusCode: resp.status,
        statusMessage: resp.statusText,
        headers,
        body
      };
    }
    return getUrl2;
  }
  var defaultGetUrl;
  var init_geturl_browser = __esm({
    "node_modules/ethers/lib.esm/utils/geturl-browser.js"() {
      init_errors();
      defaultGetUrl = createGetUrl({});
    }
  });

  // node_modules/ethers/lib.esm/utils/fetch.js
  async function dataGatewayFunc(url, signal) {
    try {
      const match = url.match(reData);
      if (!match) {
        throw new Error("invalid data");
      }
      return new FetchResponse(200, "OK", {
        "content-type": match[1] || "text/plain"
      }, match[2] ? decodeBase64(match[3]) : unpercent(match[3]));
    } catch (error) {
      return new FetchResponse(599, "BAD REQUEST (invalid data: URI)", {}, null, new FetchRequest(url));
    }
  }
  function getIpfsGatewayFunc(baseUrl) {
    async function gatewayIpfs(url, signal) {
      try {
        const match = url.match(reIpfs);
        if (!match) {
          throw new Error("invalid link");
        }
        return new FetchRequest(`${baseUrl}${match[2]}`);
      } catch (error) {
        return new FetchResponse(599, "BAD REQUEST (invalid IPFS URI)", {}, null, new FetchRequest(url));
      }
    }
    return gatewayIpfs;
  }
  function checkSignal(signal) {
    if (signal == null) {
      throw new Error("missing signal; should not happen");
    }
    signal.checkSignal();
    return signal;
  }
  function getTime() {
    return (/* @__PURE__ */ new Date()).getTime();
  }
  function unpercent(value) {
    return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {
      return String.fromCharCode(parseInt(code, 16));
    }));
  }
  function wait(delay) {
    return new Promise((resolve) => setTimeout(resolve, delay));
  }
  var MAX_ATTEMPTS, SLOT_INTERVAL, defaultGetUrlFunc, reData, reIpfs, locked, Gateways, fetchSignals, _listeners, _cancelled, FetchCancelSignal, _allowInsecure, _gzip, _headers, _method, _timeout, _url, _body, _bodyType, _creds, _preflight, _process, _retry, _signal, _throttle, _getUrlFunc, _FetchRequest_instances, send_fn, _FetchRequest, FetchRequest, _statusCode, _statusMessage, _headers2, _body2, _request, _error, _FetchResponse, FetchResponse;
  var init_fetch = __esm({
    "node_modules/ethers/lib.esm/utils/fetch.js"() {
      init_base64_browser();
      init_data();
      init_errors();
      init_properties();
      init_utf8();
      init_geturl_browser();
      MAX_ATTEMPTS = 12;
      SLOT_INTERVAL = 250;
      defaultGetUrlFunc = createGetUrl();
      reData = new RegExp("^data:([^;:]*)?(;base64)?,(.*)$", "i");
      reIpfs = new RegExp("^ipfs://(ipfs/)?(.*)$", "i");
      locked = false;
      Gateways = {
        "data": dataGatewayFunc,
        "ipfs": getIpfsGatewayFunc("https://gateway.ipfs.io/ipfs/")
      };
      fetchSignals = /* @__PURE__ */ new WeakMap();
      FetchCancelSignal = class {
        constructor(request) {
          __privateAdd(this, _listeners);
          __privateAdd(this, _cancelled);
          __privateSet(this, _listeners, []);
          __privateSet(this, _cancelled, false);
          fetchSignals.set(request, () => {
            if (__privateGet(this, _cancelled)) {
              return;
            }
            __privateSet(this, _cancelled, true);
            for (const listener of __privateGet(this, _listeners)) {
              setTimeout(() => {
                listener();
              }, 0);
            }
            __privateSet(this, _listeners, []);
          });
        }
        addListener(listener) {
          assert(!__privateGet(this, _cancelled), "singal already cancelled", "UNSUPPORTED_OPERATION", {
            operation: "fetchCancelSignal.addCancelListener"
          });
          __privateGet(this, _listeners).push(listener);
        }
        get cancelled() {
          return __privateGet(this, _cancelled);
        }
        checkSignal() {
          assert(!this.cancelled, "cancelled", "CANCELLED", {});
        }
      };
      _listeners = new WeakMap();
      _cancelled = new WeakMap();
      _FetchRequest = class _FetchRequest {
        /**
         *  Create a new FetchRequest instance with default values.
         *
         *  Once created, each property may be set before issuing a
         *  ``.send()`` to make the request.
         */
        constructor(url) {
          __privateAdd(this, _FetchRequest_instances);
          __privateAdd(this, _allowInsecure);
          __privateAdd(this, _gzip);
          __privateAdd(this, _headers);
          __privateAdd(this, _method);
          __privateAdd(this, _timeout);
          __privateAdd(this, _url);
          __privateAdd(this, _body);
          __privateAdd(this, _bodyType);
          __privateAdd(this, _creds);
          // Hooks
          __privateAdd(this, _preflight);
          __privateAdd(this, _process);
          __privateAdd(this, _retry);
          __privateAdd(this, _signal);
          __privateAdd(this, _throttle);
          __privateAdd(this, _getUrlFunc);
          __privateSet(this, _url, String(url));
          __privateSet(this, _allowInsecure, false);
          __privateSet(this, _gzip, true);
          __privateSet(this, _headers, {});
          __privateSet(this, _method, "");
          __privateSet(this, _timeout, 3e5);
          __privateSet(this, _throttle, {
            slotInterval: SLOT_INTERVAL,
            maxAttempts: MAX_ATTEMPTS
          });
          __privateSet(this, _getUrlFunc, null);
        }
        /**
         *  The fetch URL to request.
         */
        get url() {
          return __privateGet(this, _url);
        }
        set url(url) {
          __privateSet(this, _url, String(url));
        }
        /**
         *  The fetch body, if any, to send as the request body. //(default: null)//
         *
         *  When setting a body, the intrinsic ``Content-Type`` is automatically
         *  set and will be used if **not overridden** by setting a custom
         *  header.
         *
         *  If %%body%% is null, the body is cleared (along with the
         *  intrinsic ``Content-Type``).
         *
         *  If %%body%% is a string, the intrinsic ``Content-Type`` is set to
         *  ``text/plain``.
         *
         *  If %%body%% is a Uint8Array, the intrinsic ``Content-Type`` is set to
         *  ``application/octet-stream``.
         *
         *  If %%body%% is any other object, the intrinsic ``Content-Type`` is
         *  set to ``application/json``.
         */
        get body() {
          if (__privateGet(this, _body) == null) {
            return null;
          }
          return new Uint8Array(__privateGet(this, _body));
        }
        set body(body) {
          if (body == null) {
            __privateSet(this, _body, void 0);
            __privateSet(this, _bodyType, void 0);
          } else if (typeof body === "string") {
            __privateSet(this, _body, toUtf8Bytes(body));
            __privateSet(this, _bodyType, "text/plain");
          } else if (body instanceof Uint8Array) {
            __privateSet(this, _body, body);
            __privateSet(this, _bodyType, "application/octet-stream");
          } else if (typeof body === "object") {
            __privateSet(this, _body, toUtf8Bytes(JSON.stringify(body)));
            __privateSet(this, _bodyType, "application/json");
          } else {
            throw new Error("invalid body");
          }
        }
        /**
         *  Returns true if the request has a body.
         */
        hasBody() {
          return __privateGet(this, _body) != null;
        }
        /**
         *  The HTTP method to use when requesting the URI. If no method
         *  has been explicitly set, then ``GET`` is used if the body is
         *  null and ``POST`` otherwise.
         */
        get method() {
          if (__privateGet(this, _method)) {
            return __privateGet(this, _method);
          }
          if (this.hasBody()) {
            return "POST";
          }
          return "GET";
        }
        set method(method) {
          if (method == null) {
            method = "";
          }
          __privateSet(this, _method, String(method).toUpperCase());
        }
        /**
         *  The headers that will be used when requesting the URI. All
         *  keys are lower-case.
         *
         *  This object is a copy, so any changes will **NOT** be reflected
         *  in the ``FetchRequest``.
         *
         *  To set a header entry, use the ``setHeader`` method.
         */
        get headers() {
          const headers = Object.assign({}, __privateGet(this, _headers));
          if (__privateGet(this, _creds)) {
            headers["authorization"] = `Basic ${encodeBase64(toUtf8Bytes(__privateGet(this, _creds)))}`;
          }
          ;
          if (this.allowGzip) {
            headers["accept-encoding"] = "gzip";
          }
          if (headers["content-type"] == null && __privateGet(this, _bodyType)) {
            headers["content-type"] = __privateGet(this, _bodyType);
          }
          if (this.body) {
            headers["content-length"] = String(this.body.length);
          }
          return headers;
        }
        /**
         *  Get the header for %%key%%, ignoring case.
         */
        getHeader(key) {
          return this.headers[key.toLowerCase()];
        }
        /**
         *  Set the header for %%key%% to %%value%%. All values are coerced
         *  to a string.
         */
        setHeader(key, value) {
          __privateGet(this, _headers)[String(key).toLowerCase()] = String(value);
        }
        /**
         *  Clear all headers, resetting all intrinsic headers.
         */
        clearHeaders() {
          __privateSet(this, _headers, {});
        }
        [Symbol.iterator]() {
          const headers = this.headers;
          const keys = Object.keys(headers);
          let index = 0;
          return {
            next: () => {
              if (index < keys.length) {
                const key = keys[index++];
                return {
                  value: [key, headers[key]],
                  done: false
                };
              }
              return { value: void 0, done: true };
            }
          };
        }
        /**
         *  The value that will be sent for the ``Authorization`` header.
         *
         *  To set the credentials, use the ``setCredentials`` method.
         */
        get credentials() {
          return __privateGet(this, _creds) || null;
        }
        /**
         *  Sets an ``Authorization`` for %%username%% with %%password%%.
         */
        setCredentials(username, password) {
          assertArgument(!username.match(/:/), "invalid basic authentication username", "username", "[REDACTED]");
          __privateSet(this, _creds, `${username}:${password}`);
        }
        /**
         *  Enable and request gzip-encoded responses. The response will
         *  automatically be decompressed. //(default: true)//
         */
        get allowGzip() {
          return __privateGet(this, _gzip);
        }
        set allowGzip(value) {
          __privateSet(this, _gzip, !!value);
        }
        /**
         *  Allow ``Authentication`` credentials to be sent over insecure
         *  channels. //(default: false)//
         */
        get allowInsecureAuthentication() {
          return !!__privateGet(this, _allowInsecure);
        }
        set allowInsecureAuthentication(value) {
          __privateSet(this, _allowInsecure, !!value);
        }
        /**
         *  The timeout (in milliseconds) to wait for a complete response.
         *  //(default: 5 minutes)//
         */
        get timeout() {
          return __privateGet(this, _timeout);
        }
        set timeout(timeout) {
          assertArgument(timeout >= 0, "timeout must be non-zero", "timeout", timeout);
          __privateSet(this, _timeout, timeout);
        }
        /**
         *  This function is called prior to each request, for example
         *  during a redirection or retry in case of server throttling.
         *
         *  This offers an opportunity to populate headers or update
         *  content before sending a request.
         */
        get preflightFunc() {
          return __privateGet(this, _preflight) || null;
        }
        set preflightFunc(preflight) {
          __privateSet(this, _preflight, preflight);
        }
        /**
         *  This function is called after each response, offering an
         *  opportunity to provide client-level throttling or updating
         *  response data.
         *
         *  Any error thrown in this causes the ``send()`` to throw.
         *
         *  To schedule a retry attempt (assuming the maximum retry limit
         *  has not been reached), use [[response.throwThrottleError]].
         */
        get processFunc() {
          return __privateGet(this, _process) || null;
        }
        set processFunc(process) {
          __privateSet(this, _process, process);
        }
        /**
         *  This function is called on each retry attempt.
         */
        get retryFunc() {
          return __privateGet(this, _retry) || null;
        }
        set retryFunc(retry) {
          __privateSet(this, _retry, retry);
        }
        /**
         *  This function is called to fetch content from HTTP and
         *  HTTPS URLs and is platform specific (e.g. nodejs vs
         *  browsers).
         *
         *  This is by default the currently registered global getUrl
         *  function, which can be changed using [[registerGetUrl]].
         *  If this has been set, setting is to ``null`` will cause
         *  this FetchRequest (and any future clones) to revert back to
         *  using the currently registered global getUrl function.
         *
         *  Setting this is generally not necessary, but may be useful
         *  for developers that wish to intercept requests or to
         *  configurege a proxy or other agent.
         */
        get getUrlFunc() {
          return __privateGet(this, _getUrlFunc) || defaultGetUrlFunc;
        }
        set getUrlFunc(value) {
          __privateSet(this, _getUrlFunc, value);
        }
        toString() {
          return `<FetchRequest method=${JSON.stringify(this.method)} url=${JSON.stringify(this.url)} headers=${JSON.stringify(this.headers)} body=${__privateGet(this, _body) ? hexlify(__privateGet(this, _body)) : "null"}>`;
        }
        /**
         *  Update the throttle parameters used to determine maximum
         *  attempts and exponential-backoff properties.
         */
        setThrottleParams(params) {
          if (params.slotInterval != null) {
            __privateGet(this, _throttle).slotInterval = params.slotInterval;
          }
          if (params.maxAttempts != null) {
            __privateGet(this, _throttle).maxAttempts = params.maxAttempts;
          }
        }
        /**
         *  Resolves to the response by sending the request.
         */
        send() {
          assert(__privateGet(this, _signal) == null, "request already sent", "UNSUPPORTED_OPERATION", { operation: "fetchRequest.send" });
          __privateSet(this, _signal, new FetchCancelSignal(this));
          return __privateMethod(this, _FetchRequest_instances, send_fn).call(this, 0, getTime() + this.timeout, 0, this, new FetchResponse(0, "", {}, null, this));
        }
        /**
         *  Cancels the inflight response, causing a ``CANCELLED``
         *  error to be rejected from the [[send]].
         */
        cancel() {
          assert(__privateGet(this, _signal) != null, "request has not been sent", "UNSUPPORTED_OPERATION", { operation: "fetchRequest.cancel" });
          const signal = fetchSignals.get(this);
          if (!signal) {
            throw new Error("missing signal; should not happen");
          }
          signal();
        }
        /**
         *  Returns a new [[FetchRequest]] that represents the redirection
         *  to %%location%%.
         */
        redirect(location) {
          const current = this.url.split(":")[0].toLowerCase();
          const target = location.split(":")[0].toLowerCase();
          assert(this.method === "GET" && (current !== "https" || target !== "http") && location.match(/^https?:/), `unsupported redirect`, "UNSUPPORTED_OPERATION", {
            operation: `redirect(${this.method} ${JSON.stringify(this.url)} => ${JSON.stringify(location)})`
          });
          const req = new _FetchRequest(location);
          req.method = "GET";
          req.allowGzip = this.allowGzip;
          req.timeout = this.timeout;
          __privateSet(req, _headers, Object.assign({}, __privateGet(this, _headers)));
          if (__privateGet(this, _body)) {
            __privateSet(req, _body, new Uint8Array(__privateGet(this, _body)));
          }
          __privateSet(req, _bodyType, __privateGet(this, _bodyType));
          return req;
        }
        /**
         *  Create a new copy of this request.
         */
        clone() {
          const clone = new _FetchRequest(this.url);
          __privateSet(clone, _method, __privateGet(this, _method));
          if (__privateGet(this, _body)) {
            __privateSet(clone, _body, __privateGet(this, _body));
          }
          __privateSet(clone, _bodyType, __privateGet(this, _bodyType));
          __privateSet(clone, _headers, Object.assign({}, __privateGet(this, _headers)));
          __privateSet(clone, _creds, __privateGet(this, _creds));
          if (this.allowGzip) {
            clone.allowGzip = true;
          }
          clone.timeout = this.timeout;
          if (this.allowInsecureAuthentication) {
            clone.allowInsecureAuthentication = true;
          }
          __privateSet(clone, _preflight, __privateGet(this, _preflight));
          __privateSet(clone, _process, __privateGet(this, _process));
          __privateSet(clone, _retry, __privateGet(this, _retry));
          __privateSet(clone, _throttle, Object.assign({}, __privateGet(this, _throttle)));
          __privateSet(clone, _getUrlFunc, __privateGet(this, _getUrlFunc));
          return clone;
        }
        /**
         *  Locks all static configuration for gateways and FetchGetUrlFunc
         *  registration.
         */
        static lockConfig() {
          locked = true;
        }
        /**
         *  Get the current Gateway function for %%scheme%%.
         */
        static getGateway(scheme) {
          return Gateways[scheme.toLowerCase()] || null;
        }
        /**
         *  Use the %%func%% when fetching URIs using %%scheme%%.
         *
         *  This method affects all requests globally.
         *
         *  If [[lockConfig]] has been called, no change is made and this
         *  throws.
         */
        static registerGateway(scheme, func) {
          scheme = scheme.toLowerCase();
          if (scheme === "http" || scheme === "https") {
            throw new Error(`cannot intercept ${scheme}; use registerGetUrl`);
          }
          if (locked) {
            throw new Error("gateways locked");
          }
          Gateways[scheme] = func;
        }
        /**
         *  Use %%getUrl%% when fetching URIs over HTTP and HTTPS requests.
         *
         *  This method affects all requests globally.
         *
         *  If [[lockConfig]] has been called, no change is made and this
         *  throws.
         */
        static registerGetUrl(getUrl2) {
          if (locked) {
            throw new Error("gateways locked");
          }
          defaultGetUrlFunc = getUrl2;
        }
        /**
         *  Creates a getUrl function that fetches content from HTTP and
         *  HTTPS URLs.
         *
         *  The available %%options%% are dependent on the platform
         *  implementation of the default getUrl function.
         *
         *  This is not generally something that is needed, but is useful
         *  when trying to customize simple behaviour when fetching HTTP
         *  content.
         */
        static createGetUrlFunc(options) {
          return createGetUrl(options);
        }
        /**
         *  Creates a function that can "fetch" data URIs.
         *
         *  Note that this is automatically done internally to support
         *  data URIs, so it is not necessary to register it.
         *
         *  This is not generally something that is needed, but may
         *  be useful in a wrapper to perfom custom data URI functionality.
         */
        static createDataGateway() {
          return dataGatewayFunc;
        }
        /**
         *  Creates a function that will fetch IPFS (unvalidated) from
         *  a custom gateway baseUrl.
         *
         *  The default IPFS gateway used internally is
         *  ``"https:/\/gateway.ipfs.io/ipfs/"``.
         */
        static createIpfsGatewayFunc(baseUrl) {
          return getIpfsGatewayFunc(baseUrl);
        }
      };
      _allowInsecure = new WeakMap();
      _gzip = new WeakMap();
      _headers = new WeakMap();
      _method = new WeakMap();
      _timeout = new WeakMap();
      _url = new WeakMap();
      _body = new WeakMap();
      _bodyType = new WeakMap();
      _creds = new WeakMap();
      _preflight = new WeakMap();
      _process = new WeakMap();
      _retry = new WeakMap();
      _signal = new WeakMap();
      _throttle = new WeakMap();
      _getUrlFunc = new WeakMap();
      _FetchRequest_instances = new WeakSet();
      send_fn = async function(attempt, expires, delay, _request3, _response) {
        var _a2, _b, _c;
        if (attempt >= __privateGet(this, _throttle).maxAttempts) {
          return _response.makeServerError("exceeded maximum retry limit");
        }
        assert(getTime() <= expires, "timeout", "TIMEOUT", {
          operation: "request.send",
          reason: "timeout",
          request: _request3
        });
        if (delay > 0) {
          await wait(delay);
        }
        let req = this.clone();
        const scheme = (req.url.split(":")[0] || "").toLowerCase();
        if (scheme in Gateways) {
          const result = await Gateways[scheme](req.url, checkSignal(__privateGet(_request3, _signal)));
          if (result instanceof FetchResponse) {
            let response2 = result;
            if (this.processFunc) {
              checkSignal(__privateGet(_request3, _signal));
              try {
                response2 = await this.processFunc(req, response2);
              } catch (error) {
                if (error.throttle == null || typeof error.stall !== "number") {
                  response2.makeServerError("error in post-processing function", error).assertOk();
                }
              }
            }
            return response2;
          }
          req = result;
        }
        if (this.preflightFunc) {
          req = await this.preflightFunc(req);
        }
        const resp = await this.getUrlFunc(req, checkSignal(__privateGet(_request3, _signal)));
        let response = new FetchResponse(resp.statusCode, resp.statusMessage, resp.headers, resp.body, _request3);
        if (response.statusCode === 301 || response.statusCode === 302) {
          try {
            const location = response.headers.location || "";
            return __privateMethod(_a2 = req.redirect(location), _FetchRequest_instances, send_fn).call(_a2, attempt + 1, expires, 0, _request3, response);
          } catch (error) {
          }
          return response;
        } else if (response.statusCode === 429) {
          if (this.retryFunc == null || await this.retryFunc(req, response, attempt)) {
            const retryAfter = response.headers["retry-after"];
            let delay2 = __privateGet(this, _throttle).slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));
            if (typeof retryAfter === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
              delay2 = parseInt(retryAfter);
            }
            return __privateMethod(_b = req.clone(), _FetchRequest_instances, send_fn).call(_b, attempt + 1, expires, delay2, _request3, response);
          }
        }
        if (this.processFunc) {
          checkSignal(__privateGet(_request3, _signal));
          try {
            response = await this.processFunc(req, response);
          } catch (error) {
            if (error.throttle == null || typeof error.stall !== "number") {
              response.makeServerError("error in post-processing function", error).assertOk();
            }
            let delay2 = __privateGet(this, _throttle).slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));
            ;
            if (error.stall >= 0) {
              delay2 = error.stall;
            }
            return __privateMethod(_c = req.clone(), _FetchRequest_instances, send_fn).call(_c, attempt + 1, expires, delay2, _request3, response);
          }
        }
        return response;
      };
      FetchRequest = _FetchRequest;
      _FetchResponse = class _FetchResponse {
        constructor(statusCode, statusMessage, headers, body, request) {
          __privateAdd(this, _statusCode);
          __privateAdd(this, _statusMessage);
          __privateAdd(this, _headers2);
          __privateAdd(this, _body2);
          __privateAdd(this, _request);
          __privateAdd(this, _error);
          __privateSet(this, _statusCode, statusCode);
          __privateSet(this, _statusMessage, statusMessage);
          __privateSet(this, _headers2, Object.keys(headers).reduce((accum, k) => {
            accum[k.toLowerCase()] = String(headers[k]);
            return accum;
          }, {}));
          __privateSet(this, _body2, body == null ? null : new Uint8Array(body));
          __privateSet(this, _request, request || null);
          __privateSet(this, _error, { message: "" });
        }
        toString() {
          return `<FetchResponse status=${this.statusCode} body=${__privateGet(this, _body2) ? hexlify(__privateGet(this, _body2)) : "null"}>`;
        }
        /**
         *  The response status code.
         */
        get statusCode() {
          return __privateGet(this, _statusCode);
        }
        /**
         *  The response status message.
         */
        get statusMessage() {
          return __privateGet(this, _statusMessage);
        }
        /**
         *  The response headers. All keys are lower-case.
         */
        get headers() {
          return Object.assign({}, __privateGet(this, _headers2));
        }
        /**
         *  The response body, or ``null`` if there was no body.
         */
        get body() {
          return __privateGet(this, _body2) == null ? null : new Uint8Array(__privateGet(this, _body2));
        }
        /**
         *  The response body as a UTF-8 encoded string, or the empty
         *  string (i.e. ``""``) if there was no body.
         *
         *  An error is thrown if the body is invalid UTF-8 data.
         */
        get bodyText() {
          try {
            return __privateGet(this, _body2) == null ? "" : toUtf8String(__privateGet(this, _body2));
          } catch (error) {
            assert(false, "response body is not valid UTF-8 data", "UNSUPPORTED_OPERATION", {
              operation: "bodyText",
              info: { response: this }
            });
          }
        }
        /**
         *  The response body, decoded as JSON.
         *
         *  An error is thrown if the body is invalid JSON-encoded data
         *  or if there was no body.
         */
        get bodyJson() {
          try {
            return JSON.parse(this.bodyText);
          } catch (error) {
            assert(false, "response body is not valid JSON", "UNSUPPORTED_OPERATION", {
              operation: "bodyJson",
              info: { response: this }
            });
          }
        }
        [Symbol.iterator]() {
          const headers = this.headers;
          const keys = Object.keys(headers);
          let index = 0;
          return {
            next: () => {
              if (index < keys.length) {
                const key = keys[index++];
                return {
                  value: [key, headers[key]],
                  done: false
                };
              }
              return { value: void 0, done: true };
            }
          };
        }
        /**
         *  Return a Response with matching headers and body, but with
         *  an error status code (i.e. 599) and %%message%% with an
         *  optional %%error%%.
         */
        makeServerError(message, error) {
          let statusMessage;
          if (!message) {
            message = `${this.statusCode} ${this.statusMessage}`;
            statusMessage = `CLIENT ESCALATED SERVER ERROR (${message})`;
          } else {
            statusMessage = `CLIENT ESCALATED SERVER ERROR (${this.statusCode} ${this.statusMessage}; ${message})`;
          }
          const response = new _FetchResponse(599, statusMessage, this.headers, this.body, __privateGet(this, _request) || void 0);
          __privateSet(response, _error, { message, error });
          return response;
        }
        /**
         *  If called within a [request.processFunc](FetchRequest-processFunc)
         *  call, causes the request to retry as if throttled for %%stall%%
         *  milliseconds.
         */
        throwThrottleError(message, stall5) {
          if (stall5 == null) {
            stall5 = -1;
          } else {
            assertArgument(Number.isInteger(stall5) && stall5 >= 0, "invalid stall timeout", "stall", stall5);
          }
          const error = new Error(message || "throttling requests");
          defineProperties(error, { stall: stall5, throttle: true });
          throw error;
        }
        /**
         *  Get the header value for %%key%%, ignoring case.
         */
        getHeader(key) {
          return this.headers[key.toLowerCase()];
        }
        /**
         *  Returns true if the response has a body.
         */
        hasBody() {
          return __privateGet(this, _body2) != null;
        }
        /**
         *  The request made for this response.
         */
        get request() {
          return __privateGet(this, _request);
        }
        /**
         *  Returns true if this response was a success statusCode.
         */
        ok() {
          return __privateGet(this, _error).message === "" && this.statusCode >= 200 && this.statusCode < 300;
        }
        /**
         *  Throws a ``SERVER_ERROR`` if this response is not ok.
         */
        assertOk() {
          if (this.ok()) {
            return;
          }
          let { message, error } = __privateGet(this, _error);
          if (message === "") {
            message = `server response ${this.statusCode} ${this.statusMessage}`;
          }
          let requestUrl = null;
          if (this.request) {
            requestUrl = this.request.url;
          }
          let responseBody = null;
          try {
            if (__privateGet(this, _body2)) {
              responseBody = toUtf8String(__privateGet(this, _body2));
            }
          } catch (e) {
          }
          assert(false, message, "SERVER_ERROR", {
            request: this.request || "unknown request",
            response: this,
            error,
            info: {
              requestUrl,
              responseBody,
              responseStatus: `${this.statusCode} ${this.statusMessage}`
            }
          });
        }
      };
      _statusCode = new WeakMap();
      _statusMessage = new WeakMap();
      _headers2 = new WeakMap();
      _body2 = new WeakMap();
      _request = new WeakMap();
      _error = new WeakMap();
      FetchResponse = _FetchResponse;
    }
  });

  // node_modules/ethers/lib.esm/utils/fixednumber.js
  function getTens(decimals) {
    let result = Zeros;
    while (result.length < decimals) {
      result += result;
    }
    return BigInt("1" + result.substring(0, decimals));
  }
  function checkValue(val, format, safeOp) {
    const width = BigInt(format.width);
    if (format.signed) {
      const limit = BN_12 << width - BN_12;
      assert(safeOp == null || val >= -limit && val < limit, "overflow", "NUMERIC_FAULT", {
        operation: safeOp,
        fault: "overflow",
        value: val
      });
      if (val > BN_03) {
        val = fromTwos(mask(val, width), width);
      } else {
        val = -fromTwos(mask(-val, width), width);
      }
    } else {
      const limit = BN_12 << width;
      assert(safeOp == null || val >= 0 && val < limit, "overflow", "NUMERIC_FAULT", {
        operation: safeOp,
        fault: "overflow",
        value: val
      });
      val = (val % limit + limit) % limit & limit - BN_12;
    }
    return val;
  }
  function getFormat(value) {
    if (typeof value === "number") {
      value = `fixed128x${value}`;
    }
    let signed2 = true;
    let width = 128;
    let decimals = 18;
    if (typeof value === "string") {
      if (value === "fixed") {
      } else if (value === "ufixed") {
        signed2 = false;
      } else {
        const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
        assertArgument(match, "invalid fixed format", "format", value);
        signed2 = match[1] !== "u";
        width = parseInt(match[2]);
        decimals = parseInt(match[3]);
      }
    } else if (value) {
      const v = value;
      const check = (key, type2, defaultValue) => {
        if (v[key] == null) {
          return defaultValue;
        }
        assertArgument(typeof v[key] === type2, "invalid fixed format (" + key + " not " + type2 + ")", "format." + key, v[key]);
        return v[key];
      };
      signed2 = check("signed", "boolean", signed2);
      width = check("width", "number", width);
      decimals = check("decimals", "number", decimals);
    }
    assertArgument(width % 8 === 0, "invalid FixedNumber width (not byte aligned)", "format.width", width);
    assertArgument(decimals <= 80, "invalid FixedNumber decimals (too large)", "format.decimals", decimals);
    const name = (signed2 ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
    return { signed: signed2, width, decimals, name };
  }
  function toString(val, decimals) {
    let negative = "";
    if (val < BN_03) {
      negative = "-";
      val *= BN_N1;
    }
    let str = val.toString();
    if (decimals === 0) {
      return negative + str;
    }
    while (str.length <= decimals) {
      str = Zeros + str;
    }
    const index = str.length - decimals;
    str = str.substring(0, index) + "." + str.substring(index);
    while (str[0] === "0" && str[1] !== ".") {
      str = str.substring(1);
    }
    while (str[str.length - 1] === "0" && str[str.length - 2] !== ".") {
      str = str.substring(0, str.length - 1);
    }
    return negative + str;
  }
  var BN_N1, BN_03, BN_12, BN_5, _guard, Zeros, _format, _val, _tens, _FixedNumber_instances, checkFormat_fn, checkValue_fn, add_fn, sub_fn, mul_fn, div_fn, _FixedNumber, FixedNumber;
  var init_fixednumber = __esm({
    "node_modules/ethers/lib.esm/utils/fixednumber.js"() {
      init_data();
      init_errors();
      init_maths();
      init_properties();
      BN_N1 = BigInt(-1);
      BN_03 = BigInt(0);
      BN_12 = BigInt(1);
      BN_5 = BigInt(5);
      _guard = {};
      Zeros = "0000";
      while (Zeros.length < 80) {
        Zeros += Zeros;
      }
      _FixedNumber = class _FixedNumber {
        // Use this when changing this file to get some typing info,
        // but then switch to any to mask the internal type
        //constructor(guard: any, value: bigint, format: _FixedFormat) {
        /**
         *  @private
         */
        constructor(guard, value, format) {
          __privateAdd(this, _FixedNumber_instances);
          /**
           *  The specific fixed-point arithmetic field for this value.
           */
          __publicField(this, "format");
          __privateAdd(this, _format);
          // The actual value (accounting for decimals)
          __privateAdd(this, _val);
          // A base-10 value to multiple values by to maintain the magnitude
          __privateAdd(this, _tens);
          /**
           *  This is a property so console.log shows a human-meaningful value.
           *
           *  @private
           */
          __publicField(this, "_value");
          assertPrivate(guard, _guard, "FixedNumber");
          __privateSet(this, _val, value);
          __privateSet(this, _format, format);
          const _value2 = toString(value, format.decimals);
          defineProperties(this, { format: format.name, _value: _value2 });
          __privateSet(this, _tens, getTens(format.decimals));
        }
        /**
         *  If true, negative values are permitted, otherwise only
         *  positive values and zero are allowed.
         */
        get signed() {
          return __privateGet(this, _format).signed;
        }
        /**
         *  The number of bits available to store the value.
         */
        get width() {
          return __privateGet(this, _format).width;
        }
        /**
         *  The number of decimal places in the fixed-point arithment field.
         */
        get decimals() {
          return __privateGet(this, _format).decimals;
        }
        /**
         *  The value as an integer, based on the smallest unit the
         *  [[decimals]] allow.
         */
        get value() {
          return __privateGet(this, _val);
        }
        /**
         *  Returns a new [[FixedNumber]] with the result of %%this%% added
         *  to %%other%%, ignoring overflow.
         */
        addUnsafe(other) {
          return __privateMethod(this, _FixedNumber_instances, add_fn).call(this, other);
        }
        /**
         *  Returns a new [[FixedNumber]] with the result of %%this%% added
         *  to %%other%%. A [[NumericFaultError]] is thrown if overflow
         *  occurs.
         */
        add(other) {
          return __privateMethod(this, _FixedNumber_instances, add_fn).call(this, other, "add");
        }
        /**
         *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted
         *  from %%this%%, ignoring overflow.
         */
        subUnsafe(other) {
          return __privateMethod(this, _FixedNumber_instances, sub_fn).call(this, other);
        }
        /**
         *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted
         *  from %%this%%. A [[NumericFaultError]] is thrown if overflow
         *  occurs.
         */
        sub(other) {
          return __privateMethod(this, _FixedNumber_instances, sub_fn).call(this, other, "sub");
        }
        /**
         *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied
         *  by %%other%%, ignoring overflow and underflow (precision loss).
         */
        mulUnsafe(other) {
          return __privateMethod(this, _FixedNumber_instances, mul_fn).call(this, other);
        }
        /**
         *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied
         *  by %%other%%. A [[NumericFaultError]] is thrown if overflow
         *  occurs.
         */
        mul(other) {
          return __privateMethod(this, _FixedNumber_instances, mul_fn).call(this, other, "mul");
        }
        /**
         *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied
         *  by %%other%%. A [[NumericFaultError]] is thrown if overflow
         *  occurs or if underflow (precision loss) occurs.
         */
        mulSignal(other) {
          __privateMethod(this, _FixedNumber_instances, checkFormat_fn).call(this, other);
          const value = __privateGet(this, _val) * __privateGet(other, _val);
          assert(value % __privateGet(this, _tens) === BN_03, "precision lost during signalling mul", "NUMERIC_FAULT", {
            operation: "mulSignal",
            fault: "underflow",
            value: this
          });
          return __privateMethod(this, _FixedNumber_instances, checkValue_fn).call(this, value / __privateGet(this, _tens), "mulSignal");
        }
        /**
         *  Returns a new [[FixedNumber]] with the result of %%this%% divided
         *  by %%other%%, ignoring underflow (precision loss). A
         *  [[NumericFaultError]] is thrown if overflow occurs.
         */
        divUnsafe(other) {
          return __privateMethod(this, _FixedNumber_instances, div_fn).call(this, other);
        }
        /**
         *  Returns a new [[FixedNumber]] with the result of %%this%% divided
         *  by %%other%%, ignoring underflow (precision loss). A
         *  [[NumericFaultError]] is thrown if overflow occurs.
         */
        div(other) {
          return __privateMethod(this, _FixedNumber_instances, div_fn).call(this, other, "div");
        }
        /**
         *  Returns a new [[FixedNumber]] with the result of %%this%% divided
         *  by %%other%%. A [[NumericFaultError]] is thrown if underflow
         *  (precision loss) occurs.
         */
        divSignal(other) {
          assert(__privateGet(other, _val) !== BN_03, "division by zero", "NUMERIC_FAULT", {
            operation: "div",
            fault: "divide-by-zero",
            value: this
          });
          __privateMethod(this, _FixedNumber_instances, checkFormat_fn).call(this, other);
          const value = __privateGet(this, _val) * __privateGet(this, _tens);
          assert(value % __privateGet(other, _val) === BN_03, "precision lost during signalling div", "NUMERIC_FAULT", {
            operation: "divSignal",
            fault: "underflow",
            value: this
          });
          return __privateMethod(this, _FixedNumber_instances, checkValue_fn).call(this, value / __privateGet(other, _val), "divSignal");
        }
        /**
         *  Returns a comparison result between %%this%% and %%other%%.
         *
         *  This is suitable for use in sorting, where ``-1`` implies %%this%%
         *  is smaller, ``1`` implies %%this%% is larger and ``0`` implies
         *  both are equal.
         */
        cmp(other) {
          let a = this.value, b2 = other.value;
          const delta = this.decimals - other.decimals;
          if (delta > 0) {
            b2 *= getTens(delta);
          } else if (delta < 0) {
            a *= getTens(-delta);
          }
          if (a < b2) {
            return -1;
          }
          if (a > b2) {
            return 1;
          }
          return 0;
        }
        /**
         *  Returns true if %%other%% is equal to %%this%%.
         */
        eq(other) {
          return this.cmp(other) === 0;
        }
        /**
         *  Returns true if %%other%% is less than to %%this%%.
         */
        lt(other) {
          return this.cmp(other) < 0;
        }
        /**
         *  Returns true if %%other%% is less than or equal to %%this%%.
         */
        lte(other) {
          return this.cmp(other) <= 0;
        }
        /**
         *  Returns true if %%other%% is greater than to %%this%%.
         */
        gt(other) {
          return this.cmp(other) > 0;
        }
        /**
         *  Returns true if %%other%% is greater than or equal to %%this%%.
         */
        gte(other) {
          return this.cmp(other) >= 0;
        }
        /**
         *  Returns a new [[FixedNumber]] which is the largest **integer**
         *  that is less than or equal to %%this%%.
         *
         *  The decimal component of the result will always be ``0``.
         */
        floor() {
          let val = __privateGet(this, _val);
          if (__privateGet(this, _val) < BN_03) {
            val -= __privateGet(this, _tens) - BN_12;
          }
          val = __privateGet(this, _val) / __privateGet(this, _tens) * __privateGet(this, _tens);
          return __privateMethod(this, _FixedNumber_instances, checkValue_fn).call(this, val, "floor");
        }
        /**
         *  Returns a new [[FixedNumber]] which is the smallest **integer**
         *  that is greater than or equal to %%this%%.
         *
         *  The decimal component of the result will always be ``0``.
         */
        ceiling() {
          let val = __privateGet(this, _val);
          if (__privateGet(this, _val) > BN_03) {
            val += __privateGet(this, _tens) - BN_12;
          }
          val = __privateGet(this, _val) / __privateGet(this, _tens) * __privateGet(this, _tens);
          return __privateMethod(this, _FixedNumber_instances, checkValue_fn).call(this, val, "ceiling");
        }
        /**
         *  Returns a new [[FixedNumber]] with the decimal component
         *  rounded up on ties at %%decimals%% places.
         */
        round(decimals) {
          if (decimals == null) {
            decimals = 0;
          }
          if (decimals >= this.decimals) {
            return this;
          }
          const delta = this.decimals - decimals;
          const bump = BN_5 * getTens(delta - 1);
          let value = this.value + bump;
          const tens = getTens(delta);
          value = value / tens * tens;
          checkValue(value, __privateGet(this, _format), "round");
          return new _FixedNumber(_guard, value, __privateGet(this, _format));
        }
        /**
         *  Returns true if %%this%% is equal to ``0``.
         */
        isZero() {
          return __privateGet(this, _val) === BN_03;
        }
        /**
         *  Returns true if %%this%% is less than ``0``.
         */
        isNegative() {
          return __privateGet(this, _val) < BN_03;
        }
        /**
         *  Returns the string representation of %%this%%.
         */
        toString() {
          return this._value;
        }
        /**
         *  Returns a float approximation.
         *
         *  Due to IEEE 754 precission (or lack thereof), this function
         *  can only return an approximation and most values will contain
         *  rounding errors.
         */
        toUnsafeFloat() {
          return parseFloat(this.toString());
        }
        /**
         *  Return a new [[FixedNumber]] with the same value but has had
         *  its field set to %%format%%.
         *
         *  This will throw if the value cannot fit into %%format%%.
         */
        toFormat(format) {
          return _FixedNumber.fromString(this.toString(), format);
        }
        /**
         *  Creates a new [[FixedNumber]] for %%value%% divided by
         *  %%decimal%% places with %%format%%.
         *
         *  This will throw a [[NumericFaultError]] if %%value%% (once adjusted
         *  for %%decimals%%) cannot fit in %%format%%, either due to overflow
         *  or underflow (precision loss).
         */
        static fromValue(_value2, _decimals, _format2) {
          const decimals = _decimals == null ? 0 : getNumber2(_decimals);
          const format = getFormat(_format2);
          let value = getBigInt(_value2, "value");
          const delta = decimals - format.decimals;
          if (delta > 0) {
            const tens = getTens(delta);
            assert(value % tens === BN_03, "value loses precision for format", "NUMERIC_FAULT", {
              operation: "fromValue",
              fault: "underflow",
              value: _value2
            });
            value /= tens;
          } else if (delta < 0) {
            value *= getTens(-delta);
          }
          checkValue(value, format, "fromValue");
          return new _FixedNumber(_guard, value, format);
        }
        /**
         *  Creates a new [[FixedNumber]] for %%value%% with %%format%%.
         *
         *  This will throw a [[NumericFaultError]] if %%value%% cannot fit
         *  in %%format%%, either due to overflow or underflow (precision loss).
         */
        static fromString(_value2, _format2) {
          const match = _value2.match(/^(-?)([0-9]*)\.?([0-9]*)$/);
          assertArgument(match && match[2].length + match[3].length > 0, "invalid FixedNumber string value", "value", _value2);
          const format = getFormat(_format2);
          let whole = match[2] || "0", decimal = match[3] || "";
          while (decimal.length < format.decimals) {
            decimal += Zeros;
          }
          assert(decimal.substring(format.decimals).match(/^0*$/), "too many decimals for format", "NUMERIC_FAULT", {
            operation: "fromString",
            fault: "underflow",
            value: _value2
          });
          decimal = decimal.substring(0, format.decimals);
          const value = BigInt(match[1] + whole + decimal);
          checkValue(value, format, "fromString");
          return new _FixedNumber(_guard, value, format);
        }
        /**
         *  Creates a new [[FixedNumber]] with the big-endian representation
         *  %%value%% with %%format%%.
         *
         *  This will throw a [[NumericFaultError]] if %%value%% cannot fit
         *  in %%format%% due to overflow.
         */
        static fromBytes(_value2, _format2) {
          let value = toBigInt(getBytes(_value2, "value"));
          const format = getFormat(_format2);
          if (format.signed) {
            value = fromTwos(value, format.width);
          }
          checkValue(value, format, "fromBytes");
          return new _FixedNumber(_guard, value, format);
        }
      };
      _format = new WeakMap();
      _val = new WeakMap();
      _tens = new WeakMap();
      _FixedNumber_instances = new WeakSet();
      checkFormat_fn = function(other) {
        assertArgument(this.format === other.format, "incompatible format; use fixedNumber.toFormat", "other", other);
      };
      checkValue_fn = function(val, safeOp) {
        val = checkValue(val, __privateGet(this, _format), safeOp);
        return new _FixedNumber(_guard, val, __privateGet(this, _format));
      };
      add_fn = function(o, safeOp) {
        __privateMethod(this, _FixedNumber_instances, checkFormat_fn).call(this, o);
        return __privateMethod(this, _FixedNumber_instances, checkValue_fn).call(this, __privateGet(this, _val) + __privateGet(o, _val), safeOp);
      };
      sub_fn = function(o, safeOp) {
        __privateMethod(this, _FixedNumber_instances, checkFormat_fn).call(this, o);
        return __privateMethod(this, _FixedNumber_instances, checkValue_fn).call(this, __privateGet(this, _val) - __privateGet(o, _val), safeOp);
      };
      mul_fn = function(o, safeOp) {
        __privateMethod(this, _FixedNumber_instances, checkFormat_fn).call(this, o);
        return __privateMethod(this, _FixedNumber_instances, checkValue_fn).call(this, __privateGet(this, _val) * __privateGet(o, _val) / __privateGet(this, _tens), safeOp);
      };
      div_fn = function(o, safeOp) {
        assert(__privateGet(o, _val) !== BN_03, "division by zero", "NUMERIC_FAULT", {
          operation: "div",
          fault: "divide-by-zero",
          value: this
        });
        __privateMethod(this, _FixedNumber_instances, checkFormat_fn).call(this, o);
        return __privateMethod(this, _FixedNumber_instances, checkValue_fn).call(this, __privateGet(this, _val) * __privateGet(this, _tens) / __privateGet(o, _val), safeOp);
      };
      FixedNumber = _FixedNumber;
    }
  });

  // node_modules/ethers/lib.esm/utils/rlp-decode.js
  function hexlifyByte(value) {
    let result = value.toString(16);
    while (result.length < 2) {
      result = "0" + result;
    }
    return "0x" + result;
  }
  function unarrayifyInteger(data, offset2, length) {
    let result = 0;
    for (let i = 0; i < length; i++) {
      result = result * 256 + data[offset2 + i];
    }
    return result;
  }
  function _decodeChildren(data, offset2, childOffset, length) {
    const result = [];
    while (childOffset < offset2 + 1 + length) {
      const decoded = _decode(data, childOffset);
      result.push(decoded.result);
      childOffset += decoded.consumed;
      assert(childOffset <= offset2 + 1 + length, "child data too short", "BUFFER_OVERRUN", {
        buffer: data,
        length,
        offset: offset2
      });
    }
    return { consumed: 1 + length, result };
  }
  function _decode(data, offset2) {
    assert(data.length !== 0, "data too short", "BUFFER_OVERRUN", {
      buffer: data,
      length: 0,
      offset: 1
    });
    const checkOffset = (offset3) => {
      assert(offset3 <= data.length, "data short segment too short", "BUFFER_OVERRUN", {
        buffer: data,
        length: data.length,
        offset: offset3
      });
    };
    if (data[offset2] >= 248) {
      const lengthLength = data[offset2] - 247;
      checkOffset(offset2 + 1 + lengthLength);
      const length = unarrayifyInteger(data, offset2 + 1, lengthLength);
      checkOffset(offset2 + 1 + lengthLength + length);
      return _decodeChildren(data, offset2, offset2 + 1 + lengthLength, lengthLength + length);
    } else if (data[offset2] >= 192) {
      const length = data[offset2] - 192;
      checkOffset(offset2 + 1 + length);
      return _decodeChildren(data, offset2, offset2 + 1, length);
    } else if (data[offset2] >= 184) {
      const lengthLength = data[offset2] - 183;
      checkOffset(offset2 + 1 + lengthLength);
      const length = unarrayifyInteger(data, offset2 + 1, lengthLength);
      checkOffset(offset2 + 1 + lengthLength + length);
      const result = hexlify(data.slice(offset2 + 1 + lengthLength, offset2 + 1 + lengthLength + length));
      return { consumed: 1 + lengthLength + length, result };
    } else if (data[offset2] >= 128) {
      const length = data[offset2] - 128;
      checkOffset(offset2 + 1 + length);
      const result = hexlify(data.slice(offset2 + 1, offset2 + 1 + length));
      return { consumed: 1 + length, result };
    }
    return { consumed: 1, result: hexlifyByte(data[offset2]) };
  }
  function decodeRlp(_data5) {
    const data = getBytes(_data5, "data");
    const decoded = _decode(data, 0);
    assertArgument(decoded.consumed === data.length, "unexpected junk after rlp payload", "data", _data5);
    return decoded.result;
  }
  var init_rlp_decode = __esm({
    "node_modules/ethers/lib.esm/utils/rlp-decode.js"() {
      init_data();
      init_errors();
      init_data();
    }
  });

  // node_modules/ethers/lib.esm/utils/rlp-encode.js
  function arrayifyInteger(value) {
    const result = [];
    while (value) {
      result.unshift(value & 255);
      value >>= 8;
    }
    return result;
  }
  function _encode(object2) {
    if (Array.isArray(object2)) {
      let payload = [];
      object2.forEach(function(child) {
        payload = payload.concat(_encode(child));
      });
      if (payload.length <= 55) {
        payload.unshift(192 + payload.length);
        return payload;
      }
      const length2 = arrayifyInteger(payload.length);
      length2.unshift(247 + length2.length);
      return length2.concat(payload);
    }
    const data = Array.prototype.slice.call(getBytes(object2, "object"));
    if (data.length === 1 && data[0] <= 127) {
      return data;
    } else if (data.length <= 55) {
      data.unshift(128 + data.length);
      return data;
    }
    const length = arrayifyInteger(data.length);
    length.unshift(183 + length.length);
    return length.concat(data);
  }
  function encodeRlp(object2) {
    let result = "0x";
    for (const v of _encode(object2)) {
      result += nibbles[v >> 4];
      result += nibbles[v & 15];
    }
    return result;
  }
  var nibbles;
  var init_rlp_encode = __esm({
    "node_modules/ethers/lib.esm/utils/rlp-encode.js"() {
      init_data();
      nibbles = "0123456789abcdef";
    }
  });

  // node_modules/ethers/lib.esm/utils/units.js
  function formatUnits(value, unit) {
    let decimals = 18;
    if (typeof unit === "string") {
      const index = names.indexOf(unit);
      assertArgument(index >= 0, "invalid unit", "unit", unit);
      decimals = 3 * index;
    } else if (unit != null) {
      decimals = getNumber2(unit, "unit");
    }
    return FixedNumber.fromValue(value, decimals, { decimals, width: 512 }).toString();
  }
  function parseUnits(value, unit) {
    assertArgument(typeof value === "string", "value must be a string", "value", value);
    let decimals = 18;
    if (typeof unit === "string") {
      const index = names.indexOf(unit);
      assertArgument(index >= 0, "invalid unit", "unit", unit);
      decimals = 3 * index;
    } else if (unit != null) {
      decimals = getNumber2(unit, "unit");
    }
    return FixedNumber.fromString(value, { decimals, width: 512 }).value;
  }
  function formatEther(wei) {
    return formatUnits(wei, 18);
  }
  function parseEther(ether) {
    return parseUnits(ether, 18);
  }
  var names;
  var init_units = __esm({
    "node_modules/ethers/lib.esm/utils/units.js"() {
      init_errors();
      init_fixednumber();
      init_maths();
      names = [
        "wei",
        "kwei",
        "mwei",
        "gwei",
        "szabo",
        "finney",
        "ether"
      ];
    }
  });

  // node_modules/ethers/lib.esm/utils/uuid.js
  function uuidV4(randomBytes5) {
    const bytes2 = getBytes(randomBytes5, "randomBytes");
    bytes2[6] = bytes2[6] & 15 | 64;
    bytes2[8] = bytes2[8] & 63 | 128;
    const value = hexlify(bytes2);
    return [
      value.substring(2, 10),
      value.substring(10, 14),
      value.substring(14, 18),
      value.substring(18, 22),
      value.substring(22, 34)
    ].join("-");
  }
  var init_uuid = __esm({
    "node_modules/ethers/lib.esm/utils/uuid.js"() {
      init_data();
    }
  });

  // node_modules/ethers/lib.esm/utils/index.js
  var init_utils = __esm({
    "node_modules/ethers/lib.esm/utils/index.js"() {
      init_base58();
      init_base64_browser();
      init_data();
      init_errors();
      init_events();
      init_fetch();
      init_fixednumber();
      init_maths();
      init_properties();
      init_rlp_decode();
      init_rlp_encode();
      init_units();
      init_utf8();
      init_uuid();
    }
  });

  // node_modules/ethers/lib.esm/abi/coders/abstract-coder.js
  function getNames(result) {
    return resultNames.get(result);
  }
  function setNames(result, names2) {
    resultNames.set(result, names2);
  }
  function throwError(name, error) {
    const wrapped = new Error(`deferred error during ABI decoding triggered accessing ${name}`);
    wrapped.error = error;
    throw wrapped;
  }
  function toObject(names2, items, deep) {
    if (names2.indexOf(null) >= 0) {
      return items.map((item, index) => {
        if (item instanceof Result) {
          return toObject(getNames(item), item, deep);
        }
        return item;
      });
    }
    return names2.reduce((accum, name, index) => {
      let item = items.getValue(name);
      if (!(name in accum)) {
        if (deep && item instanceof Result) {
          item = toObject(getNames(item), item, deep);
        }
        accum[name] = item;
      }
      return accum;
    }, {});
  }
  function checkResultErrors(result) {
    const errors = [];
    const checkErrors = function(path, object2) {
      if (!Array.isArray(object2)) {
        return;
      }
      for (let key in object2) {
        const childPath = path.slice();
        childPath.push(key);
        try {
          checkErrors(childPath, object2[key]);
        } catch (error) {
          errors.push({ path: childPath, error });
        }
      }
    };
    checkErrors([], result);
    return errors;
  }
  function getValue(value) {
    let bytes2 = toBeArray(value);
    assert(bytes2.length <= WordSize, "value out-of-bounds", "BUFFER_OVERRUN", { buffer: bytes2, length: WordSize, offset: bytes2.length });
    if (bytes2.length !== WordSize) {
      bytes2 = getBytesCopy(concat([Padding.slice(bytes2.length % WordSize), bytes2]));
    }
    return bytes2;
  }
  var WordSize, Padding, passProperties, _guard2, resultNames, _names, _Result, Result, Coder, _data, _dataLength, _Writer_instances, writeData_fn, Writer, _data2, _offset, _bytesRead, _parent, _maxInflation, _Reader_instances, incrementBytesRead_fn, peekBytes_fn, _Reader, Reader;
  var init_abstract_coder = __esm({
    "node_modules/ethers/lib.esm/abi/coders/abstract-coder.js"() {
      init_utils();
      WordSize = 32;
      Padding = new Uint8Array(WordSize);
      passProperties = ["then"];
      _guard2 = {};
      resultNames = /* @__PURE__ */ new WeakMap();
      _Result = class _Result extends Array {
        /**
         *  @private
         */
        constructor(...args) {
          const guard = args[0];
          let items = args[1];
          let names2 = (args[2] || []).slice();
          let wrap = true;
          if (guard !== _guard2) {
            items = args;
            names2 = [];
            wrap = false;
          }
          super(items.length);
          // No longer used; but cannot be removed as it will remove the
          // #private field from the .d.ts which may break backwards
          // compatibility
          __privateAdd(this, _names);
          items.forEach((item, index) => {
            this[index] = item;
          });
          const nameCounts = names2.reduce((accum, name) => {
            if (typeof name === "string") {
              accum.set(name, (accum.get(name) || 0) + 1);
            }
            return accum;
          }, /* @__PURE__ */ new Map());
          setNames(this, Object.freeze(items.map((item, index) => {
            const name = names2[index];
            if (name != null && nameCounts.get(name) === 1) {
              return name;
            }
            return null;
          })));
          __privateSet(this, _names, []);
          if (__privateGet(this, _names) == null) {
            void __privateGet(this, _names);
          }
          if (!wrap) {
            return;
          }
          Object.freeze(this);
          const proxy = new Proxy(this, {
            get: (target, prop, receiver) => {
              if (typeof prop === "string") {
                if (prop.match(/^[0-9]+$/)) {
                  const index = getNumber2(prop, "%index");
                  if (index < 0 || index >= this.length) {
                    throw new RangeError("out of result range");
                  }
                  const item = target[index];
                  if (item instanceof Error) {
                    throwError(`index ${index}`, item);
                  }
                  return item;
                }
                if (passProperties.indexOf(prop) >= 0) {
                  return Reflect.get(target, prop, receiver);
                }
                const value = target[prop];
                if (value instanceof Function) {
                  return function(...args2) {
                    return value.apply(this === receiver ? target : this, args2);
                  };
                } else if (!(prop in target)) {
                  return target.getValue.apply(this === receiver ? target : this, [prop]);
                }
              }
              return Reflect.get(target, prop, receiver);
            }
          });
          setNames(proxy, getNames(this));
          return proxy;
        }
        /**
         *  Returns the Result as a normal Array. If %%deep%%, any children
         *  which are Result objects are also converted to a normal Array.
         *
         *  This will throw if there are any outstanding deferred
         *  errors.
         */
        toArray(deep) {
          const result = [];
          this.forEach((item, index) => {
            if (item instanceof Error) {
              throwError(`index ${index}`, item);
            }
            if (deep && item instanceof _Result) {
              item = item.toArray(deep);
            }
            result.push(item);
          });
          return result;
        }
        /**
         *  Returns the Result as an Object with each name-value pair. If
         *  %%deep%%, any children which are Result objects are also
         *  converted to an Object.
         *
         *  This will throw if any value is unnamed, or if there are
         *  any outstanding deferred errors.
         */
        toObject(deep) {
          const names2 = getNames(this);
          return names2.reduce((accum, name, index) => {
            assert(name != null, `value at index ${index} unnamed`, "UNSUPPORTED_OPERATION", {
              operation: "toObject()"
            });
            return toObject(names2, this, deep);
          }, {});
        }
        /**
         *  @_ignore
         */
        slice(start, end) {
          if (start == null) {
            start = 0;
          }
          if (start < 0) {
            start += this.length;
            if (start < 0) {
              start = 0;
            }
          }
          if (end == null) {
            end = this.length;
          }
          if (end < 0) {
            end += this.length;
            if (end < 0) {
              end = 0;
            }
          }
          if (end > this.length) {
            end = this.length;
          }
          const _names2 = getNames(this);
          const result = [], names2 = [];
          for (let i = start; i < end; i++) {
            result.push(this[i]);
            names2.push(_names2[i]);
          }
          return new _Result(_guard2, result, names2);
        }
        /**
         *  @_ignore
         */
        filter(callback, thisArg) {
          const _names2 = getNames(this);
          const result = [], names2 = [];
          for (let i = 0; i < this.length; i++) {
            const item = this[i];
            if (item instanceof Error) {
              throwError(`index ${i}`, item);
            }
            if (callback.call(thisArg, item, i, this)) {
              result.push(item);
              names2.push(_names2[i]);
            }
          }
          return new _Result(_guard2, result, names2);
        }
        /**
         *  @_ignore
         */
        map(callback, thisArg) {
          const result = [];
          for (let i = 0; i < this.length; i++) {
            const item = this[i];
            if (item instanceof Error) {
              throwError(`index ${i}`, item);
            }
            result.push(callback.call(thisArg, item, i, this));
          }
          return result;
        }
        /**
         *  Returns the value for %%name%%.
         *
         *  Since it is possible to have a key whose name conflicts with
         *  a method on a [[Result]] or its superclass Array, or any
         *  JavaScript keyword, this ensures all named values are still
         *  accessible by name.
         */
        getValue(name) {
          const index = getNames(this).indexOf(name);
          if (index === -1) {
            return void 0;
          }
          const value = this[index];
          if (value instanceof Error) {
            throwError(`property ${JSON.stringify(name)}`, value.error);
          }
          return value;
        }
        /**
         *  Creates a new [[Result]] for %%items%% with each entry
         *  also accessible by its corresponding name in %%keys%%.
         */
        static fromItems(items, keys) {
          return new _Result(_guard2, items, keys);
        }
      };
      _names = new WeakMap();
      Result = _Result;
      Coder = class {
        constructor(name, type2, localName, dynamic) {
          // The coder name:
          //   - address, uint256, tuple, array, etc.
          __publicField(this, "name");
          // The fully expanded type, including composite types:
          //   - address, uint256, tuple(address,bytes), uint256[3][4][],  etc.
          __publicField(this, "type");
          // The localName bound in the signature, in this example it is "baz":
          //   - tuple(address foo, uint bar) baz
          __publicField(this, "localName");
          // Whether this type is dynamic:
          //  - Dynamic: bytes, string, address[], tuple(boolean[]), etc.
          //  - Not Dynamic: address, uint256, boolean[3], tuple(address, uint8)
          __publicField(this, "dynamic");
          defineProperties(this, { name, type: type2, localName, dynamic }, {
            name: "string",
            type: "string",
            localName: "string",
            dynamic: "boolean"
          });
        }
        _throwError(message, value) {
          assertArgument(false, message, this.localName, value);
        }
      };
      Writer = class {
        constructor() {
          __privateAdd(this, _Writer_instances);
          // An array of WordSize lengthed objects to concatenation
          __privateAdd(this, _data);
          __privateAdd(this, _dataLength);
          __privateSet(this, _data, []);
          __privateSet(this, _dataLength, 0);
        }
        get data() {
          return concat(__privateGet(this, _data));
        }
        get length() {
          return __privateGet(this, _dataLength);
        }
        appendWriter(writer) {
          return __privateMethod(this, _Writer_instances, writeData_fn).call(this, getBytesCopy(writer.data));
        }
        // Arrayish item; pad on the right to *nearest* WordSize
        writeBytes(value) {
          let bytes2 = getBytesCopy(value);
          const paddingOffset = bytes2.length % WordSize;
          if (paddingOffset) {
            bytes2 = getBytesCopy(concat([bytes2, Padding.slice(paddingOffset)]));
          }
          return __privateMethod(this, _Writer_instances, writeData_fn).call(this, bytes2);
        }
        // Numeric item; pad on the left *to* WordSize
        writeValue(value) {
          return __privateMethod(this, _Writer_instances, writeData_fn).call(this, getValue(value));
        }
        // Inserts a numeric place-holder, returning a callback that can
        // be used to asjust the value later
        writeUpdatableValue() {
          const offset2 = __privateGet(this, _data).length;
          __privateGet(this, _data).push(Padding);
          __privateSet(this, _dataLength, __privateGet(this, _dataLength) + WordSize);
          return (value) => {
            __privateGet(this, _data)[offset2] = getValue(value);
          };
        }
      };
      _data = new WeakMap();
      _dataLength = new WeakMap();
      _Writer_instances = new WeakSet();
      writeData_fn = function(data) {
        __privateGet(this, _data).push(data);
        __privateSet(this, _dataLength, __privateGet(this, _dataLength) + data.length);
        return data.length;
      };
      _Reader = class _Reader {
        constructor(data, allowLoose, maxInflation) {
          __privateAdd(this, _Reader_instances);
          // Allows incomplete unpadded data to be read; otherwise an error
          // is raised if attempting to overrun the buffer. This is required
          // to deal with an old Solidity bug, in which event data for
          // external (not public thoguh) was tightly packed.
          __publicField(this, "allowLoose");
          __privateAdd(this, _data2);
          __privateAdd(this, _offset);
          __privateAdd(this, _bytesRead);
          __privateAdd(this, _parent);
          __privateAdd(this, _maxInflation);
          defineProperties(this, { allowLoose: !!allowLoose });
          __privateSet(this, _data2, getBytesCopy(data));
          __privateSet(this, _bytesRead, 0);
          __privateSet(this, _parent, null);
          __privateSet(this, _maxInflation, maxInflation != null ? maxInflation : 1024);
          __privateSet(this, _offset, 0);
        }
        get data() {
          return hexlify(__privateGet(this, _data2));
        }
        get dataLength() {
          return __privateGet(this, _data2).length;
        }
        get consumed() {
          return __privateGet(this, _offset);
        }
        get bytes() {
          return new Uint8Array(__privateGet(this, _data2));
        }
        // Create a sub-reader with the same underlying data, but offset
        subReader(offset2) {
          const reader = new _Reader(__privateGet(this, _data2).slice(__privateGet(this, _offset) + offset2), this.allowLoose, __privateGet(this, _maxInflation));
          __privateSet(reader, _parent, this);
          return reader;
        }
        // Read bytes
        readBytes(length, loose) {
          let bytes2 = __privateMethod(this, _Reader_instances, peekBytes_fn).call(this, 0, length, !!loose);
          __privateMethod(this, _Reader_instances, incrementBytesRead_fn).call(this, length);
          __privateSet(this, _offset, __privateGet(this, _offset) + bytes2.length);
          return bytes2.slice(0, length);
        }
        // Read a numeric values
        readValue() {
          return toBigInt(this.readBytes(WordSize));
        }
        readIndex() {
          return toNumber(this.readBytes(WordSize));
        }
      };
      _data2 = new WeakMap();
      _offset = new WeakMap();
      _bytesRead = new WeakMap();
      _parent = new WeakMap();
      _maxInflation = new WeakMap();
      _Reader_instances = new WeakSet();
      incrementBytesRead_fn = function(count) {
        var _a2;
        if (__privateGet(this, _parent)) {
          return __privateMethod(_a2 = __privateGet(this, _parent), _Reader_instances, incrementBytesRead_fn).call(_a2, count);
        }
        __privateSet(this, _bytesRead, __privateGet(this, _bytesRead) + count);
        assert(__privateGet(this, _maxInflation) < 1 || __privateGet(this, _bytesRead) <= __privateGet(this, _maxInflation) * this.dataLength, `compressed ABI data exceeds inflation ratio of ${__privateGet(this, _maxInflation)} ( see: https://github.com/ethers-io/ethers.js/issues/4537 )`, "BUFFER_OVERRUN", {
          buffer: getBytesCopy(__privateGet(this, _data2)),
          offset: __privateGet(this, _offset),
          length: count,
          info: {
            bytesRead: __privateGet(this, _bytesRead),
            dataLength: this.dataLength
          }
        });
      };
      peekBytes_fn = function(offset2, length, loose) {
        let alignedLength = Math.ceil(length / WordSize) * WordSize;
        if (__privateGet(this, _offset) + alignedLength > __privateGet(this, _data2).length) {
          if (this.allowLoose && loose && __privateGet(this, _offset) + length <= __privateGet(this, _data2).length) {
            alignedLength = length;
          } else {
            assert(false, "data out-of-bounds", "BUFFER_OVERRUN", {
              buffer: getBytesCopy(__privateGet(this, _data2)),
              length: __privateGet(this, _data2).length,
              offset: __privateGet(this, _offset) + alignedLength
            });
          }
        }
        return __privateGet(this, _data2).slice(__privateGet(this, _offset), __privateGet(this, _offset) + alignedLength);
      };
      Reader = _Reader;
    }
  });

  // node_modules/ethers/node_modules/@noble/hashes/esm/_assert.js
  function number(n2) {
    if (!Number.isSafeInteger(n2) || n2 < 0)
      throw new Error(`Wrong positive integer: ${n2}`);
  }
  function bytes(b2, ...lengths) {
    if (!(b2 instanceof Uint8Array))
      throw new Error("Expected Uint8Array");
    if (lengths.length > 0 && !lengths.includes(b2.length))
      throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b2.length}`);
  }
  function hash(hash2) {
    if (typeof hash2 !== "function" || typeof hash2.create !== "function")
      throw new Error("Hash should be wrapped by utils.wrapConstructor");
    number(hash2.outputLen);
    number(hash2.blockLen);
  }
  function exists(instance2, checkFinished = true) {
    if (instance2.destroyed)
      throw new Error("Hash instance has been destroyed");
    if (checkFinished && instance2.finished)
      throw new Error("Hash#digest() has already been called");
  }
  function output(out, instance2) {
    bytes(out);
    const min = instance2.outputLen;
    if (out.length < min) {
      throw new Error(`digestInto() expects output buffer of length at least ${min}`);
    }
  }
  var init_assert = __esm({
    "node_modules/ethers/node_modules/@noble/hashes/esm/_assert.js"() {
    }
  });

  // node_modules/ethers/node_modules/@noble/hashes/esm/crypto.js
  var crypto2;
  var init_crypto = __esm({
    "node_modules/ethers/node_modules/@noble/hashes/esm/crypto.js"() {
      crypto2 = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
    }
  });

  // node_modules/ethers/node_modules/@noble/hashes/esm/utils.js
  async function asyncLoop(iters, tick, cb) {
    let ts = Date.now();
    for (let i = 0; i < iters; i++) {
      cb(i);
      const diff = Date.now() - ts;
      if (diff >= 0 && diff < tick)
        continue;
      await nextTick();
      ts += diff;
    }
  }
  function utf8ToBytes(str) {
    if (typeof str !== "string")
      throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
    return new Uint8Array(new TextEncoder().encode(str));
  }
  function toBytes(data) {
    if (typeof data === "string")
      data = utf8ToBytes(data);
    if (!u8a(data))
      throw new Error(`expected Uint8Array, got ${typeof data}`);
    return data;
  }
  function concatBytes(...arrays) {
    const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
    let pad = 0;
    arrays.forEach((a) => {
      if (!u8a(a))
        throw new Error("Uint8Array expected");
      r.set(a, pad);
      pad += a.length;
    });
    return r;
  }
  function checkOpts(defaults, opts) {
    if (opts !== void 0 && toStr.call(opts) !== "[object Object]")
      throw new Error("Options should be object or undefined");
    const merged = Object.assign(defaults, opts);
    return merged;
  }
  function wrapConstructor(hashCons) {
    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();
    const tmp = hashCons();
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = () => hashCons();
    return hashC;
  }
  function wrapXOFConstructorWithOpts(hashCons) {
    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
    const tmp = hashCons({});
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (opts) => hashCons(opts);
    return hashC;
  }
  function randomBytes(bytesLength = 32) {
    if (crypto2 && typeof crypto2.getRandomValues === "function") {
      return crypto2.getRandomValues(new Uint8Array(bytesLength));
    }
    throw new Error("crypto.getRandomValues must be defined");
  }
  var u8a, u32, createView, rotr, isLE, nextTick, Hash, toStr;
  var init_utils2 = __esm({
    "node_modules/ethers/node_modules/@noble/hashes/esm/utils.js"() {
      init_crypto();
      u8a = (a) => a instanceof Uint8Array;
      u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
      createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
      rotr = (word, shift) => word << 32 - shift | word >>> shift;
      isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
      if (!isLE)
        throw new Error("Non little-endian hardware is not supported");
      nextTick = async () => {
      };
      Hash = class {
        // Safe version that clones internal state
        clone() {
          return this._cloneInto();
        }
      };
      toStr = {}.toString;
    }
  });

  // node_modules/ethers/node_modules/@noble/hashes/esm/hmac.js
  var HMAC, hmac;
  var init_hmac = __esm({
    "node_modules/ethers/node_modules/@noble/hashes/esm/hmac.js"() {
      init_assert();
      init_utils2();
      HMAC = class extends Hash {
        constructor(hash2, _key) {
          super();
          this.finished = false;
          this.destroyed = false;
          hash(hash2);
          const key = toBytes(_key);
          this.iHash = hash2.create();
          if (typeof this.iHash.update !== "function")
            throw new Error("Expected instance of class which extends utils.Hash");
          this.blockLen = this.iHash.blockLen;
          this.outputLen = this.iHash.outputLen;
          const blockLen = this.blockLen;
          const pad = new Uint8Array(blockLen);
          pad.set(key.length > blockLen ? hash2.create().update(key).digest() : key);
          for (let i = 0; i < pad.length; i++)
            pad[i] ^= 54;
          this.iHash.update(pad);
          this.oHash = hash2.create();
          for (let i = 0; i < pad.length; i++)
            pad[i] ^= 54 ^ 92;
          this.oHash.update(pad);
          pad.fill(0);
        }
        update(buf) {
          exists(this);
          this.iHash.update(buf);
          return this;
        }
        digestInto(out) {
          exists(this);
          bytes(out, this.outputLen);
          this.finished = true;
          this.iHash.digestInto(out);
          this.oHash.update(out);
          this.oHash.digestInto(out);
          this.destroy();
        }
        digest() {
          const out = new Uint8Array(this.oHash.outputLen);
          this.digestInto(out);
          return out;
        }
        _cloneInto(to) {
          to || (to = Object.create(Object.getPrototypeOf(this), {}));
          const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
          to = to;
          to.finished = finished;
          to.destroyed = destroyed;
          to.blockLen = blockLen;
          to.outputLen = outputLen;
          to.oHash = oHash._cloneInto(to.oHash);
          to.iHash = iHash._cloneInto(to.iHash);
          return to;
        }
        destroy() {
          this.destroyed = true;
          this.oHash.destroy();
          this.iHash.destroy();
        }
      };
      hmac = (hash2, key, message) => new HMAC(hash2, key).update(message).digest();
      hmac.create = (hash2, key) => new HMAC(hash2, key);
    }
  });

  // node_modules/ethers/node_modules/@noble/hashes/esm/pbkdf2.js
  function pbkdf2Init(hash2, _password, _salt, _opts) {
    hash(hash2);
    const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);
    const { c, dkLen, asyncTick } = opts;
    number(c);
    number(dkLen);
    number(asyncTick);
    if (c < 1)
      throw new Error("PBKDF2: iterations (c) should be >= 1");
    const password = toBytes(_password);
    const salt = toBytes(_salt);
    const DK = new Uint8Array(dkLen);
    const PRF = hmac.create(hash2, password);
    const PRFSalt = PRF._cloneInto().update(salt);
    return { c, dkLen, asyncTick, DK, PRF, PRFSalt };
  }
  function pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {
    PRF.destroy();
    PRFSalt.destroy();
    if (prfW)
      prfW.destroy();
    u.fill(0);
    return DK;
  }
  function pbkdf2(hash2, password, salt, opts) {
    const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash2, password, salt, opts);
    let prfW;
    const arr = new Uint8Array(4);
    const view = createView(arr);
    const u = new Uint8Array(PRF.outputLen);
    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
      const Ti = DK.subarray(pos, pos + PRF.outputLen);
      view.setInt32(0, ti, false);
      (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
      Ti.set(u.subarray(0, Ti.length));
      for (let ui = 1; ui < c; ui++) {
        PRF._cloneInto(prfW).update(u).digestInto(u);
        for (let i = 0; i < Ti.length; i++)
          Ti[i] ^= u[i];
      }
    }
    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
  }
  var init_pbkdf2 = __esm({
    "node_modules/ethers/node_modules/@noble/hashes/esm/pbkdf2.js"() {
      init_assert();
      init_hmac();
      init_utils2();
    }
  });

  // node_modules/ethers/node_modules/@noble/hashes/esm/_sha2.js
  function setBigUint64(view, byteOffset, value, isLE3) {
    if (typeof view.setBigUint64 === "function")
      return view.setBigUint64(byteOffset, value, isLE3);
    const _32n3 = BigInt(32);
    const _u32_max = BigInt(4294967295);
    const wh = Number(value >> _32n3 & _u32_max);
    const wl = Number(value & _u32_max);
    const h = isLE3 ? 4 : 0;
    const l = isLE3 ? 0 : 4;
    view.setUint32(byteOffset + h, wh, isLE3);
    view.setUint32(byteOffset + l, wl, isLE3);
  }
  var SHA2;
  var init_sha2 = __esm({
    "node_modules/ethers/node_modules/@noble/hashes/esm/_sha2.js"() {
      init_assert();
      init_utils2();
      SHA2 = class extends Hash {
        constructor(blockLen, outputLen, padOffset, isLE3) {
          super();
          this.blockLen = blockLen;
          this.outputLen = outputLen;
          this.padOffset = padOffset;
          this.isLE = isLE3;
          this.finished = false;
          this.length = 0;
          this.pos = 0;
          this.destroyed = false;
          this.buffer = new Uint8Array(blockLen);
          this.view = createView(this.buffer);
        }
        update(data) {
          exists(this);
          const { view, buffer, blockLen } = this;
          data = toBytes(data);
          const len = data.length;
          for (let pos = 0; pos < len; ) {
            const take = Math.min(blockLen - this.pos, len - pos);
            if (take === blockLen) {
              const dataView = createView(data);
              for (; blockLen <= len - pos; pos += blockLen)
                this.process(dataView, pos);
              continue;
            }
            buffer.set(data.subarray(pos, pos + take), this.pos);
            this.pos += take;
            pos += take;
            if (this.pos === blockLen) {
              this.process(view, 0);
              this.pos = 0;
            }
          }
          this.length += data.length;
          this.roundClean();
          return this;
        }
        digestInto(out) {
          exists(this);
          output(out, this);
          this.finished = true;
          const { buffer, view, blockLen, isLE: isLE3 } = this;
          let { pos } = this;
          buffer[pos++] = 128;
          this.buffer.subarray(pos).fill(0);
          if (this.padOffset > blockLen - pos) {
            this.process(view, 0);
            pos = 0;
          }
          for (let i = pos; i < blockLen; i++)
            buffer[i] = 0;
          setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE3);
          this.process(view, 0);
          const oview = createView(out);
          const len = this.outputLen;
          if (len % 4)
            throw new Error("_sha2: outputLen should be aligned to 32bit");
          const outLen = len / 4;
          const state = this.get();
          if (outLen > state.length)
            throw new Error("_sha2: outputLen bigger than state");
          for (let i = 0; i < outLen; i++)
            oview.setUint32(4 * i, state[i], isLE3);
        }
        digest() {
          const { buffer, outputLen } = this;
          this.digestInto(buffer);
          const res = buffer.slice(0, outputLen);
          this.destroy();
          return res;
        }
        _cloneInto(to) {
          to || (to = new this.constructor());
          to.set(...this.get());
          const { blockLen, buffer, length, finished, destroyed, pos } = this;
          to.length = length;
          to.pos = pos;
          to.finished = finished;
          to.destroyed = destroyed;
          if (length % blockLen)
            to.buffer.set(buffer);
          return to;
        }
      };
    }
  });

  // node_modules/ethers/node_modules/@noble/hashes/esm/sha256.js
  var Chi, Maj, SHA256_K, IV, SHA256_W, SHA256, sha256;
  var init_sha256 = __esm({
    "node_modules/ethers/node_modules/@noble/hashes/esm/sha256.js"() {
      init_sha2();
      init_utils2();
      Chi = (a, b2, c) => a & b2 ^ ~a & c;
      Maj = (a, b2, c) => a & b2 ^ a & c ^ b2 & c;
      SHA256_K = /* @__PURE__ */ new Uint32Array([
        1116352408,
        1899447441,
        3049323471,
        3921009573,
        961987163,
        1508970993,
        2453635748,
        2870763221,
        3624381080,
        310598401,
        607225278,
        1426881987,
        1925078388,
        2162078206,
        2614888103,
        3248222580,
        3835390401,
        4022224774,
        264347078,
        604807628,
        770255983,
        1249150122,
        1555081692,
        1996064986,
        2554220882,
        2821834349,
        2952996808,
        3210313671,
        3336571891,
        3584528711,
        113926993,
        338241895,
        666307205,
        773529912,
        1294757372,
        1396182291,
        1695183700,
        1986661051,
        2177026350,
        2456956037,
        2730485921,
        2820302411,
        3259730800,
        3345764771,
        3516065817,
        3600352804,
        4094571909,
        275423344,
        430227734,
        506948616,
        659060556,
        883997877,
        958139571,
        1322822218,
        1537002063,
        1747873779,
        1955562222,
        2024104815,
        2227730452,
        2361852424,
        2428436474,
        2756734187,
        3204031479,
        3329325298
      ]);
      IV = /* @__PURE__ */ new Uint32Array([
        1779033703,
        3144134277,
        1013904242,
        2773480762,
        1359893119,
        2600822924,
        528734635,
        1541459225
      ]);
      SHA256_W = /* @__PURE__ */ new Uint32Array(64);
      SHA256 = class extends SHA2 {
        constructor() {
          super(64, 32, 8, false);
          this.A = IV[0] | 0;
          this.B = IV[1] | 0;
          this.C = IV[2] | 0;
          this.D = IV[3] | 0;
          this.E = IV[4] | 0;
          this.F = IV[5] | 0;
          this.G = IV[6] | 0;
          this.H = IV[7] | 0;
        }
        get() {
          const { A, B, C, D, E, F, G, H } = this;
          return [A, B, C, D, E, F, G, H];
        }
        // prettier-ignore
        set(A, B, C, D, E, F, G, H) {
          this.A = A | 0;
          this.B = B | 0;
          this.C = C | 0;
          this.D = D | 0;
          this.E = E | 0;
          this.F = F | 0;
          this.G = G | 0;
          this.H = H | 0;
        }
        process(view, offset2) {
          for (let i = 0; i < 16; i++, offset2 += 4)
            SHA256_W[i] = view.getUint32(offset2, false);
          for (let i = 16; i < 64; i++) {
            const W15 = SHA256_W[i - 15];
            const W2 = SHA256_W[i - 2];
            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ W15 >>> 3;
            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ W2 >>> 10;
            SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
          }
          let { A, B, C, D, E, F, G, H } = this;
          for (let i = 0; i < 64; i++) {
            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);
            const T13 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;
            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);
            const T22 = sigma0 + Maj(A, B, C) | 0;
            H = G;
            G = F;
            F = E;
            E = D + T13 | 0;
            D = C;
            C = B;
            B = A;
            A = T13 + T22 | 0;
          }
          A = A + this.A | 0;
          B = B + this.B | 0;
          C = C + this.C | 0;
          D = D + this.D | 0;
          E = E + this.E | 0;
          F = F + this.F | 0;
          G = G + this.G | 0;
          H = H + this.H | 0;
          this.set(A, B, C, D, E, F, G, H);
        }
        roundClean() {
          SHA256_W.fill(0);
        }
        destroy() {
          this.set(0, 0, 0, 0, 0, 0, 0, 0);
          this.buffer.fill(0);
        }
      };
      sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());
    }
  });

  // node_modules/ethers/node_modules/@noble/hashes/esm/_u64.js
  function fromBig(n2, le = false) {
    if (le)
      return { h: Number(n2 & U32_MASK64), l: Number(n2 >> _32n & U32_MASK64) };
    return { h: Number(n2 >> _32n & U32_MASK64) | 0, l: Number(n2 & U32_MASK64) | 0 };
  }
  function split(lst, le = false) {
    let Ah = new Uint32Array(lst.length);
    let Al = new Uint32Array(lst.length);
    for (let i = 0; i < lst.length; i++) {
      const { h, l } = fromBig(lst[i], le);
      [Ah[i], Al[i]] = [h, l];
    }
    return [Ah, Al];
  }
  function add(Ah, Al, Bh, Bl) {
    const l = (Al >>> 0) + (Bl >>> 0);
    return { h: Ah + Bh + (l / 2 ** 32 | 0) | 0, l: l | 0 };
  }
  var U32_MASK64, _32n, toBig, shrSH, shrSL, rotrSH, rotrSL, rotrBH, rotrBL, rotr32H, rotr32L, rotlSH, rotlSL, rotlBH, rotlBL, add3L, add3H, add4L, add4H, add5L, add5H, u64, u64_default;
  var init_u64 = __esm({
    "node_modules/ethers/node_modules/@noble/hashes/esm/_u64.js"() {
      U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
      _32n = /* @__PURE__ */ BigInt(32);
      toBig = (h, l) => BigInt(h >>> 0) << _32n | BigInt(l >>> 0);
      shrSH = (h, _l, s) => h >>> s;
      shrSL = (h, l, s) => h << 32 - s | l >>> s;
      rotrSH = (h, l, s) => h >>> s | l << 32 - s;
      rotrSL = (h, l, s) => h << 32 - s | l >>> s;
      rotrBH = (h, l, s) => h << 64 - s | l >>> s - 32;
      rotrBL = (h, l, s) => h >>> s - 32 | l << 64 - s;
      rotr32H = (_h, l) => l;
      rotr32L = (h, _l) => h;
      rotlSH = (h, l, s) => h << s | l >>> 32 - s;
      rotlSL = (h, l, s) => l << s | h >>> 32 - s;
      rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;
      rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s;
      add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
      add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
      add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
      add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
      add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
      add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
      u64 = {
        fromBig,
        split,
        toBig,
        shrSH,
        shrSL,
        rotrSH,
        rotrSL,
        rotrBH,
        rotrBL,
        rotr32H,
        rotr32L,
        rotlSH,
        rotlSL,
        rotlBH,
        rotlBL,
        add,
        add3L,
        add3H,
        add4L,
        add4H,
        add5H,
        add5L
      };
      u64_default = u64;
    }
  });

  // node_modules/ethers/node_modules/@noble/hashes/esm/sha512.js
  var SHA512_Kh, SHA512_Kl, SHA512_W_H, SHA512_W_L, SHA512, sha512;
  var init_sha512 = __esm({
    "node_modules/ethers/node_modules/@noble/hashes/esm/sha512.js"() {
      init_sha2();
      init_u64();
      init_utils2();
      [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64_default.split([
        "0x428a2f98d728ae22",
        "0x7137449123ef65cd",
        "0xb5c0fbcfec4d3b2f",
        "0xe9b5dba58189dbbc",
        "0x3956c25bf348b538",
        "0x59f111f1b605d019",
        "0x923f82a4af194f9b",
        "0xab1c5ed5da6d8118",
        "0xd807aa98a3030242",
        "0x12835b0145706fbe",
        "0x243185be4ee4b28c",
        "0x550c7dc3d5ffb4e2",
        "0x72be5d74f27b896f",
        "0x80deb1fe3b1696b1",
        "0x9bdc06a725c71235",
        "0xc19bf174cf692694",
        "0xe49b69c19ef14ad2",
        "0xefbe4786384f25e3",
        "0x0fc19dc68b8cd5b5",
        "0x240ca1cc77ac9c65",
        "0x2de92c6f592b0275",
        "0x4a7484aa6ea6e483",
        "0x5cb0a9dcbd41fbd4",
        "0x76f988da831153b5",
        "0x983e5152ee66dfab",
        "0xa831c66d2db43210",
        "0xb00327c898fb213f",
        "0xbf597fc7beef0ee4",
        "0xc6e00bf33da88fc2",
        "0xd5a79147930aa725",
        "0x06ca6351e003826f",
        "0x142929670a0e6e70",
        "0x27b70a8546d22ffc",
        "0x2e1b21385c26c926",
        "0x4d2c6dfc5ac42aed",
        "0x53380d139d95b3df",
        "0x650a73548baf63de",
        "0x766a0abb3c77b2a8",
        "0x81c2c92e47edaee6",
        "0x92722c851482353b",
        "0xa2bfe8a14cf10364",
        "0xa81a664bbc423001",
        "0xc24b8b70d0f89791",
        "0xc76c51a30654be30",
        "0xd192e819d6ef5218",
        "0xd69906245565a910",
        "0xf40e35855771202a",
        "0x106aa07032bbd1b8",
        "0x19a4c116b8d2d0c8",
        "0x1e376c085141ab53",
        "0x2748774cdf8eeb99",
        "0x34b0bcb5e19b48a8",
        "0x391c0cb3c5c95a63",
        "0x4ed8aa4ae3418acb",
        "0x5b9cca4f7763e373",
        "0x682e6ff3d6b2b8a3",
        "0x748f82ee5defb2fc",
        "0x78a5636f43172f60",
        "0x84c87814a1f0ab72",
        "0x8cc702081a6439ec",
        "0x90befffa23631e28",
        "0xa4506cebde82bde9",
        "0xbef9a3f7b2c67915",
        "0xc67178f2e372532b",
        "0xca273eceea26619c",
        "0xd186b8c721c0c207",
        "0xeada7dd6cde0eb1e",
        "0xf57d4f7fee6ed178",
        "0x06f067aa72176fba",
        "0x0a637dc5a2c898a6",
        "0x113f9804bef90dae",
        "0x1b710b35131c471b",
        "0x28db77f523047d84",
        "0x32caab7b40c72493",
        "0x3c9ebe0a15c9bebc",
        "0x431d67c49c100d4c",
        "0x4cc5d4becb3e42b6",
        "0x597f299cfc657e2a",
        "0x5fcb6fab3ad6faec",
        "0x6c44198c4a475817"
      ].map((n2) => BigInt(n2))))();
      SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);
      SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);
      SHA512 = class extends SHA2 {
        constructor() {
          super(128, 64, 16, false);
          this.Ah = 1779033703 | 0;
          this.Al = 4089235720 | 0;
          this.Bh = 3144134277 | 0;
          this.Bl = 2227873595 | 0;
          this.Ch = 1013904242 | 0;
          this.Cl = 4271175723 | 0;
          this.Dh = 2773480762 | 0;
          this.Dl = 1595750129 | 0;
          this.Eh = 1359893119 | 0;
          this.El = 2917565137 | 0;
          this.Fh = 2600822924 | 0;
          this.Fl = 725511199 | 0;
          this.Gh = 528734635 | 0;
          this.Gl = 4215389547 | 0;
          this.Hh = 1541459225 | 0;
          this.Hl = 327033209 | 0;
        }
        // prettier-ignore
        get() {
          const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
          return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
        }
        // prettier-ignore
        set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
          this.Ah = Ah | 0;
          this.Al = Al | 0;
          this.Bh = Bh | 0;
          this.Bl = Bl | 0;
          this.Ch = Ch | 0;
          this.Cl = Cl | 0;
          this.Dh = Dh | 0;
          this.Dl = Dl | 0;
          this.Eh = Eh | 0;
          this.El = El | 0;
          this.Fh = Fh | 0;
          this.Fl = Fl | 0;
          this.Gh = Gh | 0;
          this.Gl = Gl | 0;
          this.Hh = Hh | 0;
          this.Hl = Hl | 0;
        }
        process(view, offset2) {
          for (let i = 0; i < 16; i++, offset2 += 4) {
            SHA512_W_H[i] = view.getUint32(offset2);
            SHA512_W_L[i] = view.getUint32(offset2 += 4);
          }
          for (let i = 16; i < 80; i++) {
            const W15h = SHA512_W_H[i - 15] | 0;
            const W15l = SHA512_W_L[i - 15] | 0;
            const s0h = u64_default.rotrSH(W15h, W15l, 1) ^ u64_default.rotrSH(W15h, W15l, 8) ^ u64_default.shrSH(W15h, W15l, 7);
            const s0l = u64_default.rotrSL(W15h, W15l, 1) ^ u64_default.rotrSL(W15h, W15l, 8) ^ u64_default.shrSL(W15h, W15l, 7);
            const W2h = SHA512_W_H[i - 2] | 0;
            const W2l = SHA512_W_L[i - 2] | 0;
            const s1h = u64_default.rotrSH(W2h, W2l, 19) ^ u64_default.rotrBH(W2h, W2l, 61) ^ u64_default.shrSH(W2h, W2l, 6);
            const s1l = u64_default.rotrSL(W2h, W2l, 19) ^ u64_default.rotrBL(W2h, W2l, 61) ^ u64_default.shrSL(W2h, W2l, 6);
            const SUMl = u64_default.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);
            const SUMh = u64_default.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);
            SHA512_W_H[i] = SUMh | 0;
            SHA512_W_L[i] = SUMl | 0;
          }
          let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
          for (let i = 0; i < 80; i++) {
            const sigma1h = u64_default.rotrSH(Eh, El, 14) ^ u64_default.rotrSH(Eh, El, 18) ^ u64_default.rotrBH(Eh, El, 41);
            const sigma1l = u64_default.rotrSL(Eh, El, 14) ^ u64_default.rotrSL(Eh, El, 18) ^ u64_default.rotrBL(Eh, El, 41);
            const CHIh = Eh & Fh ^ ~Eh & Gh;
            const CHIl = El & Fl ^ ~El & Gl;
            const T1ll = u64_default.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);
            const T1h = u64_default.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);
            const T1l = T1ll | 0;
            const sigma0h = u64_default.rotrSH(Ah, Al, 28) ^ u64_default.rotrBH(Ah, Al, 34) ^ u64_default.rotrBH(Ah, Al, 39);
            const sigma0l = u64_default.rotrSL(Ah, Al, 28) ^ u64_default.rotrBL(Ah, Al, 34) ^ u64_default.rotrBL(Ah, Al, 39);
            const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
            const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
            Hh = Gh | 0;
            Hl = Gl | 0;
            Gh = Fh | 0;
            Gl = Fl | 0;
            Fh = Eh | 0;
            Fl = El | 0;
            ({ h: Eh, l: El } = u64_default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
            Dh = Ch | 0;
            Dl = Cl | 0;
            Ch = Bh | 0;
            Cl = Bl | 0;
            Bh = Ah | 0;
            Bl = Al | 0;
            const All = u64_default.add3L(T1l, sigma0l, MAJl);
            Ah = u64_default.add3H(All, T1h, sigma0h, MAJh);
            Al = All | 0;
          }
          ({ h: Ah, l: Al } = u64_default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
          ({ h: Bh, l: Bl } = u64_default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
          ({ h: Ch, l: Cl } = u64_default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
          ({ h: Dh, l: Dl } = u64_default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
          ({ h: Eh, l: El } = u64_default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
          ({ h: Fh, l: Fl } = u64_default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
          ({ h: Gh, l: Gl } = u64_default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
          ({ h: Hh, l: Hl } = u64_default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
          this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
        }
        roundClean() {
          SHA512_W_H.fill(0);
          SHA512_W_L.fill(0);
        }
        destroy() {
          this.buffer.fill(0);
          this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
      };
      sha512 = /* @__PURE__ */ wrapConstructor(() => new SHA512());
    }
  });

  // node_modules/ethers/lib.esm/crypto/crypto-browser.js
  function getGlobal() {
    if (typeof self !== "undefined") {
      return self;
    }
    if (typeof window !== "undefined") {
      return window;
    }
    if (typeof global !== "undefined") {
      return global;
    }
    throw new Error("unable to locate global object");
  }
  function createHash(algo) {
    switch (algo) {
      case "sha256":
        return sha256.create();
      case "sha512":
        return sha512.create();
    }
    assertArgument(false, "invalid hashing algorithm name", "algorithm", algo);
  }
  function createHmac(_algo, key) {
    const algo = { sha256, sha512 }[_algo];
    assertArgument(algo != null, "invalid hmac algorithm", "algorithm", _algo);
    return hmac.create(algo, key);
  }
  function pbkdf2Sync(password, salt, iterations, keylen, _algo) {
    const algo = { sha256, sha512 }[_algo];
    assertArgument(algo != null, "invalid pbkdf2 algorithm", "algorithm", _algo);
    return pbkdf2(algo, password, salt, { c: iterations, dkLen: keylen });
  }
  function randomBytes2(length) {
    assert(crypto3 != null, "platform does not support secure random numbers", "UNSUPPORTED_OPERATION", {
      operation: "randomBytes"
    });
    assertArgument(Number.isInteger(length) && length > 0 && length <= 1024, "invalid length", "length", length);
    const result = new Uint8Array(length);
    crypto3.getRandomValues(result);
    return result;
  }
  var anyGlobal, crypto3;
  var init_crypto_browser = __esm({
    "node_modules/ethers/lib.esm/crypto/crypto-browser.js"() {
      init_hmac();
      init_pbkdf2();
      init_sha256();
      init_sha512();
      init_utils();
      anyGlobal = getGlobal();
      crypto3 = anyGlobal.crypto || anyGlobal.msCrypto;
    }
  });

  // node_modules/ethers/lib.esm/crypto/hmac.js
  function computeHmac(algorithm, _key, _data5) {
    const key = getBytes(_key, "key");
    const data = getBytes(_data5, "data");
    return hexlify(__computeHmac(algorithm, key, data));
  }
  var locked2, _computeHmac, __computeHmac;
  var init_hmac2 = __esm({
    "node_modules/ethers/lib.esm/crypto/hmac.js"() {
      init_crypto_browser();
      init_utils();
      locked2 = false;
      _computeHmac = function(algorithm, key, data) {
        return createHmac(algorithm, key).update(data).digest();
      };
      __computeHmac = _computeHmac;
      computeHmac._ = _computeHmac;
      computeHmac.lock = function() {
        locked2 = true;
      };
      computeHmac.register = function(func) {
        if (locked2) {
          throw new Error("computeHmac is locked");
        }
        __computeHmac = func;
      };
      Object.freeze(computeHmac);
    }
  });

  // node_modules/ethers/node_modules/@noble/hashes/esm/sha3.js
  function keccakP(s, rounds = 24) {
    const B = new Uint32Array(5 * 2);
    for (let round = 24 - rounds; round < 24; round++) {
      for (let x = 0; x < 10; x++)
        B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
      for (let x = 0; x < 10; x += 2) {
        const idx1 = (x + 8) % 10;
        const idx0 = (x + 2) % 10;
        const B0 = B[idx0];
        const B1 = B[idx0 + 1];
        const Th = rotlH(B0, B1, 1) ^ B[idx1];
        const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
        for (let y = 0; y < 50; y += 10) {
          s[x + y] ^= Th;
          s[x + y + 1] ^= Tl;
        }
      }
      let curH = s[2];
      let curL = s[3];
      for (let t = 0; t < 24; t++) {
        const shift = SHA3_ROTL[t];
        const Th = rotlH(curH, curL, shift);
        const Tl = rotlL(curH, curL, shift);
        const PI = SHA3_PI[t];
        curH = s[PI];
        curL = s[PI + 1];
        s[PI] = Th;
        s[PI + 1] = Tl;
      }
      for (let y = 0; y < 50; y += 10) {
        for (let x = 0; x < 10; x++)
          B[x] = s[y + x];
        for (let x = 0; x < 10; x++)
          s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
      }
      s[0] ^= SHA3_IOTA_H[round];
      s[1] ^= SHA3_IOTA_L[round];
    }
    B.fill(0);
  }
  var SHA3_PI, SHA3_ROTL, _SHA3_IOTA, _0n, _1n, _2n, _7n, _256n, _0x71n, SHA3_IOTA_H, SHA3_IOTA_L, rotlH, rotlL, Keccak, gen, sha3_224, sha3_256, sha3_384, sha3_512, keccak_224, keccak_256, keccak_384, keccak_512, genShake, shake128, shake256;
  var init_sha3 = __esm({
    "node_modules/ethers/node_modules/@noble/hashes/esm/sha3.js"() {
      init_assert();
      init_u64();
      init_utils2();
      [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];
      _0n = /* @__PURE__ */ BigInt(0);
      _1n = /* @__PURE__ */ BigInt(1);
      _2n = /* @__PURE__ */ BigInt(2);
      _7n = /* @__PURE__ */ BigInt(7);
      _256n = /* @__PURE__ */ BigInt(256);
      _0x71n = /* @__PURE__ */ BigInt(113);
      for (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {
        [x, y] = [y, (2 * x + 3 * y) % 5];
        SHA3_PI.push(2 * (5 * y + x));
        SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
        let t = _0n;
        for (let j = 0; j < 7; j++) {
          R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;
          if (R & _2n)
            t ^= _1n << (_1n << /* @__PURE__ */ BigInt(j)) - _1n;
        }
        _SHA3_IOTA.push(t);
      }
      [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);
      rotlH = (h, l, s) => s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s);
      rotlL = (h, l, s) => s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s);
      Keccak = class _Keccak extends Hash {
        // NOTE: we accept arguments in bytes instead of bits here.
        constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
          super();
          this.blockLen = blockLen;
          this.suffix = suffix;
          this.outputLen = outputLen;
          this.enableXOF = enableXOF;
          this.rounds = rounds;
          this.pos = 0;
          this.posOut = 0;
          this.finished = false;
          this.destroyed = false;
          number(outputLen);
          if (0 >= this.blockLen || this.blockLen >= 200)
            throw new Error("Sha3 supports only keccak-f1600 function");
          this.state = new Uint8Array(200);
          this.state32 = u32(this.state);
        }
        keccak() {
          keccakP(this.state32, this.rounds);
          this.posOut = 0;
          this.pos = 0;
        }
        update(data) {
          exists(this);
          const { blockLen, state } = this;
          data = toBytes(data);
          const len = data.length;
          for (let pos = 0; pos < len; ) {
            const take = Math.min(blockLen - this.pos, len - pos);
            for (let i = 0; i < take; i++)
              state[this.pos++] ^= data[pos++];
            if (this.pos === blockLen)
              this.keccak();
          }
          return this;
        }
        finish() {
          if (this.finished)
            return;
          this.finished = true;
          const { state, suffix, pos, blockLen } = this;
          state[pos] ^= suffix;
          if ((suffix & 128) !== 0 && pos === blockLen - 1)
            this.keccak();
          state[blockLen - 1] ^= 128;
          this.keccak();
        }
        writeInto(out) {
          exists(this, false);
          bytes(out);
          this.finish();
          const bufferOut = this.state;
          const { blockLen } = this;
          for (let pos = 0, len = out.length; pos < len; ) {
            if (this.posOut >= blockLen)
              this.keccak();
            const take = Math.min(blockLen - this.posOut, len - pos);
            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
            this.posOut += take;
            pos += take;
          }
          return out;
        }
        xofInto(out) {
          if (!this.enableXOF)
            throw new Error("XOF is not possible for this instance");
          return this.writeInto(out);
        }
        xof(bytes2) {
          number(bytes2);
          return this.xofInto(new Uint8Array(bytes2));
        }
        digestInto(out) {
          output(out, this);
          if (this.finished)
            throw new Error("digest() was already called");
          this.writeInto(out);
          this.destroy();
          return out;
        }
        digest() {
          return this.digestInto(new Uint8Array(this.outputLen));
        }
        destroy() {
          this.destroyed = true;
          this.state.fill(0);
        }
        _cloneInto(to) {
          const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
          to || (to = new _Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
          to.state32.set(this.state32);
          to.pos = this.pos;
          to.posOut = this.posOut;
          to.finished = this.finished;
          to.rounds = rounds;
          to.suffix = suffix;
          to.outputLen = outputLen;
          to.enableXOF = enableXOF;
          to.destroyed = this.destroyed;
          return to;
        }
      };
      gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));
      sha3_224 = /* @__PURE__ */ gen(6, 144, 224 / 8);
      sha3_256 = /* @__PURE__ */ gen(6, 136, 256 / 8);
      sha3_384 = /* @__PURE__ */ gen(6, 104, 384 / 8);
      sha3_512 = /* @__PURE__ */ gen(6, 72, 512 / 8);
      keccak_224 = /* @__PURE__ */ gen(1, 144, 224 / 8);
      keccak_256 = /* @__PURE__ */ gen(1, 136, 256 / 8);
      keccak_384 = /* @__PURE__ */ gen(1, 104, 384 / 8);
      keccak_512 = /* @__PURE__ */ gen(1, 72, 512 / 8);
      genShake = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
      shake128 = /* @__PURE__ */ genShake(31, 168, 128 / 8);
      shake256 = /* @__PURE__ */ genShake(31, 136, 256 / 8);
    }
  });

  // node_modules/ethers/lib.esm/crypto/keccak.js
  function keccak256(_data5) {
    const data = getBytes(_data5, "data");
    return hexlify(__keccak256(data));
  }
  var locked3, _keccak256, __keccak256;
  var init_keccak = __esm({
    "node_modules/ethers/lib.esm/crypto/keccak.js"() {
      init_sha3();
      init_utils();
      locked3 = false;
      _keccak256 = function(data) {
        return keccak_256(data);
      };
      __keccak256 = _keccak256;
      keccak256._ = _keccak256;
      keccak256.lock = function() {
        locked3 = true;
      };
      keccak256.register = function(func) {
        if (locked3) {
          throw new TypeError("keccak256 is locked");
        }
        __keccak256 = func;
      };
      Object.freeze(keccak256);
    }
  });

  // node_modules/ethers/node_modules/@noble/hashes/esm/ripemd160.js
  function f(group, x, y, z) {
    if (group === 0)
      return x ^ y ^ z;
    else if (group === 1)
      return x & y | ~x & z;
    else if (group === 2)
      return (x | ~y) ^ z;
    else if (group === 3)
      return x & z | y & ~z;
    else
      return x ^ (y | ~z);
  }
  var Rho, Id, Pi, idxL, idxR, shifts, shiftsL, shiftsR, Kl, Kr, rotl, BUF, RIPEMD160, ripemd160;
  var init_ripemd160 = __esm({
    "node_modules/ethers/node_modules/@noble/hashes/esm/ripemd160.js"() {
      init_sha2();
      init_utils2();
      Rho = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);
      Id = /* @__PURE__ */ Uint8Array.from({ length: 16 }, (_, i) => i);
      Pi = /* @__PURE__ */ Id.map((i) => (9 * i + 5) % 16);
      idxL = [Id];
      idxR = [Pi];
      for (let i = 0; i < 4; i++)
        for (let j of [idxL, idxR])
          j.push(j[i].map((k) => Rho[k]));
      shifts = /* @__PURE__ */ [
        [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
        [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
        [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
        [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
        [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
      ].map((i) => new Uint8Array(i));
      shiftsL = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts[i][j]));
      shiftsR = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts[i][j]));
      Kl = /* @__PURE__ */ new Uint32Array([
        0,
        1518500249,
        1859775393,
        2400959708,
        2840853838
      ]);
      Kr = /* @__PURE__ */ new Uint32Array([
        1352829926,
        1548603684,
        1836072691,
        2053994217,
        0
      ]);
      rotl = (word, shift) => word << shift | word >>> 32 - shift;
      BUF = /* @__PURE__ */ new Uint32Array(16);
      RIPEMD160 = class extends SHA2 {
        constructor() {
          super(64, 20, 8, true);
          this.h0 = 1732584193 | 0;
          this.h1 = 4023233417 | 0;
          this.h2 = 2562383102 | 0;
          this.h3 = 271733878 | 0;
          this.h4 = 3285377520 | 0;
        }
        get() {
          const { h0, h1, h2, h3, h4 } = this;
          return [h0, h1, h2, h3, h4];
        }
        set(h0, h1, h2, h3, h4) {
          this.h0 = h0 | 0;
          this.h1 = h1 | 0;
          this.h2 = h2 | 0;
          this.h3 = h3 | 0;
          this.h4 = h4 | 0;
        }
        process(view, offset2) {
          for (let i = 0; i < 16; i++, offset2 += 4)
            BUF[i] = view.getUint32(offset2, true);
          let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;
          for (let group = 0; group < 5; group++) {
            const rGroup = 4 - group;
            const hbl = Kl[group], hbr = Kr[group];
            const rl = idxL[group], rr = idxR[group];
            const sl = shiftsL[group], sr = shiftsR[group];
            for (let i = 0; i < 16; i++) {
              const tl = rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el | 0;
              al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl;
            }
            for (let i = 0; i < 16; i++) {
              const tr = rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er | 0;
              ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr;
            }
          }
          this.set(this.h1 + cl + dr | 0, this.h2 + dl + er | 0, this.h3 + el + ar | 0, this.h4 + al + br | 0, this.h0 + bl + cr | 0);
        }
        roundClean() {
          BUF.fill(0);
        }
        destroy() {
          this.destroyed = true;
          this.buffer.fill(0);
          this.set(0, 0, 0, 0, 0);
        }
      };
      ripemd160 = /* @__PURE__ */ wrapConstructor(() => new RIPEMD160());
    }
  });

  // node_modules/ethers/lib.esm/crypto/ripemd160.js
  function ripemd1602(_data5) {
    const data = getBytes(_data5, "data");
    return hexlify(__ripemd160(data));
  }
  var locked4, _ripemd160, __ripemd160;
  var init_ripemd1602 = __esm({
    "node_modules/ethers/lib.esm/crypto/ripemd160.js"() {
      init_ripemd160();
      init_utils();
      locked4 = false;
      _ripemd160 = function(data) {
        return ripemd160(data);
      };
      __ripemd160 = _ripemd160;
      ripemd1602._ = _ripemd160;
      ripemd1602.lock = function() {
        locked4 = true;
      };
      ripemd1602.register = function(func) {
        if (locked4) {
          throw new TypeError("ripemd160 is locked");
        }
        __ripemd160 = func;
      };
      Object.freeze(ripemd1602);
    }
  });

  // node_modules/ethers/lib.esm/crypto/pbkdf2.js
  function pbkdf22(_password, _salt, iterations, keylen, algo) {
    const password = getBytes(_password, "password");
    const salt = getBytes(_salt, "salt");
    return hexlify(__pbkdf2(password, salt, iterations, keylen, algo));
  }
  var locked5, _pbkdf2, __pbkdf2;
  var init_pbkdf22 = __esm({
    "node_modules/ethers/lib.esm/crypto/pbkdf2.js"() {
      init_crypto_browser();
      init_utils();
      locked5 = false;
      _pbkdf2 = function(password, salt, iterations, keylen, algo) {
        return pbkdf2Sync(password, salt, iterations, keylen, algo);
      };
      __pbkdf2 = _pbkdf2;
      pbkdf22._ = _pbkdf2;
      pbkdf22.lock = function() {
        locked5 = true;
      };
      pbkdf22.register = function(func) {
        if (locked5) {
          throw new Error("pbkdf2 is locked");
        }
        __pbkdf2 = func;
      };
      Object.freeze(pbkdf22);
    }
  });

  // node_modules/ethers/lib.esm/crypto/random.js
  function randomBytes3(length) {
    return __randomBytes(length);
  }
  var locked6, _randomBytes, __randomBytes;
  var init_random = __esm({
    "node_modules/ethers/lib.esm/crypto/random.js"() {
      init_crypto_browser();
      locked6 = false;
      _randomBytes = function(length) {
        return new Uint8Array(randomBytes2(length));
      };
      __randomBytes = _randomBytes;
      randomBytes3._ = _randomBytes;
      randomBytes3.lock = function() {
        locked6 = true;
      };
      randomBytes3.register = function(func) {
        if (locked6) {
          throw new Error("randomBytes is locked");
        }
        __randomBytes = func;
      };
      Object.freeze(randomBytes3);
    }
  });

  // node_modules/ethers/node_modules/@noble/hashes/esm/scrypt.js
  function XorAndSalsa(prev, pi, input, ii, out, oi) {
    let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];
    let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];
    let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];
    let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];
    let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];
    let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];
    let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];
    let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];
    let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;
    for (let i = 0; i < 8; i += 2) {
      x04 ^= rotl2(x00 + x12 | 0, 7);
      x08 ^= rotl2(x04 + x00 | 0, 9);
      x12 ^= rotl2(x08 + x04 | 0, 13);
      x00 ^= rotl2(x12 + x08 | 0, 18);
      x09 ^= rotl2(x05 + x01 | 0, 7);
      x13 ^= rotl2(x09 + x05 | 0, 9);
      x01 ^= rotl2(x13 + x09 | 0, 13);
      x05 ^= rotl2(x01 + x13 | 0, 18);
      x14 ^= rotl2(x10 + x06 | 0, 7);
      x02 ^= rotl2(x14 + x10 | 0, 9);
      x06 ^= rotl2(x02 + x14 | 0, 13);
      x10 ^= rotl2(x06 + x02 | 0, 18);
      x03 ^= rotl2(x15 + x11 | 0, 7);
      x07 ^= rotl2(x03 + x15 | 0, 9);
      x11 ^= rotl2(x07 + x03 | 0, 13);
      x15 ^= rotl2(x11 + x07 | 0, 18);
      x01 ^= rotl2(x00 + x03 | 0, 7);
      x02 ^= rotl2(x01 + x00 | 0, 9);
      x03 ^= rotl2(x02 + x01 | 0, 13);
      x00 ^= rotl2(x03 + x02 | 0, 18);
      x06 ^= rotl2(x05 + x04 | 0, 7);
      x07 ^= rotl2(x06 + x05 | 0, 9);
      x04 ^= rotl2(x07 + x06 | 0, 13);
      x05 ^= rotl2(x04 + x07 | 0, 18);
      x11 ^= rotl2(x10 + x09 | 0, 7);
      x08 ^= rotl2(x11 + x10 | 0, 9);
      x09 ^= rotl2(x08 + x11 | 0, 13);
      x10 ^= rotl2(x09 + x08 | 0, 18);
      x12 ^= rotl2(x15 + x14 | 0, 7);
      x13 ^= rotl2(x12 + x15 | 0, 9);
      x14 ^= rotl2(x13 + x12 | 0, 13);
      x15 ^= rotl2(x14 + x13 | 0, 18);
    }
    out[oi++] = y00 + x00 | 0;
    out[oi++] = y01 + x01 | 0;
    out[oi++] = y02 + x02 | 0;
    out[oi++] = y03 + x03 | 0;
    out[oi++] = y04 + x04 | 0;
    out[oi++] = y05 + x05 | 0;
    out[oi++] = y06 + x06 | 0;
    out[oi++] = y07 + x07 | 0;
    out[oi++] = y08 + x08 | 0;
    out[oi++] = y09 + x09 | 0;
    out[oi++] = y10 + x10 | 0;
    out[oi++] = y11 + x11 | 0;
    out[oi++] = y12 + x12 | 0;
    out[oi++] = y13 + x13 | 0;
    out[oi++] = y14 + x14 | 0;
    out[oi++] = y15 + x15 | 0;
  }
  function BlockMix(input, ii, out, oi, r) {
    let head = oi + 0;
    let tail = oi + 16 * r;
    for (let i = 0; i < 16; i++)
      out[tail + i] = input[ii + (2 * r - 1) * 16 + i];
    for (let i = 0; i < r; i++, head += 16, ii += 16) {
      XorAndSalsa(out, tail, input, ii, out, head);
      if (i > 0)
        tail += 16;
      XorAndSalsa(out, head, input, ii += 16, out, tail);
    }
  }
  function scryptInit(password, salt, _opts) {
    const opts = checkOpts({
      dkLen: 32,
      asyncTick: 10,
      maxmem: 1024 ** 3 + 1024
    }, _opts);
    const { N: N3, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;
    number(N3);
    number(r);
    number(p);
    number(dkLen);
    number(asyncTick);
    number(maxmem);
    if (onProgress !== void 0 && typeof onProgress !== "function")
      throw new Error("progressCb should be function");
    const blockSize = 128 * r;
    const blockSize32 = blockSize / 4;
    if (N3 <= 1 || (N3 & N3 - 1) !== 0 || N3 >= 2 ** (blockSize / 8) || N3 > 2 ** 32) {
      throw new Error("Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32");
    }
    if (p < 0 || p > (2 ** 32 - 1) * 32 / blockSize) {
      throw new Error("Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)");
    }
    if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {
      throw new Error("Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32");
    }
    const memUsed = blockSize * (N3 + p);
    if (memUsed > maxmem) {
      throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);
    }
    const B = pbkdf2(sha256, password, salt, { c: 1, dkLen: blockSize * p });
    const B32 = u32(B);
    const V = u32(new Uint8Array(blockSize * N3));
    const tmp = u32(new Uint8Array(blockSize));
    let blockMixCb = () => {
    };
    if (onProgress) {
      const totalBlockMix = 2 * N3 * p;
      const callbackPer = Math.max(Math.floor(totalBlockMix / 1e4), 1);
      let blockMixCnt = 0;
      blockMixCb = () => {
        blockMixCnt++;
        if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))
          onProgress(blockMixCnt / totalBlockMix);
      };
    }
    return { N: N3, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };
  }
  function scryptOutput(password, dkLen, B, V, tmp) {
    const res = pbkdf2(sha256, password, B, { c: 1, dkLen });
    B.fill(0);
    V.fill(0);
    tmp.fill(0);
    return res;
  }
  function scrypt(password, salt, opts) {
    const { N: N3, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);
    for (let pi = 0; pi < p; pi++) {
      const Pi2 = blockSize32 * pi;
      for (let i = 0; i < blockSize32; i++)
        V[i] = B32[Pi2 + i];
      for (let i = 0, pos = 0; i < N3 - 1; i++) {
        BlockMix(V, pos, V, pos += blockSize32, r);
        blockMixCb();
      }
      BlockMix(V, (N3 - 1) * blockSize32, B32, Pi2, r);
      blockMixCb();
      for (let i = 0; i < N3; i++) {
        const j = B32[Pi2 + blockSize32 - 16] % N3;
        for (let k = 0; k < blockSize32; k++)
          tmp[k] = B32[Pi2 + k] ^ V[j * blockSize32 + k];
        BlockMix(tmp, 0, B32, Pi2, r);
        blockMixCb();
      }
    }
    return scryptOutput(password, dkLen, B, V, tmp);
  }
  async function scryptAsync(password, salt, opts) {
    const { N: N3, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(password, salt, opts);
    for (let pi = 0; pi < p; pi++) {
      const Pi2 = blockSize32 * pi;
      for (let i = 0; i < blockSize32; i++)
        V[i] = B32[Pi2 + i];
      let pos = 0;
      await asyncLoop(N3 - 1, asyncTick, () => {
        BlockMix(V, pos, V, pos += blockSize32, r);
        blockMixCb();
      });
      BlockMix(V, (N3 - 1) * blockSize32, B32, Pi2, r);
      blockMixCb();
      await asyncLoop(N3, asyncTick, () => {
        const j = B32[Pi2 + blockSize32 - 16] % N3;
        for (let k = 0; k < blockSize32; k++)
          tmp[k] = B32[Pi2 + k] ^ V[j * blockSize32 + k];
        BlockMix(tmp, 0, B32, Pi2, r);
        blockMixCb();
      });
    }
    return scryptOutput(password, dkLen, B, V, tmp);
  }
  var rotl2;
  var init_scrypt = __esm({
    "node_modules/ethers/node_modules/@noble/hashes/esm/scrypt.js"() {
      init_assert();
      init_sha256();
      init_pbkdf2();
      init_utils2();
      rotl2 = (a, b2) => a << b2 | a >>> 32 - b2;
    }
  });

  // node_modules/ethers/lib.esm/crypto/scrypt.js
  async function scrypt2(_passwd, _salt, N3, r, p, dkLen, progress) {
    const passwd = getBytes(_passwd, "passwd");
    const salt = getBytes(_salt, "salt");
    return hexlify(await __scryptAsync(passwd, salt, N3, r, p, dkLen, progress));
  }
  function scryptSync(_passwd, _salt, N3, r, p, dkLen) {
    const passwd = getBytes(_passwd, "passwd");
    const salt = getBytes(_salt, "salt");
    return hexlify(__scryptSync(passwd, salt, N3, r, p, dkLen));
  }
  var lockedSync, lockedAsync, _scryptAsync, _scryptSync, __scryptAsync, __scryptSync;
  var init_scrypt2 = __esm({
    "node_modules/ethers/lib.esm/crypto/scrypt.js"() {
      init_scrypt();
      init_utils();
      lockedSync = false;
      lockedAsync = false;
      _scryptAsync = async function(passwd, salt, N3, r, p, dkLen, onProgress) {
        return await scryptAsync(passwd, salt, { N: N3, r, p, dkLen, onProgress });
      };
      _scryptSync = function(passwd, salt, N3, r, p, dkLen) {
        return scrypt(passwd, salt, { N: N3, r, p, dkLen });
      };
      __scryptAsync = _scryptAsync;
      __scryptSync = _scryptSync;
      scrypt2._ = _scryptAsync;
      scrypt2.lock = function() {
        lockedAsync = true;
      };
      scrypt2.register = function(func) {
        if (lockedAsync) {
          throw new Error("scrypt is locked");
        }
        __scryptAsync = func;
      };
      Object.freeze(scrypt2);
      scryptSync._ = _scryptSync;
      scryptSync.lock = function() {
        lockedSync = true;
      };
      scryptSync.register = function(func) {
        if (lockedSync) {
          throw new Error("scryptSync is locked");
        }
        __scryptSync = func;
      };
      Object.freeze(scryptSync);
    }
  });

  // node_modules/ethers/lib.esm/crypto/sha2.js
  function sha2562(_data5) {
    const data = getBytes(_data5, "data");
    return hexlify(__sha256(data));
  }
  function sha5122(_data5) {
    const data = getBytes(_data5, "data");
    return hexlify(__sha512(data));
  }
  var _sha256, _sha512, __sha256, __sha512, locked256, locked512;
  var init_sha22 = __esm({
    "node_modules/ethers/lib.esm/crypto/sha2.js"() {
      init_crypto_browser();
      init_utils();
      _sha256 = function(data) {
        return createHash("sha256").update(data).digest();
      };
      _sha512 = function(data) {
        return createHash("sha512").update(data).digest();
      };
      __sha256 = _sha256;
      __sha512 = _sha512;
      locked256 = false;
      locked512 = false;
      sha2562._ = _sha256;
      sha2562.lock = function() {
        locked256 = true;
      };
      sha2562.register = function(func) {
        if (locked256) {
          throw new Error("sha256 is locked");
        }
        __sha256 = func;
      };
      Object.freeze(sha2562);
      sha5122._ = _sha512;
      sha5122.lock = function() {
        locked512 = true;
      };
      sha5122.register = function(func) {
        if (locked512) {
          throw new Error("sha512 is locked");
        }
        __sha512 = func;
      };
      Object.freeze(sha2562);
    }
  });

  // node_modules/ethers/node_modules/@noble/curves/esm/abstract/utils.js
  var utils_exports = {};
  __export(utils_exports, {
    bitGet: () => bitGet,
    bitLen: () => bitLen,
    bitMask: () => bitMask,
    bitSet: () => bitSet,
    bytesToHex: () => bytesToHex,
    bytesToNumberBE: () => bytesToNumberBE,
    bytesToNumberLE: () => bytesToNumberLE,
    concatBytes: () => concatBytes2,
    createHmacDrbg: () => createHmacDrbg,
    ensureBytes: () => ensureBytes,
    equalBytes: () => equalBytes,
    hexToBytes: () => hexToBytes,
    hexToNumber: () => hexToNumber,
    numberToBytesBE: () => numberToBytesBE,
    numberToBytesLE: () => numberToBytesLE,
    numberToHexUnpadded: () => numberToHexUnpadded,
    numberToVarBytesBE: () => numberToVarBytesBE,
    utf8ToBytes: () => utf8ToBytes2,
    validateObject: () => validateObject
  });
  function bytesToHex(bytes2) {
    if (!u8a2(bytes2))
      throw new Error("Uint8Array expected");
    let hex = "";
    for (let i = 0; i < bytes2.length; i++) {
      hex += hexes[bytes2[i]];
    }
    return hex;
  }
  function numberToHexUnpadded(num) {
    const hex = num.toString(16);
    return hex.length & 1 ? `0${hex}` : hex;
  }
  function hexToNumber(hex) {
    if (typeof hex !== "string")
      throw new Error("hex string expected, got " + typeof hex);
    return BigInt(hex === "" ? "0" : `0x${hex}`);
  }
  function hexToBytes(hex) {
    if (typeof hex !== "string")
      throw new Error("hex string expected, got " + typeof hex);
    const len = hex.length;
    if (len % 2)
      throw new Error("padded hex string expected, got unpadded hex of length " + len);
    const array2 = new Uint8Array(len / 2);
    for (let i = 0; i < array2.length; i++) {
      const j = i * 2;
      const hexByte = hex.slice(j, j + 2);
      const byte = Number.parseInt(hexByte, 16);
      if (Number.isNaN(byte) || byte < 0)
        throw new Error("Invalid byte sequence");
      array2[i] = byte;
    }
    return array2;
  }
  function bytesToNumberBE(bytes2) {
    return hexToNumber(bytesToHex(bytes2));
  }
  function bytesToNumberLE(bytes2) {
    if (!u8a2(bytes2))
      throw new Error("Uint8Array expected");
    return hexToNumber(bytesToHex(Uint8Array.from(bytes2).reverse()));
  }
  function numberToBytesBE(n2, len) {
    return hexToBytes(n2.toString(16).padStart(len * 2, "0"));
  }
  function numberToBytesLE(n2, len) {
    return numberToBytesBE(n2, len).reverse();
  }
  function numberToVarBytesBE(n2) {
    return hexToBytes(numberToHexUnpadded(n2));
  }
  function ensureBytes(title, hex, expectedLength) {
    let res;
    if (typeof hex === "string") {
      try {
        res = hexToBytes(hex);
      } catch (e) {
        throw new Error(`${title} must be valid hex string, got "${hex}". Cause: ${e}`);
      }
    } else if (u8a2(hex)) {
      res = Uint8Array.from(hex);
    } else {
      throw new Error(`${title} must be hex string or Uint8Array`);
    }
    const len = res.length;
    if (typeof expectedLength === "number" && len !== expectedLength)
      throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
    return res;
  }
  function concatBytes2(...arrays) {
    const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
    let pad = 0;
    arrays.forEach((a) => {
      if (!u8a2(a))
        throw new Error("Uint8Array expected");
      r.set(a, pad);
      pad += a.length;
    });
    return r;
  }
  function equalBytes(b1, b2) {
    if (b1.length !== b2.length)
      return false;
    for (let i = 0; i < b1.length; i++)
      if (b1[i] !== b2[i])
        return false;
    return true;
  }
  function utf8ToBytes2(str) {
    if (typeof str !== "string")
      throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
    return new Uint8Array(new TextEncoder().encode(str));
  }
  function bitLen(n2) {
    let len;
    for (len = 0; n2 > _0n2; n2 >>= _1n2, len += 1)
      ;
    return len;
  }
  function bitGet(n2, pos) {
    return n2 >> BigInt(pos) & _1n2;
  }
  function createHmacDrbg(hashLen, qByteLen, hmacFn) {
    if (typeof hashLen !== "number" || hashLen < 2)
      throw new Error("hashLen must be a number");
    if (typeof qByteLen !== "number" || qByteLen < 2)
      throw new Error("qByteLen must be a number");
    if (typeof hmacFn !== "function")
      throw new Error("hmacFn must be a function");
    let v = u8n(hashLen);
    let k = u8n(hashLen);
    let i = 0;
    const reset = () => {
      v.fill(1);
      k.fill(0);
      i = 0;
    };
    const h = (...b2) => hmacFn(k, v, ...b2);
    const reseed = (seed = u8n()) => {
      k = h(u8fr([0]), seed);
      v = h();
      if (seed.length === 0)
        return;
      k = h(u8fr([1]), seed);
      v = h();
    };
    const gen3 = () => {
      if (i++ >= 1e3)
        throw new Error("drbg: tried 1000 values");
      let len = 0;
      const out = [];
      while (len < qByteLen) {
        v = h();
        const sl = v.slice();
        out.push(sl);
        len += v.length;
      }
      return concatBytes2(...out);
    };
    const genUntil = (seed, pred) => {
      reset();
      reseed(seed);
      let res = void 0;
      while (!(res = pred(gen3())))
        reseed();
      reset();
      return res;
    };
    return genUntil;
  }
  function validateObject(object2, validators, optValidators = {}) {
    const checkField = (fieldName, type2, isOptional) => {
      const checkVal = validatorFns[type2];
      if (typeof checkVal !== "function")
        throw new Error(`Invalid validator "${type2}", expected function`);
      const val = object2[fieldName];
      if (isOptional && val === void 0)
        return;
      if (!checkVal(val, object2)) {
        throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type2}`);
      }
    };
    for (const [fieldName, type2] of Object.entries(validators))
      checkField(fieldName, type2, false);
    for (const [fieldName, type2] of Object.entries(optValidators))
      checkField(fieldName, type2, true);
    return object2;
  }
  var _0n2, _1n2, _2n2, u8a2, hexes, bitSet, bitMask, u8n, u8fr, validatorFns;
  var init_utils3 = __esm({
    "node_modules/ethers/node_modules/@noble/curves/esm/abstract/utils.js"() {
      _0n2 = BigInt(0);
      _1n2 = BigInt(1);
      _2n2 = BigInt(2);
      u8a2 = (a) => a instanceof Uint8Array;
      hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
      bitSet = (n2, pos, value) => {
        return n2 | (value ? _1n2 : _0n2) << BigInt(pos);
      };
      bitMask = (n2) => (_2n2 << BigInt(n2 - 1)) - _1n2;
      u8n = (data) => new Uint8Array(data);
      u8fr = (arr) => Uint8Array.from(arr);
      validatorFns = {
        bigint: (val) => typeof val === "bigint",
        function: (val) => typeof val === "function",
        boolean: (val) => typeof val === "boolean",
        string: (val) => typeof val === "string",
        stringOrUint8Array: (val) => typeof val === "string" || val instanceof Uint8Array,
        isSafeInteger: (val) => Number.isSafeInteger(val),
        array: (val) => Array.isArray(val),
        field: (val, object2) => object2.Fp.isValid(val),
        hash: (val) => typeof val === "function" && Number.isSafeInteger(val.outputLen)
      };
    }
  });

  // node_modules/ethers/node_modules/@noble/curves/esm/abstract/modular.js
  function mod(a, b2) {
    const result = a % b2;
    return result >= _0n3 ? result : b2 + result;
  }
  function pow(num, power, modulo) {
    if (modulo <= _0n3 || power < _0n3)
      throw new Error("Expected power/modulo > 0");
    if (modulo === _1n3)
      return _0n3;
    let res = _1n3;
    while (power > _0n3) {
      if (power & _1n3)
        res = res * num % modulo;
      num = num * num % modulo;
      power >>= _1n3;
    }
    return res;
  }
  function pow2(x, power, modulo) {
    let res = x;
    while (power-- > _0n3) {
      res *= res;
      res %= modulo;
    }
    return res;
  }
  function invert(number3, modulo) {
    if (number3 === _0n3 || modulo <= _0n3) {
      throw new Error(`invert: expected positive integers, got n=${number3} mod=${modulo}`);
    }
    let a = mod(number3, modulo);
    let b2 = modulo;
    let x = _0n3, y = _1n3, u = _1n3, v = _0n3;
    while (a !== _0n3) {
      const q = b2 / a;
      const r = b2 % a;
      const m = x - u * q;
      const n2 = y - v * q;
      b2 = a, a = r, x = u, y = v, u = m, v = n2;
    }
    const gcd = b2;
    if (gcd !== _1n3)
      throw new Error("invert: does not exist");
    return mod(x, modulo);
  }
  function tonelliShanks(P) {
    const legendreC = (P - _1n3) / _2n3;
    let Q, S2, Z;
    for (Q = P - _1n3, S2 = 0; Q % _2n3 === _0n3; Q /= _2n3, S2++)
      ;
    for (Z = _2n3; Z < P && pow(Z, legendreC, P) !== P - _1n3; Z++)
      ;
    if (S2 === 1) {
      const p1div4 = (P + _1n3) / _4n;
      return function tonelliFast(Fp3, n2) {
        const root = Fp3.pow(n2, p1div4);
        if (!Fp3.eql(Fp3.sqr(root), n2))
          throw new Error("Cannot find square root");
        return root;
      };
    }
    const Q1div2 = (Q + _1n3) / _2n3;
    return function tonelliSlow(Fp3, n2) {
      if (Fp3.pow(n2, legendreC) === Fp3.neg(Fp3.ONE))
        throw new Error("Cannot find square root");
      let r = S2;
      let g = Fp3.pow(Fp3.mul(Fp3.ONE, Z), Q);
      let x = Fp3.pow(n2, Q1div2);
      let b2 = Fp3.pow(n2, Q);
      while (!Fp3.eql(b2, Fp3.ONE)) {
        if (Fp3.eql(b2, Fp3.ZERO))
          return Fp3.ZERO;
        let m = 1;
        for (let t2 = Fp3.sqr(b2); m < r; m++) {
          if (Fp3.eql(t2, Fp3.ONE))
            break;
          t2 = Fp3.sqr(t2);
        }
        const ge = Fp3.pow(g, _1n3 << BigInt(r - m - 1));
        g = Fp3.sqr(ge);
        x = Fp3.mul(x, ge);
        b2 = Fp3.mul(b2, g);
        r = m;
      }
      return x;
    };
  }
  function FpSqrt(P) {
    if (P % _4n === _3n) {
      const p1div4 = (P + _1n3) / _4n;
      return function sqrt3mod4(Fp3, n2) {
        const root = Fp3.pow(n2, p1div4);
        if (!Fp3.eql(Fp3.sqr(root), n2))
          throw new Error("Cannot find square root");
        return root;
      };
    }
    if (P % _8n === _5n) {
      const c1 = (P - _5n) / _8n;
      return function sqrt5mod8(Fp3, n2) {
        const n22 = Fp3.mul(n2, _2n3);
        const v = Fp3.pow(n22, c1);
        const nv = Fp3.mul(n2, v);
        const i = Fp3.mul(Fp3.mul(nv, _2n3), v);
        const root = Fp3.mul(nv, Fp3.sub(i, Fp3.ONE));
        if (!Fp3.eql(Fp3.sqr(root), n2))
          throw new Error("Cannot find square root");
        return root;
      };
    }
    if (P % _16n === _9n) {
    }
    return tonelliShanks(P);
  }
  function validateField(field) {
    const initial = {
      ORDER: "bigint",
      MASK: "bigint",
      BYTES: "isSafeInteger",
      BITS: "isSafeInteger"
    };
    const opts = FIELD_FIELDS.reduce((map, val) => {
      map[val] = "function";
      return map;
    }, initial);
    return validateObject(field, opts);
  }
  function FpPow(f3, num, power) {
    if (power < _0n3)
      throw new Error("Expected power > 0");
    if (power === _0n3)
      return f3.ONE;
    if (power === _1n3)
      return num;
    let p = f3.ONE;
    let d = num;
    while (power > _0n3) {
      if (power & _1n3)
        p = f3.mul(p, d);
      d = f3.sqr(d);
      power >>= _1n3;
    }
    return p;
  }
  function FpInvertBatch(f3, nums) {
    const tmp = new Array(nums.length);
    const lastMultiplied = nums.reduce((acc, num, i) => {
      if (f3.is0(num))
        return acc;
      tmp[i] = acc;
      return f3.mul(acc, num);
    }, f3.ONE);
    const inverted = f3.inv(lastMultiplied);
    nums.reduceRight((acc, num, i) => {
      if (f3.is0(num))
        return acc;
      tmp[i] = f3.mul(acc, tmp[i]);
      return f3.mul(acc, num);
    }, inverted);
    return tmp;
  }
  function nLength(n2, nBitLength) {
    const _nBitLength = nBitLength !== void 0 ? nBitLength : n2.toString(2).length;
    const nByteLength = Math.ceil(_nBitLength / 8);
    return { nBitLength: _nBitLength, nByteLength };
  }
  function Field(ORDER, bitLen3, isLE3 = false, redef = {}) {
    if (ORDER <= _0n3)
      throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);
    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen3);
    if (BYTES > 2048)
      throw new Error("Field lengths over 2048 bytes are not supported");
    const sqrtP = FpSqrt(ORDER);
    const f3 = Object.freeze({
      ORDER,
      BITS,
      BYTES,
      MASK: bitMask(BITS),
      ZERO: _0n3,
      ONE: _1n3,
      create: (num) => mod(num, ORDER),
      isValid: (num) => {
        if (typeof num !== "bigint")
          throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
        return _0n3 <= num && num < ORDER;
      },
      is0: (num) => num === _0n3,
      isOdd: (num) => (num & _1n3) === _1n3,
      neg: (num) => mod(-num, ORDER),
      eql: (lhs, rhs) => lhs === rhs,
      sqr: (num) => mod(num * num, ORDER),
      add: (lhs, rhs) => mod(lhs + rhs, ORDER),
      sub: (lhs, rhs) => mod(lhs - rhs, ORDER),
      mul: (lhs, rhs) => mod(lhs * rhs, ORDER),
      pow: (num, power) => FpPow(f3, num, power),
      div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),
      // Same as above, but doesn't normalize
      sqrN: (num) => num * num,
      addN: (lhs, rhs) => lhs + rhs,
      subN: (lhs, rhs) => lhs - rhs,
      mulN: (lhs, rhs) => lhs * rhs,
      inv: (num) => invert(num, ORDER),
      sqrt: redef.sqrt || ((n2) => sqrtP(f3, n2)),
      invertBatch: (lst) => FpInvertBatch(f3, lst),
      // TODO: do we really need constant cmov?
      // We don't have const-time bigints anyway, so probably will be not very useful
      cmov: (a, b2, c) => c ? b2 : a,
      toBytes: (num) => isLE3 ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES),
      fromBytes: (bytes2) => {
        if (bytes2.length !== BYTES)
          throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes2.length}`);
        return isLE3 ? bytesToNumberLE(bytes2) : bytesToNumberBE(bytes2);
      }
    });
    return Object.freeze(f3);
  }
  function getFieldBytesLength(fieldOrder) {
    if (typeof fieldOrder !== "bigint")
      throw new Error("field order must be bigint");
    const bitLength = fieldOrder.toString(2).length;
    return Math.ceil(bitLength / 8);
  }
  function getMinHashLength(fieldOrder) {
    const length = getFieldBytesLength(fieldOrder);
    return length + Math.ceil(length / 2);
  }
  function mapHashToField(key, fieldOrder, isLE3 = false) {
    const len = key.length;
    const fieldLen = getFieldBytesLength(fieldOrder);
    const minLen = getMinHashLength(fieldOrder);
    if (len < 16 || len < minLen || len > 1024)
      throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);
    const num = isLE3 ? bytesToNumberBE(key) : bytesToNumberLE(key);
    const reduced = mod(num, fieldOrder - _1n3) + _1n3;
    return isLE3 ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);
  }
  var _0n3, _1n3, _2n3, _3n, _4n, _5n, _8n, _9n, _16n, FIELD_FIELDS;
  var init_modular = __esm({
    "node_modules/ethers/node_modules/@noble/curves/esm/abstract/modular.js"() {
      init_utils3();
      _0n3 = BigInt(0);
      _1n3 = BigInt(1);
      _2n3 = BigInt(2);
      _3n = BigInt(3);
      _4n = BigInt(4);
      _5n = BigInt(5);
      _8n = BigInt(8);
      _9n = BigInt(9);
      _16n = BigInt(16);
      FIELD_FIELDS = [
        "create",
        "isValid",
        "is0",
        "neg",
        "inv",
        "sqrt",
        "sqr",
        "eql",
        "add",
        "sub",
        "mul",
        "pow",
        "div",
        "addN",
        "subN",
        "mulN",
        "sqrN"
      ];
    }
  });

  // node_modules/ethers/node_modules/@noble/curves/esm/abstract/curve.js
  function wNAF(c, bits) {
    const constTimeNegate2 = (condition, item) => {
      const neg = item.negate();
      return condition ? neg : item;
    };
    const opts = (W) => {
      const windows = Math.ceil(bits / W) + 1;
      const windowSize = 2 ** (W - 1);
      return { windows, windowSize };
    };
    return {
      constTimeNegate: constTimeNegate2,
      // non-const time multiplication ladder
      unsafeLadder(elm, n2) {
        let p = c.ZERO;
        let d = elm;
        while (n2 > _0n4) {
          if (n2 & _1n4)
            p = p.add(d);
          d = d.double();
          n2 >>= _1n4;
        }
        return p;
      },
      /**
       * Creates a wNAF precomputation window. Used for caching.
       * Default window size is set by `utils.precompute()` and is equal to 8.
       * Number of precomputed points depends on the curve size:
       * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
       * - 𝑊 is the window size
       * - 𝑛 is the bitlength of the curve order.
       * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
       * @returns precomputed point tables flattened to a single array
       */
      precomputeWindow(elm, W) {
        const { windows, windowSize } = opts(W);
        const points = [];
        let p = elm;
        let base = p;
        for (let window2 = 0; window2 < windows; window2++) {
          base = p;
          points.push(base);
          for (let i = 1; i < windowSize; i++) {
            base = base.add(p);
            points.push(base);
          }
          p = base.double();
        }
        return points;
      },
      /**
       * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
       * @param W window size
       * @param precomputes precomputed tables
       * @param n scalar (we don't check here, but should be less than curve order)
       * @returns real and fake (for const-time) points
       */
      wNAF(W, precomputes, n2) {
        const { windows, windowSize } = opts(W);
        let p = c.ZERO;
        let f3 = c.BASE;
        const mask3 = BigInt(2 ** W - 1);
        const maxNumber = 2 ** W;
        const shiftBy = BigInt(W);
        for (let window2 = 0; window2 < windows; window2++) {
          const offset2 = window2 * windowSize;
          let wbits = Number(n2 & mask3);
          n2 >>= shiftBy;
          if (wbits > windowSize) {
            wbits -= maxNumber;
            n2 += _1n4;
          }
          const offset1 = offset2;
          const offset22 = offset2 + Math.abs(wbits) - 1;
          const cond1 = window2 % 2 !== 0;
          const cond2 = wbits < 0;
          if (wbits === 0) {
            f3 = f3.add(constTimeNegate2(cond1, precomputes[offset1]));
          } else {
            p = p.add(constTimeNegate2(cond2, precomputes[offset22]));
          }
        }
        return { p, f: f3 };
      },
      wNAFCached(P, precomputesMap, n2, transform) {
        const W = P._WINDOW_SIZE || 1;
        let comp = precomputesMap.get(P);
        if (!comp) {
          comp = this.precomputeWindow(P, W);
          if (W !== 1) {
            precomputesMap.set(P, transform(comp));
          }
        }
        return this.wNAF(W, comp, n2);
      }
    };
  }
  function validateBasic(curve) {
    validateField(curve.Fp);
    validateObject(curve, {
      n: "bigint",
      h: "bigint",
      Gx: "field",
      Gy: "field"
    }, {
      nBitLength: "isSafeInteger",
      nByteLength: "isSafeInteger"
    });
    return Object.freeze({
      ...nLength(curve.n, curve.nBitLength),
      ...curve,
      ...{ p: curve.Fp.ORDER }
    });
  }
  var _0n4, _1n4;
  var init_curve = __esm({
    "node_modules/ethers/node_modules/@noble/curves/esm/abstract/curve.js"() {
      init_modular();
      init_utils3();
      _0n4 = BigInt(0);
      _1n4 = BigInt(1);
    }
  });

  // node_modules/ethers/node_modules/@noble/curves/esm/abstract/weierstrass.js
  function validatePointOpts(curve) {
    const opts = validateBasic(curve);
    validateObject(opts, {
      a: "field",
      b: "field"
    }, {
      allowedPrivateKeyLengths: "array",
      wrapPrivateKey: "boolean",
      isTorsionFree: "function",
      clearCofactor: "function",
      allowInfinityPoint: "boolean",
      fromBytes: "function",
      toBytes: "function"
    });
    const { endo, Fp: Fp3, a } = opts;
    if (endo) {
      if (!Fp3.eql(a, Fp3.ZERO)) {
        throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
      }
      if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") {
        throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
      }
    }
    return Object.freeze({ ...opts });
  }
  function weierstrassPoints(opts) {
    const CURVE = validatePointOpts(opts);
    const { Fp: Fp3 } = CURVE;
    const toBytes3 = CURVE.toBytes || ((_c, point, _isCompressed) => {
      const a = point.toAffine();
      return concatBytes2(Uint8Array.from([4]), Fp3.toBytes(a.x), Fp3.toBytes(a.y));
    });
    const fromBytes = CURVE.fromBytes || ((bytes2) => {
      const tail = bytes2.subarray(1);
      const x = Fp3.fromBytes(tail.subarray(0, Fp3.BYTES));
      const y = Fp3.fromBytes(tail.subarray(Fp3.BYTES, 2 * Fp3.BYTES));
      return { x, y };
    });
    function weierstrassEquation(x) {
      const { a, b: b2 } = CURVE;
      const x2 = Fp3.sqr(x);
      const x3 = Fp3.mul(x2, x);
      return Fp3.add(Fp3.add(x3, Fp3.mul(x, a)), b2);
    }
    if (!Fp3.eql(Fp3.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
      throw new Error("bad generator point: equation left != right");
    function isWithinCurveOrder(num) {
      return typeof num === "bigint" && _0n5 < num && num < CURVE.n;
    }
    function assertGE(num) {
      if (!isWithinCurveOrder(num))
        throw new Error("Expected valid bigint: 0 < bigint < curve.n");
    }
    function normPrivateKeyToScalar(key) {
      const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: n2 } = CURVE;
      if (lengths && typeof key !== "bigint") {
        if (key instanceof Uint8Array)
          key = bytesToHex(key);
        if (typeof key !== "string" || !lengths.includes(key.length))
          throw new Error("Invalid key");
        key = key.padStart(nByteLength * 2, "0");
      }
      let num;
      try {
        num = typeof key === "bigint" ? key : bytesToNumberBE(ensureBytes("private key", key, nByteLength));
      } catch (error) {
        throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
      }
      if (wrapPrivateKey)
        num = mod(num, n2);
      assertGE(num);
      return num;
    }
    const pointPrecomputes2 = /* @__PURE__ */ new Map();
    function assertPrjPoint(other) {
      if (!(other instanceof Point3))
        throw new Error("ProjectivePoint expected");
    }
    class Point3 {
      constructor(px, py, pz) {
        this.px = px;
        this.py = py;
        this.pz = pz;
        if (px == null || !Fp3.isValid(px))
          throw new Error("x required");
        if (py == null || !Fp3.isValid(py))
          throw new Error("y required");
        if (pz == null || !Fp3.isValid(pz))
          throw new Error("z required");
      }
      // Does not validate if the point is on-curve.
      // Use fromHex instead, or call assertValidity() later.
      static fromAffine(p) {
        const { x, y } = p || {};
        if (!p || !Fp3.isValid(x) || !Fp3.isValid(y))
          throw new Error("invalid affine point");
        if (p instanceof Point3)
          throw new Error("projective point not allowed");
        const is0 = (i) => Fp3.eql(i, Fp3.ZERO);
        if (is0(x) && is0(y))
          return Point3.ZERO;
        return new Point3(x, y, Fp3.ONE);
      }
      get x() {
        return this.toAffine().x;
      }
      get y() {
        return this.toAffine().y;
      }
      /**
       * Takes a bunch of Projective Points but executes only one
       * inversion on all of them. Inversion is very slow operation,
       * so this improves performance massively.
       * Optimization: converts a list of projective points to a list of identical points with Z=1.
       */
      static normalizeZ(points) {
        const toInv = Fp3.invertBatch(points.map((p) => p.pz));
        return points.map((p, i) => p.toAffine(toInv[i])).map(Point3.fromAffine);
      }
      /**
       * Converts hash string or Uint8Array to Point.
       * @param hex short/long ECDSA hex
       */
      static fromHex(hex) {
        const P = Point3.fromAffine(fromBytes(ensureBytes("pointHex", hex)));
        P.assertValidity();
        return P;
      }
      // Multiplies generator point by privateKey.
      static fromPrivateKey(privateKey) {
        return Point3.BASE.multiply(normPrivateKeyToScalar(privateKey));
      }
      // "Private method", don't use it directly
      _setWindowSize(windowSize) {
        this._WINDOW_SIZE = windowSize;
        pointPrecomputes2.delete(this);
      }
      // A point on curve is valid if it conforms to equation.
      assertValidity() {
        if (this.is0()) {
          if (CURVE.allowInfinityPoint && !Fp3.is0(this.py))
            return;
          throw new Error("bad point: ZERO");
        }
        const { x, y } = this.toAffine();
        if (!Fp3.isValid(x) || !Fp3.isValid(y))
          throw new Error("bad point: x or y not FE");
        const left = Fp3.sqr(y);
        const right = weierstrassEquation(x);
        if (!Fp3.eql(left, right))
          throw new Error("bad point: equation left != right");
        if (!this.isTorsionFree())
          throw new Error("bad point: not in prime-order subgroup");
      }
      hasEvenY() {
        const { y } = this.toAffine();
        if (Fp3.isOdd)
          return !Fp3.isOdd(y);
        throw new Error("Field doesn't support isOdd");
      }
      /**
       * Compare one point to another.
       */
      equals(other) {
        assertPrjPoint(other);
        const { px: X1, py: Y1, pz: Z1 } = this;
        const { px: X2, py: Y2, pz: Z2 } = other;
        const U12 = Fp3.eql(Fp3.mul(X1, Z2), Fp3.mul(X2, Z1));
        const U22 = Fp3.eql(Fp3.mul(Y1, Z2), Fp3.mul(Y2, Z1));
        return U12 && U22;
      }
      /**
       * Flips point to one corresponding to (x, -y) in Affine coordinates.
       */
      negate() {
        return new Point3(this.px, Fp3.neg(this.py), this.pz);
      }
      // Renes-Costello-Batina exception-free doubling formula.
      // There is 30% faster Jacobian formula, but it is not complete.
      // https://eprint.iacr.org/2015/1060, algorithm 3
      // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
      double() {
        const { a, b: b2 } = CURVE;
        const b3 = Fp3.mul(b2, _3n2);
        const { px: X1, py: Y1, pz: Z1 } = this;
        let X3 = Fp3.ZERO, Y3 = Fp3.ZERO, Z3 = Fp3.ZERO;
        let t0 = Fp3.mul(X1, X1);
        let t1 = Fp3.mul(Y1, Y1);
        let t2 = Fp3.mul(Z1, Z1);
        let t3 = Fp3.mul(X1, Y1);
        t3 = Fp3.add(t3, t3);
        Z3 = Fp3.mul(X1, Z1);
        Z3 = Fp3.add(Z3, Z3);
        X3 = Fp3.mul(a, Z3);
        Y3 = Fp3.mul(b3, t2);
        Y3 = Fp3.add(X3, Y3);
        X3 = Fp3.sub(t1, Y3);
        Y3 = Fp3.add(t1, Y3);
        Y3 = Fp3.mul(X3, Y3);
        X3 = Fp3.mul(t3, X3);
        Z3 = Fp3.mul(b3, Z3);
        t2 = Fp3.mul(a, t2);
        t3 = Fp3.sub(t0, t2);
        t3 = Fp3.mul(a, t3);
        t3 = Fp3.add(t3, Z3);
        Z3 = Fp3.add(t0, t0);
        t0 = Fp3.add(Z3, t0);
        t0 = Fp3.add(t0, t2);
        t0 = Fp3.mul(t0, t3);
        Y3 = Fp3.add(Y3, t0);
        t2 = Fp3.mul(Y1, Z1);
        t2 = Fp3.add(t2, t2);
        t0 = Fp3.mul(t2, t3);
        X3 = Fp3.sub(X3, t0);
        Z3 = Fp3.mul(t2, t1);
        Z3 = Fp3.add(Z3, Z3);
        Z3 = Fp3.add(Z3, Z3);
        return new Point3(X3, Y3, Z3);
      }
      // Renes-Costello-Batina exception-free addition formula.
      // There is 30% faster Jacobian formula, but it is not complete.
      // https://eprint.iacr.org/2015/1060, algorithm 1
      // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
      add(other) {
        assertPrjPoint(other);
        const { px: X1, py: Y1, pz: Z1 } = this;
        const { px: X2, py: Y2, pz: Z2 } = other;
        let X3 = Fp3.ZERO, Y3 = Fp3.ZERO, Z3 = Fp3.ZERO;
        const a = CURVE.a;
        const b3 = Fp3.mul(CURVE.b, _3n2);
        let t0 = Fp3.mul(X1, X2);
        let t1 = Fp3.mul(Y1, Y2);
        let t2 = Fp3.mul(Z1, Z2);
        let t3 = Fp3.add(X1, Y1);
        let t4 = Fp3.add(X2, Y2);
        t3 = Fp3.mul(t3, t4);
        t4 = Fp3.add(t0, t1);
        t3 = Fp3.sub(t3, t4);
        t4 = Fp3.add(X1, Z1);
        let t5 = Fp3.add(X2, Z2);
        t4 = Fp3.mul(t4, t5);
        t5 = Fp3.add(t0, t2);
        t4 = Fp3.sub(t4, t5);
        t5 = Fp3.add(Y1, Z1);
        X3 = Fp3.add(Y2, Z2);
        t5 = Fp3.mul(t5, X3);
        X3 = Fp3.add(t1, t2);
        t5 = Fp3.sub(t5, X3);
        Z3 = Fp3.mul(a, t4);
        X3 = Fp3.mul(b3, t2);
        Z3 = Fp3.add(X3, Z3);
        X3 = Fp3.sub(t1, Z3);
        Z3 = Fp3.add(t1, Z3);
        Y3 = Fp3.mul(X3, Z3);
        t1 = Fp3.add(t0, t0);
        t1 = Fp3.add(t1, t0);
        t2 = Fp3.mul(a, t2);
        t4 = Fp3.mul(b3, t4);
        t1 = Fp3.add(t1, t2);
        t2 = Fp3.sub(t0, t2);
        t2 = Fp3.mul(a, t2);
        t4 = Fp3.add(t4, t2);
        t0 = Fp3.mul(t1, t4);
        Y3 = Fp3.add(Y3, t0);
        t0 = Fp3.mul(t5, t4);
        X3 = Fp3.mul(t3, X3);
        X3 = Fp3.sub(X3, t0);
        t0 = Fp3.mul(t3, t1);
        Z3 = Fp3.mul(t5, Z3);
        Z3 = Fp3.add(Z3, t0);
        return new Point3(X3, Y3, Z3);
      }
      subtract(other) {
        return this.add(other.negate());
      }
      is0() {
        return this.equals(Point3.ZERO);
      }
      wNAF(n2) {
        return wnaf.wNAFCached(this, pointPrecomputes2, n2, (comp) => {
          const toInv = Fp3.invertBatch(comp.map((p) => p.pz));
          return comp.map((p, i) => p.toAffine(toInv[i])).map(Point3.fromAffine);
        });
      }
      /**
       * Non-constant-time multiplication. Uses double-and-add algorithm.
       * It's faster, but should only be used when you don't care about
       * an exposed private key e.g. sig verification, which works over *public* keys.
       */
      multiplyUnsafe(n2) {
        const I = Point3.ZERO;
        if (n2 === _0n5)
          return I;
        assertGE(n2);
        if (n2 === _1n5)
          return this;
        const { endo } = CURVE;
        if (!endo)
          return wnaf.unsafeLadder(this, n2);
        let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n2);
        let k1p = I;
        let k2p = I;
        let d = this;
        while (k1 > _0n5 || k2 > _0n5) {
          if (k1 & _1n5)
            k1p = k1p.add(d);
          if (k2 & _1n5)
            k2p = k2p.add(d);
          d = d.double();
          k1 >>= _1n5;
          k2 >>= _1n5;
        }
        if (k1neg)
          k1p = k1p.negate();
        if (k2neg)
          k2p = k2p.negate();
        k2p = new Point3(Fp3.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
        return k1p.add(k2p);
      }
      /**
       * Constant time multiplication.
       * Uses wNAF method. Windowed method may be 10% faster,
       * but takes 2x longer to generate and consumes 2x memory.
       * Uses precomputes when available.
       * Uses endomorphism for Koblitz curves.
       * @param scalar by which the point would be multiplied
       * @returns New point
       */
      multiply(scalar) {
        assertGE(scalar);
        let n2 = scalar;
        let point, fake;
        const { endo } = CURVE;
        if (endo) {
          const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n2);
          let { p: k1p, f: f1p } = this.wNAF(k1);
          let { p: k2p, f: f2p } = this.wNAF(k2);
          k1p = wnaf.constTimeNegate(k1neg, k1p);
          k2p = wnaf.constTimeNegate(k2neg, k2p);
          k2p = new Point3(Fp3.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
          point = k1p.add(k2p);
          fake = f1p.add(f2p);
        } else {
          const { p, f: f3 } = this.wNAF(n2);
          point = p;
          fake = f3;
        }
        return Point3.normalizeZ([point, fake])[0];
      }
      /**
       * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
       * Not using Strauss-Shamir trick: precomputation tables are faster.
       * The trick could be useful if both P and Q are not G (not in our case).
       * @returns non-zero affine point
       */
      multiplyAndAddUnsafe(Q, a, b2) {
        const G = Point3.BASE;
        const mul = (P, a2) => a2 === _0n5 || a2 === _1n5 || !P.equals(G) ? P.multiplyUnsafe(a2) : P.multiply(a2);
        const sum = mul(this, a).add(mul(Q, b2));
        return sum.is0() ? void 0 : sum;
      }
      // Converts Projective point to affine (x, y) coordinates.
      // Can accept precomputed Z^-1 - for example, from invertBatch.
      // (x, y, z) ∋ (x=x/z, y=y/z)
      toAffine(iz) {
        const { px: x, py: y, pz: z } = this;
        const is0 = this.is0();
        if (iz == null)
          iz = is0 ? Fp3.ONE : Fp3.inv(z);
        const ax = Fp3.mul(x, iz);
        const ay = Fp3.mul(y, iz);
        const zz = Fp3.mul(z, iz);
        if (is0)
          return { x: Fp3.ZERO, y: Fp3.ZERO };
        if (!Fp3.eql(zz, Fp3.ONE))
          throw new Error("invZ was invalid");
        return { x: ax, y: ay };
      }
      isTorsionFree() {
        const { h: cofactor, isTorsionFree } = CURVE;
        if (cofactor === _1n5)
          return true;
        if (isTorsionFree)
          return isTorsionFree(Point3, this);
        throw new Error("isTorsionFree() has not been declared for the elliptic curve");
      }
      clearCofactor() {
        const { h: cofactor, clearCofactor } = CURVE;
        if (cofactor === _1n5)
          return this;
        if (clearCofactor)
          return clearCofactor(Point3, this);
        return this.multiplyUnsafe(CURVE.h);
      }
      toRawBytes(isCompressed = true) {
        this.assertValidity();
        return toBytes3(Point3, this, isCompressed);
      }
      toHex(isCompressed = true) {
        return bytesToHex(this.toRawBytes(isCompressed));
      }
    }
    Point3.BASE = new Point3(CURVE.Gx, CURVE.Gy, Fp3.ONE);
    Point3.ZERO = new Point3(Fp3.ZERO, Fp3.ONE, Fp3.ZERO);
    const _bits = CURVE.nBitLength;
    const wnaf = wNAF(Point3, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
    return {
      CURVE,
      ProjectivePoint: Point3,
      normPrivateKeyToScalar,
      weierstrassEquation,
      isWithinCurveOrder
    };
  }
  function validateOpts(curve) {
    const opts = validateBasic(curve);
    validateObject(opts, {
      hash: "hash",
      hmac: "function",
      randomBytes: "function"
    }, {
      bits2int: "function",
      bits2int_modN: "function",
      lowS: "boolean"
    });
    return Object.freeze({ lowS: true, ...opts });
  }
  function weierstrass(curveDef) {
    const CURVE = validateOpts(curveDef);
    const { Fp: Fp3, n: CURVE_ORDER } = CURVE;
    const compressedLen = Fp3.BYTES + 1;
    const uncompressedLen = 2 * Fp3.BYTES + 1;
    function isValidFieldElement(num) {
      return _0n5 < num && num < Fp3.ORDER;
    }
    function modN(a) {
      return mod(a, CURVE_ORDER);
    }
    function invN(a) {
      return invert(a, CURVE_ORDER);
    }
    const { ProjectivePoint: Point3, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints({
      ...CURVE,
      toBytes(_c, point, isCompressed) {
        const a = point.toAffine();
        const x = Fp3.toBytes(a.x);
        const cat = concatBytes2;
        if (isCompressed) {
          return cat(Uint8Array.from([point.hasEvenY() ? 2 : 3]), x);
        } else {
          return cat(Uint8Array.from([4]), x, Fp3.toBytes(a.y));
        }
      },
      fromBytes(bytes2) {
        const len = bytes2.length;
        const head = bytes2[0];
        const tail = bytes2.subarray(1);
        if (len === compressedLen && (head === 2 || head === 3)) {
          const x = bytesToNumberBE(tail);
          if (!isValidFieldElement(x))
            throw new Error("Point is not on curve");
          const y2 = weierstrassEquation(x);
          let y = Fp3.sqrt(y2);
          const isYOdd = (y & _1n5) === _1n5;
          const isHeadOdd = (head & 1) === 1;
          if (isHeadOdd !== isYOdd)
            y = Fp3.neg(y);
          return { x, y };
        } else if (len === uncompressedLen && head === 4) {
          const x = Fp3.fromBytes(tail.subarray(0, Fp3.BYTES));
          const y = Fp3.fromBytes(tail.subarray(Fp3.BYTES, 2 * Fp3.BYTES));
          return { x, y };
        } else {
          throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
        }
      }
    });
    const numToNByteStr = (num) => bytesToHex(numberToBytesBE(num, CURVE.nByteLength));
    function isBiggerThanHalfOrder(number3) {
      const HALF = CURVE_ORDER >> _1n5;
      return number3 > HALF;
    }
    function normalizeS(s) {
      return isBiggerThanHalfOrder(s) ? modN(-s) : s;
    }
    const slcNum = (b2, from, to) => bytesToNumberBE(b2.slice(from, to));
    class Signature2 {
      constructor(r, s, recovery) {
        this.r = r;
        this.s = s;
        this.recovery = recovery;
        this.assertValidity();
      }
      // pair (bytes of r, bytes of s)
      static fromCompact(hex) {
        const l = CURVE.nByteLength;
        hex = ensureBytes("compactSignature", hex, l * 2);
        return new Signature2(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));
      }
      // DER encoded ECDSA signature
      // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
      static fromDER(hex) {
        const { r, s } = DER.toSig(ensureBytes("DER", hex));
        return new Signature2(r, s);
      }
      assertValidity() {
        if (!isWithinCurveOrder(this.r))
          throw new Error("r must be 0 < r < CURVE.n");
        if (!isWithinCurveOrder(this.s))
          throw new Error("s must be 0 < s < CURVE.n");
      }
      addRecoveryBit(recovery) {
        return new Signature2(this.r, this.s, recovery);
      }
      recoverPublicKey(msgHash) {
        const { r, s, recovery: rec } = this;
        const h = bits2int_modN(ensureBytes("msgHash", msgHash));
        if (rec == null || ![0, 1, 2, 3].includes(rec))
          throw new Error("recovery id invalid");
        const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
        if (radj >= Fp3.ORDER)
          throw new Error("recovery id 2 or 3 invalid");
        const prefix = (rec & 1) === 0 ? "02" : "03";
        const R = Point3.fromHex(prefix + numToNByteStr(radj));
        const ir = invN(radj);
        const u1 = modN(-h * ir);
        const u2 = modN(s * ir);
        const Q = Point3.BASE.multiplyAndAddUnsafe(R, u1, u2);
        if (!Q)
          throw new Error("point at infinify");
        Q.assertValidity();
        return Q;
      }
      // Signatures should be low-s, to prevent malleability.
      hasHighS() {
        return isBiggerThanHalfOrder(this.s);
      }
      normalizeS() {
        return this.hasHighS() ? new Signature2(this.r, modN(-this.s), this.recovery) : this;
      }
      // DER-encoded
      toDERRawBytes() {
        return hexToBytes(this.toDERHex());
      }
      toDERHex() {
        return DER.hexFromSig({ r: this.r, s: this.s });
      }
      // padded bytes of r, then padded bytes of s
      toCompactRawBytes() {
        return hexToBytes(this.toCompactHex());
      }
      toCompactHex() {
        return numToNByteStr(this.r) + numToNByteStr(this.s);
      }
    }
    const utils = {
      isValidPrivateKey(privateKey) {
        try {
          normPrivateKeyToScalar(privateKey);
          return true;
        } catch (error) {
          return false;
        }
      },
      normPrivateKeyToScalar,
      /**
       * Produces cryptographically secure private key from random of size
       * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
       */
      randomPrivateKey: () => {
        const length = getMinHashLength(CURVE.n);
        return mapHashToField(CURVE.randomBytes(length), CURVE.n);
      },
      /**
       * Creates precompute table for an arbitrary EC point. Makes point "cached".
       * Allows to massively speed-up `point.multiply(scalar)`.
       * @returns cached point
       * @example
       * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
       * fast.multiply(privKey); // much faster ECDH now
       */
      precompute(windowSize = 8, point = Point3.BASE) {
        point._setWindowSize(windowSize);
        point.multiply(BigInt(3));
        return point;
      }
    };
    function getPublicKey2(privateKey, isCompressed = true) {
      return Point3.fromPrivateKey(privateKey).toRawBytes(isCompressed);
    }
    function isProbPub(item) {
      const arr = item instanceof Uint8Array;
      const str = typeof item === "string";
      const len = (arr || str) && item.length;
      if (arr)
        return len === compressedLen || len === uncompressedLen;
      if (str)
        return len === 2 * compressedLen || len === 2 * uncompressedLen;
      if (item instanceof Point3)
        return true;
      return false;
    }
    function getSharedSecret(privateA, publicB, isCompressed = true) {
      if (isProbPub(privateA))
        throw new Error("first arg must be private key");
      if (!isProbPub(publicB))
        throw new Error("second arg must be public key");
      const b2 = Point3.fromHex(publicB);
      return b2.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
    }
    const bits2int = CURVE.bits2int || function(bytes2) {
      const num = bytesToNumberBE(bytes2);
      const delta = bytes2.length * 8 - CURVE.nBitLength;
      return delta > 0 ? num >> BigInt(delta) : num;
    };
    const bits2int_modN = CURVE.bits2int_modN || function(bytes2) {
      return modN(bits2int(bytes2));
    };
    const ORDER_MASK = bitMask(CURVE.nBitLength);
    function int2octets(num) {
      if (typeof num !== "bigint")
        throw new Error("bigint expected");
      if (!(_0n5 <= num && num < ORDER_MASK))
        throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
      return numberToBytesBE(num, CURVE.nByteLength);
    }
    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
      if (["recovered", "canonical"].some((k) => k in opts))
        throw new Error("sign() legacy options not supported");
      const { hash: hash2, randomBytes: randomBytes5 } = CURVE;
      let { lowS, prehash, extraEntropy: ent } = opts;
      if (lowS == null)
        lowS = true;
      msgHash = ensureBytes("msgHash", msgHash);
      if (prehash)
        msgHash = ensureBytes("prehashed msgHash", hash2(msgHash));
      const h1int = bits2int_modN(msgHash);
      const d = normPrivateKeyToScalar(privateKey);
      const seedArgs = [int2octets(d), int2octets(h1int)];
      if (ent != null) {
        const e = ent === true ? randomBytes5(Fp3.BYTES) : ent;
        seedArgs.push(ensureBytes("extraEntropy", e));
      }
      const seed = concatBytes2(...seedArgs);
      const m = h1int;
      function k2sig(kBytes) {
        const k = bits2int(kBytes);
        if (!isWithinCurveOrder(k))
          return;
        const ik = invN(k);
        const q = Point3.BASE.multiply(k).toAffine();
        const r = modN(q.x);
        if (r === _0n5)
          return;
        const s = modN(ik * modN(m + r * d));
        if (s === _0n5)
          return;
        let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n5);
        let normS = s;
        if (lowS && isBiggerThanHalfOrder(s)) {
          normS = normalizeS(s);
          recovery ^= 1;
        }
        return new Signature2(r, normS, recovery);
      }
      return { seed, k2sig };
    }
    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
    function sign2(msgHash, privKey, opts = defaultSigOpts) {
      const { seed, k2sig } = prepSig(msgHash, privKey, opts);
      const C = CURVE;
      const drbg = createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);
      return drbg(seed, k2sig);
    }
    Point3.BASE._setWindowSize(8);
    function verify2(signature2, msgHash, publicKey2, opts = defaultVerOpts) {
      var _a2;
      const sg = signature2;
      msgHash = ensureBytes("msgHash", msgHash);
      publicKey2 = ensureBytes("publicKey", publicKey2);
      if ("strict" in opts)
        throw new Error("options.strict was renamed to lowS");
      const { lowS, prehash } = opts;
      let _sig2 = void 0;
      let P;
      try {
        if (typeof sg === "string" || sg instanceof Uint8Array) {
          try {
            _sig2 = Signature2.fromDER(sg);
          } catch (derError) {
            if (!(derError instanceof DER.Err))
              throw derError;
            _sig2 = Signature2.fromCompact(sg);
          }
        } else if (typeof sg === "object" && typeof sg.r === "bigint" && typeof sg.s === "bigint") {
          const { r: r2, s: s2 } = sg;
          _sig2 = new Signature2(r2, s2);
        } else {
          throw new Error("PARSE");
        }
        P = Point3.fromHex(publicKey2);
      } catch (error) {
        if (error.message === "PARSE")
          throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
        return false;
      }
      if (lowS && _sig2.hasHighS())
        return false;
      if (prehash)
        msgHash = CURVE.hash(msgHash);
      const { r, s } = _sig2;
      const h = bits2int_modN(msgHash);
      const is2 = invN(s);
      const u1 = modN(h * is2);
      const u2 = modN(r * is2);
      const R = (_a2 = Point3.BASE.multiplyAndAddUnsafe(P, u1, u2)) == null ? void 0 : _a2.toAffine();
      if (!R)
        return false;
      const v = modN(R.x);
      return v === r;
    }
    return {
      CURVE,
      getPublicKey: getPublicKey2,
      getSharedSecret,
      sign: sign2,
      verify: verify2,
      ProjectivePoint: Point3,
      Signature: Signature2,
      utils
    };
  }
  var b2n, h2b, DER, _0n5, _1n5, _2n4, _3n2, _4n2;
  var init_weierstrass = __esm({
    "node_modules/ethers/node_modules/@noble/curves/esm/abstract/weierstrass.js"() {
      init_modular();
      init_utils3();
      init_utils3();
      init_curve();
      ({ bytesToNumberBE: b2n, hexToBytes: h2b } = utils_exports);
      DER = {
        // asn.1 DER encoding utils
        Err: class DERErr extends Error {
          constructor(m = "") {
            super(m);
          }
        },
        _parseInt(data) {
          const { Err: E } = DER;
          if (data.length < 2 || data[0] !== 2)
            throw new E("Invalid signature integer tag");
          const len = data[1];
          const res = data.subarray(2, len + 2);
          if (!len || res.length !== len)
            throw new E("Invalid signature integer: wrong length");
          if (res[0] & 128)
            throw new E("Invalid signature integer: negative");
          if (res[0] === 0 && !(res[1] & 128))
            throw new E("Invalid signature integer: unnecessary leading zero");
          return { d: b2n(res), l: data.subarray(len + 2) };
        },
        toSig(hex) {
          const { Err: E } = DER;
          const data = typeof hex === "string" ? h2b(hex) : hex;
          if (!(data instanceof Uint8Array))
            throw new Error("ui8a expected");
          let l = data.length;
          if (l < 2 || data[0] != 48)
            throw new E("Invalid signature tag");
          if (data[1] !== l - 2)
            throw new E("Invalid signature: incorrect length");
          const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));
          const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);
          if (rBytesLeft.length)
            throw new E("Invalid signature: left bytes after parsing");
          return { r, s };
        },
        hexFromSig(sig) {
          const slice = (s2) => Number.parseInt(s2[0], 16) & 8 ? "00" + s2 : s2;
          const h = (num) => {
            const hex = num.toString(16);
            return hex.length & 1 ? `0${hex}` : hex;
          };
          const s = slice(h(sig.s));
          const r = slice(h(sig.r));
          const shl = s.length / 2;
          const rhl = r.length / 2;
          const sl = h(shl);
          const rl = h(rhl);
          return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;
        }
      };
      _0n5 = BigInt(0);
      _1n5 = BigInt(1);
      _2n4 = BigInt(2);
      _3n2 = BigInt(3);
      _4n2 = BigInt(4);
    }
  });

  // node_modules/ethers/node_modules/@noble/curves/esm/_shortw_utils.js
  function getHash(hash2) {
    return {
      hash: hash2,
      hmac: (key, ...msgs) => hmac(hash2, key, concatBytes(...msgs)),
      randomBytes
    };
  }
  function createCurve(curveDef, defHash) {
    const create2 = (hash2) => weierstrass({ ...curveDef, ...getHash(hash2) });
    return Object.freeze({ ...create2(defHash), create: create2 });
  }
  var init_shortw_utils = __esm({
    "node_modules/ethers/node_modules/@noble/curves/esm/_shortw_utils.js"() {
      init_hmac();
      init_utils2();
      init_weierstrass();
    }
  });

  // node_modules/ethers/node_modules/@noble/curves/esm/secp256k1.js
  function sqrtMod(y) {
    const P = secp256k1P;
    const _3n6 = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
    const b2 = y * y * y % P;
    const b3 = b2 * b2 * y % P;
    const b6 = pow2(b3, _3n6, P) * b3 % P;
    const b9 = pow2(b6, _3n6, P) * b3 % P;
    const b11 = pow2(b9, _2n5, P) * b2 % P;
    const b22 = pow2(b11, _11n, P) * b11 % P;
    const b44 = pow2(b22, _22n, P) * b22 % P;
    const b88 = pow2(b44, _44n, P) * b44 % P;
    const b176 = pow2(b88, _88n, P) * b88 % P;
    const b220 = pow2(b176, _44n, P) * b44 % P;
    const b223 = pow2(b220, _3n6, P) * b3 % P;
    const t1 = pow2(b223, _23n, P) * b22 % P;
    const t2 = pow2(t1, _6n, P) * b2 % P;
    const root = pow2(t2, _2n5, P);
    if (!Fp.eql(Fp.sqr(root), y))
      throw new Error("Cannot find square root");
    return root;
  }
  var secp256k1P, secp256k1N, _1n6, _2n5, divNearest, Fp, secp256k1, _0n6, Point;
  var init_secp256k1 = __esm({
    "node_modules/ethers/node_modules/@noble/curves/esm/secp256k1.js"() {
      init_sha256();
      init_modular();
      init_shortw_utils();
      secp256k1P = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
      secp256k1N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
      _1n6 = BigInt(1);
      _2n5 = BigInt(2);
      divNearest = (a, b2) => (a + b2 / _2n5) / b2;
      Fp = Field(secp256k1P, void 0, void 0, { sqrt: sqrtMod });
      secp256k1 = createCurve({
        a: BigInt(0),
        b: BigInt(7),
        Fp,
        n: secp256k1N,
        // Base point (x, y) aka generator point
        Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
        Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
        h: BigInt(1),
        lowS: true,
        /**
         * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
         * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
         * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
         * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
         */
        endo: {
          beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
          splitScalar: (k) => {
            const n2 = secp256k1N;
            const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
            const b1 = -_1n6 * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
            const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
            const b2 = a1;
            const POW_2_128 = BigInt("0x100000000000000000000000000000000");
            const c1 = divNearest(b2 * k, n2);
            const c2 = divNearest(-b1 * k, n2);
            let k1 = mod(k - c1 * a1 - c2 * a2, n2);
            let k2 = mod(-c1 * b1 - c2 * b2, n2);
            const k1neg = k1 > POW_2_128;
            const k2neg = k2 > POW_2_128;
            if (k1neg)
              k1 = n2 - k1;
            if (k2neg)
              k2 = n2 - k2;
            if (k1 > POW_2_128 || k2 > POW_2_128) {
              throw new Error("splitScalar: Endomorphism failed, k=" + k);
            }
            return { k1neg, k1, k2neg, k2 };
          }
        }
      }, sha256);
      _0n6 = BigInt(0);
      Point = secp256k1.ProjectivePoint;
    }
  });

  // node_modules/ethers/lib.esm/constants/addresses.js
  var ZeroAddress;
  var init_addresses = __esm({
    "node_modules/ethers/lib.esm/constants/addresses.js"() {
      ZeroAddress = "0x0000000000000000000000000000000000000000";
    }
  });

  // node_modules/ethers/lib.esm/constants/hashes.js
  var ZeroHash;
  var init_hashes = __esm({
    "node_modules/ethers/lib.esm/constants/hashes.js"() {
      ZeroHash = "0x0000000000000000000000000000000000000000000000000000000000000000";
    }
  });

  // node_modules/ethers/lib.esm/constants/numbers.js
  var N, WeiPerEther, MaxUint256, MinInt256, MaxInt256;
  var init_numbers = __esm({
    "node_modules/ethers/lib.esm/constants/numbers.js"() {
      N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
      WeiPerEther = BigInt("1000000000000000000");
      MaxUint256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
      MinInt256 = BigInt("0x8000000000000000000000000000000000000000000000000000000000000000") * BigInt(-1);
      MaxInt256 = BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    }
  });

  // node_modules/ethers/lib.esm/constants/strings.js
  var EtherSymbol, MessagePrefix;
  var init_strings = __esm({
    "node_modules/ethers/lib.esm/constants/strings.js"() {
      EtherSymbol = "\u039E";
      MessagePrefix = "Ethereum Signed Message:\n";
    }
  });

  // node_modules/ethers/lib.esm/constants/index.js
  var init_constants = __esm({
    "node_modules/ethers/lib.esm/constants/index.js"() {
      init_addresses();
      init_hashes();
      init_numbers();
      init_strings();
    }
  });

  // node_modules/ethers/lib.esm/crypto/signature.js
  function toUint256(value) {
    return zeroPadValue(toBeArray(value), 32);
  }
  var BN_04, BN_13, BN_2, BN_27, BN_28, BN_35, _guard3, _r, _s, _v, _networkV, _Signature, Signature;
  var init_signature = __esm({
    "node_modules/ethers/lib.esm/crypto/signature.js"() {
      init_constants();
      init_utils();
      BN_04 = BigInt(0);
      BN_13 = BigInt(1);
      BN_2 = BigInt(2);
      BN_27 = BigInt(27);
      BN_28 = BigInt(28);
      BN_35 = BigInt(35);
      _guard3 = {};
      _Signature = class _Signature {
        /**
         *  @private
         */
        constructor(guard, r, s, v) {
          __privateAdd(this, _r);
          __privateAdd(this, _s);
          __privateAdd(this, _v);
          __privateAdd(this, _networkV);
          assertPrivate(guard, _guard3, "Signature");
          __privateSet(this, _r, r);
          __privateSet(this, _s, s);
          __privateSet(this, _v, v);
          __privateSet(this, _networkV, null);
        }
        /**
         *  The ``r`` value for a signature.
         *
         *  This represents the ``x`` coordinate of a "reference" or
         *  challenge point, from which the ``y`` can be computed.
         */
        get r() {
          return __privateGet(this, _r);
        }
        set r(value) {
          assertArgument(dataLength(value) === 32, "invalid r", "value", value);
          __privateSet(this, _r, hexlify(value));
        }
        /**
         *  The ``s`` value for a signature.
         */
        get s() {
          return __privateGet(this, _s);
        }
        set s(_value2) {
          assertArgument(dataLength(_value2) === 32, "invalid s", "value", _value2);
          const value = hexlify(_value2);
          assertArgument(parseInt(value.substring(0, 3)) < 8, "non-canonical s", "value", value);
          __privateSet(this, _s, value);
        }
        /**
         *  The ``v`` value for a signature.
         *
         *  Since a given ``x`` value for ``r`` has two possible values for
         *  its correspondin ``y``, the ``v`` indicates which of the two ``y``
         *  values to use.
         *
         *  It is normalized to the values ``27`` or ``28`` for legacy
         *  purposes.
         */
        get v() {
          return __privateGet(this, _v);
        }
        set v(value) {
          const v = getNumber2(value, "value");
          assertArgument(v === 27 || v === 28, "invalid v", "v", value);
          __privateSet(this, _v, v);
        }
        /**
         *  The EIP-155 ``v`` for legacy transactions. For non-legacy
         *  transactions, this value is ``null``.
         */
        get networkV() {
          return __privateGet(this, _networkV);
        }
        /**
         *  The chain ID for EIP-155 legacy transactions. For non-legacy
         *  transactions, this value is ``null``.
         */
        get legacyChainId() {
          const v = this.networkV;
          if (v == null) {
            return null;
          }
          return _Signature.getChainId(v);
        }
        /**
         *  The ``yParity`` for the signature.
         *
         *  See ``v`` for more details on how this value is used.
         */
        get yParity() {
          return this.v === 27 ? 0 : 1;
        }
        /**
         *  The [[link-eip-2098]] compact representation of the ``yParity``
         *  and ``s`` compacted into a single ``bytes32``.
         */
        get yParityAndS() {
          const yParityAndS = getBytes(this.s);
          if (this.yParity) {
            yParityAndS[0] |= 128;
          }
          return hexlify(yParityAndS);
        }
        /**
         *  The [[link-eip-2098]] compact representation.
         */
        get compactSerialized() {
          return concat([this.r, this.yParityAndS]);
        }
        /**
         *  The serialized representation.
         */
        get serialized() {
          return concat([this.r, this.s, this.yParity ? "0x1c" : "0x1b"]);
        }
        [Symbol.for("nodejs.util.inspect.custom")]() {
          return `Signature { r: "${this.r}", s: "${this.s}", yParity: ${this.yParity}, networkV: ${this.networkV} }`;
        }
        /**
         *  Returns a new identical [[Signature]].
         */
        clone() {
          const clone = new _Signature(_guard3, this.r, this.s, this.v);
          if (this.networkV) {
            __privateSet(clone, _networkV, this.networkV);
          }
          return clone;
        }
        /**
         *  Returns a representation that is compatible with ``JSON.stringify``.
         */
        toJSON() {
          const networkV = this.networkV;
          return {
            _type: "signature",
            networkV: networkV != null ? networkV.toString() : null,
            r: this.r,
            s: this.s,
            v: this.v
          };
        }
        /**
         *  Compute the chain ID from the ``v`` in a legacy EIP-155 transactions.
         *
         *  @example:
         *    Signature.getChainId(45)
         *    //_result:
         *
         *    Signature.getChainId(46)
         *    //_result:
         */
        static getChainId(v) {
          const bv = getBigInt(v, "v");
          if (bv == BN_27 || bv == BN_28) {
            return BN_04;
          }
          assertArgument(bv >= BN_35, "invalid EIP-155 v", "v", v);
          return (bv - BN_35) / BN_2;
        }
        /**
         *  Compute the ``v`` for a chain ID for a legacy EIP-155 transactions.
         *
         *  Legacy transactions which use [[link-eip-155]] hijack the ``v``
         *  property to include the chain ID.
         *
         *  @example:
         *    Signature.getChainIdV(5, 27)
         *    //_result:
         *
         *    Signature.getChainIdV(5, 28)
         *    //_result:
         *
         */
        static getChainIdV(chainId, v) {
          return getBigInt(chainId) * BN_2 + BigInt(35 + v - 27);
        }
        /**
         *  Compute the normalized legacy transaction ``v`` from a ``yParirty``,
         *  a legacy transaction ``v`` or a legacy [[link-eip-155]] transaction.
         *
         *  @example:
         *    // The values 0 and 1 imply v is actually yParity
         *    Signature.getNormalizedV(0)
         *    //_result:
         *
         *    // Legacy non-EIP-1559 transaction (i.e. 27 or 28)
         *    Signature.getNormalizedV(27)
         *    //_result:
         *
         *    // Legacy EIP-155 transaction (i.e. >= 35)
         *    Signature.getNormalizedV(46)
         *    //_result:
         *
         *    // Invalid values throw
         *    Signature.getNormalizedV(5)
         *    //_error:
         */
        static getNormalizedV(v) {
          const bv = getBigInt(v);
          if (bv === BN_04 || bv === BN_27) {
            return 27;
          }
          if (bv === BN_13 || bv === BN_28) {
            return 28;
          }
          assertArgument(bv >= BN_35, "invalid v", "v", v);
          return bv & BN_13 ? 27 : 28;
        }
        /**
         *  Creates a new [[Signature]].
         *
         *  If no %%sig%% is provided, a new [[Signature]] is created
         *  with default values.
         *
         *  If %%sig%% is a string, it is parsed.
         */
        static from(sig) {
          function assertError(check, message) {
            assertArgument(check, message, "signature", sig);
          }
          ;
          if (sig == null) {
            return new _Signature(_guard3, ZeroHash, ZeroHash, 27);
          }
          if (typeof sig === "string") {
            const bytes2 = getBytes(sig, "signature");
            if (bytes2.length === 64) {
              const r2 = hexlify(bytes2.slice(0, 32));
              const s2 = bytes2.slice(32, 64);
              const v2 = s2[0] & 128 ? 28 : 27;
              s2[0] &= 127;
              return new _Signature(_guard3, r2, hexlify(s2), v2);
            }
            if (bytes2.length === 65) {
              const r2 = hexlify(bytes2.slice(0, 32));
              const s2 = bytes2.slice(32, 64);
              assertError((s2[0] & 128) === 0, "non-canonical s");
              const v2 = _Signature.getNormalizedV(bytes2[64]);
              return new _Signature(_guard3, r2, hexlify(s2), v2);
            }
            assertError(false, "invalid raw signature length");
          }
          if (sig instanceof _Signature) {
            return sig.clone();
          }
          const _r2 = sig.r;
          assertError(_r2 != null, "missing r");
          const r = toUint256(_r2);
          const s = function(s2, yParityAndS) {
            if (s2 != null) {
              return toUint256(s2);
            }
            if (yParityAndS != null) {
              assertError(isHexString(yParityAndS, 32), "invalid yParityAndS");
              const bytes2 = getBytes(yParityAndS);
              bytes2[0] &= 127;
              return hexlify(bytes2);
            }
            assertError(false, "missing s");
          }(sig.s, sig.yParityAndS);
          assertError((getBytes(s)[0] & 128) == 0, "non-canonical s");
          const { networkV, v } = function(_v2, yParityAndS, yParity) {
            if (_v2 != null) {
              const v2 = getBigInt(_v2);
              return {
                networkV: v2 >= BN_35 ? v2 : void 0,
                v: _Signature.getNormalizedV(v2)
              };
            }
            if (yParityAndS != null) {
              assertError(isHexString(yParityAndS, 32), "invalid yParityAndS");
              return { v: getBytes(yParityAndS)[0] & 128 ? 28 : 27 };
            }
            if (yParity != null) {
              switch (getNumber2(yParity, "sig.yParity")) {
                case 0:
                  return { v: 27 };
                case 1:
                  return { v: 28 };
              }
              assertError(false, "invalid yParity");
            }
            assertError(false, "missing v");
          }(sig.v, sig.yParityAndS, sig.yParity);
          const result = new _Signature(_guard3, r, s, v);
          if (networkV) {
            __privateSet(result, _networkV, networkV);
          }
          assertError(sig.yParity == null || getNumber2(sig.yParity, "sig.yParity") === result.yParity, "yParity mismatch");
          assertError(sig.yParityAndS == null || sig.yParityAndS === result.yParityAndS, "yParityAndS mismatch");
          return result;
        }
      };
      _r = new WeakMap();
      _s = new WeakMap();
      _v = new WeakMap();
      _networkV = new WeakMap();
      Signature = _Signature;
    }
  });

  // node_modules/ethers/lib.esm/crypto/signing-key.js
  var _privateKey, _SigningKey, SigningKey;
  var init_signing_key = __esm({
    "node_modules/ethers/lib.esm/crypto/signing-key.js"() {
      init_secp256k1();
      init_utils();
      init_signature();
      _SigningKey = class _SigningKey {
        /**
         *  Creates a new **SigningKey** for %%privateKey%%.
         */
        constructor(privateKey) {
          __privateAdd(this, _privateKey);
          assertArgument(dataLength(privateKey) === 32, "invalid private key", "privateKey", "[REDACTED]");
          __privateSet(this, _privateKey, hexlify(privateKey));
        }
        /**
         *  The private key.
         */
        get privateKey() {
          return __privateGet(this, _privateKey);
        }
        /**
         *  The uncompressed public key.
         *
         * This will always begin with the prefix ``0x04`` and be 132
         * characters long (the ``0x`` prefix and 130 hexadecimal nibbles).
         */
        get publicKey() {
          return _SigningKey.computePublicKey(__privateGet(this, _privateKey));
        }
        /**
         *  The compressed public key.
         *
         *  This will always begin with either the prefix ``0x02`` or ``0x03``
         *  and be 68 characters long (the ``0x`` prefix and 33 hexadecimal
         *  nibbles)
         */
        get compressedPublicKey() {
          return _SigningKey.computePublicKey(__privateGet(this, _privateKey), true);
        }
        /**
         *  Return the signature of the signed %%digest%%.
         */
        sign(digest) {
          assertArgument(dataLength(digest) === 32, "invalid digest length", "digest", digest);
          const sig = secp256k1.sign(getBytesCopy(digest), getBytesCopy(__privateGet(this, _privateKey)), {
            lowS: true
          });
          return Signature.from({
            r: toBeHex(sig.r, 32),
            s: toBeHex(sig.s, 32),
            v: sig.recovery ? 28 : 27
          });
        }
        /**
         *  Returns the [[link-wiki-ecdh]] shared secret between this
         *  private key and the %%other%% key.
         *
         *  The %%other%% key may be any type of key, a raw public key,
         *  a compressed/uncompressed pubic key or aprivate key.
         *
         *  Best practice is usually to use a cryptographic hash on the
         *  returned value before using it as a symetric secret.
         *
         *  @example:
         *    sign1 = new SigningKey(id("some-secret-1"))
         *    sign2 = new SigningKey(id("some-secret-2"))
         *
         *    // Notice that privA.computeSharedSecret(pubB)...
         *    sign1.computeSharedSecret(sign2.publicKey)
         *    //_result:
         *
         *    // ...is equal to privB.computeSharedSecret(pubA).
         *    sign2.computeSharedSecret(sign1.publicKey)
         *    //_result:
         */
        computeSharedSecret(other) {
          const pubKey = _SigningKey.computePublicKey(other);
          return hexlify(secp256k1.getSharedSecret(getBytesCopy(__privateGet(this, _privateKey)), getBytes(pubKey), false));
        }
        /**
         *  Compute the public key for %%key%%, optionally %%compressed%%.
         *
         *  The %%key%% may be any type of key, a raw public key, a
         *  compressed/uncompressed public key or private key.
         *
         *  @example:
         *    sign = new SigningKey(id("some-secret"));
         *
         *    // Compute the uncompressed public key for a private key
         *    SigningKey.computePublicKey(sign.privateKey)
         *    //_result:
         *
         *    // Compute the compressed public key for a private key
         *    SigningKey.computePublicKey(sign.privateKey, true)
         *    //_result:
         *
         *    // Compute the uncompressed public key
         *    SigningKey.computePublicKey(sign.publicKey, false);
         *    //_result:
         *
         *    // Compute the Compressed a public key
         *    SigningKey.computePublicKey(sign.publicKey, true);
         *    //_result:
         */
        static computePublicKey(key, compressed) {
          let bytes2 = getBytes(key, "key");
          if (bytes2.length === 32) {
            const pubKey = secp256k1.getPublicKey(bytes2, !!compressed);
            return hexlify(pubKey);
          }
          if (bytes2.length === 64) {
            const pub = new Uint8Array(65);
            pub[0] = 4;
            pub.set(bytes2, 1);
            bytes2 = pub;
          }
          const point = secp256k1.ProjectivePoint.fromHex(bytes2);
          return hexlify(point.toRawBytes(compressed));
        }
        /**
         *  Returns the public key for the private key which produced the
         *  %%signature%% for the given %%digest%%.
         *
         *  @example:
         *    key = new SigningKey(id("some-secret"))
         *    digest = id("hello world")
         *    sig = key.sign(digest)
         *
         *    // Notice the signer public key...
         *    key.publicKey
         *    //_result:
         *
         *    // ...is equal to the recovered public key
         *    SigningKey.recoverPublicKey(digest, sig)
         *    //_result:
         *
         */
        static recoverPublicKey(digest, signature2) {
          assertArgument(dataLength(digest) === 32, "invalid digest length", "digest", digest);
          const sig = Signature.from(signature2);
          let secpSig = secp256k1.Signature.fromCompact(getBytesCopy(concat([sig.r, sig.s])));
          secpSig = secpSig.addRecoveryBit(sig.yParity);
          const pubKey = secpSig.recoverPublicKey(getBytesCopy(digest));
          assertArgument(pubKey != null, "invalid signature for digest", "signature", signature2);
          return "0x" + pubKey.toHex(false);
        }
        /**
         *  Returns the point resulting from adding the ellipic curve points
         *  %%p0%% and %%p1%%.
         *
         *  This is not a common function most developers should require, but
         *  can be useful for certain privacy-specific techniques.
         *
         *  For example, it is used by [[HDNodeWallet]] to compute child
         *  addresses from parent public keys and chain codes.
         */
        static addPoints(p0, p1, compressed) {
          const pub0 = secp256k1.ProjectivePoint.fromHex(_SigningKey.computePublicKey(p0).substring(2));
          const pub1 = secp256k1.ProjectivePoint.fromHex(_SigningKey.computePublicKey(p1).substring(2));
          return "0x" + pub0.add(pub1).toHex(!!compressed);
        }
      };
      _privateKey = new WeakMap();
      SigningKey = _SigningKey;
    }
  });

  // node_modules/ethers/lib.esm/crypto/index.js
  function lock() {
    computeHmac.lock();
    keccak256.lock();
    pbkdf22.lock();
    randomBytes3.lock();
    ripemd1602.lock();
    scrypt2.lock();
    scryptSync.lock();
    sha2562.lock();
    sha5122.lock();
    randomBytes3.lock();
  }
  var init_crypto2 = __esm({
    "node_modules/ethers/lib.esm/crypto/index.js"() {
      init_hmac2();
      init_keccak();
      init_ripemd1602();
      init_pbkdf22();
      init_random();
      init_scrypt2();
      init_sha22();
      init_signing_key();
      init_signature();
    }
  });

  // node_modules/ethers/lib.esm/address/address.js
  function getChecksumAddress(address) {
    address = address.toLowerCase();
    const chars = address.substring(2).split("");
    const expanded = new Uint8Array(40);
    for (let i = 0; i < 40; i++) {
      expanded[i] = chars[i].charCodeAt(0);
    }
    const hashed = getBytes(keccak256(expanded));
    for (let i = 0; i < 40; i += 2) {
      if (hashed[i >> 1] >> 4 >= 8) {
        chars[i] = chars[i].toUpperCase();
      }
      if ((hashed[i >> 1] & 15) >= 8) {
        chars[i + 1] = chars[i + 1].toUpperCase();
      }
    }
    return "0x" + chars.join("");
  }
  function ibanChecksum(address) {
    address = address.toUpperCase();
    address = address.substring(4) + address.substring(0, 2) + "00";
    let expanded = address.split("").map((c) => {
      return ibanLookup[c];
    }).join("");
    while (expanded.length >= safeDigits) {
      let block = expanded.substring(0, safeDigits);
      expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
    }
    let checksum2 = String(98 - parseInt(expanded, 10) % 97);
    while (checksum2.length < 2) {
      checksum2 = "0" + checksum2;
    }
    return checksum2;
  }
  function fromBase36(value) {
    value = value.toLowerCase();
    let result = BN_05;
    for (let i = 0; i < value.length; i++) {
      result = result * BN_36 + Base36[value[i]];
    }
    return result;
  }
  function getAddress(address) {
    assertArgument(typeof address === "string", "invalid address", "address", address);
    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
      if (!address.startsWith("0x")) {
        address = "0x" + address;
      }
      const result = getChecksumAddress(address);
      assertArgument(!address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) || result === address, "bad address checksum", "address", address);
      return result;
    }
    if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
      assertArgument(address.substring(2, 4) === ibanChecksum(address), "bad icap checksum", "address", address);
      let result = fromBase36(address.substring(4)).toString(16);
      while (result.length < 40) {
        result = "0" + result;
      }
      return getChecksumAddress("0x" + result);
    }
    assertArgument(false, "invalid address", "address", address);
  }
  function getIcapAddress(address) {
    let base36 = BigInt(getAddress(address)).toString(36).toUpperCase();
    while (base36.length < 30) {
      base36 = "0" + base36;
    }
    return "XE" + ibanChecksum("XE00" + base36) + base36;
  }
  var BN_05, BN_36, ibanLookup, safeDigits, Base36;
  var init_address = __esm({
    "node_modules/ethers/lib.esm/address/address.js"() {
      init_crypto2();
      init_utils();
      BN_05 = BigInt(0);
      BN_36 = BigInt(36);
      ibanLookup = {};
      for (let i = 0; i < 10; i++) {
        ibanLookup[String(i)] = String(i);
      }
      for (let i = 0; i < 26; i++) {
        ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
      }
      safeDigits = 15;
      Base36 = function() {
        ;
        const result = {};
        for (let i = 0; i < 36; i++) {
          const key = "0123456789abcdefghijklmnopqrstuvwxyz"[i];
          result[key] = BigInt(i);
        }
        return result;
      }();
    }
  });

  // node_modules/ethers/lib.esm/address/contract-address.js
  function getCreateAddress(tx) {
    const from = getAddress(tx.from);
    const nonce = getBigInt(tx.nonce, "tx.nonce");
    let nonceHex = nonce.toString(16);
    if (nonceHex === "0") {
      nonceHex = "0x";
    } else if (nonceHex.length % 2) {
      nonceHex = "0x0" + nonceHex;
    } else {
      nonceHex = "0x" + nonceHex;
    }
    return getAddress(dataSlice(keccak256(encodeRlp([from, nonceHex])), 12));
  }
  function getCreate2Address(_from, _salt, _initCodeHash) {
    const from = getAddress(_from);
    const salt = getBytes(_salt, "salt");
    const initCodeHash = getBytes(_initCodeHash, "initCodeHash");
    assertArgument(salt.length === 32, "salt must be 32 bytes", "salt", _salt);
    assertArgument(initCodeHash.length === 32, "initCodeHash must be 32 bytes", "initCodeHash", _initCodeHash);
    return getAddress(dataSlice(keccak256(concat(["0xff", from, salt, initCodeHash])), 12));
  }
  var init_contract_address = __esm({
    "node_modules/ethers/lib.esm/address/contract-address.js"() {
      init_crypto2();
      init_utils();
      init_address();
    }
  });

  // node_modules/ethers/lib.esm/address/checks.js
  function isAddressable(value) {
    return value && typeof value.getAddress === "function";
  }
  function isAddress(value) {
    try {
      getAddress(value);
      return true;
    } catch (error) {
    }
    return false;
  }
  async function checkAddress(target, promise) {
    const result = await promise;
    if (result == null || result === "0x0000000000000000000000000000000000000000") {
      assert(typeof target !== "string", "unconfigured name", "UNCONFIGURED_NAME", { value: target });
      assertArgument(false, "invalid AddressLike value; did not resolve to a value address", "target", target);
    }
    return getAddress(result);
  }
  function resolveAddress(target, resolver) {
    if (typeof target === "string") {
      if (target.match(/^0x[0-9a-f]{40}$/i)) {
        return getAddress(target);
      }
      assert(resolver != null, "ENS resolution requires a provider", "UNSUPPORTED_OPERATION", { operation: "resolveName" });
      return checkAddress(target, resolver.resolveName(target));
    } else if (isAddressable(target)) {
      return checkAddress(target, target.getAddress());
    } else if (target && typeof target.then === "function") {
      return checkAddress(target, target);
    }
    assertArgument(false, "unsupported addressable value", "target", target);
  }
  var init_checks = __esm({
    "node_modules/ethers/lib.esm/address/checks.js"() {
      init_utils();
      init_address();
    }
  });

  // node_modules/ethers/lib.esm/address/index.js
  var init_address2 = __esm({
    "node_modules/ethers/lib.esm/address/index.js"() {
      init_address();
      init_contract_address();
      init_checks();
    }
  });

  // node_modules/ethers/lib.esm/abi/typed.js
  function n(value, width) {
    let signed2 = false;
    if (width < 0) {
      signed2 = true;
      width *= -1;
    }
    return new Typed(_gaurd, `${signed2 ? "" : "u"}int${width}`, value, { signed: signed2, width });
  }
  function b(value, size) {
    return new Typed(_gaurd, `bytes${size ? size : ""}`, value, { size });
  }
  var _gaurd, _typedSymbol, _options, _Typed, Typed;
  var init_typed = __esm({
    "node_modules/ethers/lib.esm/abi/typed.js"() {
      init_utils();
      _gaurd = {};
      _typedSymbol = Symbol.for("_ethers_typed");
      _Typed = class _Typed {
        /**
         *  @_ignore:
         */
        constructor(gaurd, type2, value, options) {
          /**
           *  The type, as a Solidity-compatible type.
           */
          __publicField(this, "type");
          /**
           *  The actual value.
           */
          __publicField(this, "value");
          __privateAdd(this, _options);
          /**
           *  @_ignore:
           */
          __publicField(this, "_typedSymbol");
          if (options == null) {
            options = null;
          }
          assertPrivate(_gaurd, gaurd, "Typed");
          defineProperties(this, { _typedSymbol, type: type2, value });
          __privateSet(this, _options, options);
          this.format();
        }
        /**
         *  Format the type as a Human-Readable type.
         */
        format() {
          if (this.type === "array") {
            throw new Error("");
          } else if (this.type === "dynamicArray") {
            throw new Error("");
          } else if (this.type === "tuple") {
            return `tuple(${this.value.map((v) => v.format()).join(",")})`;
          }
          return this.type;
        }
        /**
         *  The default value returned by this type.
         */
        defaultValue() {
          return 0;
        }
        /**
         *  The minimum value for numeric types.
         */
        minValue() {
          return 0;
        }
        /**
         *  The maximum value for numeric types.
         */
        maxValue() {
          return 0;
        }
        /**
         *  Returns ``true`` and provides a type guard is this is a [[TypedBigInt]].
         */
        isBigInt() {
          return !!this.type.match(/^u?int[0-9]+$/);
        }
        /**
         *  Returns ``true`` and provides a type guard is this is a [[TypedData]].
         */
        isData() {
          return this.type.startsWith("bytes");
        }
        /**
         *  Returns ``true`` and provides a type guard is this is a [[TypedString]].
         */
        isString() {
          return this.type === "string";
        }
        /**
         *  Returns the tuple name, if this is a tuple. Throws otherwise.
         */
        get tupleName() {
          if (this.type !== "tuple") {
            throw TypeError("not a tuple");
          }
          return __privateGet(this, _options);
        }
        // Returns the length of this type as an array
        // - `null` indicates the length is unforced, it could be dynamic
        // - `-1` indicates the length is dynamic
        // - any other value indicates it is a static array and is its length
        /**
         *  Returns the length of the array type or ``-1`` if it is dynamic.
         *
         *  Throws if the type is not an array.
         */
        get arrayLength() {
          if (this.type !== "array") {
            throw TypeError("not an array");
          }
          if (__privateGet(this, _options) === true) {
            return -1;
          }
          if (__privateGet(this, _options) === false) {
            return this.value.length;
          }
          return null;
        }
        /**
         *  Returns a new **Typed** of %%type%% with the %%value%%.
         */
        static from(type2, value) {
          return new _Typed(_gaurd, type2, value);
        }
        /**
         *  Return a new ``uint8`` type for %%v%%.
         */
        static uint8(v) {
          return n(v, 8);
        }
        /**
         *  Return a new ``uint16`` type for %%v%%.
         */
        static uint16(v) {
          return n(v, 16);
        }
        /**
         *  Return a new ``uint24`` type for %%v%%.
         */
        static uint24(v) {
          return n(v, 24);
        }
        /**
         *  Return a new ``uint32`` type for %%v%%.
         */
        static uint32(v) {
          return n(v, 32);
        }
        /**
         *  Return a new ``uint40`` type for %%v%%.
         */
        static uint40(v) {
          return n(v, 40);
        }
        /**
         *  Return a new ``uint48`` type for %%v%%.
         */
        static uint48(v) {
          return n(v, 48);
        }
        /**
         *  Return a new ``uint56`` type for %%v%%.
         */
        static uint56(v) {
          return n(v, 56);
        }
        /**
         *  Return a new ``uint64`` type for %%v%%.
         */
        static uint64(v) {
          return n(v, 64);
        }
        /**
         *  Return a new ``uint72`` type for %%v%%.
         */
        static uint72(v) {
          return n(v, 72);
        }
        /**
         *  Return a new ``uint80`` type for %%v%%.
         */
        static uint80(v) {
          return n(v, 80);
        }
        /**
         *  Return a new ``uint88`` type for %%v%%.
         */
        static uint88(v) {
          return n(v, 88);
        }
        /**
         *  Return a new ``uint96`` type for %%v%%.
         */
        static uint96(v) {
          return n(v, 96);
        }
        /**
         *  Return a new ``uint104`` type for %%v%%.
         */
        static uint104(v) {
          return n(v, 104);
        }
        /**
         *  Return a new ``uint112`` type for %%v%%.
         */
        static uint112(v) {
          return n(v, 112);
        }
        /**
         *  Return a new ``uint120`` type for %%v%%.
         */
        static uint120(v) {
          return n(v, 120);
        }
        /**
         *  Return a new ``uint128`` type for %%v%%.
         */
        static uint128(v) {
          return n(v, 128);
        }
        /**
         *  Return a new ``uint136`` type for %%v%%.
         */
        static uint136(v) {
          return n(v, 136);
        }
        /**
         *  Return a new ``uint144`` type for %%v%%.
         */
        static uint144(v) {
          return n(v, 144);
        }
        /**
         *  Return a new ``uint152`` type for %%v%%.
         */
        static uint152(v) {
          return n(v, 152);
        }
        /**
         *  Return a new ``uint160`` type for %%v%%.
         */
        static uint160(v) {
          return n(v, 160);
        }
        /**
         *  Return a new ``uint168`` type for %%v%%.
         */
        static uint168(v) {
          return n(v, 168);
        }
        /**
         *  Return a new ``uint176`` type for %%v%%.
         */
        static uint176(v) {
          return n(v, 176);
        }
        /**
         *  Return a new ``uint184`` type for %%v%%.
         */
        static uint184(v) {
          return n(v, 184);
        }
        /**
         *  Return a new ``uint192`` type for %%v%%.
         */
        static uint192(v) {
          return n(v, 192);
        }
        /**
         *  Return a new ``uint200`` type for %%v%%.
         */
        static uint200(v) {
          return n(v, 200);
        }
        /**
         *  Return a new ``uint208`` type for %%v%%.
         */
        static uint208(v) {
          return n(v, 208);
        }
        /**
         *  Return a new ``uint216`` type for %%v%%.
         */
        static uint216(v) {
          return n(v, 216);
        }
        /**
         *  Return a new ``uint224`` type for %%v%%.
         */
        static uint224(v) {
          return n(v, 224);
        }
        /**
         *  Return a new ``uint232`` type for %%v%%.
         */
        static uint232(v) {
          return n(v, 232);
        }
        /**
         *  Return a new ``uint240`` type for %%v%%.
         */
        static uint240(v) {
          return n(v, 240);
        }
        /**
         *  Return a new ``uint248`` type for %%v%%.
         */
        static uint248(v) {
          return n(v, 248);
        }
        /**
         *  Return a new ``uint256`` type for %%v%%.
         */
        static uint256(v) {
          return n(v, 256);
        }
        /**
         *  Return a new ``uint256`` type for %%v%%.
         */
        static uint(v) {
          return n(v, 256);
        }
        /**
         *  Return a new ``int8`` type for %%v%%.
         */
        static int8(v) {
          return n(v, -8);
        }
        /**
         *  Return a new ``int16`` type for %%v%%.
         */
        static int16(v) {
          return n(v, -16);
        }
        /**
         *  Return a new ``int24`` type for %%v%%.
         */
        static int24(v) {
          return n(v, -24);
        }
        /**
         *  Return a new ``int32`` type for %%v%%.
         */
        static int32(v) {
          return n(v, -32);
        }
        /**
         *  Return a new ``int40`` type for %%v%%.
         */
        static int40(v) {
          return n(v, -40);
        }
        /**
         *  Return a new ``int48`` type for %%v%%.
         */
        static int48(v) {
          return n(v, -48);
        }
        /**
         *  Return a new ``int56`` type for %%v%%.
         */
        static int56(v) {
          return n(v, -56);
        }
        /**
         *  Return a new ``int64`` type for %%v%%.
         */
        static int64(v) {
          return n(v, -64);
        }
        /**
         *  Return a new ``int72`` type for %%v%%.
         */
        static int72(v) {
          return n(v, -72);
        }
        /**
         *  Return a new ``int80`` type for %%v%%.
         */
        static int80(v) {
          return n(v, -80);
        }
        /**
         *  Return a new ``int88`` type for %%v%%.
         */
        static int88(v) {
          return n(v, -88);
        }
        /**
         *  Return a new ``int96`` type for %%v%%.
         */
        static int96(v) {
          return n(v, -96);
        }
        /**
         *  Return a new ``int104`` type for %%v%%.
         */
        static int104(v) {
          return n(v, -104);
        }
        /**
         *  Return a new ``int112`` type for %%v%%.
         */
        static int112(v) {
          return n(v, -112);
        }
        /**
         *  Return a new ``int120`` type for %%v%%.
         */
        static int120(v) {
          return n(v, -120);
        }
        /**
         *  Return a new ``int128`` type for %%v%%.
         */
        static int128(v) {
          return n(v, -128);
        }
        /**
         *  Return a new ``int136`` type for %%v%%.
         */
        static int136(v) {
          return n(v, -136);
        }
        /**
         *  Return a new ``int144`` type for %%v%%.
         */
        static int144(v) {
          return n(v, -144);
        }
        /**
         *  Return a new ``int52`` type for %%v%%.
         */
        static int152(v) {
          return n(v, -152);
        }
        /**
         *  Return a new ``int160`` type for %%v%%.
         */
        static int160(v) {
          return n(v, -160);
        }
        /**
         *  Return a new ``int168`` type for %%v%%.
         */
        static int168(v) {
          return n(v, -168);
        }
        /**
         *  Return a new ``int176`` type for %%v%%.
         */
        static int176(v) {
          return n(v, -176);
        }
        /**
         *  Return a new ``int184`` type for %%v%%.
         */
        static int184(v) {
          return n(v, -184);
        }
        /**
         *  Return a new ``int92`` type for %%v%%.
         */
        static int192(v) {
          return n(v, -192);
        }
        /**
         *  Return a new ``int200`` type for %%v%%.
         */
        static int200(v) {
          return n(v, -200);
        }
        /**
         *  Return a new ``int208`` type for %%v%%.
         */
        static int208(v) {
          return n(v, -208);
        }
        /**
         *  Return a new ``int216`` type for %%v%%.
         */
        static int216(v) {
          return n(v, -216);
        }
        /**
         *  Return a new ``int224`` type for %%v%%.
         */
        static int224(v) {
          return n(v, -224);
        }
        /**
         *  Return a new ``int232`` type for %%v%%.
         */
        static int232(v) {
          return n(v, -232);
        }
        /**
         *  Return a new ``int240`` type for %%v%%.
         */
        static int240(v) {
          return n(v, -240);
        }
        /**
         *  Return a new ``int248`` type for %%v%%.
         */
        static int248(v) {
          return n(v, -248);
        }
        /**
         *  Return a new ``int256`` type for %%v%%.
         */
        static int256(v) {
          return n(v, -256);
        }
        /**
         *  Return a new ``int256`` type for %%v%%.
         */
        static int(v) {
          return n(v, -256);
        }
        /**
         *  Return a new ``bytes1`` type for %%v%%.
         */
        static bytes1(v) {
          return b(v, 1);
        }
        /**
         *  Return a new ``bytes2`` type for %%v%%.
         */
        static bytes2(v) {
          return b(v, 2);
        }
        /**
         *  Return a new ``bytes3`` type for %%v%%.
         */
        static bytes3(v) {
          return b(v, 3);
        }
        /**
         *  Return a new ``bytes4`` type for %%v%%.
         */
        static bytes4(v) {
          return b(v, 4);
        }
        /**
         *  Return a new ``bytes5`` type for %%v%%.
         */
        static bytes5(v) {
          return b(v, 5);
        }
        /**
         *  Return a new ``bytes6`` type for %%v%%.
         */
        static bytes6(v) {
          return b(v, 6);
        }
        /**
         *  Return a new ``bytes7`` type for %%v%%.
         */
        static bytes7(v) {
          return b(v, 7);
        }
        /**
         *  Return a new ``bytes8`` type for %%v%%.
         */
        static bytes8(v) {
          return b(v, 8);
        }
        /**
         *  Return a new ``bytes9`` type for %%v%%.
         */
        static bytes9(v) {
          return b(v, 9);
        }
        /**
         *  Return a new ``bytes10`` type for %%v%%.
         */
        static bytes10(v) {
          return b(v, 10);
        }
        /**
         *  Return a new ``bytes11`` type for %%v%%.
         */
        static bytes11(v) {
          return b(v, 11);
        }
        /**
         *  Return a new ``bytes12`` type for %%v%%.
         */
        static bytes12(v) {
          return b(v, 12);
        }
        /**
         *  Return a new ``bytes13`` type for %%v%%.
         */
        static bytes13(v) {
          return b(v, 13);
        }
        /**
         *  Return a new ``bytes14`` type for %%v%%.
         */
        static bytes14(v) {
          return b(v, 14);
        }
        /**
         *  Return a new ``bytes15`` type for %%v%%.
         */
        static bytes15(v) {
          return b(v, 15);
        }
        /**
         *  Return a new ``bytes16`` type for %%v%%.
         */
        static bytes16(v) {
          return b(v, 16);
        }
        /**
         *  Return a new ``bytes17`` type for %%v%%.
         */
        static bytes17(v) {
          return b(v, 17);
        }
        /**
         *  Return a new ``bytes18`` type for %%v%%.
         */
        static bytes18(v) {
          return b(v, 18);
        }
        /**
         *  Return a new ``bytes19`` type for %%v%%.
         */
        static bytes19(v) {
          return b(v, 19);
        }
        /**
         *  Return a new ``bytes20`` type for %%v%%.
         */
        static bytes20(v) {
          return b(v, 20);
        }
        /**
         *  Return a new ``bytes21`` type for %%v%%.
         */
        static bytes21(v) {
          return b(v, 21);
        }
        /**
         *  Return a new ``bytes22`` type for %%v%%.
         */
        static bytes22(v) {
          return b(v, 22);
        }
        /**
         *  Return a new ``bytes23`` type for %%v%%.
         */
        static bytes23(v) {
          return b(v, 23);
        }
        /**
         *  Return a new ``bytes24`` type for %%v%%.
         */
        static bytes24(v) {
          return b(v, 24);
        }
        /**
         *  Return a new ``bytes25`` type for %%v%%.
         */
        static bytes25(v) {
          return b(v, 25);
        }
        /**
         *  Return a new ``bytes26`` type for %%v%%.
         */
        static bytes26(v) {
          return b(v, 26);
        }
        /**
         *  Return a new ``bytes27`` type for %%v%%.
         */
        static bytes27(v) {
          return b(v, 27);
        }
        /**
         *  Return a new ``bytes28`` type for %%v%%.
         */
        static bytes28(v) {
          return b(v, 28);
        }
        /**
         *  Return a new ``bytes29`` type for %%v%%.
         */
        static bytes29(v) {
          return b(v, 29);
        }
        /**
         *  Return a new ``bytes30`` type for %%v%%.
         */
        static bytes30(v) {
          return b(v, 30);
        }
        /**
         *  Return a new ``bytes31`` type for %%v%%.
         */
        static bytes31(v) {
          return b(v, 31);
        }
        /**
         *  Return a new ``bytes32`` type for %%v%%.
         */
        static bytes32(v) {
          return b(v, 32);
        }
        /**
         *  Return a new ``address`` type for %%v%%.
         */
        static address(v) {
          return new _Typed(_gaurd, "address", v);
        }
        /**
         *  Return a new ``bool`` type for %%v%%.
         */
        static bool(v) {
          return new _Typed(_gaurd, "bool", !!v);
        }
        /**
         *  Return a new ``bytes`` type for %%v%%.
         */
        static bytes(v) {
          return new _Typed(_gaurd, "bytes", v);
        }
        /**
         *  Return a new ``string`` type for %%v%%.
         */
        static string(v) {
          return new _Typed(_gaurd, "string", v);
        }
        /**
         *  Return a new ``array`` type for %%v%%, allowing %%dynamic%% length.
         */
        static array(v, dynamic) {
          throw new Error("not implemented yet");
          return new _Typed(_gaurd, "array", v, dynamic);
        }
        /**
         *  Return a new ``tuple`` type for %%v%%, with the optional %%name%%.
         */
        static tuple(v, name) {
          throw new Error("not implemented yet");
          return new _Typed(_gaurd, "tuple", v, name);
        }
        /**
         *  Return a new ``uint8`` type for %%v%%.
         */
        static overrides(v) {
          return new _Typed(_gaurd, "overrides", Object.assign({}, v));
        }
        /**
         *  Returns true only if %%value%% is a [[Typed]] instance.
         */
        static isTyped(value) {
          return value && typeof value === "object" && "_typedSymbol" in value && value._typedSymbol === _typedSymbol;
        }
        /**
         *  If the value is a [[Typed]] instance, validates the underlying value
         *  and returns it, otherwise returns value directly.
         *
         *  This is useful for functions that with to accept either a [[Typed]]
         *  object or values.
         */
        static dereference(value, type2) {
          if (_Typed.isTyped(value)) {
            if (value.type !== type2) {
              throw new Error(`invalid type: expecetd ${type2}, got ${value.type}`);
            }
            return value.value;
          }
          return value;
        }
      };
      _options = new WeakMap();
      Typed = _Typed;
    }
  });

  // node_modules/ethers/lib.esm/abi/coders/address.js
  var AddressCoder;
  var init_address3 = __esm({
    "node_modules/ethers/lib.esm/abi/coders/address.js"() {
      init_address2();
      init_maths();
      init_typed();
      init_abstract_coder();
      AddressCoder = class extends Coder {
        constructor(localName) {
          super("address", "address", localName, false);
        }
        defaultValue() {
          return "0x0000000000000000000000000000000000000000";
        }
        encode(writer, _value2) {
          let value = Typed.dereference(_value2, "string");
          try {
            value = getAddress(value);
          } catch (error) {
            return this._throwError(error.message, _value2);
          }
          return writer.writeValue(value);
        }
        decode(reader) {
          return getAddress(toBeHex(reader.readValue(), 20));
        }
      };
    }
  });

  // node_modules/ethers/lib.esm/abi/coders/anonymous.js
  var AnonymousCoder;
  var init_anonymous = __esm({
    "node_modules/ethers/lib.esm/abi/coders/anonymous.js"() {
      init_abstract_coder();
      AnonymousCoder = class extends Coder {
        constructor(coder) {
          super(coder.name, coder.type, "_", coder.dynamic);
          __publicField(this, "coder");
          this.coder = coder;
        }
        defaultValue() {
          return this.coder.defaultValue();
        }
        encode(writer, value) {
          return this.coder.encode(writer, value);
        }
        decode(reader) {
          return this.coder.decode(reader);
        }
      };
    }
  });

  // node_modules/ethers/lib.esm/abi/coders/array.js
  function pack(writer, coders, values) {
    let arrayValues = [];
    if (Array.isArray(values)) {
      arrayValues = values;
    } else if (values && typeof values === "object") {
      let unique = {};
      arrayValues = coders.map((coder) => {
        const name = coder.localName;
        assert(name, "cannot encode object for signature with missing names", "INVALID_ARGUMENT", { argument: "values", info: { coder }, value: values });
        assert(!unique[name], "cannot encode object for signature with duplicate names", "INVALID_ARGUMENT", { argument: "values", info: { coder }, value: values });
        unique[name] = true;
        return values[name];
      });
    } else {
      assertArgument(false, "invalid tuple value", "tuple", values);
    }
    assertArgument(coders.length === arrayValues.length, "types/value length mismatch", "tuple", values);
    let staticWriter = new Writer();
    let dynamicWriter = new Writer();
    let updateFuncs = [];
    coders.forEach((coder, index) => {
      let value = arrayValues[index];
      if (coder.dynamic) {
        let dynamicOffset = dynamicWriter.length;
        coder.encode(dynamicWriter, value);
        let updateFunc = staticWriter.writeUpdatableValue();
        updateFuncs.push((baseOffset) => {
          updateFunc(baseOffset + dynamicOffset);
        });
      } else {
        coder.encode(staticWriter, value);
      }
    });
    updateFuncs.forEach((func) => {
      func(staticWriter.length);
    });
    let length = writer.appendWriter(staticWriter);
    length += writer.appendWriter(dynamicWriter);
    return length;
  }
  function unpack(reader, coders) {
    let values = [];
    let keys = [];
    let baseReader = reader.subReader(0);
    coders.forEach((coder) => {
      let value = null;
      if (coder.dynamic) {
        let offset2 = reader.readIndex();
        let offsetReader = baseReader.subReader(offset2);
        try {
          value = coder.decode(offsetReader);
        } catch (error) {
          if (isError(error, "BUFFER_OVERRUN")) {
            throw error;
          }
          value = error;
          value.baseType = coder.name;
          value.name = coder.localName;
          value.type = coder.type;
        }
      } else {
        try {
          value = coder.decode(reader);
        } catch (error) {
          if (isError(error, "BUFFER_OVERRUN")) {
            throw error;
          }
          value = error;
          value.baseType = coder.name;
          value.name = coder.localName;
          value.type = coder.type;
        }
      }
      if (value == void 0) {
        throw new Error("investigate");
      }
      values.push(value);
      keys.push(coder.localName || null);
    });
    return Result.fromItems(values, keys);
  }
  var ArrayCoder;
  var init_array = __esm({
    "node_modules/ethers/lib.esm/abi/coders/array.js"() {
      init_utils();
      init_typed();
      init_abstract_coder();
      init_anonymous();
      ArrayCoder = class extends Coder {
        constructor(coder, length, localName) {
          const type2 = coder.type + "[" + (length >= 0 ? length : "") + "]";
          const dynamic = length === -1 || coder.dynamic;
          super("array", type2, localName, dynamic);
          __publicField(this, "coder");
          __publicField(this, "length");
          defineProperties(this, { coder, length });
        }
        defaultValue() {
          const defaultChild = this.coder.defaultValue();
          const result = [];
          for (let i = 0; i < this.length; i++) {
            result.push(defaultChild);
          }
          return result;
        }
        encode(writer, _value2) {
          const value = Typed.dereference(_value2, "array");
          if (!Array.isArray(value)) {
            this._throwError("expected array value", value);
          }
          let count = this.length;
          if (count === -1) {
            count = value.length;
            writer.writeValue(value.length);
          }
          assertArgumentCount(value.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
          let coders = [];
          for (let i = 0; i < value.length; i++) {
            coders.push(this.coder);
          }
          return pack(writer, coders, value);
        }
        decode(reader) {
          let count = this.length;
          if (count === -1) {
            count = reader.readIndex();
            assert(count * WordSize <= reader.dataLength, "insufficient data length", "BUFFER_OVERRUN", { buffer: reader.bytes, offset: count * WordSize, length: reader.dataLength });
          }
          let coders = [];
          for (let i = 0; i < count; i++) {
            coders.push(new AnonymousCoder(this.coder));
          }
          return unpack(reader, coders);
        }
      };
    }
  });

  // node_modules/ethers/lib.esm/abi/coders/boolean.js
  var BooleanCoder;
  var init_boolean = __esm({
    "node_modules/ethers/lib.esm/abi/coders/boolean.js"() {
      init_typed();
      init_abstract_coder();
      BooleanCoder = class extends Coder {
        constructor(localName) {
          super("bool", "bool", localName, false);
        }
        defaultValue() {
          return false;
        }
        encode(writer, _value2) {
          const value = Typed.dereference(_value2, "bool");
          return writer.writeValue(value ? 1 : 0);
        }
        decode(reader) {
          return !!reader.readValue();
        }
      };
    }
  });

  // node_modules/ethers/lib.esm/abi/coders/bytes.js
  var DynamicBytesCoder, BytesCoder;
  var init_bytes = __esm({
    "node_modules/ethers/lib.esm/abi/coders/bytes.js"() {
      init_utils();
      init_abstract_coder();
      DynamicBytesCoder = class extends Coder {
        constructor(type2, localName) {
          super(type2, type2, localName, true);
        }
        defaultValue() {
          return "0x";
        }
        encode(writer, value) {
          value = getBytesCopy(value);
          let length = writer.writeValue(value.length);
          length += writer.writeBytes(value);
          return length;
        }
        decode(reader) {
          return reader.readBytes(reader.readIndex(), true);
        }
      };
      BytesCoder = class extends DynamicBytesCoder {
        constructor(localName) {
          super("bytes", localName);
        }
        decode(reader) {
          return hexlify(super.decode(reader));
        }
      };
    }
  });

  // node_modules/ethers/lib.esm/abi/coders/fixed-bytes.js
  var FixedBytesCoder;
  var init_fixed_bytes = __esm({
    "node_modules/ethers/lib.esm/abi/coders/fixed-bytes.js"() {
      init_utils();
      init_typed();
      init_abstract_coder();
      FixedBytesCoder = class extends Coder {
        constructor(size, localName) {
          let name = "bytes" + String(size);
          super(name, name, localName, false);
          __publicField(this, "size");
          defineProperties(this, { size }, { size: "number" });
        }
        defaultValue() {
          return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
        }
        encode(writer, _value2) {
          let data = getBytesCopy(Typed.dereference(_value2, this.type));
          if (data.length !== this.size) {
            this._throwError("incorrect data length", _value2);
          }
          return writer.writeBytes(data);
        }
        decode(reader) {
          return hexlify(reader.readBytes(this.size));
        }
      };
    }
  });

  // node_modules/ethers/lib.esm/abi/coders/null.js
  var Empty, NullCoder;
  var init_null = __esm({
    "node_modules/ethers/lib.esm/abi/coders/null.js"() {
      init_abstract_coder();
      Empty = new Uint8Array([]);
      NullCoder = class extends Coder {
        constructor(localName) {
          super("null", "", localName, false);
        }
        defaultValue() {
          return null;
        }
        encode(writer, value) {
          if (value != null) {
            this._throwError("not null", value);
          }
          return writer.writeBytes(Empty);
        }
        decode(reader) {
          reader.readBytes(0);
          return null;
        }
      };
    }
  });

  // node_modules/ethers/lib.esm/abi/coders/number.js
  var BN_06, BN_14, BN_MAX_UINT256, NumberCoder;
  var init_number = __esm({
    "node_modules/ethers/lib.esm/abi/coders/number.js"() {
      init_utils();
      init_typed();
      init_abstract_coder();
      BN_06 = BigInt(0);
      BN_14 = BigInt(1);
      BN_MAX_UINT256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
      NumberCoder = class extends Coder {
        constructor(size, signed2, localName) {
          const name = (signed2 ? "int" : "uint") + size * 8;
          super(name, name, localName, false);
          __publicField(this, "size");
          __publicField(this, "signed");
          defineProperties(this, { size, signed: signed2 }, { size: "number", signed: "boolean" });
        }
        defaultValue() {
          return 0;
        }
        encode(writer, _value2) {
          let value = getBigInt(Typed.dereference(_value2, this.type));
          let maxUintValue = mask(BN_MAX_UINT256, WordSize * 8);
          if (this.signed) {
            let bounds = mask(maxUintValue, this.size * 8 - 1);
            if (value > bounds || value < -(bounds + BN_14)) {
              this._throwError("value out-of-bounds", _value2);
            }
            value = toTwos(value, 8 * WordSize);
          } else if (value < BN_06 || value > mask(maxUintValue, this.size * 8)) {
            this._throwError("value out-of-bounds", _value2);
          }
          return writer.writeValue(value);
        }
        decode(reader) {
          let value = mask(reader.readValue(), this.size * 8);
          if (this.signed) {
            value = fromTwos(value, this.size * 8);
          }
          return value;
        }
      };
    }
  });

  // node_modules/ethers/lib.esm/abi/coders/string.js
  var StringCoder;
  var init_string = __esm({
    "node_modules/ethers/lib.esm/abi/coders/string.js"() {
      init_utf8();
      init_typed();
      init_bytes();
      StringCoder = class extends DynamicBytesCoder {
        constructor(localName) {
          super("string", localName);
        }
        defaultValue() {
          return "";
        }
        encode(writer, _value2) {
          return super.encode(writer, toUtf8Bytes(Typed.dereference(_value2, "string")));
        }
        decode(reader) {
          return toUtf8String(super.decode(reader));
        }
      };
    }
  });

  // node_modules/ethers/lib.esm/abi/coders/tuple.js
  var TupleCoder;
  var init_tuple = __esm({
    "node_modules/ethers/lib.esm/abi/coders/tuple.js"() {
      init_properties();
      init_typed();
      init_abstract_coder();
      init_array();
      TupleCoder = class extends Coder {
        constructor(coders, localName) {
          let dynamic = false;
          const types = [];
          coders.forEach((coder) => {
            if (coder.dynamic) {
              dynamic = true;
            }
            types.push(coder.type);
          });
          const type2 = "tuple(" + types.join(",") + ")";
          super("tuple", type2, localName, dynamic);
          __publicField(this, "coders");
          defineProperties(this, { coders: Object.freeze(coders.slice()) });
        }
        defaultValue() {
          const values = [];
          this.coders.forEach((coder) => {
            values.push(coder.defaultValue());
          });
          const uniqueNames = this.coders.reduce((accum, coder) => {
            const name = coder.localName;
            if (name) {
              if (!accum[name]) {
                accum[name] = 0;
              }
              accum[name]++;
            }
            return accum;
          }, {});
          this.coders.forEach((coder, index) => {
            let name = coder.localName;
            if (!name || uniqueNames[name] !== 1) {
              return;
            }
            if (name === "length") {
              name = "_length";
            }
            if (values[name] != null) {
              return;
            }
            values[name] = values[index];
          });
          return Object.freeze(values);
        }
        encode(writer, _value2) {
          const value = Typed.dereference(_value2, "tuple");
          return pack(writer, this.coders, value);
        }
        decode(reader) {
          return unpack(reader, this.coders);
        }
      };
    }
  });

  // node_modules/ethers/lib.esm/transaction/accesslist.js
  function accessSetify(addr, storageKeys) {
    return {
      address: getAddress(addr),
      storageKeys: storageKeys.map((storageKey, index) => {
        assertArgument(isHexString(storageKey, 32), "invalid slot", `storageKeys[${index}]`, storageKey);
        return storageKey.toLowerCase();
      })
    };
  }
  function accessListify(value) {
    if (Array.isArray(value)) {
      return value.map((set, index) => {
        if (Array.isArray(set)) {
          assertArgument(set.length === 2, "invalid slot set", `value[${index}]`, set);
          return accessSetify(set[0], set[1]);
        }
        assertArgument(set != null && typeof set === "object", "invalid address-slot set", "value", value);
        return accessSetify(set.address, set.storageKeys);
      });
    }
    assertArgument(value != null && typeof value === "object", "invalid access list", "value", value);
    const result = Object.keys(value).map((addr) => {
      const storageKeys = value[addr].reduce((accum, storageKey) => {
        accum[storageKey] = true;
        return accum;
      }, {});
      return accessSetify(addr, Object.keys(storageKeys).sort());
    });
    result.sort((a, b2) => a.address.localeCompare(b2.address));
    return result;
  }
  var init_accesslist = __esm({
    "node_modules/ethers/lib.esm/transaction/accesslist.js"() {
      init_address2();
      init_utils();
    }
  });

  // node_modules/ethers/lib.esm/transaction/authorization.js
  function authorizationify(auth) {
    return {
      address: getAddress(auth.address),
      nonce: getBigInt(auth.nonce != null ? auth.nonce : 0),
      chainId: getBigInt(auth.chainId != null ? auth.chainId : 0),
      signature: Signature.from(auth.signature)
    };
  }
  var init_authorization = __esm({
    "node_modules/ethers/lib.esm/transaction/authorization.js"() {
      init_address2();
      init_crypto2();
      init_utils();
    }
  });

  // node_modules/ethers/lib.esm/transaction/address.js
  function computeAddress(key) {
    let pubkey;
    if (typeof key === "string") {
      pubkey = SigningKey.computePublicKey(key, false);
    } else {
      pubkey = key.publicKey;
    }
    return getAddress(keccak256("0x" + pubkey.substring(4)).substring(26));
  }
  function recoverAddress(digest, signature2) {
    return computeAddress(SigningKey.recoverPublicKey(digest, signature2));
  }
  var init_address4 = __esm({
    "node_modules/ethers/lib.esm/transaction/address.js"() {
      init_address2();
      init_crypto2();
    }
  });

  // node_modules/ethers/lib.esm/transaction/transaction.js
  function getKzgLibrary(kzg) {
    const blobToKzgCommitment = (blob3) => {
      if ("computeBlobProof" in kzg) {
        if ("blobToKzgCommitment" in kzg && typeof kzg.blobToKzgCommitment === "function") {
          return getBytes(kzg.blobToKzgCommitment(hexlify(blob3)));
        }
      } else if ("blobToKzgCommitment" in kzg && typeof kzg.blobToKzgCommitment === "function") {
        return getBytes(kzg.blobToKzgCommitment(blob3));
      }
      if ("blobToKZGCommitment" in kzg && typeof kzg.blobToKZGCommitment === "function") {
        return getBytes(kzg.blobToKZGCommitment(hexlify(blob3)));
      }
      assertArgument(false, "unsupported KZG library", "kzg", kzg);
    };
    const computeBlobKzgProof = (blob3, commitment) => {
      if ("computeBlobProof" in kzg && typeof kzg.computeBlobProof === "function") {
        return getBytes(kzg.computeBlobProof(hexlify(blob3), hexlify(commitment)));
      }
      if ("computeBlobKzgProof" in kzg && typeof kzg.computeBlobKzgProof === "function") {
        return kzg.computeBlobKzgProof(blob3, commitment);
      }
      if ("computeBlobKZGProof" in kzg && typeof kzg.computeBlobKZGProof === "function") {
        return getBytes(kzg.computeBlobKZGProof(hexlify(blob3), hexlify(commitment)));
      }
      assertArgument(false, "unsupported KZG library", "kzg", kzg);
    };
    return { blobToKzgCommitment, computeBlobKzgProof };
  }
  function getVersionedHash(version3, hash2) {
    let versioned = version3.toString(16);
    while (versioned.length < 2) {
      versioned = "0" + versioned;
    }
    versioned += sha2562(hash2).substring(4);
    return "0x" + versioned;
  }
  function handleAddress(value) {
    if (value === "0x") {
      return null;
    }
    return getAddress(value);
  }
  function handleAccessList(value, param) {
    try {
      return accessListify(value);
    } catch (error) {
      assertArgument(false, error.message, param, value);
    }
  }
  function handleAuthorizationList(value, param) {
    try {
      if (!Array.isArray(value)) {
        throw new Error("authorizationList: invalid array");
      }
      const result = [];
      for (let i = 0; i < value.length; i++) {
        const auth = value[i];
        if (!Array.isArray(auth)) {
          throw new Error(`authorization[${i}]: invalid array`);
        }
        if (auth.length !== 6) {
          throw new Error(`authorization[${i}]: wrong length`);
        }
        if (!auth[1]) {
          throw new Error(`authorization[${i}]: null address`);
        }
        result.push({
          address: handleAddress(auth[1]),
          nonce: handleUint(auth[2], "nonce"),
          chainId: handleUint(auth[0], "chainId"),
          signature: Signature.from({
            yParity: handleNumber(auth[3], "yParity"),
            r: zeroPadValue(auth[4], 32),
            s: zeroPadValue(auth[5], 32)
          })
        });
      }
      return result;
    } catch (error) {
      assertArgument(false, error.message, param, value);
    }
  }
  function handleNumber(_value2, param) {
    if (_value2 === "0x") {
      return 0;
    }
    return getNumber2(_value2, param);
  }
  function handleUint(_value2, param) {
    if (_value2 === "0x") {
      return BN_07;
    }
    const value = getBigInt(_value2, param);
    assertArgument(value <= BN_MAX_UINT, "value exceeds uint size", param, value);
    return value;
  }
  function formatNumber(_value2, name) {
    const value = getBigInt(_value2, "value");
    const result = toBeArray(value);
    assertArgument(result.length <= 32, `value too large`, `tx.${name}`, value);
    return result;
  }
  function formatAccessList(value) {
    return accessListify(value).map((set) => [set.address, set.storageKeys]);
  }
  function formatAuthorizationList(value) {
    return value.map((a) => {
      return [
        formatNumber(a.chainId, "chainId"),
        a.address,
        formatNumber(a.nonce, "nonce"),
        formatNumber(a.signature.yParity, "yParity"),
        a.signature.r,
        a.signature.s
      ];
    });
  }
  function formatHashes(value, param) {
    assertArgument(Array.isArray(value), `invalid ${param}`, "value", value);
    for (let i = 0; i < value.length; i++) {
      assertArgument(isHexString(value[i], 32), "invalid ${ param } hash", `value[${i}]`, value[i]);
    }
    return value;
  }
  function _parseLegacy(data) {
    const fields = decodeRlp(data);
    assertArgument(Array.isArray(fields) && (fields.length === 9 || fields.length === 6), "invalid field count for legacy transaction", "data", data);
    const tx = {
      type: 0,
      nonce: handleNumber(fields[0], "nonce"),
      gasPrice: handleUint(fields[1], "gasPrice"),
      gasLimit: handleUint(fields[2], "gasLimit"),
      to: handleAddress(fields[3]),
      value: handleUint(fields[4], "value"),
      data: hexlify(fields[5]),
      chainId: BN_07
    };
    if (fields.length === 6) {
      return tx;
    }
    const v = handleUint(fields[6], "v");
    const r = handleUint(fields[7], "r");
    const s = handleUint(fields[8], "s");
    if (r === BN_07 && s === BN_07) {
      tx.chainId = v;
    } else {
      let chainId = (v - BN_352) / BN_22;
      if (chainId < BN_07) {
        chainId = BN_07;
      }
      tx.chainId = chainId;
      assertArgument(chainId !== BN_07 || (v === BN_272 || v === BN_282), "non-canonical legacy v", "v", fields[6]);
      tx.signature = Signature.from({
        r: zeroPadValue(fields[7], 32),
        s: zeroPadValue(fields[8], 32),
        v
      });
    }
    return tx;
  }
  function _serializeLegacy(tx, sig) {
    const fields = [
      formatNumber(tx.nonce, "nonce"),
      formatNumber(tx.gasPrice || 0, "gasPrice"),
      formatNumber(tx.gasLimit, "gasLimit"),
      tx.to || "0x",
      formatNumber(tx.value, "value"),
      tx.data
    ];
    let chainId = BN_07;
    if (tx.chainId != BN_07) {
      chainId = getBigInt(tx.chainId, "tx.chainId");
      assertArgument(!sig || sig.networkV == null || sig.legacyChainId === chainId, "tx.chainId/sig.v mismatch", "sig", sig);
    } else if (tx.signature) {
      const legacy = tx.signature.legacyChainId;
      if (legacy != null) {
        chainId = legacy;
      }
    }
    if (!sig) {
      if (chainId !== BN_07) {
        fields.push(toBeArray(chainId));
        fields.push("0x");
        fields.push("0x");
      }
      return encodeRlp(fields);
    }
    let v = BigInt(27 + sig.yParity);
    if (chainId !== BN_07) {
      v = Signature.getChainIdV(chainId, sig.v);
    } else if (BigInt(sig.v) !== v) {
      assertArgument(false, "tx.chainId/sig.v mismatch", "sig", sig);
    }
    fields.push(toBeArray(v));
    fields.push(toBeArray(sig.r));
    fields.push(toBeArray(sig.s));
    return encodeRlp(fields);
  }
  function _parseEipSignature(tx, fields) {
    let yParity;
    try {
      yParity = handleNumber(fields[0], "yParity");
      if (yParity !== 0 && yParity !== 1) {
        throw new Error("bad yParity");
      }
    } catch (error) {
      assertArgument(false, "invalid yParity", "yParity", fields[0]);
    }
    const r = zeroPadValue(fields[1], 32);
    const s = zeroPadValue(fields[2], 32);
    const signature2 = Signature.from({ r, s, yParity });
    tx.signature = signature2;
  }
  function _parseEip1559(data) {
    const fields = decodeRlp(getBytes(data).slice(1));
    assertArgument(Array.isArray(fields) && (fields.length === 9 || fields.length === 12), "invalid field count for transaction type: 2", "data", hexlify(data));
    const tx = {
      type: 2,
      chainId: handleUint(fields[0], "chainId"),
      nonce: handleNumber(fields[1], "nonce"),
      maxPriorityFeePerGas: handleUint(fields[2], "maxPriorityFeePerGas"),
      maxFeePerGas: handleUint(fields[3], "maxFeePerGas"),
      gasPrice: null,
      gasLimit: handleUint(fields[4], "gasLimit"),
      to: handleAddress(fields[5]),
      value: handleUint(fields[6], "value"),
      data: hexlify(fields[7]),
      accessList: handleAccessList(fields[8], "accessList")
    };
    if (fields.length === 9) {
      return tx;
    }
    _parseEipSignature(tx, fields.slice(9));
    return tx;
  }
  function _serializeEip1559(tx, sig) {
    const fields = [
      formatNumber(tx.chainId, "chainId"),
      formatNumber(tx.nonce, "nonce"),
      formatNumber(tx.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
      formatNumber(tx.maxFeePerGas || 0, "maxFeePerGas"),
      formatNumber(tx.gasLimit, "gasLimit"),
      tx.to || "0x",
      formatNumber(tx.value, "value"),
      tx.data,
      formatAccessList(tx.accessList || [])
    ];
    if (sig) {
      fields.push(formatNumber(sig.yParity, "yParity"));
      fields.push(toBeArray(sig.r));
      fields.push(toBeArray(sig.s));
    }
    return concat(["0x02", encodeRlp(fields)]);
  }
  function _parseEip2930(data) {
    const fields = decodeRlp(getBytes(data).slice(1));
    assertArgument(Array.isArray(fields) && (fields.length === 8 || fields.length === 11), "invalid field count for transaction type: 1", "data", hexlify(data));
    const tx = {
      type: 1,
      chainId: handleUint(fields[0], "chainId"),
      nonce: handleNumber(fields[1], "nonce"),
      gasPrice: handleUint(fields[2], "gasPrice"),
      gasLimit: handleUint(fields[3], "gasLimit"),
      to: handleAddress(fields[4]),
      value: handleUint(fields[5], "value"),
      data: hexlify(fields[6]),
      accessList: handleAccessList(fields[7], "accessList")
    };
    if (fields.length === 8) {
      return tx;
    }
    _parseEipSignature(tx, fields.slice(8));
    return tx;
  }
  function _serializeEip2930(tx, sig) {
    const fields = [
      formatNumber(tx.chainId, "chainId"),
      formatNumber(tx.nonce, "nonce"),
      formatNumber(tx.gasPrice || 0, "gasPrice"),
      formatNumber(tx.gasLimit, "gasLimit"),
      tx.to || "0x",
      formatNumber(tx.value, "value"),
      tx.data,
      formatAccessList(tx.accessList || [])
    ];
    if (sig) {
      fields.push(formatNumber(sig.yParity, "recoveryParam"));
      fields.push(toBeArray(sig.r));
      fields.push(toBeArray(sig.s));
    }
    return concat(["0x01", encodeRlp(fields)]);
  }
  function _parseEip4844(data) {
    let fields = decodeRlp(getBytes(data).slice(1));
    let typeName = "3";
    let blobs = null;
    if (fields.length === 4 && Array.isArray(fields[0])) {
      typeName = "3 (network format)";
      const fBlobs = fields[1], fCommits = fields[2], fProofs = fields[3];
      assertArgument(Array.isArray(fBlobs), "invalid network format: blobs not an array", "fields[1]", fBlobs);
      assertArgument(Array.isArray(fCommits), "invalid network format: commitments not an array", "fields[2]", fCommits);
      assertArgument(Array.isArray(fProofs), "invalid network format: proofs not an array", "fields[3]", fProofs);
      assertArgument(fBlobs.length === fCommits.length, "invalid network format: blobs/commitments length mismatch", "fields", fields);
      assertArgument(fBlobs.length === fProofs.length, "invalid network format: blobs/proofs length mismatch", "fields", fields);
      blobs = [];
      for (let i = 0; i < fields[1].length; i++) {
        blobs.push({
          data: fBlobs[i],
          commitment: fCommits[i],
          proof: fProofs[i]
        });
      }
      fields = fields[0];
    }
    assertArgument(Array.isArray(fields) && (fields.length === 11 || fields.length === 14), `invalid field count for transaction type: ${typeName}`, "data", hexlify(data));
    const tx = {
      type: 3,
      chainId: handleUint(fields[0], "chainId"),
      nonce: handleNumber(fields[1], "nonce"),
      maxPriorityFeePerGas: handleUint(fields[2], "maxPriorityFeePerGas"),
      maxFeePerGas: handleUint(fields[3], "maxFeePerGas"),
      gasPrice: null,
      gasLimit: handleUint(fields[4], "gasLimit"),
      to: handleAddress(fields[5]),
      value: handleUint(fields[6], "value"),
      data: hexlify(fields[7]),
      accessList: handleAccessList(fields[8], "accessList"),
      maxFeePerBlobGas: handleUint(fields[9], "maxFeePerBlobGas"),
      blobVersionedHashes: fields[10]
    };
    if (blobs) {
      tx.blobs = blobs;
    }
    assertArgument(tx.to != null, `invalid address for transaction type: ${typeName}`, "data", data);
    assertArgument(Array.isArray(tx.blobVersionedHashes), "invalid blobVersionedHashes: must be an array", "data", data);
    for (let i = 0; i < tx.blobVersionedHashes.length; i++) {
      assertArgument(isHexString(tx.blobVersionedHashes[i], 32), `invalid blobVersionedHash at index ${i}: must be length 32`, "data", data);
    }
    if (fields.length === 11) {
      return tx;
    }
    _parseEipSignature(tx, fields.slice(11));
    return tx;
  }
  function _serializeEip4844(tx, sig, blobs) {
    const fields = [
      formatNumber(tx.chainId, "chainId"),
      formatNumber(tx.nonce, "nonce"),
      formatNumber(tx.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
      formatNumber(tx.maxFeePerGas || 0, "maxFeePerGas"),
      formatNumber(tx.gasLimit, "gasLimit"),
      tx.to || ZeroAddress,
      formatNumber(tx.value, "value"),
      tx.data,
      formatAccessList(tx.accessList || []),
      formatNumber(tx.maxFeePerBlobGas || 0, "maxFeePerBlobGas"),
      formatHashes(tx.blobVersionedHashes || [], "blobVersionedHashes")
    ];
    if (sig) {
      fields.push(formatNumber(sig.yParity, "yParity"));
      fields.push(toBeArray(sig.r));
      fields.push(toBeArray(sig.s));
      if (blobs) {
        return concat([
          "0x03",
          encodeRlp([
            fields,
            blobs.map((b2) => b2.data),
            blobs.map((b2) => b2.commitment),
            blobs.map((b2) => b2.proof)
          ])
        ]);
      }
    }
    return concat(["0x03", encodeRlp(fields)]);
  }
  function _parseEip7702(data) {
    const fields = decodeRlp(getBytes(data).slice(1));
    assertArgument(Array.isArray(fields) && (fields.length === 10 || fields.length === 13), "invalid field count for transaction type: 4", "data", hexlify(data));
    const tx = {
      type: 4,
      chainId: handleUint(fields[0], "chainId"),
      nonce: handleNumber(fields[1], "nonce"),
      maxPriorityFeePerGas: handleUint(fields[2], "maxPriorityFeePerGas"),
      maxFeePerGas: handleUint(fields[3], "maxFeePerGas"),
      gasPrice: null,
      gasLimit: handleUint(fields[4], "gasLimit"),
      to: handleAddress(fields[5]),
      value: handleUint(fields[6], "value"),
      data: hexlify(fields[7]),
      accessList: handleAccessList(fields[8], "accessList"),
      authorizationList: handleAuthorizationList(fields[9], "authorizationList")
    };
    if (fields.length === 10) {
      return tx;
    }
    _parseEipSignature(tx, fields.slice(10));
    return tx;
  }
  function _serializeEip7702(tx, sig) {
    const fields = [
      formatNumber(tx.chainId, "chainId"),
      formatNumber(tx.nonce, "nonce"),
      formatNumber(tx.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
      formatNumber(tx.maxFeePerGas || 0, "maxFeePerGas"),
      formatNumber(tx.gasLimit, "gasLimit"),
      tx.to || "0x",
      formatNumber(tx.value, "value"),
      tx.data,
      formatAccessList(tx.accessList || []),
      formatAuthorizationList(tx.authorizationList || [])
    ];
    if (sig) {
      fields.push(formatNumber(sig.yParity, "yParity"));
      fields.push(toBeArray(sig.r));
      fields.push(toBeArray(sig.s));
    }
    return concat(["0x04", encodeRlp(fields)]);
  }
  var BN_07, BN_22, BN_272, BN_282, BN_352, BN_MAX_UINT, BLOB_SIZE, _type, _to, _data3, _nonce, _gasLimit, _gasPrice, _maxPriorityFeePerGas, _maxFeePerGas, _value, _chainId, _sig, _accessList, _maxFeePerBlobGas, _blobVersionedHashes, _kzg, _blobs, _auths, _Transaction_instances, getSerialized_fn, _Transaction, Transaction;
  var init_transaction = __esm({
    "node_modules/ethers/lib.esm/transaction/transaction.js"() {
      init_address2();
      init_addresses();
      init_crypto2();
      init_utils();
      init_accesslist();
      init_authorization();
      init_address4();
      BN_07 = BigInt(0);
      BN_22 = BigInt(2);
      BN_272 = BigInt(27);
      BN_282 = BigInt(28);
      BN_352 = BigInt(35);
      BN_MAX_UINT = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
      BLOB_SIZE = 4096 * 32;
      _Transaction = class _Transaction {
        /**
         *  Creates a new Transaction with default values.
         */
        constructor() {
          __privateAdd(this, _Transaction_instances);
          __privateAdd(this, _type);
          __privateAdd(this, _to);
          __privateAdd(this, _data3);
          __privateAdd(this, _nonce);
          __privateAdd(this, _gasLimit);
          __privateAdd(this, _gasPrice);
          __privateAdd(this, _maxPriorityFeePerGas);
          __privateAdd(this, _maxFeePerGas);
          __privateAdd(this, _value);
          __privateAdd(this, _chainId);
          __privateAdd(this, _sig);
          __privateAdd(this, _accessList);
          __privateAdd(this, _maxFeePerBlobGas);
          __privateAdd(this, _blobVersionedHashes);
          __privateAdd(this, _kzg);
          __privateAdd(this, _blobs);
          __privateAdd(this, _auths);
          __privateSet(this, _type, null);
          __privateSet(this, _to, null);
          __privateSet(this, _nonce, 0);
          __privateSet(this, _gasLimit, BN_07);
          __privateSet(this, _gasPrice, null);
          __privateSet(this, _maxPriorityFeePerGas, null);
          __privateSet(this, _maxFeePerGas, null);
          __privateSet(this, _data3, "0x");
          __privateSet(this, _value, BN_07);
          __privateSet(this, _chainId, BN_07);
          __privateSet(this, _sig, null);
          __privateSet(this, _accessList, null);
          __privateSet(this, _maxFeePerBlobGas, null);
          __privateSet(this, _blobVersionedHashes, null);
          __privateSet(this, _kzg, null);
          __privateSet(this, _blobs, null);
          __privateSet(this, _auths, null);
        }
        /**
         *  The transaction type.
         *
         *  If null, the type will be automatically inferred based on
         *  explicit properties.
         */
        get type() {
          return __privateGet(this, _type);
        }
        set type(value) {
          switch (value) {
            case null:
              __privateSet(this, _type, null);
              break;
            case 0:
            case "legacy":
              __privateSet(this, _type, 0);
              break;
            case 1:
            case "berlin":
            case "eip-2930":
              __privateSet(this, _type, 1);
              break;
            case 2:
            case "london":
            case "eip-1559":
              __privateSet(this, _type, 2);
              break;
            case 3:
            case "cancun":
            case "eip-4844":
              __privateSet(this, _type, 3);
              break;
            case 4:
            case "pectra":
            case "eip-7702":
              __privateSet(this, _type, 4);
              break;
            default:
              assertArgument(false, "unsupported transaction type", "type", value);
          }
        }
        /**
         *  The name of the transaction type.
         */
        get typeName() {
          switch (this.type) {
            case 0:
              return "legacy";
            case 1:
              return "eip-2930";
            case 2:
              return "eip-1559";
            case 3:
              return "eip-4844";
            case 4:
              return "eip-7702";
          }
          return null;
        }
        /**
         *  The ``to`` address for the transaction or ``null`` if the
         *  transaction is an ``init`` transaction.
         */
        get to() {
          const value = __privateGet(this, _to);
          if (value == null && this.type === 3) {
            return ZeroAddress;
          }
          return value;
        }
        set to(value) {
          __privateSet(this, _to, value == null ? null : getAddress(value));
        }
        /**
         *  The transaction nonce.
         */
        get nonce() {
          return __privateGet(this, _nonce);
        }
        set nonce(value) {
          __privateSet(this, _nonce, getNumber2(value, "value"));
        }
        /**
         *  The gas limit.
         */
        get gasLimit() {
          return __privateGet(this, _gasLimit);
        }
        set gasLimit(value) {
          __privateSet(this, _gasLimit, getBigInt(value));
        }
        /**
         *  The gas price.
         *
         *  On legacy networks this defines the fee that will be paid. On
         *  EIP-1559 networks, this should be ``null``.
         */
        get gasPrice() {
          const value = __privateGet(this, _gasPrice);
          if (value == null && (this.type === 0 || this.type === 1)) {
            return BN_07;
          }
          return value;
        }
        set gasPrice(value) {
          __privateSet(this, _gasPrice, value == null ? null : getBigInt(value, "gasPrice"));
        }
        /**
         *  The maximum priority fee per unit of gas to pay. On legacy
         *  networks this should be ``null``.
         */
        get maxPriorityFeePerGas() {
          const value = __privateGet(this, _maxPriorityFeePerGas);
          if (value == null) {
            if (this.type === 2 || this.type === 3) {
              return BN_07;
            }
            return null;
          }
          return value;
        }
        set maxPriorityFeePerGas(value) {
          __privateSet(this, _maxPriorityFeePerGas, value == null ? null : getBigInt(value, "maxPriorityFeePerGas"));
        }
        /**
         *  The maximum total fee per unit of gas to pay. On legacy
         *  networks this should be ``null``.
         */
        get maxFeePerGas() {
          const value = __privateGet(this, _maxFeePerGas);
          if (value == null) {
            if (this.type === 2 || this.type === 3) {
              return BN_07;
            }
            return null;
          }
          return value;
        }
        set maxFeePerGas(value) {
          __privateSet(this, _maxFeePerGas, value == null ? null : getBigInt(value, "maxFeePerGas"));
        }
        /**
         *  The transaction data. For ``init`` transactions this is the
         *  deployment code.
         */
        get data() {
          return __privateGet(this, _data3);
        }
        set data(value) {
          __privateSet(this, _data3, hexlify(value));
        }
        /**
         *  The amount of ether (in wei) to send in this transactions.
         */
        get value() {
          return __privateGet(this, _value);
        }
        set value(value) {
          __privateSet(this, _value, getBigInt(value, "value"));
        }
        /**
         *  The chain ID this transaction is valid on.
         */
        get chainId() {
          return __privateGet(this, _chainId);
        }
        set chainId(value) {
          __privateSet(this, _chainId, getBigInt(value));
        }
        /**
         *  If signed, the signature for this transaction.
         */
        get signature() {
          return __privateGet(this, _sig) || null;
        }
        set signature(value) {
          __privateSet(this, _sig, value == null ? null : Signature.from(value));
        }
        /**
         *  The access list.
         *
         *  An access list permits discounted (but pre-paid) access to
         *  bytecode and state variable access within contract execution.
         */
        get accessList() {
          const value = __privateGet(this, _accessList) || null;
          if (value == null) {
            if (this.type === 1 || this.type === 2 || this.type === 3) {
              return [];
            }
            return null;
          }
          return value;
        }
        set accessList(value) {
          __privateSet(this, _accessList, value == null ? null : accessListify(value));
        }
        get authorizationList() {
          const value = __privateGet(this, _auths) || null;
          if (value == null) {
            if (this.type === 4) {
              return [];
            }
          }
          return value;
        }
        set authorizationList(auths) {
          __privateSet(this, _auths, auths == null ? null : auths.map((a) => authorizationify(a)));
        }
        /**
         *  The max fee per blob gas for Cancun transactions.
         */
        get maxFeePerBlobGas() {
          const value = __privateGet(this, _maxFeePerBlobGas);
          if (value == null && this.type === 3) {
            return BN_07;
          }
          return value;
        }
        set maxFeePerBlobGas(value) {
          __privateSet(this, _maxFeePerBlobGas, value == null ? null : getBigInt(value, "maxFeePerBlobGas"));
        }
        /**
         *  The BLOb versioned hashes for Cancun transactions.
         */
        get blobVersionedHashes() {
          let value = __privateGet(this, _blobVersionedHashes);
          if (value == null && this.type === 3) {
            return [];
          }
          return value;
        }
        set blobVersionedHashes(value) {
          if (value != null) {
            assertArgument(Array.isArray(value), "blobVersionedHashes must be an Array", "value", value);
            value = value.slice();
            for (let i = 0; i < value.length; i++) {
              assertArgument(isHexString(value[i], 32), "invalid blobVersionedHash", `value[${i}]`, value[i]);
            }
          }
          __privateSet(this, _blobVersionedHashes, value);
        }
        /**
         *  The BLObs for the Transaction, if any.
         *
         *  If ``blobs`` is non-``null``, then the [[seriailized]]
         *  will return the network formatted sidecar, otherwise it
         *  will return the standard [[link-eip-2718]] payload. The
         *  [[unsignedSerialized]] is unaffected regardless.
         *
         *  When setting ``blobs``, either fully valid [[Blob]] objects
         *  may be specified (i.e. correctly padded, with correct
         *  committments and proofs) or a raw [[BytesLike]] may
         *  be provided.
         *
         *  If raw [[BytesLike]] are provided, the [[kzg]] property **must**
         *  be already set. The blob will be correctly padded and the
         *  [[KzgLibrary]] will be used to compute the committment and
         *  proof for the blob.
         *
         *  A BLOb is a sequence of field elements, each of which must
         *  be within the BLS field modulo, so some additional processing
         *  may be required to encode arbitrary data to ensure each 32 byte
         *  field is within the valid range.
         *
         *  Setting this automatically populates [[blobVersionedHashes]],
         *  overwriting any existing values. Setting this to ``null``
         *  does **not** remove the [[blobVersionedHashes]], leaving them
         *  present.
         */
        get blobs() {
          if (__privateGet(this, _blobs) == null) {
            return null;
          }
          return __privateGet(this, _blobs).map((b2) => Object.assign({}, b2));
        }
        set blobs(_blobs2) {
          if (_blobs2 == null) {
            __privateSet(this, _blobs, null);
            return;
          }
          const blobs = [];
          const versionedHashes = [];
          for (let i = 0; i < _blobs2.length; i++) {
            const blob3 = _blobs2[i];
            if (isBytesLike(blob3)) {
              assert(__privateGet(this, _kzg), "adding a raw blob requires a KZG library", "UNSUPPORTED_OPERATION", {
                operation: "set blobs()"
              });
              let data = getBytes(blob3);
              assertArgument(data.length <= BLOB_SIZE, "blob is too large", `blobs[${i}]`, blob3);
              if (data.length !== BLOB_SIZE) {
                const padded = new Uint8Array(BLOB_SIZE);
                padded.set(data);
                data = padded;
              }
              const commit = __privateGet(this, _kzg).blobToKzgCommitment(data);
              const proof = hexlify(__privateGet(this, _kzg).computeBlobKzgProof(data, commit));
              blobs.push({
                data: hexlify(data),
                commitment: hexlify(commit),
                proof
              });
              versionedHashes.push(getVersionedHash(1, commit));
            } else {
              const commit = hexlify(blob3.commitment);
              blobs.push({
                data: hexlify(blob3.data),
                commitment: commit,
                proof: hexlify(blob3.proof)
              });
              versionedHashes.push(getVersionedHash(1, commit));
            }
          }
          __privateSet(this, _blobs, blobs);
          __privateSet(this, _blobVersionedHashes, versionedHashes);
        }
        get kzg() {
          return __privateGet(this, _kzg);
        }
        set kzg(kzg) {
          if (kzg == null) {
            __privateSet(this, _kzg, null);
          } else {
            __privateSet(this, _kzg, getKzgLibrary(kzg));
          }
        }
        /**
         *  The transaction hash, if signed. Otherwise, ``null``.
         */
        get hash() {
          if (this.signature == null) {
            return null;
          }
          return keccak256(__privateMethod(this, _Transaction_instances, getSerialized_fn).call(this, true, false));
        }
        /**
         *  The pre-image hash of this transaction.
         *
         *  This is the digest that a [[Signer]] must sign to authorize
         *  this transaction.
         */
        get unsignedHash() {
          return keccak256(this.unsignedSerialized);
        }
        /**
         *  The sending address, if signed. Otherwise, ``null``.
         */
        get from() {
          if (this.signature == null) {
            return null;
          }
          return recoverAddress(this.unsignedHash, this.signature);
        }
        /**
         *  The public key of the sender, if signed. Otherwise, ``null``.
         */
        get fromPublicKey() {
          if (this.signature == null) {
            return null;
          }
          return SigningKey.recoverPublicKey(this.unsignedHash, this.signature);
        }
        /**
         *  Returns true if signed.
         *
         *  This provides a Type Guard that properties requiring a signed
         *  transaction are non-null.
         */
        isSigned() {
          return this.signature != null;
        }
        /**
         *  The serialized transaction.
         *
         *  This throws if the transaction is unsigned. For the pre-image,
         *  use [[unsignedSerialized]].
         */
        get serialized() {
          return __privateMethod(this, _Transaction_instances, getSerialized_fn).call(this, true, true);
        }
        /**
         *  The transaction pre-image.
         *
         *  The hash of this is the digest which needs to be signed to
         *  authorize this transaction.
         */
        get unsignedSerialized() {
          return __privateMethod(this, _Transaction_instances, getSerialized_fn).call(this, false, false);
        }
        /**
         *  Return the most "likely" type; currently the highest
         *  supported transaction type.
         */
        inferType() {
          const types = this.inferTypes();
          if (types.indexOf(2) >= 0) {
            return 2;
          }
          return types.pop();
        }
        /**
         *  Validates the explicit properties and returns a list of compatible
         *  transaction types.
         */
        inferTypes() {
          const hasGasPrice = this.gasPrice != null;
          const hasFee = this.maxFeePerGas != null || this.maxPriorityFeePerGas != null;
          const hasAccessList = this.accessList != null;
          const hasBlob = __privateGet(this, _maxFeePerBlobGas) != null || __privateGet(this, _blobVersionedHashes);
          if (this.maxFeePerGas != null && this.maxPriorityFeePerGas != null) {
            assert(this.maxFeePerGas >= this.maxPriorityFeePerGas, "priorityFee cannot be more than maxFee", "BAD_DATA", { value: this });
          }
          assert(!hasFee || this.type !== 0 && this.type !== 1, "transaction type cannot have maxFeePerGas or maxPriorityFeePerGas", "BAD_DATA", { value: this });
          assert(this.type !== 0 || !hasAccessList, "legacy transaction cannot have accessList", "BAD_DATA", { value: this });
          const types = [];
          if (this.type != null) {
            types.push(this.type);
          } else {
            if (this.authorizationList && this.authorizationList.length) {
              types.push(4);
            } else if (hasFee) {
              types.push(2);
            } else if (hasGasPrice) {
              types.push(1);
              if (!hasAccessList) {
                types.push(0);
              }
            } else if (hasAccessList) {
              types.push(1);
              types.push(2);
            } else if (hasBlob && this.to) {
              types.push(3);
            } else {
              types.push(0);
              types.push(1);
              types.push(2);
              types.push(3);
            }
          }
          types.sort();
          return types;
        }
        /**
         *  Returns true if this transaction is a legacy transaction (i.e.
         *  ``type === 0``).
         *
         *  This provides a Type Guard that the related properties are
         *  non-null.
         */
        isLegacy() {
          return this.type === 0;
        }
        /**
         *  Returns true if this transaction is berlin hardform transaction (i.e.
         *  ``type === 1``).
         *
         *  This provides a Type Guard that the related properties are
         *  non-null.
         */
        isBerlin() {
          return this.type === 1;
        }
        /**
         *  Returns true if this transaction is london hardform transaction (i.e.
         *  ``type === 2``).
         *
         *  This provides a Type Guard that the related properties are
         *  non-null.
         */
        isLondon() {
          return this.type === 2;
        }
        /**
         *  Returns true if this transaction is an [[link-eip-4844]] BLOB
         *  transaction.
         *
         *  This provides a Type Guard that the related properties are
         *  non-null.
         */
        isCancun() {
          return this.type === 3;
        }
        /**
         *  Create a copy of this transaciton.
         */
        clone() {
          return _Transaction.from(this);
        }
        /**
         *  Return a JSON-friendly object.
         */
        toJSON() {
          const s = (v) => {
            if (v == null) {
              return null;
            }
            return v.toString();
          };
          return {
            type: this.type,
            to: this.to,
            //            from: this.from,
            data: this.data,
            nonce: this.nonce,
            gasLimit: s(this.gasLimit),
            gasPrice: s(this.gasPrice),
            maxPriorityFeePerGas: s(this.maxPriorityFeePerGas),
            maxFeePerGas: s(this.maxFeePerGas),
            value: s(this.value),
            chainId: s(this.chainId),
            sig: this.signature ? this.signature.toJSON() : null,
            accessList: this.accessList
          };
        }
        /**
         *  Create a **Transaction** from a serialized transaction or a
         *  Transaction-like object.
         */
        static from(tx) {
          if (tx == null) {
            return new _Transaction();
          }
          if (typeof tx === "string") {
            const payload = getBytes(tx);
            if (payload[0] >= 127) {
              return _Transaction.from(_parseLegacy(payload));
            }
            switch (payload[0]) {
              case 1:
                return _Transaction.from(_parseEip2930(payload));
              case 2:
                return _Transaction.from(_parseEip1559(payload));
              case 3:
                return _Transaction.from(_parseEip4844(payload));
              case 4:
                return _Transaction.from(_parseEip7702(payload));
            }
            assert(false, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: "from" });
          }
          const result = new _Transaction();
          if (tx.type != null) {
            result.type = tx.type;
          }
          if (tx.to != null) {
            result.to = tx.to;
          }
          if (tx.nonce != null) {
            result.nonce = tx.nonce;
          }
          if (tx.gasLimit != null) {
            result.gasLimit = tx.gasLimit;
          }
          if (tx.gasPrice != null) {
            result.gasPrice = tx.gasPrice;
          }
          if (tx.maxPriorityFeePerGas != null) {
            result.maxPriorityFeePerGas = tx.maxPriorityFeePerGas;
          }
          if (tx.maxFeePerGas != null) {
            result.maxFeePerGas = tx.maxFeePerGas;
          }
          if (tx.maxFeePerBlobGas != null) {
            result.maxFeePerBlobGas = tx.maxFeePerBlobGas;
          }
          if (tx.data != null) {
            result.data = tx.data;
          }
          if (tx.value != null) {
            result.value = tx.value;
          }
          if (tx.chainId != null) {
            result.chainId = tx.chainId;
          }
          if (tx.signature != null) {
            result.signature = Signature.from(tx.signature);
          }
          if (tx.accessList != null) {
            result.accessList = tx.accessList;
          }
          if (tx.authorizationList != null) {
            result.authorizationList = tx.authorizationList;
          }
          if (tx.blobVersionedHashes != null) {
            result.blobVersionedHashes = tx.blobVersionedHashes;
          }
          if (tx.kzg != null) {
            result.kzg = tx.kzg;
          }
          if (tx.blobs != null) {
            result.blobs = tx.blobs;
          }
          if (tx.hash != null) {
            assertArgument(result.isSigned(), "unsigned transaction cannot define '.hash'", "tx", tx);
            assertArgument(result.hash === tx.hash, "hash mismatch", "tx", tx);
          }
          if (tx.from != null) {
            assertArgument(result.isSigned(), "unsigned transaction cannot define '.from'", "tx", tx);
            assertArgument(result.from.toLowerCase() === (tx.from || "").toLowerCase(), "from mismatch", "tx", tx);
          }
          return result;
        }
      };
      _type = new WeakMap();
      _to = new WeakMap();
      _data3 = new WeakMap();
      _nonce = new WeakMap();
      _gasLimit = new WeakMap();
      _gasPrice = new WeakMap();
      _maxPriorityFeePerGas = new WeakMap();
      _maxFeePerGas = new WeakMap();
      _value = new WeakMap();
      _chainId = new WeakMap();
      _sig = new WeakMap();
      _accessList = new WeakMap();
      _maxFeePerBlobGas = new WeakMap();
      _blobVersionedHashes = new WeakMap();
      _kzg = new WeakMap();
      _blobs = new WeakMap();
      _auths = new WeakMap();
      _Transaction_instances = new WeakSet();
      getSerialized_fn = function(signed2, sidecar) {
        assert(!signed2 || this.signature != null, "cannot serialize unsigned transaction; maybe you meant .unsignedSerialized", "UNSUPPORTED_OPERATION", { operation: ".serialized" });
        const sig = signed2 ? this.signature : null;
        switch (this.inferType()) {
          case 0:
            return _serializeLegacy(this, sig);
          case 1:
            return _serializeEip2930(this, sig);
          case 2:
            return _serializeEip1559(this, sig);
          case 3:
            return _serializeEip4844(this, sig, sidecar ? this.blobs : null);
          case 4:
            return _serializeEip7702(this, sig);
        }
        assert(false, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: ".serialized" });
      };
      Transaction = _Transaction;
    }
  });

  // node_modules/ethers/lib.esm/transaction/index.js
  var init_transaction2 = __esm({
    "node_modules/ethers/lib.esm/transaction/index.js"() {
      init_accesslist();
      init_authorization();
      init_address4();
      init_transaction();
    }
  });

  // node_modules/ethers/lib.esm/hash/authorization.js
  function hashAuthorization(auth) {
    assertArgument(typeof auth.address === "string", "invalid address for hashAuthorization", "auth.address", auth);
    return keccak256(concat([
      "0x05",
      encodeRlp([
        auth.chainId != null ? toBeArray(auth.chainId) : "0x",
        getAddress(auth.address),
        auth.nonce != null ? toBeArray(auth.nonce) : "0x"
      ])
    ]));
  }
  function verifyAuthorization(auth, sig) {
    return recoverAddress(hashAuthorization(auth), sig);
  }
  var init_authorization2 = __esm({
    "node_modules/ethers/lib.esm/hash/authorization.js"() {
      init_address2();
      init_crypto2();
      init_transaction2();
      init_utils();
    }
  });

  // node_modules/ethers/lib.esm/hash/id.js
  function id(value) {
    return keccak256(toUtf8Bytes(value));
  }
  var init_id = __esm({
    "node_modules/ethers/lib.esm/hash/id.js"() {
      init_crypto2();
      init_utils();
    }
  });

  // node_modules/@adraffy/ens-normalize/dist/index.mjs
  function decode_arithmetic(bytes2) {
    let pos = 0;
    function u162() {
      return bytes2[pos++] << 8 | bytes2[pos++];
    }
    let symbol_count = u162();
    let total = 1;
    let acc = [0, 1];
    for (let i = 1; i < symbol_count; i++) {
      acc.push(total += u162());
    }
    let skip = u162();
    let pos_payload = pos;
    pos += skip;
    let read_width = 0;
    let read_buffer = 0;
    function read_bit() {
      if (read_width == 0) {
        read_buffer = read_buffer << 8 | bytes2[pos++];
        read_width = 8;
      }
      return read_buffer >> --read_width & 1;
    }
    const N3 = 31;
    const FULL = 2 ** N3;
    const HALF = FULL >>> 1;
    const QRTR = HALF >> 1;
    const MASK = FULL - 1;
    let register = 0;
    for (let i = 0; i < N3; i++) register = register << 1 | read_bit();
    let symbols = [];
    let low = 0;
    let range = FULL;
    while (true) {
      let value = Math.floor(((register - low + 1) * total - 1) / range);
      let start = 0;
      let end = symbol_count;
      while (end - start > 1) {
        let mid = start + end >>> 1;
        if (value < acc[mid]) {
          end = mid;
        } else {
          start = mid;
        }
      }
      if (start == 0) break;
      symbols.push(start);
      let a = low + Math.floor(range * acc[start] / total);
      let b2 = low + Math.floor(range * acc[start + 1] / total) - 1;
      while (((a ^ b2) & HALF) == 0) {
        register = register << 1 & MASK | read_bit();
        a = a << 1 & MASK;
        b2 = b2 << 1 & MASK | 1;
      }
      while (a & ~b2 & QRTR) {
        register = register & HALF | register << 1 & MASK >>> 1 | read_bit();
        a = a << 1 ^ HALF;
        b2 = (b2 ^ HALF) << 1 | HALF | 1;
      }
      low = a;
      range = 1 + b2 - a;
    }
    let offset2 = symbol_count - 4;
    return symbols.map((x) => {
      switch (x - offset2) {
        case 3:
          return offset2 + 65792 + (bytes2[pos_payload++] << 16 | bytes2[pos_payload++] << 8 | bytes2[pos_payload++]);
        case 2:
          return offset2 + 256 + (bytes2[pos_payload++] << 8 | bytes2[pos_payload++]);
        case 1:
          return offset2 + bytes2[pos_payload++];
        default:
          return x - 1;
      }
    });
  }
  function read_payload(v) {
    let pos = 0;
    return () => v[pos++];
  }
  function read_compressed_payload(s) {
    return read_payload(decode_arithmetic(unsafe_atob(s)));
  }
  function unsafe_atob(s) {
    let lookup = [];
    [..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"].forEach((c, i) => lookup[c.charCodeAt(0)] = i);
    let n2 = s.length;
    let ret = new Uint8Array(6 * n2 >> 3);
    for (let i = 0, pos = 0, width = 0, carry = 0; i < n2; i++) {
      carry = carry << 6 | lookup[s.charCodeAt(i)];
      width += 6;
      if (width >= 8) {
        ret[pos++] = carry >> (width -= 8);
      }
    }
    return ret;
  }
  function signed(i) {
    return i & 1 ? ~i >> 1 : i >> 1;
  }
  function read_deltas(n2, next) {
    let v = Array(n2);
    for (let i = 0, x = 0; i < n2; i++) v[i] = x += signed(next());
    return v;
  }
  function read_sorted(next, prev = 0) {
    let ret = [];
    while (true) {
      let x = next();
      let n2 = next();
      if (!n2) break;
      prev += x;
      for (let i = 0; i < n2; i++) {
        ret.push(prev + i);
      }
      prev += n2 + 1;
    }
    return ret;
  }
  function read_sorted_arrays(next) {
    return read_array_while(() => {
      let v = read_sorted(next);
      if (v.length) return v;
    });
  }
  function read_mapped(next) {
    let ret = [];
    while (true) {
      let w = next();
      if (w == 0) break;
      ret.push(read_linear_table(w, next));
    }
    while (true) {
      let w = next() - 1;
      if (w < 0) break;
      ret.push(read_replacement_table(w, next));
    }
    return ret.flat();
  }
  function read_array_while(next) {
    let v = [];
    while (true) {
      let x = next(v.length);
      if (!x) break;
      v.push(x);
    }
    return v;
  }
  function read_transposed(n2, w, next) {
    let m = Array(n2).fill().map(() => []);
    for (let i = 0; i < w; i++) {
      read_deltas(n2, next).forEach((x, j) => m[j].push(x));
    }
    return m;
  }
  function read_linear_table(w, next) {
    let dx = 1 + next();
    let dy = next();
    let vN = read_array_while(next);
    let m = read_transposed(vN.length, 1 + w, next);
    return m.flatMap((v, i) => {
      let [x, ...ys] = v;
      return Array(vN[i]).fill().map((_, j) => {
        let j_dy = j * dy;
        return [x + j * dx, ys.map((y) => y + j_dy)];
      });
    });
  }
  function read_replacement_table(w, next) {
    let n2 = 1 + next();
    let m = read_transposed(n2, 1 + w, next);
    return m.map((v) => [v[0], v.slice(1)]);
  }
  function read_trie(next) {
    let ret = [];
    let sorted = read_sorted(next);
    expand(decode2([]), []);
    return ret;
    function decode2(Q) {
      let S2 = next();
      let B = read_array_while(() => {
        let cps = read_sorted(next).map((i) => sorted[i]);
        if (cps.length) return decode2(cps);
      });
      return { S: S2, B, Q };
    }
    function expand({ S: S2, B }, cps, saved) {
      if (S2 & 4 && saved === cps[cps.length - 1]) return;
      if (S2 & 2) saved = cps[cps.length - 1];
      if (S2 & 1) ret.push(cps);
      for (let br of B) {
        for (let cp of br.Q) {
          expand(br, [...cps, cp], saved);
        }
      }
    }
  }
  function hex_cp(cp) {
    return cp.toString(16).toUpperCase().padStart(2, "0");
  }
  function quote_cp(cp) {
    return `{${hex_cp(cp)}}`;
  }
  function explode_cp(s) {
    let cps = [];
    for (let pos = 0, len = s.length; pos < len; ) {
      let cp = s.codePointAt(pos);
      pos += cp < 65536 ? 1 : 2;
      cps.push(cp);
    }
    return cps;
  }
  function str_from_cps(cps) {
    const chunk = 4096;
    let len = cps.length;
    if (len < chunk) return String.fromCodePoint(...cps);
    let buf = [];
    for (let i = 0; i < len; ) {
      buf.push(String.fromCodePoint(...cps.slice(i, i += chunk)));
    }
    return buf.join("");
  }
  function compare_arrays(a, b2) {
    let n2 = a.length;
    let c = n2 - b2.length;
    for (let i = 0; c == 0 && i < n2; i++) c = a[i] - b2[i];
    return c;
  }
  function unpack_cc(packed) {
    return packed >> 24 & 255;
  }
  function unpack_cp(packed) {
    return packed & 16777215;
  }
  function init$1() {
    let r = read_compressed_payload(COMPRESSED);
    SHIFTED_RANK = new Map(read_sorted_arrays(r).flatMap((v, i) => v.map((x) => [x, i + 1 << 24])));
    EXCLUSIONS = new Set(read_sorted(r));
    DECOMP = /* @__PURE__ */ new Map();
    RECOMP = /* @__PURE__ */ new Map();
    for (let [cp, cps] of read_mapped(r)) {
      if (!EXCLUSIONS.has(cp) && cps.length == 2) {
        let [a, b2] = cps;
        let bucket = RECOMP.get(a);
        if (!bucket) {
          bucket = /* @__PURE__ */ new Map();
          RECOMP.set(a, bucket);
        }
        bucket.set(b2, cp);
      }
      DECOMP.set(cp, cps.reverse());
    }
  }
  function is_hangul(cp) {
    return cp >= S0 && cp < S1;
  }
  function compose_pair(a, b2) {
    if (a >= L0 && a < L1 && b2 >= V0 && b2 < V1) {
      return S0 + (a - L0) * N_COUNT + (b2 - V0) * T_COUNT;
    } else if (is_hangul(a) && b2 > T0 && b2 < T1 && (a - S0) % T_COUNT == 0) {
      return a + (b2 - T0);
    } else {
      let recomp = RECOMP.get(a);
      if (recomp) {
        recomp = recomp.get(b2);
        if (recomp) {
          return recomp;
        }
      }
      return -1;
    }
  }
  function decomposed(cps) {
    if (!SHIFTED_RANK) init$1();
    let ret = [];
    let buf = [];
    let check_order = false;
    function add3(cp) {
      let cc = SHIFTED_RANK.get(cp);
      if (cc) {
        check_order = true;
        cp |= cc;
      }
      ret.push(cp);
    }
    for (let cp of cps) {
      while (true) {
        if (cp < 128) {
          ret.push(cp);
        } else if (is_hangul(cp)) {
          let s_index = cp - S0;
          let l_index = s_index / N_COUNT | 0;
          let v_index = s_index % N_COUNT / T_COUNT | 0;
          let t_index = s_index % T_COUNT;
          add3(L0 + l_index);
          add3(V0 + v_index);
          if (t_index > 0) add3(T0 + t_index);
        } else {
          let mapped = DECOMP.get(cp);
          if (mapped) {
            buf.push(...mapped);
          } else {
            add3(cp);
          }
        }
        if (!buf.length) break;
        cp = buf.pop();
      }
    }
    if (check_order && ret.length > 1) {
      let prev_cc = unpack_cc(ret[0]);
      for (let i = 1; i < ret.length; i++) {
        let cc = unpack_cc(ret[i]);
        if (cc == 0 || prev_cc <= cc) {
          prev_cc = cc;
          continue;
        }
        let j = i - 1;
        while (true) {
          let tmp = ret[j + 1];
          ret[j + 1] = ret[j];
          ret[j] = tmp;
          if (!j) break;
          prev_cc = unpack_cc(ret[--j]);
          if (prev_cc <= cc) break;
        }
        prev_cc = unpack_cc(ret[i]);
      }
    }
    return ret;
  }
  function composed_from_decomposed(v) {
    let ret = [];
    let stack = [];
    let prev_cp = -1;
    let prev_cc = 0;
    for (let packed of v) {
      let cc = unpack_cc(packed);
      let cp = unpack_cp(packed);
      if (prev_cp == -1) {
        if (cc == 0) {
          prev_cp = cp;
        } else {
          ret.push(cp);
        }
      } else if (prev_cc > 0 && prev_cc >= cc) {
        if (cc == 0) {
          ret.push(prev_cp, ...stack);
          stack.length = 0;
          prev_cp = cp;
        } else {
          stack.push(cp);
        }
        prev_cc = cc;
      } else {
        let composed = compose_pair(prev_cp, cp);
        if (composed >= 0) {
          prev_cp = composed;
        } else if (prev_cc == 0 && cc == 0) {
          ret.push(prev_cp);
          prev_cp = cp;
        } else {
          stack.push(cp);
          prev_cc = cc;
        }
      }
    }
    if (prev_cp >= 0) {
      ret.push(prev_cp, ...stack);
    }
    return ret;
  }
  function nfd(cps) {
    return decomposed(cps).map(unpack_cp);
  }
  function nfc(cps) {
    return composed_from_decomposed(decomposed(cps));
  }
  function group_has_cp(g, cp) {
    return g.P.has(cp) || g.Q.has(cp);
  }
  function init() {
    if (MAPPED) return;
    let r = read_compressed_payload(COMPRESSED$1);
    const read_sorted_array = () => read_sorted(r);
    const read_sorted_set = () => new Set(read_sorted_array());
    const set_add_many = (set, v) => v.forEach((x) => set.add(x));
    MAPPED = new Map(read_mapped(r));
    IGNORED = read_sorted_set();
    CM = read_sorted_array();
    NSM = new Set(read_sorted_array().map((i) => CM[i]));
    CM = new Set(CM);
    ESCAPE = read_sorted_set();
    NFC_CHECK = read_sorted_set();
    let chunks = read_sorted_arrays(r);
    let unrestricted = r();
    const read_chunked = () => {
      let set = /* @__PURE__ */ new Set();
      read_sorted_array().forEach((i) => set_add_many(set, chunks[i]));
      set_add_many(set, read_sorted_array());
      return set;
    };
    GROUPS = read_array_while((i) => {
      let N3 = read_array_while(r).map((x) => x + 96);
      if (N3.length) {
        let R = i >= unrestricted;
        N3[0] -= 32;
        N3 = str_from_cps(N3);
        if (R) N3 = `Restricted[${N3}]`;
        let P = read_chunked();
        let Q = read_chunked();
        let M = !r();
        return { N: N3, P, Q, M, R };
      }
    });
    WHOLE_VALID = read_sorted_set();
    WHOLE_MAP = /* @__PURE__ */ new Map();
    let wholes = read_sorted_array().concat(Array_from(WHOLE_VALID)).sort((a, b2) => a - b2);
    wholes.forEach((cp, i) => {
      let d = r();
      let w = wholes[i] = d ? wholes[i - d] : { V: [], M: /* @__PURE__ */ new Map() };
      w.V.push(cp);
      if (!WHOLE_VALID.has(cp)) {
        WHOLE_MAP.set(cp, w);
      }
    });
    for (let { V, M } of new Set(WHOLE_MAP.values())) {
      let recs = [];
      for (let cp of V) {
        let gs = GROUPS.filter((g) => group_has_cp(g, cp));
        let rec = recs.find(({ G }) => gs.some((g) => G.has(g)));
        if (!rec) {
          rec = { G: /* @__PURE__ */ new Set(), V: [] };
          recs.push(rec);
        }
        rec.V.push(cp);
        set_add_many(rec.G, gs);
      }
      let union2 = recs.flatMap((x) => Array_from(x.G));
      for (let { G, V: V2 } of recs) {
        let complement = new Set(union2.filter((g) => !G.has(g)));
        for (let cp of V2) {
          M.set(cp, complement);
        }
      }
    }
    VALID = /* @__PURE__ */ new Set();
    let multi = /* @__PURE__ */ new Set();
    const add_to_union = (cp) => VALID.has(cp) ? multi.add(cp) : VALID.add(cp);
    for (let g of GROUPS) {
      for (let cp of g.P) add_to_union(cp);
      for (let cp of g.Q) add_to_union(cp);
    }
    for (let cp of VALID) {
      if (!WHOLE_MAP.has(cp) && !multi.has(cp)) {
        WHOLE_MAP.set(cp, UNIQUE_PH);
      }
    }
    set_add_many(VALID, nfd(VALID));
    EMOJI_LIST = read_trie(r).map((v) => Emoji.from(v)).sort(compare_arrays);
    EMOJI_ROOT = /* @__PURE__ */ new Map();
    for (let cps of EMOJI_LIST) {
      let prev = [EMOJI_ROOT];
      for (let cp of cps) {
        let next = prev.map((node) => {
          let child = node.get(cp);
          if (!child) {
            child = /* @__PURE__ */ new Map();
            node.set(cp, child);
          }
          return child;
        });
        if (cp === FE0F) {
          prev.push(...next);
        } else {
          prev = next;
        }
      }
      for (let x of prev) {
        x.V = cps;
      }
    }
  }
  function quoted_cp(cp) {
    return (should_escape(cp) ? "" : `${bidi_qq(safe_str_from_cps([cp]))} `) + quote_cp(cp);
  }
  function bidi_qq(s) {
    return `"${s}"\u200E`;
  }
  function check_label_extension(cps) {
    if (cps.length >= 4 && cps[2] == HYPHEN && cps[3] == HYPHEN) {
      throw new Error(`invalid label extension: "${str_from_cps(cps.slice(0, 4))}"`);
    }
  }
  function check_leading_underscore(cps) {
    const UNDERSCORE = 95;
    for (let i = cps.lastIndexOf(UNDERSCORE); i > 0; ) {
      if (cps[--i] !== UNDERSCORE) {
        throw new Error("underscore allowed only at start");
      }
    }
  }
  function check_fenced(cps) {
    let cp = cps[0];
    let prev = FENCED.get(cp);
    if (prev) throw error_placement(`leading ${prev}`);
    let n2 = cps.length;
    let last = -1;
    for (let i = 1; i < n2; i++) {
      cp = cps[i];
      let match = FENCED.get(cp);
      if (match) {
        if (last == i) throw error_placement(`${prev} + ${match}`);
        last = i + 1;
        prev = match;
      }
    }
    if (last == n2) throw error_placement(`trailing ${prev}`);
  }
  function safe_str_from_cps(cps, max = Infinity, quoter = quote_cp) {
    let buf = [];
    if (is_combining_mark(cps[0])) buf.push("\u25CC");
    if (cps.length > max) {
      max >>= 1;
      cps = [...cps.slice(0, max), 8230, ...cps.slice(-max)];
    }
    let prev = 0;
    let n2 = cps.length;
    for (let i = 0; i < n2; i++) {
      let cp = cps[i];
      if (should_escape(cp)) {
        buf.push(str_from_cps(cps.slice(prev, i)));
        buf.push(quoter(cp));
        prev = i + 1;
      }
    }
    buf.push(str_from_cps(cps.slice(prev, n2)));
    return buf.join("");
  }
  function is_combining_mark(cp) {
    init();
    return CM.has(cp);
  }
  function should_escape(cp) {
    init();
    return ESCAPE.has(cp);
  }
  function ens_normalize(name) {
    return flatten(split2(name, nfc, filter_fe0f));
  }
  function split2(name, nf, ef) {
    if (!name) return [];
    init();
    let offset2 = 0;
    return name.split(STOP_CH).map((label) => {
      let input = explode_cp(label);
      let info = {
        input,
        offset: offset2
        // codepoint, not substring!
      };
      offset2 += input.length + 1;
      try {
        let tokens = info.tokens = tokens_from_str(input, nf, ef);
        let token_count = tokens.length;
        let type2;
        if (!token_count) {
          throw new Error(`empty label`);
        }
        let norm = info.output = tokens.flat();
        check_leading_underscore(norm);
        let emoji = info.emoji = token_count > 1 || tokens[0].is_emoji;
        if (!emoji && norm.every((cp) => cp < 128)) {
          check_label_extension(norm);
          type2 = "ASCII";
        } else {
          let chars = tokens.flatMap((x) => x.is_emoji ? [] : x);
          if (!chars.length) {
            type2 = "Emoji";
          } else {
            if (CM.has(norm[0])) throw error_placement("leading combining mark");
            for (let i = 1; i < token_count; i++) {
              let cps = tokens[i];
              if (!cps.is_emoji && CM.has(cps[0])) {
                throw error_placement(`emoji + combining mark: "${str_from_cps(tokens[i - 1])} + ${safe_str_from_cps([cps[0]])}"`);
              }
            }
            check_fenced(norm);
            let unique = Array_from(new Set(chars));
            let [g] = determine_group(unique);
            check_group(g, chars);
            check_whole(g, unique);
            type2 = g.N;
          }
        }
        info.type = type2;
      } catch (err) {
        info.error = err;
      }
      return info;
    });
  }
  function check_whole(group, unique) {
    let maker;
    let shared = [];
    for (let cp of unique) {
      let whole = WHOLE_MAP.get(cp);
      if (whole === UNIQUE_PH) return;
      if (whole) {
        let set = whole.M.get(cp);
        maker = maker ? maker.filter((g) => set.has(g)) : Array_from(set);
        if (!maker.length) return;
      } else {
        shared.push(cp);
      }
    }
    if (maker) {
      for (let g of maker) {
        if (shared.every((cp) => group_has_cp(g, cp))) {
          throw new Error(`whole-script confusable: ${group.N}/${g.N}`);
        }
      }
    }
  }
  function determine_group(unique) {
    let groups = GROUPS;
    for (let cp of unique) {
      let gs = groups.filter((g) => group_has_cp(g, cp));
      if (!gs.length) {
        if (!GROUPS.some((g) => group_has_cp(g, cp))) {
          throw error_disallowed(cp);
        } else {
          throw error_group_member(groups[0], cp);
        }
      }
      groups = gs;
      if (gs.length == 1) break;
    }
    return groups;
  }
  function flatten(split4) {
    return split4.map(({ input, error, output: output2 }) => {
      if (error) {
        let msg = error.message;
        throw new Error(split4.length == 1 ? msg : `Invalid label ${bidi_qq(safe_str_from_cps(input, 63))}: ${msg}`);
      }
      return str_from_cps(output2);
    }).join(STOP_CH);
  }
  function error_disallowed(cp) {
    return new Error(`disallowed character: ${quoted_cp(cp)}`);
  }
  function error_group_member(g, cp) {
    let quoted = quoted_cp(cp);
    let gg = GROUPS.find((g2) => g2.P.has(cp));
    if (gg) {
      quoted = `${gg.N} ${quoted}`;
    }
    return new Error(`illegal mixture: ${g.N} + ${quoted}`);
  }
  function error_placement(where) {
    return new Error(`illegal placement: ${where}`);
  }
  function check_group(g, cps) {
    for (let cp of cps) {
      if (!group_has_cp(g, cp)) {
        throw error_group_member(g, cp);
      }
    }
    if (g.M) {
      let decomposed2 = nfd(cps);
      for (let i = 1, e = decomposed2.length; i < e; i++) {
        if (NSM.has(decomposed2[i])) {
          let j = i + 1;
          for (let cp; j < e && NSM.has(cp = decomposed2[j]); j++) {
            for (let k = i; k < j; k++) {
              if (decomposed2[k] == cp) {
                throw new Error(`duplicate non-spacing marks: ${quoted_cp(cp)}`);
              }
            }
          }
          if (j - i > NSM_MAX) {
            throw new Error(`excessive non-spacing marks: ${bidi_qq(safe_str_from_cps(decomposed2.slice(i - 1, j)))} (${j - i}/${NSM_MAX})`);
          }
          i = j;
        }
      }
    }
  }
  function tokens_from_str(input, nf, ef) {
    let ret = [];
    let chars = [];
    input = input.slice().reverse();
    while (input.length) {
      let emoji = consume_emoji_reversed(input);
      if (emoji) {
        if (chars.length) {
          ret.push(nf(chars));
          chars = [];
        }
        ret.push(ef(emoji));
      } else {
        let cp = input.pop();
        if (VALID.has(cp)) {
          chars.push(cp);
        } else {
          let cps = MAPPED.get(cp);
          if (cps) {
            chars.push(...cps);
          } else if (!IGNORED.has(cp)) {
            throw error_disallowed(cp);
          }
        }
      }
    }
    if (chars.length) {
      ret.push(nf(chars));
    }
    return ret;
  }
  function filter_fe0f(cps) {
    return cps.filter((cp) => cp != FE0F);
  }
  function consume_emoji_reversed(cps, eaten) {
    let node = EMOJI_ROOT;
    let emoji;
    let pos = cps.length;
    while (pos) {
      node = node.get(cps[--pos]);
      if (!node) break;
      let { V } = node;
      if (V) {
        emoji = V;
        if (eaten) eaten.push(...cps.slice(pos).reverse());
        cps.length = pos;
      }
    }
    return emoji;
  }
  var COMPRESSED$1, FENCED, NSM_MAX, COMPRESSED, S0, L0, V0, T0, L_COUNT, V_COUNT, T_COUNT, N_COUNT, S_COUNT, S1, L1, V1, T1, SHIFTED_RANK, EXCLUSIONS, DECOMP, RECOMP, HYPHEN, STOP_CH, FE0F, UNIQUE_PH, Array_from, Emoji, MAPPED, IGNORED, CM, NSM, ESCAPE, NFC_CHECK, GROUPS, WHOLE_VALID, WHOLE_MAP, VALID, EMOJI_LIST, EMOJI_ROOT;
  var init_dist = __esm({
    "node_modules/@adraffy/ens-normalize/dist/index.mjs"() {
      COMPRESSED$1 = "";
      FENCED = /* @__PURE__ */ new Map([[8217, "apostrophe"], [8260, "fraction slash"], [12539, "middle dot"]]);
      NSM_MAX = 4;
      COMPRESSED = "AEUDTAHBCFQATQDRADAAcgAgADQAFAAsABQAHwAOACQADQARAAoAFwAHABIACAAPAAUACwAFAAwABAAQAAMABwAEAAoABQAIAAIACgABAAQAFAALAAIACwABAAIAAQAHAAMAAwAEAAsADAAMAAwACgANAA0AAwAKAAkABAAdAAYAZwDSAdsDJgC0CkMB8xhZAqfoC190UGcThgBurwf7PT09Pb09AjgJum8OjDllxHYUKXAPxzq6tABAxgK8ysUvWAgMPT09PT09PSs6LT2HcgWXWwFLoSMEEEl5RFVMKvO0XQ8ExDdJMnIgsj26PTQyy8FfEQ8AY8IPAGcEbwRwBHEEcgRzBHQEdQR2BHcEeAR6BHsEfAR+BIAEgfndBQoBYgULAWIFDAFiBNcE2ATZBRAFEQUvBdALFAsVDPcNBw13DYcOMA4xDjMB4BllHI0B2grbAMDpHLkQ7QHVAPRNQQFnGRUEg0yEB2uaJF8AJpIBpob5AERSMAKNoAXqaQLUBMCzEiACnwRZEkkVsS7tANAsBG0RuAQLEPABv9HICTUBXigPZwRBApMDOwAamhtaABqEAY8KvKx3LQ4ArAB8UhwEBAVSagD8AEFZADkBIadVj2UMUgx5Il4ANQC9AxIB1BlbEPMAs30CGxlXAhwZKQIECBc6EbsCoxngzv7UzRQA8M0BawL6ZwkN7wABAD33OQRcsgLJCjMCjqUChtw/km+NAsXPAoP2BT84PwURAK0RAvptb6cApQS/OMMey5HJS84UdxpxTPkCogVFITaTOwERAK5pAvkNBOVyA7q3BKlOJSALAgUIBRcEdASpBXqzABXFSWZOawLCOqw//AolCZdvv3dSBkEQGyelEPcMMwG1ATsN7UvYBPEGOwTJH30ZGQ/NlZwIpS3dDO0m4y6hgFoj9SqDBe1L9DzdC01RaA9ZC2UJ4zpjgU4DIQENIosK3Q05CG0Q8wrJaw3lEUUHOQPVSZoApQcBCxEdNRW1JhBirAsJOXcG+xr2C48mrxMpevwF0xohBk0BKRr/AM8u54WwWjFcHE9fBgMLJSPHFKhQIA0lQLd4SBobBxUlqQKRQ3BKh1E2HpMh9jw9DWYuE1F8B/U8BRlPC4E8nkarRQ4R0j6NPUgiSUwsBDV/LC8niwnPD4UMuXxyAVkJIQmxDHETMREXN8UIOQcZLZckJxUIIUaVYJoE958D8xPRAwsFPwlBBxMDtRwtEy4VKQUNgSTXAvM21S6zAo9WgAEXBcsPJR/fEFBH4A7pCJsCZQODJesALRUhABcimwhDYwBfj9hTBS7LCMdqbCN0A2cU52ERcweRDlcHpxwzFb8c4XDIXguGCCijrwlbAXUJmQFfBOMICTVbjKAgQWdTi1gYmyBhQT9d/AIxDGUVn0S9h3gCiw9rEhsBNQFzBzkNAQJ3Ee0RaxCVCOuGBDW1M/g6JQRPIYMgEQonA09szgsnJvkM+GkBoxJiAww0PXfuZ6tgtiQX/QcZMsVBYCHxC5JPzQycGsEYQlQuGeQHvwPzGvMn6kFXBf8DowMTOk0z7gS9C2kIiwk/AEkOoxcH1xhqCnGM0AExiwG3mQNXkYMCb48GNwcLAGcLhwV55QAdAqcIowAFAM8DVwA5Aq0HnQAZAIVBAT0DJy8BIeUCjwOTCDHLAZUvAfMpBBvDDBUA9zduSgLDsQKAamaiBd1YAo4CSTUBTSUEBU5HUQOvceEA2wBLBhPfRwEVq0rLGuNDAd9vKwDHAPsABTUHBUEBzQHzbQC3AV8LMQmis7UBTekpAIMAFWsB1wKJAN0ANQB/8QFTAE0FWfkF0wJPSQERMRgrV2EBuwMfATMBDQB5BsuNpckHHwRtB9MCEBsV4QLvLge1AQMi3xPNQsUCvd5VoWACZIECYkJbTa9bNyACofcCaJgCZgkCn4Q4GwsCZjsCZiYEbgR/A38TA36SOQY5dxc5gjojIwJsHQIyNjgKAm3HAm2u74ozZ0UrAWcA3gDhAEoFB5gMjQD+C8IADbUCdy8CdqI/AnlLQwJ4uh1c20WuRtcCfD8CesgCfQkCfPAFWQUgSABIfWMkAoFtAoAAAoAFAn+uSVhKWxUXSswC0QEC0MxLJwOITwOH5kTFkTIC8qFdAwMDrkvOTC0lA89NTE2vAos/AorYwRsHHUNnBbcCjjcCjlxAl4ECjtkCjlx4UbRTNQpS1FSFApP7ApMMAOkAHFUeVa9V0AYsGymVhjLheGZFOzkCl58C77JYIagAWSUClo8ClnycAKlZrFoJgU0AOwKWtQKWTlxEXNECmcsCmWRcyl0HGQKcmznCOp0CnBYCn5sCnriKAB0PMSoPAp3xAp6SALU9YTRh7wKe0wKgbgGpAp6fHwKeTqVjyGQnJSsCJ68CJn4CoPsCoEwCot0CocQCpi8Cpc4Cp/8AfQKn8mh8aLEAA0lqHGrRAqzjAqyuAq1nAq0CAlcdAlXcArHh1wMfTmyXArK9DQKy6Bds4G1jbUhfAyXNArZcOz9ukAMpRQK4XgK5RxUCuSp3cDZw4QK9GQK72nCWAzIRAr6IcgIDM3ECvhpzInNPAsPLAsMEc4J0SzVFdOADPKcDPJoDPb8CxXwCxkcCxhCJAshpUQLIRALJTwLJLgJknQLd0nh5YXiueSVL0AMYo2cCAmH0GfOVJHsLXpJeuxECz2sCz2wvS1PS8xOfAMatAs9zASnqA04SfksFAtwnAtuKAtJPA1JcA1NfAQEDVYyAiT8AyxbtYEWCHILTgs6DjQLaxwLZ3oQQhEmnPAOGpQAvA2QOhnFZ+QBVAt9lAt64c3cC4i/tFAHzMCcB9JsB8tKHAuvzAulweQLq+QLq5AD5RwG5Au6JAuuclqqXAwLuPwOF4Jh5cOBxoQLzAwBpA44WmZMC9xMDkW4DkocC95gC+dkC+GaaHJqruzebHgOdgwL++gEbADmfHJ+zAwWNA6ZqA6bZANHFAwZqoYiiBQkDDEkCwAA/AwDhQRdTARHzA2sHl2cFAJMtK7evvdsBiZkUfxEEOQH7KQUhDp0JnwCS/SlXxQL3AZ0AtwW5AG8LbUEuFCaNLgFDAYD8AbUmAHUDDgRtACwCFgyhAAAKAj0CagPdA34EkQEgRQUhfAoABQBEABMANhICdwEABdUDa+8KxQIA9wqfJ7+xt+UBkSFBQgHpFH8RNMCJAAQAGwBaAkUChIsABjpTOpSNbQC4Oo860ACNOME63AClAOgAywE6gTo7Ofw5+Tt2iTpbO56JOm85GAFWATMBbAUvNV01njWtNWY1dTW2NcU1gjWRNdI14TWeNa017jX9NbI1wTYCNhE1xjXVNhY2JzXeNe02LjY9Ni41LSE2OjY9Njw2yTcIBJA8VzY4Nt03IDcPNsogN4k3MAoEsDxnNiQ3GTdsOo03IULUQwdC4EMLHA8PCZsobShRVQYA6X8A6bABFCnXAukBowC9BbcAbwNzBL8MDAMMAQgDAAkKCwsLCQoGBAVVBI/DvwDz9b29kaUCb0QtsRTNLt4eGBcSHAMZFhYZEhYEARAEBUEcQRxBHEEcQRxBHEEaQRxBHEFCSTxBPElISUhBNkM2QTYbNklISVmBVIgBFLWZAu0BhQCjBcEAbykBvwGJAaQcEZ0ePCklMAAhMvAIMAL54gC7Bm8EescjzQMpARQpKgDUABavAj626xQAJP0A3etzuf4NNRA7efy2Z9NQrCnC0OSyANz5BBIbJ5IFDR6miIavYS6tprjjmuKebxm5C74Q225X1pkaYYPb6f1DK4k3xMEBb9S2WMjEibTNWhsRJIA+vwNVEiXTE5iXs/wezV66oFLfp9NZGYW+Gk19J2+bCT6Ye2w6LDYdgzKMUabk595eLBCXANz9HUpWbATq9vqXVx9XDg+Pc9Xp4+bsS005SVM/BJBM4687WUuf+Uj9dEi8aDNaPxtpbDxcG1THTImUMZq4UCaaNYpsVqraNyKLJXDYsFZ/5jl7bLRtO88t7P3xZaAxhb5OdPMXqsSkp1WCieG8jXm1U99+blvLlXzPCS+M93VnJCiK+09LfaSaBAVBomyDgJua8dfUzR7ga34IvR2Nvj+A9heJ6lsl1KG4NkI1032Cnff1m1wof2B9oHJK4bi6JkEdSqeNeiuo6QoZZincoc73/TH9SXF8sCE7XyuYyW8WSgbGFCjPV0ihLKhdPs08Tx82fYAkLLc4I2wdl4apY7GU5lHRFzRWJep7Ww3wbeA3qmd59/86P4xuNaqDpygXt6M85glSBHOCGgJDnt+pN9bK7HApMguX6+06RZNjzVmcZJ+wcUrJ9//bpRNxNuKpNl9uFds+S9tdx7LaM5ZkIrPj6nIU9mnbFtVbs9s/uLgl8MVczAwet+iOEzzBlYW7RCMgE6gyNLeq6+1tIx4dpgZnd0DksJS5f+JNDpwwcPNXaaVspq1fbQajOrJgK0ofKtJ1Ne90L6VO4MOl5S886p7u6xo7OLjG8TGL+HU1JXGJgppg4nNbNJ5nlzSpuPYy21JUEcUA94PoFiZfjZue+QnyQ80ekOuZVkxx4g+cvhJfHgNl4hy1/a6+RKcKlar/J29y//EztlbVPHVUeQ1zX86eQVAjR/M3dA9w4W8LfaXp4EgM85wOWasli837PzVMOnsLzR+k3o75/lRPAJSE1xAKQzEi5v10ke+VBvRt1cwQRMd+U5mLCTGVd6XiZtgBG5cDi0w22GKcVNvHiu5LQbZEDVtz0onn7k5+heuKXVsZtSzilkLRAUmjMXEMB3J9YC50XBxPiz53SC+EhnPl9WsKCv92SM/OFFIMJZYfl0WW8tIO3UxYcwdMAj7FSmgrsZ2aAZO03BOhP1bNNZItyXYQFTpC3SG1VuPDqH9GkiCDmE+JwxyIVSO5siDErAOpEXFgjy6PQtOVDj+s6e1r8heWVvmZnTciuf4EiNZzCAd7SOMhXERIOlsHIMG399i9aLTy3m2hRLZjJVDNLS53iGIK11dPqQt0zBDyg6qc7YqkDm2M5Ve6dCWCaCbTXX2rToaIgz6+zh4lYUi/+6nqcFMAkQJKHYLK0wYk5N9szV6xihDbDDFr45lN1K4aCXBq/FitPSud9gLt5ZVn+ZqGX7cwm2z5EGMgfFpIFyhGGuDPmso6TItTMwny+7uPnLCf4W6goFQFV0oQSsc9VfMmVLcLr6ZetDZbaSFTLqnSO/bIPjA3/zAUoqgGFAEQS4IhuMzEp2I3jJzbzkk/IEmyax+rhZTwd6f+CGtwPixu8IvzACquPWPREu9ZvGkUzpRwvRRuaNN6cr0W1wWits9ICdYJ7ltbgMiSL3sTPeufgNcVqMVWFkCPDH4jG2jA0XcVgQj62Cb29v9f/z/+2KbYvIv/zzjpQAPkliaVDzNrW57TZ/ZOyZD0nlfMmAIBIAGAI0D3k/mdN4xr9v85ZbZbbqfH2jGd5hUqNZWwl5SPfoGmfElmazUIeNL1j/mkF7VNAzTq4jNt8JoQ11NQOcmhprXoxSxfRGJ9LDEOAQ+dmxAQH90iti9e2u/MoeuaGcDTHoC+xsmEeWmxEKefQuIzHbpw5Tc5cEocboAD09oipWQhtTO1wivf/O+DRe2rpl/E9wlrzBorjJsOeG1B/XPW4EaJEFdNlECEZga5ZoGRHXgYouGRuVkm8tDESiEyFNo+3s5M5puSdTyUL2llnINVHEt91XUNW4ewdMgJ4boJfEyt/iY5WXqbA+A2Fkt5Z0lutiWhe9nZIyIUjyXDC3UsaG1t+eNx6z4W/OYoTB7A6x+dNSTOi9AInctbESqm5gvOLww7OWXPrmHwVZasrl4eD113pm+JtT7JVOvnCXqdzzdTRHgJ0PiGTFYW5Gvt9R9LD6Lzfs0v/TZZHSmyVNq7viIHE6DBK7Qp07Iz55EM8SYtQvZf/obBniTWi5C2/ovHfw4VndkE5XYdjOhCMRjDeOEfXeN/CwfGduiUIfsoFeUxXeQXba7c7972XNv8w+dTjjUM0QeNAReW+J014dKAD/McQYXT7c0GQPIkn3Ll6R7gGjuiQoZD0TEeEqQpKoZ15g/0OPQI17QiSv9AUROa/V/TQN3dvLArec3RrsYlvBm1b8LWzltdugsC50lNKYLEp2a+ZZYqPejULRlOJh5zj/LVMyTDvwKhMxxwuDkxJ1QpoNI0OTWLom4Z71SNzI9TV1iXJrIu9Wcnd+MCaAw8o1jSXd94YU/1gnkrC9BUEOtQvEIQ7g0i6h+KL2JKk8Ydl7HruvgWMSAmNe+LshGhV4qnWHhO9/RIPQzY1tHRj2VqOyNsDpK0cww+56AdDC4gsWwY0XxoucIWIqs/GcwnWqlaT0KPr8mbK5U94/301i1WLt4YINTVvCFBrFZbIbY8eycOdeJ2teD5IfPLCRg7jjcFTwlMFNl9zdh/o3E/hHPwj7BWg0MU09pPrBLbrCgm54A6H+I6v27+jL5gkjWg/iYdks9jbfVP5y/n0dlgWEMlKasl7JvFZd56LfybW1eeaVO0gxTfXZwD8G4SI116yx7UKVRgui6Ya1YpixqXeNLc8IxtAwCU5IhwQgn+NqHnRaDv61CxKhOq4pOX7M6pkA+Pmpd4j1vn6ACUALoLLc4vpXci8VidLxzm7qFBe7s+quuJs6ETYmnpgS3LwSZxPIltgBDXz8M1k/W2ySNv2f9/NPhxLGK2D21dkHeSGmenRT3Yqcdl0m/h3OYr8V+lXNYGf8aCCpd4bWjE4QIPj7vUKN4Nrfs7ML6Y2OyS830JCnofg/k7lpFpt4SqZc5HGg1HCOrHvOdC8bP6FGDbE/VV0mX4IakzbdS/op+Kt3G24/8QbBV7y86sGSQ/vZzU8FXs7u6jIvwchsEP2BpIhW3G8uWNwa3HmjfH/ZjhhCWvluAcF+nMf14ClKg5hGgtPLJ98ueNAkc5Hs2WZlk2QHvfreCK1CCGO6nMZVSb99VM/ajr8WHTte9JSmkXq/i/U943HEbdzW6Re/S88dKgg8pGOLlAeNiqrcLkUR3/aClFpMXcOUP3rmETcWSfMXZE3TUOi8i+fqRnTYLflVx/Vb/6GJ7eIRZUA6k3RYR3iFSK9c4iDdNwJuZL2FKz/IK5VimcNWEqdXjSoxSgmF0UPlDoUlNrPcM7ftmA8Y9gKiqKEHuWN+AZRIwtVSxye2Kf8rM3lhJ5XcBXU9n4v0Oy1RU2M+4qM8AQPVwse8ErNSob5oFPWxuqZnVzo1qB/IBxkM3EVUKFUUlO3e51259GgNcJbCmlvrdjtoTW7rChm1wyCKzpCTwozUUEOIcWLneRLgMXh+SjGSFkAllzbGS5HK7LlfCMRNRDSvbQPjcXaenNYxCvu2Qyznz6StuxVj66SgI0T8B6/sfHAJYZaZ78thjOSIFumNWLQbeZixDCCC+v0YBtkxiBB3jefHqZ/dFHU+crbj6OvS1x/JDD7vlm7zOVPwpUC01nhxZuY/63E7g";
      S0 = 44032;
      L0 = 4352;
      V0 = 4449;
      T0 = 4519;
      L_COUNT = 19;
      V_COUNT = 21;
      T_COUNT = 28;
      N_COUNT = V_COUNT * T_COUNT;
      S_COUNT = L_COUNT * N_COUNT;
      S1 = S0 + S_COUNT;
      L1 = L0 + L_COUNT;
      V1 = V0 + V_COUNT;
      T1 = T0 + T_COUNT;
      HYPHEN = 45;
      STOP_CH = ".";
      FE0F = 65039;
      UNIQUE_PH = 1;
      Array_from = (x) => Array.from(x);
      Emoji = class extends Array {
        get is_emoji() {
          return true;
        }
        // free tagging system
      };
    }
  });

  // node_modules/ethers/lib.esm/hash/namehash.js
  function checkComponent(comp) {
    assertArgument(comp.length !== 0, "invalid ENS name; empty component", "comp", comp);
    return comp;
  }
  function ensNameSplit(name) {
    const bytes2 = toUtf8Bytes(ensNormalize(name));
    const comps = [];
    if (name.length === 0) {
      return comps;
    }
    let last = 0;
    for (let i = 0; i < bytes2.length; i++) {
      const d = bytes2[i];
      if (d === 46) {
        comps.push(checkComponent(bytes2.slice(last, i)));
        last = i + 1;
      }
    }
    assertArgument(last < bytes2.length, "invalid ENS name; empty component", "name", name);
    comps.push(checkComponent(bytes2.slice(last)));
    return comps;
  }
  function ensNormalize(name) {
    try {
      if (name.length === 0) {
        throw new Error("empty label");
      }
      return ens_normalize(name);
    } catch (error) {
      assertArgument(false, `invalid ENS name (${error.message})`, "name", name);
    }
  }
  function isValidName(name) {
    try {
      return ensNameSplit(name).length !== 0;
    } catch (error) {
    }
    return false;
  }
  function namehash(name) {
    assertArgument(typeof name === "string", "invalid ENS name; not a string", "name", name);
    assertArgument(name.length, `invalid ENS name (empty label)`, "name", name);
    let result = Zeros2;
    const comps = ensNameSplit(name);
    while (comps.length) {
      result = keccak256(concat([result, keccak256(comps.pop())]));
    }
    return hexlify(result);
  }
  function dnsEncode(name, _maxLength) {
    const length = _maxLength != null ? _maxLength : 63;
    assertArgument(length <= 255, "DNS encoded label cannot exceed 255", "length", length);
    return hexlify(concat(ensNameSplit(name).map((comp) => {
      assertArgument(comp.length <= length, `label ${JSON.stringify(name)} exceeds ${length} bytes`, "name", name);
      const bytes2 = new Uint8Array(comp.length + 1);
      bytes2.set(comp, 1);
      bytes2[0] = bytes2.length - 1;
      return bytes2;
    }))) + "00";
  }
  var Zeros2;
  var init_namehash = __esm({
    "node_modules/ethers/lib.esm/hash/namehash.js"() {
      init_crypto2();
      init_utils();
      init_dist();
      Zeros2 = new Uint8Array(32);
      Zeros2.fill(0);
    }
  });

  // node_modules/ethers/lib.esm/hash/message.js
  function hashMessage(message) {
    if (typeof message === "string") {
      message = toUtf8Bytes(message);
    }
    return keccak256(concat([
      toUtf8Bytes(MessagePrefix),
      toUtf8Bytes(String(message.length)),
      message
    ]));
  }
  function verifyMessage(message, sig) {
    const digest = hashMessage(message);
    return recoverAddress(digest, sig);
  }
  var init_message = __esm({
    "node_modules/ethers/lib.esm/hash/message.js"() {
      init_crypto2();
      init_constants();
      init_transaction2();
      init_utils();
    }
  });

  // node_modules/ethers/lib.esm/hash/solidity.js
  function _pack(type2, value, isArray) {
    switch (type2) {
      case "address":
        if (isArray) {
          return getBytes(zeroPadValue(value, 32));
        }
        return getBytes(getAddress(value));
      case "string":
        return toUtf8Bytes(value);
      case "bytes":
        return getBytes(value);
      case "bool":
        value = !!value ? "0x01" : "0x00";
        if (isArray) {
          return getBytes(zeroPadValue(value, 32));
        }
        return getBytes(value);
    }
    let match = type2.match(regexNumber);
    if (match) {
      let signed2 = match[1] === "int";
      let size = parseInt(match[2] || "256");
      assertArgument((!match[2] || match[2] === String(size)) && size % 8 === 0 && size !== 0 && size <= 256, "invalid number type", "type", type2);
      if (isArray) {
        size = 256;
      }
      if (signed2) {
        value = toTwos(value, size);
      }
      return getBytes(zeroPadValue(toBeArray(value), size / 8));
    }
    match = type2.match(regexBytes);
    if (match) {
      const size = parseInt(match[1]);
      assertArgument(String(size) === match[1] && size !== 0 && size <= 32, "invalid bytes type", "type", type2);
      assertArgument(dataLength(value) === size, `invalid value for ${type2}`, "value", value);
      if (isArray) {
        return getBytes(zeroPadBytes(value, 32));
      }
      return value;
    }
    match = type2.match(regexArray);
    if (match && Array.isArray(value)) {
      const baseType = match[1];
      const count = parseInt(match[2] || String(value.length));
      assertArgument(count === value.length, `invalid array length for ${type2}`, "value", value);
      const result = [];
      value.forEach(function(value2) {
        result.push(_pack(baseType, value2, true));
      });
      return getBytes(concat(result));
    }
    assertArgument(false, "invalid type", "type", type2);
  }
  function solidityPacked(types, values) {
    assertArgument(types.length === values.length, "wrong number of values; expected ${ types.length }", "values", values);
    const tight = [];
    types.forEach(function(type2, index) {
      tight.push(_pack(type2, values[index]));
    });
    return hexlify(concat(tight));
  }
  function solidityPackedKeccak256(types, values) {
    return keccak256(solidityPacked(types, values));
  }
  function solidityPackedSha256(types, values) {
    return sha2562(solidityPacked(types, values));
  }
  var regexBytes, regexNumber, regexArray;
  var init_solidity = __esm({
    "node_modules/ethers/lib.esm/hash/solidity.js"() {
      init_address2();
      init_crypto2();
      init_utils();
      regexBytes = new RegExp("^bytes([0-9]+)$");
      regexNumber = new RegExp("^(u?int)([0-9]*)$");
      regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
    }
  });

  // node_modules/ethers/lib.esm/hash/typed-data.js
  function hexPadRight(value) {
    const bytes2 = getBytes(value);
    const padOffset = bytes2.length % 32;
    if (padOffset) {
      return concat([bytes2, padding.slice(padOffset)]);
    }
    return hexlify(bytes2);
  }
  function checkString(key) {
    return function(value) {
      assertArgument(typeof value === "string", `invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);
      return value;
    };
  }
  function getBaseEncoder(type2) {
    {
      const match = type2.match(/^(u?)int(\d+)$/);
      if (match) {
        const signed2 = match[1] === "";
        const width = parseInt(match[2]);
        assertArgument(width % 8 === 0 && width !== 0 && width <= 256 && match[2] === String(width), "invalid numeric width", "type", type2);
        const boundsUpper = mask(BN_MAX_UINT2562, signed2 ? width - 1 : width);
        const boundsLower = signed2 ? (boundsUpper + BN_15) * BN__1 : BN_08;
        return function(_value2) {
          const value = getBigInt(_value2, "value");
          assertArgument(value >= boundsLower && value <= boundsUpper, `value out-of-bounds for ${type2}`, "value", value);
          return toBeHex(signed2 ? toTwos(value, 256) : value, 32);
        };
      }
    }
    {
      const match = type2.match(/^bytes(\d+)$/);
      if (match) {
        const width = parseInt(match[1]);
        assertArgument(width !== 0 && width <= 32 && match[1] === String(width), "invalid bytes width", "type", type2);
        return function(value) {
          const bytes2 = getBytes(value);
          assertArgument(bytes2.length === width, `invalid length for ${type2}`, "value", value);
          return hexPadRight(value);
        };
      }
    }
    switch (type2) {
      case "address":
        return function(value) {
          return zeroPadValue(getAddress(value), 32);
        };
      case "bool":
        return function(value) {
          return !value ? hexFalse : hexTrue;
        };
      case "bytes":
        return function(value) {
          return keccak256(value);
        };
      case "string":
        return function(value) {
          return id(value);
        };
    }
    return null;
  }
  function encodeType(name, fields) {
    return `${name}(${fields.map(({ name: name2, type: type2 }) => type2 + " " + name2).join(",")})`;
  }
  function splitArray(type2) {
    const match = type2.match(/^([^\x5b]*)((\x5b\d*\x5d)*)(\x5b(\d*)\x5d)$/);
    if (match) {
      return {
        base: match[1],
        index: match[2] + match[4],
        array: {
          base: match[1],
          prefix: match[1] + match[2],
          count: match[5] ? parseInt(match[5]) : -1
        }
      };
    }
    return { base: type2 };
  }
  function verifyTypedData(domain, types, value, signature2) {
    return recoverAddress(TypedDataEncoder.hash(domain, types, value), signature2);
  }
  var padding, BN__1, BN_08, BN_15, BN_MAX_UINT2562, hexTrue, hexFalse, domainFieldTypes, domainFieldNames, domainChecks, _types, _fullTypes, _encoderCache, _TypedDataEncoder_instances, getEncoder_fn, _TypedDataEncoder, TypedDataEncoder;
  var init_typed_data = __esm({
    "node_modules/ethers/lib.esm/hash/typed-data.js"() {
      init_address2();
      init_crypto2();
      init_transaction2();
      init_utils();
      init_id();
      padding = new Uint8Array(32);
      padding.fill(0);
      BN__1 = BigInt(-1);
      BN_08 = BigInt(0);
      BN_15 = BigInt(1);
      BN_MAX_UINT2562 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
      hexTrue = toBeHex(BN_15, 32);
      hexFalse = toBeHex(BN_08, 32);
      domainFieldTypes = {
        name: "string",
        version: "string",
        chainId: "uint256",
        verifyingContract: "address",
        salt: "bytes32"
      };
      domainFieldNames = [
        "name",
        "version",
        "chainId",
        "verifyingContract",
        "salt"
      ];
      domainChecks = {
        name: checkString("name"),
        version: checkString("version"),
        chainId: function(_value2) {
          const value = getBigInt(_value2, "domain.chainId");
          assertArgument(value >= 0, "invalid chain ID", "domain.chainId", _value2);
          if (Number.isSafeInteger(value)) {
            return Number(value);
          }
          return toQuantity(value);
        },
        verifyingContract: function(value) {
          try {
            return getAddress(value).toLowerCase();
          } catch (error) {
          }
          assertArgument(false, `invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
        },
        salt: function(value) {
          const bytes2 = getBytes(value, "domain.salt");
          assertArgument(bytes2.length === 32, `invalid domain value "salt"`, "domain.salt", value);
          return hexlify(bytes2);
        }
      };
      _TypedDataEncoder = class _TypedDataEncoder {
        /**
         *  Create a new **TypedDataEncoder** for %%types%%.
         *
         *  This performs all necessary checking that types are valid and
         *  do not violate the [[link-eip-712]] structural constraints as
         *  well as computes the [[primaryType]].
         */
        constructor(_types2) {
          __privateAdd(this, _TypedDataEncoder_instances);
          /**
           *  The primary type for the structured [[types]].
           *
           *  This is derived automatically from the [[types]], since no
           *  recursion is possible, once the DAG for the types is consturcted
           *  internally, the primary type must be the only remaining type with
           *  no parent nodes.
           */
          __publicField(this, "primaryType");
          __privateAdd(this, _types);
          __privateAdd(this, _fullTypes);
          __privateAdd(this, _encoderCache);
          __privateSet(this, _fullTypes, /* @__PURE__ */ new Map());
          __privateSet(this, _encoderCache, /* @__PURE__ */ new Map());
          const links = /* @__PURE__ */ new Map();
          const parents = /* @__PURE__ */ new Map();
          const subtypes = /* @__PURE__ */ new Map();
          const types = {};
          Object.keys(_types2).forEach((type2) => {
            types[type2] = _types2[type2].map(({ name, type: type3 }) => {
              let { base, index } = splitArray(type3);
              if (base === "int" && !_types2["int"]) {
                base = "int256";
              }
              if (base === "uint" && !_types2["uint"]) {
                base = "uint256";
              }
              return { name, type: base + (index || "") };
            });
            links.set(type2, /* @__PURE__ */ new Set());
            parents.set(type2, []);
            subtypes.set(type2, /* @__PURE__ */ new Set());
          });
          __privateSet(this, _types, JSON.stringify(types));
          for (const name in types) {
            const uniqueNames = /* @__PURE__ */ new Set();
            for (const field of types[name]) {
              assertArgument(!uniqueNames.has(field.name), `duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, "types", _types2);
              uniqueNames.add(field.name);
              const baseType = splitArray(field.type).base;
              assertArgument(baseType !== name, `circular type reference to ${JSON.stringify(baseType)}`, "types", _types2);
              const encoder = getBaseEncoder(baseType);
              if (encoder) {
                continue;
              }
              assertArgument(parents.has(baseType), `unknown type ${JSON.stringify(baseType)}`, "types", _types2);
              parents.get(baseType).push(name);
              links.get(name).add(baseType);
            }
          }
          const primaryTypes = Array.from(parents.keys()).filter((n2) => parents.get(n2).length === 0);
          assertArgument(primaryTypes.length !== 0, "missing primary type", "types", _types2);
          assertArgument(primaryTypes.length === 1, `ambiguous primary types or unused types: ${primaryTypes.map((t) => JSON.stringify(t)).join(", ")}`, "types", _types2);
          defineProperties(this, { primaryType: primaryTypes[0] });
          function checkCircular(type2, found) {
            assertArgument(!found.has(type2), `circular type reference to ${JSON.stringify(type2)}`, "types", _types2);
            found.add(type2);
            for (const child of links.get(type2)) {
              if (!parents.has(child)) {
                continue;
              }
              checkCircular(child, found);
              for (const subtype of found) {
                subtypes.get(subtype).add(child);
              }
            }
            found.delete(type2);
          }
          checkCircular(this.primaryType, /* @__PURE__ */ new Set());
          for (const [name, set] of subtypes) {
            const st = Array.from(set);
            st.sort();
            __privateGet(this, _fullTypes).set(name, encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join(""));
          }
        }
        /**
         *  The types.
         */
        get types() {
          return JSON.parse(__privateGet(this, _types));
        }
        /**
         *  Returnthe encoder for the specific %%type%%.
         */
        getEncoder(type2) {
          let encoder = __privateGet(this, _encoderCache).get(type2);
          if (!encoder) {
            encoder = __privateMethod(this, _TypedDataEncoder_instances, getEncoder_fn).call(this, type2);
            __privateGet(this, _encoderCache).set(type2, encoder);
          }
          return encoder;
        }
        /**
         *  Return the full type for %%name%%.
         */
        encodeType(name) {
          const result = __privateGet(this, _fullTypes).get(name);
          assertArgument(result, `unknown type: ${JSON.stringify(name)}`, "name", name);
          return result;
        }
        /**
         *  Return the encoded %%value%% for the %%type%%.
         */
        encodeData(type2, value) {
          return this.getEncoder(type2)(value);
        }
        /**
         *  Returns the hash of %%value%% for the type of %%name%%.
         */
        hashStruct(name, value) {
          return keccak256(this.encodeData(name, value));
        }
        /**
         *  Return the fulled encoded %%value%% for the [[types]].
         */
        encode(value) {
          return this.encodeData(this.primaryType, value);
        }
        /**
         *  Return the hash of the fully encoded %%value%% for the [[types]].
         */
        hash(value) {
          return this.hashStruct(this.primaryType, value);
        }
        /**
         *  @_ignore:
         */
        _visit(type2, value, callback) {
          {
            const encoder = getBaseEncoder(type2);
            if (encoder) {
              return callback(type2, value);
            }
          }
          const array2 = splitArray(type2).array;
          if (array2) {
            assertArgument(array2.count === -1 || array2.count === value.length, `array length mismatch; expected length ${array2.count}`, "value", value);
            return value.map((v) => this._visit(array2.prefix, v, callback));
          }
          const fields = this.types[type2];
          if (fields) {
            return fields.reduce((accum, { name, type: type3 }) => {
              accum[name] = this._visit(type3, value[name], callback);
              return accum;
            }, {});
          }
          assertArgument(false, `unknown type: ${type2}`, "type", type2);
        }
        /**
         *  Call %%calback%% for each value in %%value%%, passing the type and
         *  component within %%value%%.
         *
         *  This is useful for replacing addresses or other transformation that
         *  may be desired on each component, based on its type.
         */
        visit(value, callback) {
          return this._visit(this.primaryType, value, callback);
        }
        /**
         *  Create a new **TypedDataEncoder** for %%types%%.
         */
        static from(types) {
          return new _TypedDataEncoder(types);
        }
        /**
         *  Return the primary type for %%types%%.
         */
        static getPrimaryType(types) {
          return _TypedDataEncoder.from(types).primaryType;
        }
        /**
         *  Return the hashed struct for %%value%% using %%types%% and %%name%%.
         */
        static hashStruct(name, types, value) {
          return _TypedDataEncoder.from(types).hashStruct(name, value);
        }
        /**
         *  Return the domain hash for %%domain%%.
         */
        static hashDomain(domain) {
          const domainFields = [];
          for (const name in domain) {
            if (domain[name] == null) {
              continue;
            }
            const type2 = domainFieldTypes[name];
            assertArgument(type2, `invalid typed-data domain key: ${JSON.stringify(name)}`, "domain", domain);
            domainFields.push({ name, type: type2 });
          }
          domainFields.sort((a, b2) => {
            return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b2.name);
          });
          return _TypedDataEncoder.hashStruct("EIP712Domain", { EIP712Domain: domainFields }, domain);
        }
        /**
         *  Return the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.
         */
        static encode(domain, types, value) {
          return concat([
            "0x1901",
            _TypedDataEncoder.hashDomain(domain),
            _TypedDataEncoder.from(types).hash(value)
          ]);
        }
        /**
         *  Return the hash of the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.
         */
        static hash(domain, types, value) {
          return keccak256(_TypedDataEncoder.encode(domain, types, value));
        }
        // Replaces all address types with ENS names with their looked up address
        /**
         * Resolves to the value from resolving all addresses in %%value%% for
         * %%types%% and the %%domain%%.
         */
        static async resolveNames(domain, types, value, resolveName) {
          domain = Object.assign({}, domain);
          for (const key in domain) {
            if (domain[key] == null) {
              delete domain[key];
            }
          }
          const ensCache = {};
          if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {
            ensCache[domain.verifyingContract] = "0x";
          }
          const encoder = _TypedDataEncoder.from(types);
          encoder.visit(value, (type2, value2) => {
            if (type2 === "address" && !isHexString(value2, 20)) {
              ensCache[value2] = "0x";
            }
            return value2;
          });
          for (const name in ensCache) {
            ensCache[name] = await resolveName(name);
          }
          if (domain.verifyingContract && ensCache[domain.verifyingContract]) {
            domain.verifyingContract = ensCache[domain.verifyingContract];
          }
          value = encoder.visit(value, (type2, value2) => {
            if (type2 === "address" && ensCache[value2]) {
              return ensCache[value2];
            }
            return value2;
          });
          return { domain, value };
        }
        /**
         *  Returns the JSON-encoded payload expected by nodes which implement
         *  the JSON-RPC [[link-eip-712]] method.
         */
        static getPayload(domain, types, value) {
          _TypedDataEncoder.hashDomain(domain);
          const domainValues = {};
          const domainTypes = [];
          domainFieldNames.forEach((name) => {
            const value2 = domain[name];
            if (value2 == null) {
              return;
            }
            domainValues[name] = domainChecks[name](value2);
            domainTypes.push({ name, type: domainFieldTypes[name] });
          });
          const encoder = _TypedDataEncoder.from(types);
          types = encoder.types;
          const typesWithDomain = Object.assign({}, types);
          assertArgument(typesWithDomain.EIP712Domain == null, "types must not contain EIP712Domain type", "types.EIP712Domain", types);
          typesWithDomain.EIP712Domain = domainTypes;
          encoder.encode(value);
          return {
            types: typesWithDomain,
            domain: domainValues,
            primaryType: encoder.primaryType,
            message: encoder.visit(value, (type2, value2) => {
              if (type2.match(/^bytes(\d*)/)) {
                return hexlify(getBytes(value2));
              }
              if (type2.match(/^u?int/)) {
                return getBigInt(value2).toString();
              }
              switch (type2) {
                case "address":
                  return value2.toLowerCase();
                case "bool":
                  return !!value2;
                case "string":
                  assertArgument(typeof value2 === "string", "invalid string", "value", value2);
                  return value2;
              }
              assertArgument(false, "unsupported type", "type", type2);
            })
          };
        }
      };
      _types = new WeakMap();
      _fullTypes = new WeakMap();
      _encoderCache = new WeakMap();
      _TypedDataEncoder_instances = new WeakSet();
      getEncoder_fn = function(type2) {
        {
          const encoder = getBaseEncoder(type2);
          if (encoder) {
            return encoder;
          }
        }
        const array2 = splitArray(type2).array;
        if (array2) {
          const subtype = array2.prefix;
          const subEncoder = this.getEncoder(subtype);
          return (value) => {
            assertArgument(array2.count === -1 || array2.count === value.length, `array length mismatch; expected length ${array2.count}`, "value", value);
            let result = value.map(subEncoder);
            if (__privateGet(this, _fullTypes).has(subtype)) {
              result = result.map(keccak256);
            }
            return keccak256(concat(result));
          };
        }
        const fields = this.types[type2];
        if (fields) {
          const encodedType = id(__privateGet(this, _fullTypes).get(type2));
          return (value) => {
            const values = fields.map(({ name, type: type3 }) => {
              const result = this.getEncoder(type3)(value[name]);
              if (__privateGet(this, _fullTypes).has(type3)) {
                return keccak256(result);
              }
              return result;
            });
            values.unshift(encodedType);
            return concat(values);
          };
        }
        assertArgument(false, `unknown type: ${type2}`, "type", type2);
      };
      TypedDataEncoder = _TypedDataEncoder;
    }
  });

  // node_modules/ethers/lib.esm/hash/index.js
  var init_hash = __esm({
    "node_modules/ethers/lib.esm/hash/index.js"() {
      init_authorization2();
      init_id();
      init_namehash();
      init_message();
      init_solidity();
      init_typed_data();
    }
  });

  // node_modules/ethers/lib.esm/abi/fragments.js
  function setify(items) {
    const result = /* @__PURE__ */ new Set();
    items.forEach((k) => result.add(k));
    return Object.freeze(result);
  }
  function lex(text) {
    const tokens = [];
    const throwError2 = (message) => {
      const token = offset2 < text.length ? JSON.stringify(text[offset2]) : "$EOI";
      throw new Error(`invalid token ${token} at ${offset2}: ${message}`);
    };
    let brackets = [];
    let commas = [];
    let offset2 = 0;
    while (offset2 < text.length) {
      let cur = text.substring(offset2);
      let match = cur.match(regexWhitespacePrefix);
      if (match) {
        offset2 += match[1].length;
        cur = text.substring(offset2);
      }
      const token = { depth: brackets.length, linkBack: -1, linkNext: -1, match: -1, type: "", text: "", offset: offset2, value: -1 };
      tokens.push(token);
      let type2 = SimpleTokens[cur[0]] || "";
      if (type2) {
        token.type = type2;
        token.text = cur[0];
        offset2++;
        if (type2 === "OPEN_PAREN") {
          brackets.push(tokens.length - 1);
          commas.push(tokens.length - 1);
        } else if (type2 == "CLOSE_PAREN") {
          if (brackets.length === 0) {
            throwError2("no matching open bracket");
          }
          token.match = brackets.pop();
          tokens[token.match].match = tokens.length - 1;
          token.depth--;
          token.linkBack = commas.pop();
          tokens[token.linkBack].linkNext = tokens.length - 1;
        } else if (type2 === "COMMA") {
          token.linkBack = commas.pop();
          tokens[token.linkBack].linkNext = tokens.length - 1;
          commas.push(tokens.length - 1);
        } else if (type2 === "OPEN_BRACKET") {
          token.type = "BRACKET";
        } else if (type2 === "CLOSE_BRACKET") {
          let suffix = tokens.pop().text;
          if (tokens.length > 0 && tokens[tokens.length - 1].type === "NUMBER") {
            const value = tokens.pop().text;
            suffix = value + suffix;
            tokens[tokens.length - 1].value = getNumber2(value);
          }
          if (tokens.length === 0 || tokens[tokens.length - 1].type !== "BRACKET") {
            throw new Error("missing opening bracket");
          }
          tokens[tokens.length - 1].text += suffix;
        }
        continue;
      }
      match = cur.match(regexIdPrefix);
      if (match) {
        token.text = match[1];
        offset2 += token.text.length;
        if (Keywords.has(token.text)) {
          token.type = "KEYWORD";
          continue;
        }
        if (token.text.match(regexType)) {
          token.type = "TYPE";
          continue;
        }
        token.type = "ID";
        continue;
      }
      match = cur.match(regexNumberPrefix);
      if (match) {
        token.text = match[1];
        token.type = "NUMBER";
        offset2 += token.text.length;
        continue;
      }
      throw new Error(`unexpected token ${JSON.stringify(cur[0])} at position ${offset2}`);
    }
    return new TokenString(tokens.map((t) => Object.freeze(t)));
  }
  function allowSingle(set, allowed) {
    let included = [];
    for (const key in allowed.keys()) {
      if (set.has(key)) {
        included.push(key);
      }
    }
    if (included.length > 1) {
      throw new Error(`conflicting types: ${included.join(", ")}`);
    }
  }
  function consumeName(type2, tokens) {
    if (tokens.peekKeyword(KwTypes)) {
      const keyword = tokens.pop().text;
      if (keyword !== type2) {
        throw new Error(`expected ${type2}, got ${keyword}`);
      }
    }
    return tokens.popType("ID");
  }
  function consumeKeywords(tokens, allowed) {
    const keywords = /* @__PURE__ */ new Set();
    while (true) {
      const keyword = tokens.peekType("KEYWORD");
      if (keyword == null || allowed && !allowed.has(keyword)) {
        break;
      }
      tokens.pop();
      if (keywords.has(keyword)) {
        throw new Error(`duplicate keywords: ${JSON.stringify(keyword)}`);
      }
      keywords.add(keyword);
    }
    return Object.freeze(keywords);
  }
  function consumeMutability(tokens) {
    let modifiers = consumeKeywords(tokens, KwVisib);
    allowSingle(modifiers, setify("constant payable nonpayable".split(" ")));
    allowSingle(modifiers, setify("pure view payable nonpayable".split(" ")));
    if (modifiers.has("view")) {
      return "view";
    }
    if (modifiers.has("pure")) {
      return "pure";
    }
    if (modifiers.has("payable")) {
      return "payable";
    }
    if (modifiers.has("nonpayable")) {
      return "nonpayable";
    }
    if (modifiers.has("constant")) {
      return "view";
    }
    return "nonpayable";
  }
  function consumeParams(tokens, allowIndexed) {
    return tokens.popParams().map((t) => ParamType.from(t, allowIndexed));
  }
  function consumeGas(tokens) {
    if (tokens.peekType("AT")) {
      tokens.pop();
      if (tokens.peekType("NUMBER")) {
        return getBigInt(tokens.pop().text);
      }
      throw new Error("invalid gas");
    }
    return null;
  }
  function consumeEoi(tokens) {
    if (tokens.length) {
      throw new Error(`unexpected tokens at offset ${tokens.offset}: ${tokens.toString()}`);
    }
  }
  function verifyBasicType(type2) {
    const match = type2.match(regexType);
    assertArgument(match, "invalid type", "type", type2);
    if (type2 === "uint") {
      return "uint256";
    }
    if (type2 === "int") {
      return "int256";
    }
    if (match[2]) {
      const length = parseInt(match[2]);
      assertArgument(length !== 0 && length <= 32, "invalid bytes length", "type", type2);
    } else if (match[3]) {
      const size = parseInt(match[3]);
      assertArgument(size !== 0 && size <= 256 && size % 8 === 0, "invalid numeric width", "type", type2);
    }
    return type2;
  }
  function joinParams(format, params) {
    return "(" + params.map((p) => p.format(format)).join(format === "full" ? ", " : ",") + ")";
  }
  var _kwVisibDeploy, KwVisibDeploy, _kwVisib, KwVisib, _kwTypes, KwTypes, _kwModifiers, KwModifiers, _kwOther, _keywords, Keywords, SimpleTokens, regexWhitespacePrefix, regexNumberPrefix, regexIdPrefix, regexId, regexType, _offset2, _tokens, _TokenString_instances, subTokenString_fn, _TokenString, TokenString, regexArrayType, _guard4, internal, ParamTypeInternal, ErrorFragmentInternal, EventFragmentInternal, ConstructorFragmentInternal, FallbackFragmentInternal, FunctionFragmentInternal, StructFragmentInternal, _ParamType_instances, walkAsync_fn, _ParamType, ParamType, Fragment, NamedFragment, ErrorFragment, EventFragment, ConstructorFragment, FallbackFragment, FunctionFragment, StructFragment;
  var init_fragments = __esm({
    "node_modules/ethers/lib.esm/abi/fragments.js"() {
      init_utils();
      init_hash();
      _kwVisibDeploy = "external public payable override";
      KwVisibDeploy = setify(_kwVisibDeploy.split(" "));
      _kwVisib = "constant external internal payable private public pure view override";
      KwVisib = setify(_kwVisib.split(" "));
      _kwTypes = "constructor error event fallback function receive struct";
      KwTypes = setify(_kwTypes.split(" "));
      _kwModifiers = "calldata memory storage payable indexed";
      KwModifiers = setify(_kwModifiers.split(" "));
      _kwOther = "tuple returns";
      _keywords = [_kwTypes, _kwModifiers, _kwOther, _kwVisib].join(" ");
      Keywords = setify(_keywords.split(" "));
      SimpleTokens = {
        "(": "OPEN_PAREN",
        ")": "CLOSE_PAREN",
        "[": "OPEN_BRACKET",
        "]": "CLOSE_BRACKET",
        ",": "COMMA",
        "@": "AT"
      };
      regexWhitespacePrefix = new RegExp("^(\\s*)");
      regexNumberPrefix = new RegExp("^([0-9]+)");
      regexIdPrefix = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)");
      regexId = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)$");
      regexType = new RegExp("^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$");
      _TokenString = class _TokenString {
        constructor(tokens) {
          __privateAdd(this, _TokenString_instances);
          __privateAdd(this, _offset2);
          __privateAdd(this, _tokens);
          __privateSet(this, _offset2, 0);
          __privateSet(this, _tokens, tokens.slice());
        }
        get offset() {
          return __privateGet(this, _offset2);
        }
        get length() {
          return __privateGet(this, _tokens).length - __privateGet(this, _offset2);
        }
        clone() {
          return new _TokenString(__privateGet(this, _tokens));
        }
        reset() {
          __privateSet(this, _offset2, 0);
        }
        // Pops and returns the value of the next token, if it is a keyword in allowed; throws if out of tokens
        popKeyword(allowed) {
          const top = this.peek();
          if (top.type !== "KEYWORD" || !allowed.has(top.text)) {
            throw new Error(`expected keyword ${top.text}`);
          }
          return this.pop().text;
        }
        // Pops and returns the value of the next token if it is `type`; throws if out of tokens
        popType(type2) {
          if (this.peek().type !== type2) {
            const top = this.peek();
            throw new Error(`expected ${type2}; got ${top.type} ${JSON.stringify(top.text)}`);
          }
          return this.pop().text;
        }
        // Pops and returns a "(" TOKENS ")"
        popParen() {
          const top = this.peek();
          if (top.type !== "OPEN_PAREN") {
            throw new Error("bad start");
          }
          const result = __privateMethod(this, _TokenString_instances, subTokenString_fn).call(this, __privateGet(this, _offset2) + 1, top.match + 1);
          __privateSet(this, _offset2, top.match + 1);
          return result;
        }
        // Pops and returns the items within "(" ITEM1 "," ITEM2 "," ... ")"
        popParams() {
          const top = this.peek();
          if (top.type !== "OPEN_PAREN") {
            throw new Error("bad start");
          }
          const result = [];
          while (__privateGet(this, _offset2) < top.match - 1) {
            const link = this.peek().linkNext;
            result.push(__privateMethod(this, _TokenString_instances, subTokenString_fn).call(this, __privateGet(this, _offset2) + 1, link));
            __privateSet(this, _offset2, link);
          }
          __privateSet(this, _offset2, top.match + 1);
          return result;
        }
        // Returns the top Token, throwing if out of tokens
        peek() {
          if (__privateGet(this, _offset2) >= __privateGet(this, _tokens).length) {
            throw new Error("out-of-bounds");
          }
          return __privateGet(this, _tokens)[__privateGet(this, _offset2)];
        }
        // Returns the next value, if it is a keyword in `allowed`
        peekKeyword(allowed) {
          const top = this.peekType("KEYWORD");
          return top != null && allowed.has(top) ? top : null;
        }
        // Returns the value of the next token if it is `type`
        peekType(type2) {
          if (this.length === 0) {
            return null;
          }
          const top = this.peek();
          return top.type === type2 ? top.text : null;
        }
        // Returns the next token; throws if out of tokens
        pop() {
          const result = this.peek();
          __privateWrapper(this, _offset2)._++;
          return result;
        }
        toString() {
          const tokens = [];
          for (let i = __privateGet(this, _offset2); i < __privateGet(this, _tokens).length; i++) {
            const token = __privateGet(this, _tokens)[i];
            tokens.push(`${token.type}:${token.text}`);
          }
          return `<TokenString ${tokens.join(" ")}>`;
        }
      };
      _offset2 = new WeakMap();
      _tokens = new WeakMap();
      _TokenString_instances = new WeakSet();
      subTokenString_fn = function(from = 0, to = 0) {
        return new _TokenString(__privateGet(this, _tokens).slice(from, to).map((t) => {
          return Object.freeze(Object.assign({}, t, {
            match: t.match - from,
            linkBack: t.linkBack - from,
            linkNext: t.linkNext - from
          }));
        }));
      };
      TokenString = _TokenString;
      regexArrayType = new RegExp(/^(.*)\[([0-9]*)\]$/);
      _guard4 = {};
      internal = Symbol.for("_ethers_internal");
      ParamTypeInternal = "_ParamTypeInternal";
      ErrorFragmentInternal = "_ErrorInternal";
      EventFragmentInternal = "_EventInternal";
      ConstructorFragmentInternal = "_ConstructorInternal";
      FallbackFragmentInternal = "_FallbackInternal";
      FunctionFragmentInternal = "_FunctionInternal";
      StructFragmentInternal = "_StructInternal";
      _ParamType = class _ParamType {
        /**
         *  @private
         */
        constructor(guard, name, type2, baseType, indexed, components, arrayLength, arrayChildren) {
          __privateAdd(this, _ParamType_instances);
          /**
           *  The local name of the parameter (or ``""`` if unbound)
           */
          __publicField(this, "name");
          /**
           *  The fully qualified type (e.g. ``"address"``, ``"tuple(address)"``,
           *  ``"uint256[3][]"``)
           */
          __publicField(this, "type");
          /**
           *  The base type (e.g. ``"address"``, ``"tuple"``, ``"array"``)
           */
          __publicField(this, "baseType");
          /**
           *  True if the parameters is indexed.
           *
           *  For non-indexable types this is ``null``.
           */
          __publicField(this, "indexed");
          /**
           *  The components for the tuple.
           *
           *  For non-tuple types this is ``null``.
           */
          __publicField(this, "components");
          /**
           *  The array length, or ``-1`` for dynamic-lengthed arrays.
           *
           *  For non-array types this is ``null``.
           */
          __publicField(this, "arrayLength");
          /**
           *  The type of each child in the array.
           *
           *  For non-array types this is ``null``.
           */
          __publicField(this, "arrayChildren");
          assertPrivate(guard, _guard4, "ParamType");
          Object.defineProperty(this, internal, { value: ParamTypeInternal });
          if (components) {
            components = Object.freeze(components.slice());
          }
          if (baseType === "array") {
            if (arrayLength == null || arrayChildren == null) {
              throw new Error("");
            }
          } else if (arrayLength != null || arrayChildren != null) {
            throw new Error("");
          }
          if (baseType === "tuple") {
            if (components == null) {
              throw new Error("");
            }
          } else if (components != null) {
            throw new Error("");
          }
          defineProperties(this, {
            name,
            type: type2,
            baseType,
            indexed,
            components,
            arrayLength,
            arrayChildren
          });
        }
        /**
         *  Return a string representation of this type.
         *
         *  For example,
         *
         *  ``sighash" => "(uint256,address)"``
         *
         *  ``"minimal" => "tuple(uint256,address) indexed"``
         *
         *  ``"full" => "tuple(uint256 foo, address bar) indexed baz"``
         */
        format(format) {
          if (format == null) {
            format = "sighash";
          }
          if (format === "json") {
            const name = this.name || "";
            if (this.isArray()) {
              const result3 = JSON.parse(this.arrayChildren.format("json"));
              result3.name = name;
              result3.type += `[${this.arrayLength < 0 ? "" : String(this.arrayLength)}]`;
              return JSON.stringify(result3);
            }
            const result2 = {
              type: this.baseType === "tuple" ? "tuple" : this.type,
              name
            };
            if (typeof this.indexed === "boolean") {
              result2.indexed = this.indexed;
            }
            if (this.isTuple()) {
              result2.components = this.components.map((c) => JSON.parse(c.format(format)));
            }
            return JSON.stringify(result2);
          }
          let result = "";
          if (this.isArray()) {
            result += this.arrayChildren.format(format);
            result += `[${this.arrayLength < 0 ? "" : String(this.arrayLength)}]`;
          } else {
            if (this.isTuple()) {
              result += "(" + this.components.map((comp) => comp.format(format)).join(format === "full" ? ", " : ",") + ")";
            } else {
              result += this.type;
            }
          }
          if (format !== "sighash") {
            if (this.indexed === true) {
              result += " indexed";
            }
            if (format === "full" && this.name) {
              result += " " + this.name;
            }
          }
          return result;
        }
        /**
         *  Returns true if %%this%% is an Array type.
         *
         *  This provides a type gaurd ensuring that [[arrayChildren]]
         *  and [[arrayLength]] are non-null.
         */
        isArray() {
          return this.baseType === "array";
        }
        /**
         *  Returns true if %%this%% is a Tuple type.
         *
         *  This provides a type gaurd ensuring that [[components]]
         *  is non-null.
         */
        isTuple() {
          return this.baseType === "tuple";
        }
        /**
         *  Returns true if %%this%% is an Indexable type.
         *
         *  This provides a type gaurd ensuring that [[indexed]]
         *  is non-null.
         */
        isIndexable() {
          return this.indexed != null;
        }
        /**
         *  Walks the **ParamType** with %%value%%, calling %%process%%
         *  on each type, destructing the %%value%% recursively.
         */
        walk(value, process) {
          if (this.isArray()) {
            if (!Array.isArray(value)) {
              throw new Error("invalid array value");
            }
            if (this.arrayLength !== -1 && value.length !== this.arrayLength) {
              throw new Error("array is wrong length");
            }
            const _this = this;
            return value.map((v) => _this.arrayChildren.walk(v, process));
          }
          if (this.isTuple()) {
            if (!Array.isArray(value)) {
              throw new Error("invalid tuple value");
            }
            if (value.length !== this.components.length) {
              throw new Error("array is wrong length");
            }
            const _this = this;
            return value.map((v, i) => _this.components[i].walk(v, process));
          }
          return process(this.type, value);
        }
        /**
         *  Walks the **ParamType** with %%value%%, asynchronously calling
         *  %%process%% on each type, destructing the %%value%% recursively.
         *
         *  This can be used to resolve ENS names by walking and resolving each
         *  ``"address"`` type.
         */
        async walkAsync(value, process) {
          const promises = [];
          const result = [value];
          __privateMethod(this, _ParamType_instances, walkAsync_fn).call(this, promises, value, process, (value2) => {
            result[0] = value2;
          });
          if (promises.length) {
            await Promise.all(promises);
          }
          return result[0];
        }
        /**
         *  Creates a new **ParamType** for %%obj%%.
         *
         *  If %%allowIndexed%% then the ``indexed`` keyword is permitted,
         *  otherwise the ``indexed`` keyword will throw an error.
         */
        static from(obj, allowIndexed) {
          if (_ParamType.isParamType(obj)) {
            return obj;
          }
          if (typeof obj === "string") {
            try {
              return _ParamType.from(lex(obj), allowIndexed);
            } catch (error) {
              assertArgument(false, "invalid param type", "obj", obj);
            }
          } else if (obj instanceof TokenString) {
            let type3 = "", baseType = "";
            let comps = null;
            if (consumeKeywords(obj, setify(["tuple"])).has("tuple") || obj.peekType("OPEN_PAREN")) {
              baseType = "tuple";
              comps = obj.popParams().map((t) => _ParamType.from(t));
              type3 = `tuple(${comps.map((c) => c.format()).join(",")})`;
            } else {
              type3 = verifyBasicType(obj.popType("TYPE"));
              baseType = type3;
            }
            let arrayChildren = null;
            let arrayLength = null;
            while (obj.length && obj.peekType("BRACKET")) {
              const bracket = obj.pop();
              arrayChildren = new _ParamType(_guard4, "", type3, baseType, null, comps, arrayLength, arrayChildren);
              arrayLength = bracket.value;
              type3 += bracket.text;
              baseType = "array";
              comps = null;
            }
            let indexed2 = null;
            const keywords = consumeKeywords(obj, KwModifiers);
            if (keywords.has("indexed")) {
              if (!allowIndexed) {
                throw new Error("");
              }
              indexed2 = true;
            }
            const name2 = obj.peekType("ID") ? obj.pop().text : "";
            if (obj.length) {
              throw new Error("leftover tokens");
            }
            return new _ParamType(_guard4, name2, type3, baseType, indexed2, comps, arrayLength, arrayChildren);
          }
          const name = obj.name;
          assertArgument(!name || typeof name === "string" && name.match(regexId), "invalid name", "obj.name", name);
          let indexed = obj.indexed;
          if (indexed != null) {
            assertArgument(allowIndexed, "parameter cannot be indexed", "obj.indexed", obj.indexed);
            indexed = !!indexed;
          }
          let type2 = obj.type;
          let arrayMatch = type2.match(regexArrayType);
          if (arrayMatch) {
            const arrayLength = parseInt(arrayMatch[2] || "-1");
            const arrayChildren = _ParamType.from({
              type: arrayMatch[1],
              components: obj.components
            });
            return new _ParamType(_guard4, name || "", type2, "array", indexed, null, arrayLength, arrayChildren);
          }
          if (type2 === "tuple" || type2.startsWith(
            "tuple("
            /* fix: ) */
          ) || type2.startsWith(
            "("
            /* fix: ) */
          )) {
            const comps = obj.components != null ? obj.components.map((c) => _ParamType.from(c)) : null;
            const tuple2 = new _ParamType(_guard4, name || "", type2, "tuple", indexed, comps, null, null);
            return tuple2;
          }
          type2 = verifyBasicType(obj.type);
          return new _ParamType(_guard4, name || "", type2, type2, indexed, null, null, null);
        }
        /**
         *  Returns true if %%value%% is a **ParamType**.
         */
        static isParamType(value) {
          return value && value[internal] === ParamTypeInternal;
        }
      };
      _ParamType_instances = new WeakSet();
      walkAsync_fn = function(promises, value, process, setValue) {
        if (this.isArray()) {
          if (!Array.isArray(value)) {
            throw new Error("invalid array value");
          }
          if (this.arrayLength !== -1 && value.length !== this.arrayLength) {
            throw new Error("array is wrong length");
          }
          const childType = this.arrayChildren;
          const result2 = value.slice();
          result2.forEach((value2, index) => {
            var _a2;
            __privateMethod(_a2 = childType, _ParamType_instances, walkAsync_fn).call(_a2, promises, value2, process, (value3) => {
              result2[index] = value3;
            });
          });
          setValue(result2);
          return;
        }
        if (this.isTuple()) {
          const components = this.components;
          let result2;
          if (Array.isArray(value)) {
            result2 = value.slice();
          } else {
            if (value == null || typeof value !== "object") {
              throw new Error("invalid tuple value");
            }
            result2 = components.map((param) => {
              if (!param.name) {
                throw new Error("cannot use object value with unnamed components");
              }
              if (!(param.name in value)) {
                throw new Error(`missing value for component ${param.name}`);
              }
              return value[param.name];
            });
          }
          if (result2.length !== this.components.length) {
            throw new Error("array is wrong length");
          }
          result2.forEach((value2, index) => {
            var _a2;
            __privateMethod(_a2 = components[index], _ParamType_instances, walkAsync_fn).call(_a2, promises, value2, process, (value3) => {
              result2[index] = value3;
            });
          });
          setValue(result2);
          return;
        }
        const result = process(this.type, value);
        if (result.then) {
          promises.push(async function() {
            setValue(await result);
          }());
        } else {
          setValue(result);
        }
      };
      ParamType = _ParamType;
      Fragment = class _Fragment {
        /**
         *  @private
         */
        constructor(guard, type2, inputs) {
          /**
           *  The type of the fragment.
           */
          __publicField(this, "type");
          /**
           *  The inputs for the fragment.
           */
          __publicField(this, "inputs");
          assertPrivate(guard, _guard4, "Fragment");
          inputs = Object.freeze(inputs.slice());
          defineProperties(this, { type: type2, inputs });
        }
        /**
         *  Creates a new **Fragment** for %%obj%%, wich can be any supported
         *  ABI frgament type.
         */
        static from(obj) {
          if (typeof obj === "string") {
            try {
              _Fragment.from(JSON.parse(obj));
            } catch (e) {
            }
            return _Fragment.from(lex(obj));
          }
          if (obj instanceof TokenString) {
            const type2 = obj.peekKeyword(KwTypes);
            switch (type2) {
              case "constructor":
                return ConstructorFragment.from(obj);
              case "error":
                return ErrorFragment.from(obj);
              case "event":
                return EventFragment.from(obj);
              case "fallback":
              case "receive":
                return FallbackFragment.from(obj);
              case "function":
                return FunctionFragment.from(obj);
              case "struct":
                return StructFragment.from(obj);
            }
          } else if (typeof obj === "object") {
            switch (obj.type) {
              case "constructor":
                return ConstructorFragment.from(obj);
              case "error":
                return ErrorFragment.from(obj);
              case "event":
                return EventFragment.from(obj);
              case "fallback":
              case "receive":
                return FallbackFragment.from(obj);
              case "function":
                return FunctionFragment.from(obj);
              case "struct":
                return StructFragment.from(obj);
            }
            assert(false, `unsupported type: ${obj.type}`, "UNSUPPORTED_OPERATION", {
              operation: "Fragment.from"
            });
          }
          assertArgument(false, "unsupported frgament object", "obj", obj);
        }
        /**
         *  Returns true if %%value%% is a [[ConstructorFragment]].
         */
        static isConstructor(value) {
          return ConstructorFragment.isFragment(value);
        }
        /**
         *  Returns true if %%value%% is an [[ErrorFragment]].
         */
        static isError(value) {
          return ErrorFragment.isFragment(value);
        }
        /**
         *  Returns true if %%value%% is an [[EventFragment]].
         */
        static isEvent(value) {
          return EventFragment.isFragment(value);
        }
        /**
         *  Returns true if %%value%% is a [[FunctionFragment]].
         */
        static isFunction(value) {
          return FunctionFragment.isFragment(value);
        }
        /**
         *  Returns true if %%value%% is a [[StructFragment]].
         */
        static isStruct(value) {
          return StructFragment.isFragment(value);
        }
      };
      NamedFragment = class extends Fragment {
        /**
         *  @private
         */
        constructor(guard, type2, name, inputs) {
          super(guard, type2, inputs);
          /**
           *  The name of the fragment.
           */
          __publicField(this, "name");
          assertArgument(typeof name === "string" && name.match(regexId), "invalid identifier", "name", name);
          inputs = Object.freeze(inputs.slice());
          defineProperties(this, { name });
        }
      };
      ErrorFragment = class _ErrorFragment extends NamedFragment {
        /**
         *  @private
         */
        constructor(guard, name, inputs) {
          super(guard, "error", name, inputs);
          Object.defineProperty(this, internal, { value: ErrorFragmentInternal });
        }
        /**
         *  The Custom Error selector.
         */
        get selector() {
          return id(this.format("sighash")).substring(0, 10);
        }
        /**
         *  Returns a string representation of this fragment as %%format%%.
         */
        format(format) {
          if (format == null) {
            format = "sighash";
          }
          if (format === "json") {
            return JSON.stringify({
              type: "error",
              name: this.name,
              inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
            });
          }
          const result = [];
          if (format !== "sighash") {
            result.push("error");
          }
          result.push(this.name + joinParams(format, this.inputs));
          return result.join(" ");
        }
        /**
         *  Returns a new **ErrorFragment** for %%obj%%.
         */
        static from(obj) {
          if (_ErrorFragment.isFragment(obj)) {
            return obj;
          }
          if (typeof obj === "string") {
            return _ErrorFragment.from(lex(obj));
          } else if (obj instanceof TokenString) {
            const name = consumeName("error", obj);
            const inputs = consumeParams(obj);
            consumeEoi(obj);
            return new _ErrorFragment(_guard4, name, inputs);
          }
          return new _ErrorFragment(_guard4, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);
        }
        /**
         *  Returns ``true`` and provides a type guard if %%value%% is an
         *  **ErrorFragment**.
         */
        static isFragment(value) {
          return value && value[internal] === ErrorFragmentInternal;
        }
      };
      EventFragment = class _EventFragment extends NamedFragment {
        /**
         *  @private
         */
        constructor(guard, name, inputs, anonymous) {
          super(guard, "event", name, inputs);
          /**
           *  Whether this event is anonymous.
           */
          __publicField(this, "anonymous");
          Object.defineProperty(this, internal, { value: EventFragmentInternal });
          defineProperties(this, { anonymous });
        }
        /**
         *  The Event topic hash.
         */
        get topicHash() {
          return id(this.format("sighash"));
        }
        /**
         *  Returns a string representation of this event as %%format%%.
         */
        format(format) {
          if (format == null) {
            format = "sighash";
          }
          if (format === "json") {
            return JSON.stringify({
              type: "event",
              anonymous: this.anonymous,
              name: this.name,
              inputs: this.inputs.map((i) => JSON.parse(i.format(format)))
            });
          }
          const result = [];
          if (format !== "sighash") {
            result.push("event");
          }
          result.push(this.name + joinParams(format, this.inputs));
          if (format !== "sighash" && this.anonymous) {
            result.push("anonymous");
          }
          return result.join(" ");
        }
        /**
         *  Return the topic hash for an event with %%name%% and %%params%%.
         */
        static getTopicHash(name, params) {
          params = (params || []).map((p) => ParamType.from(p));
          const fragment = new _EventFragment(_guard4, name, params, false);
          return fragment.topicHash;
        }
        /**
         *  Returns a new **EventFragment** for %%obj%%.
         */
        static from(obj) {
          if (_EventFragment.isFragment(obj)) {
            return obj;
          }
          if (typeof obj === "string") {
            try {
              return _EventFragment.from(lex(obj));
            } catch (error) {
              assertArgument(false, "invalid event fragment", "obj", obj);
            }
          } else if (obj instanceof TokenString) {
            const name = consumeName("event", obj);
            const inputs = consumeParams(obj, true);
            const anonymous = !!consumeKeywords(obj, setify(["anonymous"])).has("anonymous");
            consumeEoi(obj);
            return new _EventFragment(_guard4, name, inputs, anonymous);
          }
          return new _EventFragment(_guard4, obj.name, obj.inputs ? obj.inputs.map((p) => ParamType.from(p, true)) : [], !!obj.anonymous);
        }
        /**
         *  Returns ``true`` and provides a type guard if %%value%% is an
         *  **EventFragment**.
         */
        static isFragment(value) {
          return value && value[internal] === EventFragmentInternal;
        }
      };
      ConstructorFragment = class _ConstructorFragment extends Fragment {
        /**
         *  @private
         */
        constructor(guard, type2, inputs, payable, gas) {
          super(guard, type2, inputs);
          /**
           *  Whether the constructor can receive an endowment.
           */
          __publicField(this, "payable");
          /**
           *  The recommended gas limit for deployment or ``null``.
           */
          __publicField(this, "gas");
          Object.defineProperty(this, internal, { value: ConstructorFragmentInternal });
          defineProperties(this, { payable, gas });
        }
        /**
         *  Returns a string representation of this constructor as %%format%%.
         */
        format(format) {
          assert(format != null && format !== "sighash", "cannot format a constructor for sighash", "UNSUPPORTED_OPERATION", { operation: "format(sighash)" });
          if (format === "json") {
            return JSON.stringify({
              type: "constructor",
              stateMutability: this.payable ? "payable" : "undefined",
              payable: this.payable,
              gas: this.gas != null ? this.gas : void 0,
              inputs: this.inputs.map((i) => JSON.parse(i.format(format)))
            });
          }
          const result = [`constructor${joinParams(format, this.inputs)}`];
          if (this.payable) {
            result.push("payable");
          }
          if (this.gas != null) {
            result.push(`@${this.gas.toString()}`);
          }
          return result.join(" ");
        }
        /**
         *  Returns a new **ConstructorFragment** for %%obj%%.
         */
        static from(obj) {
          if (_ConstructorFragment.isFragment(obj)) {
            return obj;
          }
          if (typeof obj === "string") {
            try {
              return _ConstructorFragment.from(lex(obj));
            } catch (error) {
              assertArgument(false, "invalid constuctor fragment", "obj", obj);
            }
          } else if (obj instanceof TokenString) {
            consumeKeywords(obj, setify(["constructor"]));
            const inputs = consumeParams(obj);
            const payable = !!consumeKeywords(obj, KwVisibDeploy).has("payable");
            const gas = consumeGas(obj);
            consumeEoi(obj);
            return new _ConstructorFragment(_guard4, "constructor", inputs, payable, gas);
          }
          return new _ConstructorFragment(_guard4, "constructor", obj.inputs ? obj.inputs.map(ParamType.from) : [], !!obj.payable, obj.gas != null ? obj.gas : null);
        }
        /**
         *  Returns ``true`` and provides a type guard if %%value%% is a
         *  **ConstructorFragment**.
         */
        static isFragment(value) {
          return value && value[internal] === ConstructorFragmentInternal;
        }
      };
      FallbackFragment = class _FallbackFragment extends Fragment {
        constructor(guard, inputs, payable) {
          super(guard, "fallback", inputs);
          /**
           *  If the function can be sent value during invocation.
           */
          __publicField(this, "payable");
          Object.defineProperty(this, internal, { value: FallbackFragmentInternal });
          defineProperties(this, { payable });
        }
        /**
         *  Returns a string representation of this fallback as %%format%%.
         */
        format(format) {
          const type2 = this.inputs.length === 0 ? "receive" : "fallback";
          if (format === "json") {
            const stateMutability = this.payable ? "payable" : "nonpayable";
            return JSON.stringify({ type: type2, stateMutability });
          }
          return `${type2}()${this.payable ? " payable" : ""}`;
        }
        /**
         *  Returns a new **FallbackFragment** for %%obj%%.
         */
        static from(obj) {
          if (_FallbackFragment.isFragment(obj)) {
            return obj;
          }
          if (typeof obj === "string") {
            try {
              return _FallbackFragment.from(lex(obj));
            } catch (error) {
              assertArgument(false, "invalid fallback fragment", "obj", obj);
            }
          } else if (obj instanceof TokenString) {
            const errorObj = obj.toString();
            const topIsValid = obj.peekKeyword(setify(["fallback", "receive"]));
            assertArgument(topIsValid, "type must be fallback or receive", "obj", errorObj);
            const type2 = obj.popKeyword(setify(["fallback", "receive"]));
            if (type2 === "receive") {
              const inputs2 = consumeParams(obj);
              assertArgument(inputs2.length === 0, `receive cannot have arguments`, "obj.inputs", inputs2);
              consumeKeywords(obj, setify(["payable"]));
              consumeEoi(obj);
              return new _FallbackFragment(_guard4, [], true);
            }
            let inputs = consumeParams(obj);
            if (inputs.length) {
              assertArgument(inputs.length === 1 && inputs[0].type === "bytes", "invalid fallback inputs", "obj.inputs", inputs.map((i) => i.format("minimal")).join(", "));
            } else {
              inputs = [ParamType.from("bytes")];
            }
            const mutability = consumeMutability(obj);
            assertArgument(mutability === "nonpayable" || mutability === "payable", "fallback cannot be constants", "obj.stateMutability", mutability);
            if (consumeKeywords(obj, setify(["returns"])).has("returns")) {
              const outputs = consumeParams(obj);
              assertArgument(outputs.length === 1 && outputs[0].type === "bytes", "invalid fallback outputs", "obj.outputs", outputs.map((i) => i.format("minimal")).join(", "));
            }
            consumeEoi(obj);
            return new _FallbackFragment(_guard4, inputs, mutability === "payable");
          }
          if (obj.type === "receive") {
            return new _FallbackFragment(_guard4, [], true);
          }
          if (obj.type === "fallback") {
            const inputs = [ParamType.from("bytes")];
            const payable = obj.stateMutability === "payable";
            return new _FallbackFragment(_guard4, inputs, payable);
          }
          assertArgument(false, "invalid fallback description", "obj", obj);
        }
        /**
         *  Returns ``true`` and provides a type guard if %%value%% is a
         *  **FallbackFragment**.
         */
        static isFragment(value) {
          return value && value[internal] === FallbackFragmentInternal;
        }
      };
      FunctionFragment = class _FunctionFragment extends NamedFragment {
        /**
         *  @private
         */
        constructor(guard, name, stateMutability, inputs, outputs, gas) {
          super(guard, "function", name, inputs);
          /**
           *  If the function is constant (e.g. ``pure`` or ``view`` functions).
           */
          __publicField(this, "constant");
          /**
           *  The returned types for the result of calling this function.
           */
          __publicField(this, "outputs");
          /**
           *  The state mutability (e.g. ``payable``, ``nonpayable``, ``view``
           *  or ``pure``)
           */
          __publicField(this, "stateMutability");
          /**
           *  If the function can be sent value during invocation.
           */
          __publicField(this, "payable");
          /**
           *  The recommended gas limit to send when calling this function.
           */
          __publicField(this, "gas");
          Object.defineProperty(this, internal, { value: FunctionFragmentInternal });
          outputs = Object.freeze(outputs.slice());
          const constant = stateMutability === "view" || stateMutability === "pure";
          const payable = stateMutability === "payable";
          defineProperties(this, { constant, gas, outputs, payable, stateMutability });
        }
        /**
         *  The Function selector.
         */
        get selector() {
          return id(this.format("sighash")).substring(0, 10);
        }
        /**
         *  Returns a string representation of this function as %%format%%.
         */
        format(format) {
          if (format == null) {
            format = "sighash";
          }
          if (format === "json") {
            return JSON.stringify({
              type: "function",
              name: this.name,
              constant: this.constant,
              stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
              payable: this.payable,
              gas: this.gas != null ? this.gas : void 0,
              inputs: this.inputs.map((i) => JSON.parse(i.format(format))),
              outputs: this.outputs.map((o) => JSON.parse(o.format(format)))
            });
          }
          const result = [];
          if (format !== "sighash") {
            result.push("function");
          }
          result.push(this.name + joinParams(format, this.inputs));
          if (format !== "sighash") {
            if (this.stateMutability !== "nonpayable") {
              result.push(this.stateMutability);
            }
            if (this.outputs && this.outputs.length) {
              result.push("returns");
              result.push(joinParams(format, this.outputs));
            }
            if (this.gas != null) {
              result.push(`@${this.gas.toString()}`);
            }
          }
          return result.join(" ");
        }
        /**
         *  Return the selector for a function with %%name%% and %%params%%.
         */
        static getSelector(name, params) {
          params = (params || []).map((p) => ParamType.from(p));
          const fragment = new _FunctionFragment(_guard4, name, "view", params, [], null);
          return fragment.selector;
        }
        /**
         *  Returns a new **FunctionFragment** for %%obj%%.
         */
        static from(obj) {
          if (_FunctionFragment.isFragment(obj)) {
            return obj;
          }
          if (typeof obj === "string") {
            try {
              return _FunctionFragment.from(lex(obj));
            } catch (error) {
              assertArgument(false, "invalid function fragment", "obj", obj);
            }
          } else if (obj instanceof TokenString) {
            const name = consumeName("function", obj);
            const inputs = consumeParams(obj);
            const mutability = consumeMutability(obj);
            let outputs = [];
            if (consumeKeywords(obj, setify(["returns"])).has("returns")) {
              outputs = consumeParams(obj);
            }
            const gas = consumeGas(obj);
            consumeEoi(obj);
            return new _FunctionFragment(_guard4, name, mutability, inputs, outputs, gas);
          }
          let stateMutability = obj.stateMutability;
          if (stateMutability == null) {
            stateMutability = "payable";
            if (typeof obj.constant === "boolean") {
              stateMutability = "view";
              if (!obj.constant) {
                stateMutability = "payable";
                if (typeof obj.payable === "boolean" && !obj.payable) {
                  stateMutability = "nonpayable";
                }
              }
            } else if (typeof obj.payable === "boolean" && !obj.payable) {
              stateMutability = "nonpayable";
            }
          }
          return new _FunctionFragment(_guard4, obj.name, stateMutability, obj.inputs ? obj.inputs.map(ParamType.from) : [], obj.outputs ? obj.outputs.map(ParamType.from) : [], obj.gas != null ? obj.gas : null);
        }
        /**
         *  Returns ``true`` and provides a type guard if %%value%% is a
         *  **FunctionFragment**.
         */
        static isFragment(value) {
          return value && value[internal] === FunctionFragmentInternal;
        }
      };
      StructFragment = class _StructFragment extends NamedFragment {
        /**
         *  @private
         */
        constructor(guard, name, inputs) {
          super(guard, "struct", name, inputs);
          Object.defineProperty(this, internal, { value: StructFragmentInternal });
        }
        /**
         *  Returns a string representation of this struct as %%format%%.
         */
        format() {
          throw new Error("@TODO");
        }
        /**
         *  Returns a new **StructFragment** for %%obj%%.
         */
        static from(obj) {
          if (typeof obj === "string") {
            try {
              return _StructFragment.from(lex(obj));
            } catch (error) {
              assertArgument(false, "invalid struct fragment", "obj", obj);
            }
          } else if (obj instanceof TokenString) {
            const name = consumeName("struct", obj);
            const inputs = consumeParams(obj);
            consumeEoi(obj);
            return new _StructFragment(_guard4, name, inputs);
          }
          return new _StructFragment(_guard4, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);
        }
        // @TODO: fix this return type
        /**
         *  Returns ``true`` and provides a type guard if %%value%% is a
         *  **StructFragment**.
         */
        static isFragment(value) {
          return value && value[internal] === StructFragmentInternal;
        }
      };
    }
  });

  // node_modules/ethers/lib.esm/abi/abi-coder.js
  function getBuiltinCallException(action, tx, data, abiCoder) {
    let message = "missing revert data";
    let reason = null;
    const invocation = null;
    let revert = null;
    if (data) {
      message = "execution reverted";
      const bytes2 = getBytes(data);
      data = hexlify(data);
      if (bytes2.length === 0) {
        message += " (no data present; likely require(false) occurred";
        reason = "require(false)";
      } else if (bytes2.length % 32 !== 4) {
        message += " (could not decode reason; invalid data length)";
      } else if (hexlify(bytes2.slice(0, 4)) === "0x08c379a0") {
        try {
          reason = abiCoder.decode(["string"], bytes2.slice(4))[0];
          revert = {
            signature: "Error(string)",
            name: "Error",
            args: [reason]
          };
          message += `: ${JSON.stringify(reason)}`;
        } catch (error) {
          message += " (could not decode reason; invalid string data)";
        }
      } else if (hexlify(bytes2.slice(0, 4)) === "0x4e487b71") {
        try {
          const code = Number(abiCoder.decode(["uint256"], bytes2.slice(4))[0]);
          revert = {
            signature: "Panic(uint256)",
            name: "Panic",
            args: [code]
          };
          reason = `Panic due to ${PanicReasons.get(code) || "UNKNOWN"}(${code})`;
          message += `: ${reason}`;
        } catch (error) {
          message += " (could not decode panic code)";
        }
      } else {
        message += " (unknown custom error)";
      }
    }
    const transaction = {
      to: tx.to ? getAddress(tx.to) : null,
      data: tx.data || "0x"
    };
    if (tx.from) {
      transaction.from = getAddress(tx.from);
    }
    return makeError(message, "CALL_EXCEPTION", {
      action,
      data,
      reason,
      transaction,
      invocation,
      revert
    });
  }
  var PanicReasons, paramTypeBytes, paramTypeNumber, defaultCoder, defaultMaxInflation, _AbiCoder_instances, getCoder_fn, _AbiCoder, AbiCoder;
  var init_abi_coder = __esm({
    "node_modules/ethers/lib.esm/abi/abi-coder.js"() {
      init_utils();
      init_abstract_coder();
      init_address3();
      init_array();
      init_boolean();
      init_bytes();
      init_fixed_bytes();
      init_null();
      init_number();
      init_string();
      init_tuple();
      init_fragments();
      init_address2();
      init_utils();
      PanicReasons = /* @__PURE__ */ new Map();
      PanicReasons.set(0, "GENERIC_PANIC");
      PanicReasons.set(1, "ASSERT_FALSE");
      PanicReasons.set(17, "OVERFLOW");
      PanicReasons.set(18, "DIVIDE_BY_ZERO");
      PanicReasons.set(33, "ENUM_RANGE_ERROR");
      PanicReasons.set(34, "BAD_STORAGE_DATA");
      PanicReasons.set(49, "STACK_UNDERFLOW");
      PanicReasons.set(50, "ARRAY_RANGE_ERROR");
      PanicReasons.set(65, "OUT_OF_MEMORY");
      PanicReasons.set(81, "UNINITIALIZED_FUNCTION_CALL");
      paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
      paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
      defaultCoder = null;
      defaultMaxInflation = 1024;
      _AbiCoder = class _AbiCoder {
        constructor() {
          __privateAdd(this, _AbiCoder_instances);
        }
        /**
         *  Get the default values for the given %%types%%.
         *
         *  For example, a ``uint`` is by default ``0`` and ``bool``
         *  is by default ``false``.
         */
        getDefaultValue(types) {
          const coders = types.map((type2) => __privateMethod(this, _AbiCoder_instances, getCoder_fn).call(this, ParamType.from(type2)));
          const coder = new TupleCoder(coders, "_");
          return coder.defaultValue();
        }
        /**
         *  Encode the %%values%% as the %%types%% into ABI data.
         *
         *  @returns DataHexstring
         */
        encode(types, values) {
          assertArgumentCount(values.length, types.length, "types/values length mismatch");
          const coders = types.map((type2) => __privateMethod(this, _AbiCoder_instances, getCoder_fn).call(this, ParamType.from(type2)));
          const coder = new TupleCoder(coders, "_");
          const writer = new Writer();
          coder.encode(writer, values);
          return writer.data;
        }
        /**
         *  Decode the ABI %%data%% as the %%types%% into values.
         *
         *  If %%loose%% decoding is enabled, then strict padding is
         *  not enforced. Some older versions of Solidity incorrectly
         *  padded event data emitted from ``external`` functions.
         */
        decode(types, data, loose) {
          const coders = types.map((type2) => __privateMethod(this, _AbiCoder_instances, getCoder_fn).call(this, ParamType.from(type2)));
          const coder = new TupleCoder(coders, "_");
          return coder.decode(new Reader(data, loose, defaultMaxInflation));
        }
        static _setDefaultMaxInflation(value) {
          assertArgument(typeof value === "number" && Number.isInteger(value), "invalid defaultMaxInflation factor", "value", value);
          defaultMaxInflation = value;
        }
        /**
         *  Returns the shared singleton instance of a default [[AbiCoder]].
         *
         *  On the first call, the instance is created internally.
         */
        static defaultAbiCoder() {
          if (defaultCoder == null) {
            defaultCoder = new _AbiCoder();
          }
          return defaultCoder;
        }
        /**
         *  Returns an ethers-compatible [[CallExceptionError]] Error for the given
         *  result %%data%% for the [[CallExceptionAction]] %%action%% against
         *  the Transaction %%tx%%.
         */
        static getBuiltinCallException(action, tx, data) {
          return getBuiltinCallException(action, tx, data, _AbiCoder.defaultAbiCoder());
        }
      };
      _AbiCoder_instances = new WeakSet();
      getCoder_fn = function(param) {
        if (param.isArray()) {
          return new ArrayCoder(__privateMethod(this, _AbiCoder_instances, getCoder_fn).call(this, param.arrayChildren), param.arrayLength, param.name);
        }
        if (param.isTuple()) {
          return new TupleCoder(param.components.map((c) => __privateMethod(this, _AbiCoder_instances, getCoder_fn).call(this, c)), param.name);
        }
        switch (param.baseType) {
          case "address":
            return new AddressCoder(param.name);
          case "bool":
            return new BooleanCoder(param.name);
          case "string":
            return new StringCoder(param.name);
          case "bytes":
            return new BytesCoder(param.name);
          case "":
            return new NullCoder(param.name);
        }
        let match = param.type.match(paramTypeNumber);
        if (match) {
          let size = parseInt(match[2] || "256");
          assertArgument(size !== 0 && size <= 256 && size % 8 === 0, "invalid " + match[1] + " bit length", "param", param);
          return new NumberCoder(size / 8, match[1] === "int", param.name);
        }
        match = param.type.match(paramTypeBytes);
        if (match) {
          let size = parseInt(match[1]);
          assertArgument(size !== 0 && size <= 32, "invalid bytes length", "param", param);
          return new FixedBytesCoder(size, param.name);
        }
        assertArgument(false, "invalid type", "type", param.type);
      };
      AbiCoder = _AbiCoder;
    }
  });

  // node_modules/ethers/lib.esm/abi/bytes32.js
  function encodeBytes32String(text) {
    const bytes2 = toUtf8Bytes(text);
    if (bytes2.length > 31) {
      throw new Error("bytes32 string must be less than 32 bytes");
    }
    return zeroPadBytes(bytes2, 32);
  }
  function decodeBytes32String(_bytes) {
    const data = getBytes(_bytes, "bytes");
    if (data.length !== 32) {
      throw new Error("invalid bytes32 - not 32 bytes long");
    }
    if (data[31] !== 0) {
      throw new Error("invalid bytes32 string - no null terminator");
    }
    let length = 31;
    while (data[length - 1] === 0) {
      length--;
    }
    return toUtf8String(data.slice(0, length));
  }
  var init_bytes32 = __esm({
    "node_modules/ethers/lib.esm/abi/bytes32.js"() {
      init_utils();
    }
  });

  // node_modules/ethers/lib.esm/abi/interface.js
  var LogDescription, TransactionDescription, ErrorDescription, Indexed, PanicReasons2, BuiltinErrors, _errors, _events, _functions, _abiCoder, _Interface_instances, getFunction_fn, getEvent_fn, _Interface, Interface;
  var init_interface = __esm({
    "node_modules/ethers/lib.esm/abi/interface.js"() {
      init_crypto2();
      init_hash();
      init_utils();
      init_abi_coder();
      init_abstract_coder();
      init_fragments();
      init_typed();
      LogDescription = class {
        /**
         *  @_ignore:
         */
        constructor(fragment, topic, args) {
          /**
           *  The matching fragment for the ``topic0``.
           */
          __publicField(this, "fragment");
          /**
           *  The name of the Event.
           */
          __publicField(this, "name");
          /**
           *  The full Event signature.
           */
          __publicField(this, "signature");
          /**
           *  The topic hash for the Event.
           */
          __publicField(this, "topic");
          /**
           *  The arguments passed into the Event with ``emit``.
           */
          __publicField(this, "args");
          const name = fragment.name, signature2 = fragment.format();
          defineProperties(this, {
            fragment,
            name,
            signature: signature2,
            topic,
            args
          });
        }
      };
      TransactionDescription = class {
        /**
         *  @_ignore:
         */
        constructor(fragment, selector, args, value) {
          /**
           *  The matching fragment from the transaction ``data``.
           */
          __publicField(this, "fragment");
          /**
           *  The name of the Function from the transaction ``data``.
           */
          __publicField(this, "name");
          /**
           *  The arguments passed to the Function from the transaction ``data``.
           */
          __publicField(this, "args");
          /**
           *  The full Function signature from the transaction ``data``.
           */
          __publicField(this, "signature");
          /**
           *  The selector for the Function from the transaction ``data``.
           */
          __publicField(this, "selector");
          /**
           *  The ``value`` (in wei) from the transaction.
           */
          __publicField(this, "value");
          const name = fragment.name, signature2 = fragment.format();
          defineProperties(this, {
            fragment,
            name,
            args,
            signature: signature2,
            selector,
            value
          });
        }
      };
      ErrorDescription = class {
        /**
         *  @_ignore:
         */
        constructor(fragment, selector, args) {
          /**
           *  The matching fragment.
           */
          __publicField(this, "fragment");
          /**
           *  The name of the Error.
           */
          __publicField(this, "name");
          /**
           *  The arguments passed to the Error with ``revert``.
           */
          __publicField(this, "args");
          /**
           *  The full Error signature.
           */
          __publicField(this, "signature");
          /**
           *  The selector for the Error.
           */
          __publicField(this, "selector");
          const name = fragment.name, signature2 = fragment.format();
          defineProperties(this, {
            fragment,
            name,
            args,
            signature: signature2,
            selector
          });
        }
      };
      Indexed = class {
        /**
         *  @_ignore:
         */
        constructor(hash2) {
          /**
           *  The ``keccak256`` of the value logged.
           */
          __publicField(this, "hash");
          /**
           *  @_ignore:
           */
          __publicField(this, "_isIndexed");
          defineProperties(this, { hash: hash2, _isIndexed: true });
        }
        /**
         *  Returns ``true`` if %%value%% is an **Indexed**.
         *
         *  This provides a Type Guard for property access.
         */
        static isIndexed(value) {
          return !!(value && value._isIndexed);
        }
      };
      PanicReasons2 = {
        "0": "generic panic",
        "1": "assert(false)",
        "17": "arithmetic overflow",
        "18": "division or modulo by zero",
        "33": "enum overflow",
        "34": "invalid encoded storage byte array accessed",
        "49": "out-of-bounds array access; popping on an empty array",
        "50": "out-of-bounds access of an array or bytesN",
        "65": "out of memory",
        "81": "uninitialized function"
      };
      BuiltinErrors = {
        "0x08c379a0": {
          signature: "Error(string)",
          name: "Error",
          inputs: ["string"],
          reason: (message) => {
            return `reverted with reason string ${JSON.stringify(message)}`;
          }
        },
        "0x4e487b71": {
          signature: "Panic(uint256)",
          name: "Panic",
          inputs: ["uint256"],
          reason: (code) => {
            let reason = "unknown panic code";
            if (code >= 0 && code <= 255 && PanicReasons2[code.toString()]) {
              reason = PanicReasons2[code.toString()];
            }
            return `reverted with panic code 0x${code.toString(16)} (${reason})`;
          }
        }
      };
      _Interface = class _Interface {
        /**
         *  Create a new Interface for the %%fragments%%.
         */
        constructor(fragments) {
          __privateAdd(this, _Interface_instances);
          /**
           *  All the Contract ABI members (i.e. methods, events, errors, etc).
           */
          __publicField(this, "fragments");
          /**
           *  The Contract constructor.
           */
          __publicField(this, "deploy");
          /**
           *  The Fallback method, if any.
           */
          __publicField(this, "fallback");
          /**
           *  If receiving ether is supported.
           */
          __publicField(this, "receive");
          __privateAdd(this, _errors);
          __privateAdd(this, _events);
          __privateAdd(this, _functions);
          //    #structs: Map<string, StructFragment>;
          __privateAdd(this, _abiCoder);
          let abi = [];
          if (typeof fragments === "string") {
            abi = JSON.parse(fragments);
          } else {
            abi = fragments;
          }
          __privateSet(this, _functions, /* @__PURE__ */ new Map());
          __privateSet(this, _errors, /* @__PURE__ */ new Map());
          __privateSet(this, _events, /* @__PURE__ */ new Map());
          const frags = [];
          for (const a of abi) {
            try {
              frags.push(Fragment.from(a));
            } catch (error) {
              console.log(`[Warning] Invalid Fragment ${JSON.stringify(a)}:`, error.message);
            }
          }
          defineProperties(this, {
            fragments: Object.freeze(frags)
          });
          let fallback = null;
          let receive = false;
          __privateSet(this, _abiCoder, this.getAbiCoder());
          this.fragments.forEach((fragment, index) => {
            let bucket;
            switch (fragment.type) {
              case "constructor":
                if (this.deploy) {
                  console.log("duplicate definition - constructor");
                  return;
                }
                defineProperties(this, { deploy: fragment });
                return;
              case "fallback":
                if (fragment.inputs.length === 0) {
                  receive = true;
                } else {
                  assertArgument(!fallback || fragment.payable !== fallback.payable, "conflicting fallback fragments", `fragments[${index}]`, fragment);
                  fallback = fragment;
                  receive = fallback.payable;
                }
                return;
              case "function":
                bucket = __privateGet(this, _functions);
                break;
              case "event":
                bucket = __privateGet(this, _events);
                break;
              case "error":
                bucket = __privateGet(this, _errors);
                break;
              default:
                return;
            }
            const signature2 = fragment.format();
            if (bucket.has(signature2)) {
              return;
            }
            bucket.set(signature2, fragment);
          });
          if (!this.deploy) {
            defineProperties(this, {
              deploy: ConstructorFragment.from("constructor()")
            });
          }
          defineProperties(this, { fallback, receive });
        }
        /**
         *  Returns the entire Human-Readable ABI, as an array of
         *  signatures, optionally as %%minimal%% strings, which
         *  removes parameter names and unneceesary spaces.
         */
        format(minimal) {
          const format = minimal ? "minimal" : "full";
          const abi = this.fragments.map((f3) => f3.format(format));
          return abi;
        }
        /**
         *  Return the JSON-encoded ABI. This is the format Solidiy
         *  returns.
         */
        formatJson() {
          const abi = this.fragments.map((f3) => f3.format("json"));
          return JSON.stringify(abi.map((j) => JSON.parse(j)));
        }
        /**
         *  The ABI coder that will be used to encode and decode binary
         *  data.
         */
        getAbiCoder() {
          return AbiCoder.defaultAbiCoder();
        }
        /**
         *  Get the function name for %%key%%, which may be a function selector,
         *  function name or function signature that belongs to the ABI.
         */
        getFunctionName(key) {
          const fragment = __privateMethod(this, _Interface_instances, getFunction_fn).call(this, key, null, false);
          assertArgument(fragment, "no matching function", "key", key);
          return fragment.name;
        }
        /**
         *  Returns true if %%key%% (a function selector, function name or
         *  function signature) is present in the ABI.
         *
         *  In the case of a function name, the name may be ambiguous, so
         *  accessing the [[FunctionFragment]] may require refinement.
         */
        hasFunction(key) {
          return !!__privateMethod(this, _Interface_instances, getFunction_fn).call(this, key, null, false);
        }
        /**
         *  Get the [[FunctionFragment]] for %%key%%, which may be a function
         *  selector, function name or function signature that belongs to the ABI.
         *
         *  If %%values%% is provided, it will use the Typed API to handle
         *  ambiguous cases where multiple functions match by name.
         *
         *  If the %%key%% and %%values%% do not refine to a single function in
         *  the ABI, this will throw.
         */
        getFunction(key, values) {
          return __privateMethod(this, _Interface_instances, getFunction_fn).call(this, key, values || null, true);
        }
        /**
         *  Iterate over all functions, calling %%callback%%, sorted by their name.
         */
        forEachFunction(callback) {
          const names2 = Array.from(__privateGet(this, _functions).keys());
          names2.sort((a, b2) => a.localeCompare(b2));
          for (let i = 0; i < names2.length; i++) {
            const name = names2[i];
            callback(__privateGet(this, _functions).get(name), i);
          }
        }
        /**
         *  Get the event name for %%key%%, which may be a topic hash,
         *  event name or event signature that belongs to the ABI.
         */
        getEventName(key) {
          const fragment = __privateMethod(this, _Interface_instances, getEvent_fn).call(this, key, null, false);
          assertArgument(fragment, "no matching event", "key", key);
          return fragment.name;
        }
        /**
         *  Returns true if %%key%% (an event topic hash, event name or
         *  event signature) is present in the ABI.
         *
         *  In the case of an event name, the name may be ambiguous, so
         *  accessing the [[EventFragment]] may require refinement.
         */
        hasEvent(key) {
          return !!__privateMethod(this, _Interface_instances, getEvent_fn).call(this, key, null, false);
        }
        /**
         *  Get the [[EventFragment]] for %%key%%, which may be a topic hash,
         *  event name or event signature that belongs to the ABI.
         *
         *  If %%values%% is provided, it will use the Typed API to handle
         *  ambiguous cases where multiple events match by name.
         *
         *  If the %%key%% and %%values%% do not refine to a single event in
         *  the ABI, this will throw.
         */
        getEvent(key, values) {
          return __privateMethod(this, _Interface_instances, getEvent_fn).call(this, key, values || null, true);
        }
        /**
         *  Iterate over all events, calling %%callback%%, sorted by their name.
         */
        forEachEvent(callback) {
          const names2 = Array.from(__privateGet(this, _events).keys());
          names2.sort((a, b2) => a.localeCompare(b2));
          for (let i = 0; i < names2.length; i++) {
            const name = names2[i];
            callback(__privateGet(this, _events).get(name), i);
          }
        }
        /**
         *  Get the [[ErrorFragment]] for %%key%%, which may be an error
         *  selector, error name or error signature that belongs to the ABI.
         *
         *  If %%values%% is provided, it will use the Typed API to handle
         *  ambiguous cases where multiple errors match by name.
         *
         *  If the %%key%% and %%values%% do not refine to a single error in
         *  the ABI, this will throw.
         */
        getError(key, values) {
          if (isHexString(key)) {
            const selector = key.toLowerCase();
            if (BuiltinErrors[selector]) {
              return ErrorFragment.from(BuiltinErrors[selector].signature);
            }
            for (const fragment of __privateGet(this, _errors).values()) {
              if (selector === fragment.selector) {
                return fragment;
              }
            }
            return null;
          }
          if (key.indexOf("(") === -1) {
            const matching = [];
            for (const [name, fragment] of __privateGet(this, _errors)) {
              if (name.split(
                "("
                /* fix:) */
              )[0] === key) {
                matching.push(fragment);
              }
            }
            if (matching.length === 0) {
              if (key === "Error") {
                return ErrorFragment.from("error Error(string)");
              }
              if (key === "Panic") {
                return ErrorFragment.from("error Panic(uint256)");
              }
              return null;
            } else if (matching.length > 1) {
              const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
              assertArgument(false, `ambiguous error description (i.e. ${matchStr})`, "name", key);
            }
            return matching[0];
          }
          key = ErrorFragment.from(key).format();
          if (key === "Error(string)") {
            return ErrorFragment.from("error Error(string)");
          }
          if (key === "Panic(uint256)") {
            return ErrorFragment.from("error Panic(uint256)");
          }
          const result = __privateGet(this, _errors).get(key);
          if (result) {
            return result;
          }
          return null;
        }
        /**
         *  Iterate over all errors, calling %%callback%%, sorted by their name.
         */
        forEachError(callback) {
          const names2 = Array.from(__privateGet(this, _errors).keys());
          names2.sort((a, b2) => a.localeCompare(b2));
          for (let i = 0; i < names2.length; i++) {
            const name = names2[i];
            callback(__privateGet(this, _errors).get(name), i);
          }
        }
        // Get the 4-byte selector used by Solidity to identify a function
        /*
        getSelector(fragment: ErrorFragment | FunctionFragment): string {
            if (typeof(fragment) === "string") {
                const matches: Array<Fragment> = [ ];
        
                try { matches.push(this.getFunction(fragment)); } catch (error) { }
                try { matches.push(this.getError(<string>fragment)); } catch (_) { }
        
                if (matches.length === 0) {
                    logger.throwArgumentError("unknown fragment", "key", fragment);
                } else if (matches.length > 1) {
                    logger.throwArgumentError("ambiguous fragment matches function and error", "key", fragment);
                }
        
                fragment = matches[0];
            }
        
            return dataSlice(id(fragment.format()), 0, 4);
        }
            */
        // Get the 32-byte topic hash used by Solidity to identify an event
        /*
        getEventTopic(fragment: EventFragment): string {
            //if (typeof(fragment) === "string") { fragment = this.getEvent(eventFragment); }
            return id(fragment.format());
        }
        */
        _decodeParams(params, data) {
          return __privateGet(this, _abiCoder).decode(params, data);
        }
        _encodeParams(params, values) {
          return __privateGet(this, _abiCoder).encode(params, values);
        }
        /**
         *  Encodes a ``tx.data`` object for deploying the Contract with
         *  the %%values%% as the constructor arguments.
         */
        encodeDeploy(values) {
          return this._encodeParams(this.deploy.inputs, values || []);
        }
        /**
         *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the
         *  specified error (see [[getError]] for valid values for
         *  %%key%%).
         *
         *  Most developers should prefer the [[parseCallResult]] method instead,
         *  which will automatically detect a ``CALL_EXCEPTION`` and throw the
         *  corresponding error.
         */
        decodeErrorResult(fragment, data) {
          if (typeof fragment === "string") {
            const f3 = this.getError(fragment);
            assertArgument(f3, "unknown error", "fragment", fragment);
            fragment = f3;
          }
          assertArgument(dataSlice(data, 0, 4) === fragment.selector, `data signature does not match error ${fragment.name}.`, "data", data);
          return this._decodeParams(fragment.inputs, dataSlice(data, 4));
        }
        /**
         *  Encodes the transaction revert data for a call result that
         *  reverted from the the Contract with the sepcified %%error%%
         *  (see [[getError]] for valid values for %%fragment%%) with the %%values%%.
         *
         *  This is generally not used by most developers, unless trying to mock
         *  a result from a Contract.
         */
        encodeErrorResult(fragment, values) {
          if (typeof fragment === "string") {
            const f3 = this.getError(fragment);
            assertArgument(f3, "unknown error", "fragment", fragment);
            fragment = f3;
          }
          return concat([
            fragment.selector,
            this._encodeParams(fragment.inputs, values || [])
          ]);
        }
        /**
         *  Decodes the %%data%% from a transaction ``tx.data`` for
         *  the function specified (see [[getFunction]] for valid values
         *  for %%fragment%%).
         *
         *  Most developers should prefer the [[parseTransaction]] method
         *  instead, which will automatically detect the fragment.
         */
        decodeFunctionData(fragment, data) {
          if (typeof fragment === "string") {
            const f3 = this.getFunction(fragment);
            assertArgument(f3, "unknown function", "fragment", fragment);
            fragment = f3;
          }
          assertArgument(dataSlice(data, 0, 4) === fragment.selector, `data signature does not match function ${fragment.name}.`, "data", data);
          return this._decodeParams(fragment.inputs, dataSlice(data, 4));
        }
        /**
         *  Encodes the ``tx.data`` for a transaction that calls the function
         *  specified (see [[getFunction]] for valid values for %%fragment%%) with
         *  the %%values%%.
         */
        encodeFunctionData(fragment, values) {
          if (typeof fragment === "string") {
            const f3 = this.getFunction(fragment);
            assertArgument(f3, "unknown function", "fragment", fragment);
            fragment = f3;
          }
          return concat([
            fragment.selector,
            this._encodeParams(fragment.inputs, values || [])
          ]);
        }
        /**
         *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the
         *  specified function (see [[getFunction]] for valid values for
         *  %%key%%).
         *
         *  Most developers should prefer the [[parseCallResult]] method instead,
         *  which will automatically detect a ``CALL_EXCEPTION`` and throw the
         *  corresponding error.
         */
        decodeFunctionResult(fragment, data) {
          if (typeof fragment === "string") {
            const f3 = this.getFunction(fragment);
            assertArgument(f3, "unknown function", "fragment", fragment);
            fragment = f3;
          }
          let message = "invalid length for result data";
          const bytes2 = getBytesCopy(data);
          if (bytes2.length % 32 === 0) {
            try {
              return __privateGet(this, _abiCoder).decode(fragment.outputs, bytes2);
            } catch (error) {
              message = "could not decode result data";
            }
          }
          assert(false, message, "BAD_DATA", {
            value: hexlify(bytes2),
            info: { method: fragment.name, signature: fragment.format() }
          });
        }
        makeError(_data5, tx) {
          const data = getBytes(_data5, "data");
          const error = AbiCoder.getBuiltinCallException("call", tx, data);
          const customPrefix = "execution reverted (unknown custom error)";
          if (error.message.startsWith(customPrefix)) {
            const selector = hexlify(data.slice(0, 4));
            const ef = this.getError(selector);
            if (ef) {
              try {
                const args = __privateGet(this, _abiCoder).decode(ef.inputs, data.slice(4));
                error.revert = {
                  name: ef.name,
                  signature: ef.format(),
                  args
                };
                error.reason = error.revert.signature;
                error.message = `execution reverted: ${error.reason}`;
              } catch (e) {
                error.message = `execution reverted (coult not decode custom error)`;
              }
            }
          }
          const parsed = this.parseTransaction(tx);
          if (parsed) {
            error.invocation = {
              method: parsed.name,
              signature: parsed.signature,
              args: parsed.args
            };
          }
          return error;
        }
        /**
         *  Encodes the result data (e.g. from an ``eth_call``) for the
         *  specified function (see [[getFunction]] for valid values
         *  for %%fragment%%) with %%values%%.
         *
         *  This is generally not used by most developers, unless trying to mock
         *  a result from a Contract.
         */
        encodeFunctionResult(fragment, values) {
          if (typeof fragment === "string") {
            const f3 = this.getFunction(fragment);
            assertArgument(f3, "unknown function", "fragment", fragment);
            fragment = f3;
          }
          return hexlify(__privateGet(this, _abiCoder).encode(fragment.outputs, values || []));
        }
        /*
            spelunk(inputs: Array<ParamType>, values: ReadonlyArray<any>, processfunc: (type: string, value: any) => Promise<any>): Promise<Array<any>> {
                const promises: Array<Promise<>> = [ ];
                const process = function(type: ParamType, value: any): any {
                    if (type.baseType === "array") {
                        return descend(type.child
                    }
                    if (type. === "address") {
                    }
                };
        
                const descend = function (inputs: Array<ParamType>, values: ReadonlyArray<any>) {
                    if (inputs.length !== values.length) { throw new Error("length mismatch"); }
                    
                };
        
                const result: Array<any> = [ ];
                values.forEach((value, index) => {
                    if (value == null) {
                        topics.push(null);
                    } else if (param.baseType === "array" || param.baseType === "tuple") {
                        logger.throwArgumentError("filtering with tuples or arrays not supported", ("contract." + param.name), value);
                    } else if (Array.isArray(value)) {
                        topics.push(value.map((value) => encodeTopic(param, value)));
                    } else {
                        topics.push(encodeTopic(param, value));
                    }
                });
            }
        */
        // Create the filter for the event with search criteria (e.g. for eth_filterLog)
        encodeFilterTopics(fragment, values) {
          if (typeof fragment === "string") {
            const f3 = this.getEvent(fragment);
            assertArgument(f3, "unknown event", "eventFragment", fragment);
            fragment = f3;
          }
          assert(values.length <= fragment.inputs.length, `too many arguments for ${fragment.format()}`, "UNEXPECTED_ARGUMENT", { count: values.length, expectedCount: fragment.inputs.length });
          const topics = [];
          if (!fragment.anonymous) {
            topics.push(fragment.topicHash);
          }
          const encodeTopic = (param, value) => {
            if (param.type === "string") {
              return id(value);
            } else if (param.type === "bytes") {
              return keccak256(hexlify(value));
            }
            if (param.type === "bool" && typeof value === "boolean") {
              value = value ? "0x01" : "0x00";
            } else if (param.type.match(/^u?int/)) {
              value = toBeHex(value);
            } else if (param.type.match(/^bytes/)) {
              value = zeroPadBytes(value, 32);
            } else if (param.type === "address") {
              __privateGet(this, _abiCoder).encode(["address"], [value]);
            }
            return zeroPadValue(hexlify(value), 32);
          };
          values.forEach((value, index) => {
            const param = fragment.inputs[index];
            if (!param.indexed) {
              assertArgument(value == null, "cannot filter non-indexed parameters; must be null", "contract." + param.name, value);
              return;
            }
            if (value == null) {
              topics.push(null);
            } else if (param.baseType === "array" || param.baseType === "tuple") {
              assertArgument(false, "filtering with tuples or arrays not supported", "contract." + param.name, value);
            } else if (Array.isArray(value)) {
              topics.push(value.map((value2) => encodeTopic(param, value2)));
            } else {
              topics.push(encodeTopic(param, value));
            }
          });
          while (topics.length && topics[topics.length - 1] === null) {
            topics.pop();
          }
          return topics;
        }
        encodeEventLog(fragment, values) {
          if (typeof fragment === "string") {
            const f3 = this.getEvent(fragment);
            assertArgument(f3, "unknown event", "eventFragment", fragment);
            fragment = f3;
          }
          const topics = [];
          const dataTypes = [];
          const dataValues = [];
          if (!fragment.anonymous) {
            topics.push(fragment.topicHash);
          }
          assertArgument(values.length === fragment.inputs.length, "event arguments/values mismatch", "values", values);
          fragment.inputs.forEach((param, index) => {
            const value = values[index];
            if (param.indexed) {
              if (param.type === "string") {
                topics.push(id(value));
              } else if (param.type === "bytes") {
                topics.push(keccak256(value));
              } else if (param.baseType === "tuple" || param.baseType === "array") {
                throw new Error("not implemented");
              } else {
                topics.push(__privateGet(this, _abiCoder).encode([param.type], [value]));
              }
            } else {
              dataTypes.push(param);
              dataValues.push(value);
            }
          });
          return {
            data: __privateGet(this, _abiCoder).encode(dataTypes, dataValues),
            topics
          };
        }
        // Decode a filter for the event and the search criteria
        decodeEventLog(fragment, data, topics) {
          if (typeof fragment === "string") {
            const f3 = this.getEvent(fragment);
            assertArgument(f3, "unknown event", "eventFragment", fragment);
            fragment = f3;
          }
          if (topics != null && !fragment.anonymous) {
            const eventTopic = fragment.topicHash;
            assertArgument(isHexString(topics[0], 32) && topics[0].toLowerCase() === eventTopic, "fragment/topic mismatch", "topics[0]", topics[0]);
            topics = topics.slice(1);
          }
          const indexed = [];
          const nonIndexed = [];
          const dynamic = [];
          fragment.inputs.forEach((param, index) => {
            if (param.indexed) {
              if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
                indexed.push(ParamType.from({ type: "bytes32", name: param.name }));
                dynamic.push(true);
              } else {
                indexed.push(param);
                dynamic.push(false);
              }
            } else {
              nonIndexed.push(param);
              dynamic.push(false);
            }
          });
          const resultIndexed = topics != null ? __privateGet(this, _abiCoder).decode(indexed, concat(topics)) : null;
          const resultNonIndexed = __privateGet(this, _abiCoder).decode(nonIndexed, data, true);
          const values = [];
          const keys = [];
          let nonIndexedIndex = 0, indexedIndex = 0;
          fragment.inputs.forEach((param, index) => {
            let value = null;
            if (param.indexed) {
              if (resultIndexed == null) {
                value = new Indexed(null);
              } else if (dynamic[index]) {
                value = new Indexed(resultIndexed[indexedIndex++]);
              } else {
                try {
                  value = resultIndexed[indexedIndex++];
                } catch (error) {
                  value = error;
                }
              }
            } else {
              try {
                value = resultNonIndexed[nonIndexedIndex++];
              } catch (error) {
                value = error;
              }
            }
            values.push(value);
            keys.push(param.name || null);
          });
          return Result.fromItems(values, keys);
        }
        /**
         *  Parses a transaction, finding the matching function and extracts
         *  the parameter values along with other useful function details.
         *
         *  If the matching function cannot be found, return null.
         */
        parseTransaction(tx) {
          const data = getBytes(tx.data, "tx.data");
          const value = getBigInt(tx.value != null ? tx.value : 0, "tx.value");
          const fragment = this.getFunction(hexlify(data.slice(0, 4)));
          if (!fragment) {
            return null;
          }
          const args = __privateGet(this, _abiCoder).decode(fragment.inputs, data.slice(4));
          return new TransactionDescription(fragment, fragment.selector, args, value);
        }
        parseCallResult(data) {
          throw new Error("@TODO");
        }
        /**
         *  Parses a receipt log, finding the matching event and extracts
         *  the parameter values along with other useful event details.
         *
         *  If the matching event cannot be found, returns null.
         */
        parseLog(log) {
          const fragment = this.getEvent(log.topics[0]);
          if (!fragment || fragment.anonymous) {
            return null;
          }
          return new LogDescription(fragment, fragment.topicHash, this.decodeEventLog(fragment, log.data, log.topics));
        }
        /**
         *  Parses a revert data, finding the matching error and extracts
         *  the parameter values along with other useful error details.
         *
         *  If the matching error cannot be found, returns null.
         */
        parseError(data) {
          const hexData = hexlify(data);
          const fragment = this.getError(dataSlice(hexData, 0, 4));
          if (!fragment) {
            return null;
          }
          const args = __privateGet(this, _abiCoder).decode(fragment.inputs, dataSlice(hexData, 4));
          return new ErrorDescription(fragment, fragment.selector, args);
        }
        /**
         *  Creates a new [[Interface]] from the ABI %%value%%.
         *
         *  The %%value%% may be provided as an existing [[Interface]] object,
         *  a JSON-encoded ABI or any Human-Readable ABI format.
         */
        static from(value) {
          if (value instanceof _Interface) {
            return value;
          }
          if (typeof value === "string") {
            return new _Interface(JSON.parse(value));
          }
          if (typeof value.formatJson === "function") {
            return new _Interface(value.formatJson());
          }
          if (typeof value.format === "function") {
            return new _Interface(value.format("json"));
          }
          return new _Interface(value);
        }
      };
      _errors = new WeakMap();
      _events = new WeakMap();
      _functions = new WeakMap();
      _abiCoder = new WeakMap();
      _Interface_instances = new WeakSet();
      // Find a function definition by any means necessary (unless it is ambiguous)
      getFunction_fn = function(key, values, forceUnique) {
        if (isHexString(key)) {
          const selector = key.toLowerCase();
          for (const fragment of __privateGet(this, _functions).values()) {
            if (selector === fragment.selector) {
              return fragment;
            }
          }
          return null;
        }
        if (key.indexOf("(") === -1) {
          const matching = [];
          for (const [name, fragment] of __privateGet(this, _functions)) {
            if (name.split(
              "("
              /* fix:) */
            )[0] === key) {
              matching.push(fragment);
            }
          }
          if (values) {
            const lastValue = values.length > 0 ? values[values.length - 1] : null;
            let valueLength = values.length;
            let allowOptions = true;
            if (Typed.isTyped(lastValue) && lastValue.type === "overrides") {
              allowOptions = false;
              valueLength--;
            }
            for (let i = matching.length - 1; i >= 0; i--) {
              const inputs = matching[i].inputs.length;
              if (inputs !== valueLength && (!allowOptions || inputs !== valueLength - 1)) {
                matching.splice(i, 1);
              }
            }
            for (let i = matching.length - 1; i >= 0; i--) {
              const inputs = matching[i].inputs;
              for (let j = 0; j < values.length; j++) {
                if (!Typed.isTyped(values[j])) {
                  continue;
                }
                if (j >= inputs.length) {
                  if (values[j].type === "overrides") {
                    continue;
                  }
                  matching.splice(i, 1);
                  break;
                }
                if (values[j].type !== inputs[j].baseType) {
                  matching.splice(i, 1);
                  break;
                }
              }
            }
          }
          if (matching.length === 1 && values && values.length !== matching[0].inputs.length) {
            const lastArg = values[values.length - 1];
            if (lastArg == null || Array.isArray(lastArg) || typeof lastArg !== "object") {
              matching.splice(0, 1);
            }
          }
          if (matching.length === 0) {
            return null;
          }
          if (matching.length > 1 && forceUnique) {
            const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
            assertArgument(false, `ambiguous function description (i.e. matches ${matchStr})`, "key", key);
          }
          return matching[0];
        }
        const result = __privateGet(this, _functions).get(FunctionFragment.from(key).format());
        if (result) {
          return result;
        }
        return null;
      };
      // Find an event definition by any means necessary (unless it is ambiguous)
      getEvent_fn = function(key, values, forceUnique) {
        if (isHexString(key)) {
          const eventTopic = key.toLowerCase();
          for (const fragment of __privateGet(this, _events).values()) {
            if (eventTopic === fragment.topicHash) {
              return fragment;
            }
          }
          return null;
        }
        if (key.indexOf("(") === -1) {
          const matching = [];
          for (const [name, fragment] of __privateGet(this, _events)) {
            if (name.split(
              "("
              /* fix:) */
            )[0] === key) {
              matching.push(fragment);
            }
          }
          if (values) {
            for (let i = matching.length - 1; i >= 0; i--) {
              if (matching[i].inputs.length < values.length) {
                matching.splice(i, 1);
              }
            }
            for (let i = matching.length - 1; i >= 0; i--) {
              const inputs = matching[i].inputs;
              for (let j = 0; j < values.length; j++) {
                if (!Typed.isTyped(values[j])) {
                  continue;
                }
                if (values[j].type !== inputs[j].baseType) {
                  matching.splice(i, 1);
                  break;
                }
              }
            }
          }
          if (matching.length === 0) {
            return null;
          }
          if (matching.length > 1 && forceUnique) {
            const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
            assertArgument(false, `ambiguous event description (i.e. matches ${matchStr})`, "key", key);
          }
          return matching[0];
        }
        const result = __privateGet(this, _events).get(EventFragment.from(key).format());
        if (result) {
          return result;
        }
        return null;
      };
      Interface = _Interface;
    }
  });

  // node_modules/ethers/lib.esm/abi/index.js
  var init_abi = __esm({
    "node_modules/ethers/lib.esm/abi/index.js"() {
      init_abi_coder();
      init_bytes32();
      init_fragments();
      init_interface();
      init_typed();
    }
  });

  // node_modules/ethers/lib.esm/providers/provider.js
  function getValue2(value) {
    if (value == null) {
      return null;
    }
    return value;
  }
  function toJson(value) {
    if (value == null) {
      return null;
    }
    return value.toString();
  }
  function copyRequest(req) {
    const result = {};
    if (req.to) {
      result.to = req.to;
    }
    if (req.from) {
      result.from = req.from;
    }
    if (req.data) {
      result.data = hexlify(req.data);
    }
    const bigIntKeys = "chainId,gasLimit,gasPrice,maxFeePerBlobGas,maxFeePerGas,maxPriorityFeePerGas,value".split(/,/);
    for (const key of bigIntKeys) {
      if (!(key in req) || req[key] == null) {
        continue;
      }
      result[key] = getBigInt(req[key], `request.${key}`);
    }
    const numberKeys = "type,nonce".split(/,/);
    for (const key of numberKeys) {
      if (!(key in req) || req[key] == null) {
        continue;
      }
      result[key] = getNumber2(req[key], `request.${key}`);
    }
    if (req.accessList) {
      result.accessList = accessListify(req.accessList);
    }
    if (req.authorizationList) {
      result.authorizationList = req.authorizationList.slice();
    }
    if ("blockTag" in req) {
      result.blockTag = req.blockTag;
    }
    if ("enableCcipRead" in req) {
      result.enableCcipRead = !!req.enableCcipRead;
    }
    if ("customData" in req) {
      result.customData = req.customData;
    }
    if ("blobVersionedHashes" in req && req.blobVersionedHashes) {
      result.blobVersionedHashes = req.blobVersionedHashes.slice();
    }
    if ("kzg" in req) {
      result.kzg = req.kzg;
    }
    if ("blobs" in req && req.blobs) {
      result.blobs = req.blobs.map((b2) => {
        if (isBytesLike(b2)) {
          return hexlify(b2);
        }
        return Object.assign({}, b2);
      });
    }
    return result;
  }
  function createOrphanedBlockFilter(block) {
    return { orphan: "drop-block", hash: block.hash, number: block.number };
  }
  function createReorderedTransactionFilter(tx, other) {
    return { orphan: "reorder-transaction", tx, other };
  }
  function createRemovedTransactionFilter(tx) {
    return { orphan: "drop-transaction", tx };
  }
  function createRemovedLogFilter(log) {
    return { orphan: "drop-log", log: {
      transactionHash: log.transactionHash,
      blockHash: log.blockHash,
      blockNumber: log.blockNumber,
      address: log.address,
      data: log.data,
      topics: Object.freeze(log.topics.slice()),
      index: log.index
    } };
  }
  var BN_09, FeeData, _transactions, Block, Log, _logs, TransactionReceipt, _startBlock, _TransactionResponse, TransactionResponse;
  var init_provider = __esm({
    "node_modules/ethers/lib.esm/providers/provider.js"() {
      init_utils();
      init_transaction2();
      BN_09 = BigInt(0);
      FeeData = class {
        /**
         *  Creates a new FeeData for %%gasPrice%%, %%maxFeePerGas%% and
         *  %%maxPriorityFeePerGas%%.
         */
        constructor(gasPrice, maxFeePerGas, maxPriorityFeePerGas) {
          /**
           *  The gas price for legacy networks.
           */
          __publicField(this, "gasPrice");
          /**
           *  The maximum fee to pay per gas.
           *
           *  The base fee per gas is defined by the network and based on
           *  congestion, increasing the cost during times of heavy load
           *  and lowering when less busy.
           *
           *  The actual fee per gas will be the base fee for the block
           *  and the priority fee, up to the max fee per gas.
           *
           *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))
           */
          __publicField(this, "maxFeePerGas");
          /**
           *  The additional amout to pay per gas to encourage a validator
           *  to include the transaction.
           *
           *  The purpose of this is to compensate the validator for the
           *  adjusted risk for including a given transaction.
           *
           *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))
           */
          __publicField(this, "maxPriorityFeePerGas");
          defineProperties(this, {
            gasPrice: getValue2(gasPrice),
            maxFeePerGas: getValue2(maxFeePerGas),
            maxPriorityFeePerGas: getValue2(maxPriorityFeePerGas)
          });
        }
        /**
         *  Returns a JSON-friendly value.
         */
        toJSON() {
          const { gasPrice, maxFeePerGas, maxPriorityFeePerGas } = this;
          return {
            _type: "FeeData",
            gasPrice: toJson(gasPrice),
            maxFeePerGas: toJson(maxFeePerGas),
            maxPriorityFeePerGas: toJson(maxPriorityFeePerGas)
          };
        }
      };
      Block = class {
        /**
         *  Create a new **Block** object.
         *
         *  This should generally not be necessary as the unless implementing a
         *  low-level library.
         */
        constructor(block, provider) {
          /**
           *  The provider connected to the block used to fetch additional details
           *  if necessary.
           */
          __publicField(this, "provider");
          /**
           *  The block number, sometimes called the block height. This is a
           *  sequential number that is one higher than the parent block.
           */
          __publicField(this, "number");
          /**
           *  The block hash.
           *
           *  This hash includes all properties, so can be safely used to identify
           *  an exact set of block properties.
           */
          __publicField(this, "hash");
          /**
           *  The timestamp for this block, which is the number of seconds since
           *  epoch that this block was included.
           */
          __publicField(this, "timestamp");
          /**
           *  The block hash of the parent block.
           */
          __publicField(this, "parentHash");
          /**
           *  The hash tree root of the parent beacon block for the given
           *  execution block. See [[link-eip-4788]].
           */
          __publicField(this, "parentBeaconBlockRoot");
          /**
           *  The nonce.
           *
           *  On legacy networks, this is the random number inserted which
           *  permitted the difficulty target to be reached.
           */
          __publicField(this, "nonce");
          /**
           *  The difficulty target.
           *
           *  On legacy networks, this is the proof-of-work target required
           *  for a block to meet the protocol rules to be included.
           *
           *  On modern networks, this is a random number arrived at using
           *  randao.  @TODO: Find links?
           */
          __publicField(this, "difficulty");
          /**
           *  The total gas limit for this block.
           */
          __publicField(this, "gasLimit");
          /**
           *  The total gas used in this block.
           */
          __publicField(this, "gasUsed");
          /**
           *  The root hash for the global state after applying changes
           *  in this block.
           */
          __publicField(this, "stateRoot");
          /**
           *  The hash of the transaction receipts trie.
           */
          __publicField(this, "receiptsRoot");
          /**
           *  The total amount of blob gas consumed by the transactions
           *  within the block. See [[link-eip-4844]].
           */
          __publicField(this, "blobGasUsed");
          /**
           *  The running total of blob gas consumed in excess of the
           *  target, prior to the block. See [[link-eip-4844]].
           */
          __publicField(this, "excessBlobGas");
          /**
           *  The miner coinbase address, wihch receives any subsidies for
           *  including this block.
           */
          __publicField(this, "miner");
          /**
           *  The latest RANDAO mix of the post beacon state of
           *  the previous block.
           */
          __publicField(this, "prevRandao");
          /**
           *  Any extra data the validator wished to include.
           */
          __publicField(this, "extraData");
          /**
           *  The base fee per gas that all transactions in this block were
           *  charged.
           *
           *  This adjusts after each block, depending on how congested the network
           *  is.
           */
          __publicField(this, "baseFeePerGas");
          __privateAdd(this, _transactions);
          __privateSet(this, _transactions, block.transactions.map((tx) => {
            if (typeof tx !== "string") {
              return new TransactionResponse(tx, provider);
            }
            return tx;
          }));
          defineProperties(this, {
            provider,
            hash: getValue2(block.hash),
            number: block.number,
            timestamp: block.timestamp,
            parentHash: block.parentHash,
            parentBeaconBlockRoot: block.parentBeaconBlockRoot,
            nonce: block.nonce,
            difficulty: block.difficulty,
            gasLimit: block.gasLimit,
            gasUsed: block.gasUsed,
            blobGasUsed: block.blobGasUsed,
            excessBlobGas: block.excessBlobGas,
            miner: block.miner,
            prevRandao: getValue2(block.prevRandao),
            extraData: block.extraData,
            baseFeePerGas: getValue2(block.baseFeePerGas),
            stateRoot: block.stateRoot,
            receiptsRoot: block.receiptsRoot
          });
        }
        /**
         *  Returns the list of transaction hashes, in the order
         *  they were executed within the block.
         */
        get transactions() {
          return __privateGet(this, _transactions).map((tx) => {
            if (typeof tx === "string") {
              return tx;
            }
            return tx.hash;
          });
        }
        /**
         *  Returns the complete transactions, in the order they
         *  were executed within the block.
         *
         *  This is only available for blocks which prefetched
         *  transactions, by passing ``true`` to %%prefetchTxs%%
         *  into [[Provider-getBlock]].
         */
        get prefetchedTransactions() {
          const txs = __privateGet(this, _transactions).slice();
          if (txs.length === 0) {
            return [];
          }
          assert(typeof txs[0] === "object", "transactions were not prefetched with block request", "UNSUPPORTED_OPERATION", {
            operation: "transactionResponses()"
          });
          return txs;
        }
        /**
         *  Returns a JSON-friendly value.
         */
        toJSON() {
          const { baseFeePerGas, difficulty, extraData, gasLimit, gasUsed, hash: hash2, miner, prevRandao, nonce, number: number3, parentHash, parentBeaconBlockRoot, stateRoot, receiptsRoot, timestamp, transactions } = this;
          return {
            _type: "Block",
            baseFeePerGas: toJson(baseFeePerGas),
            difficulty: toJson(difficulty),
            extraData,
            gasLimit: toJson(gasLimit),
            gasUsed: toJson(gasUsed),
            blobGasUsed: toJson(this.blobGasUsed),
            excessBlobGas: toJson(this.excessBlobGas),
            hash: hash2,
            miner,
            prevRandao,
            nonce,
            number: number3,
            parentHash,
            timestamp,
            parentBeaconBlockRoot,
            stateRoot,
            receiptsRoot,
            transactions
          };
        }
        [Symbol.iterator]() {
          let index = 0;
          const txs = this.transactions;
          return {
            next: () => {
              if (index < this.length) {
                return {
                  value: txs[index++],
                  done: false
                };
              }
              return { value: void 0, done: true };
            }
          };
        }
        /**
         *  The number of transactions in this block.
         */
        get length() {
          return __privateGet(this, _transactions).length;
        }
        /**
         *  The [[link-js-date]] this block was included at.
         */
        get date() {
          if (this.timestamp == null) {
            return null;
          }
          return new Date(this.timestamp * 1e3);
        }
        /**
         *  Get the transaction at %%indexe%% within this block.
         */
        async getTransaction(indexOrHash) {
          let tx = void 0;
          if (typeof indexOrHash === "number") {
            tx = __privateGet(this, _transactions)[indexOrHash];
          } else {
            const hash2 = indexOrHash.toLowerCase();
            for (const v of __privateGet(this, _transactions)) {
              if (typeof v === "string") {
                if (v !== hash2) {
                  continue;
                }
                tx = v;
                break;
              } else {
                if (v.hash !== hash2) {
                  continue;
                }
                tx = v;
                break;
              }
            }
          }
          if (tx == null) {
            throw new Error("no such tx");
          }
          if (typeof tx === "string") {
            return await this.provider.getTransaction(tx);
          } else {
            return tx;
          }
        }
        /**
         *  If a **Block** was fetched with a request to include the transactions
         *  this will allow synchronous access to those transactions.
         *
         *  If the transactions were not prefetched, this will throw.
         */
        getPrefetchedTransaction(indexOrHash) {
          const txs = this.prefetchedTransactions;
          if (typeof indexOrHash === "number") {
            return txs[indexOrHash];
          }
          indexOrHash = indexOrHash.toLowerCase();
          for (const tx of txs) {
            if (tx.hash === indexOrHash) {
              return tx;
            }
          }
          assertArgument(false, "no matching transaction", "indexOrHash", indexOrHash);
        }
        /**
         *  Returns true if this block been mined. This provides a type guard
         *  for all properties on a [[MinedBlock]].
         */
        isMined() {
          return !!this.hash;
        }
        /**
         *  Returns true if this block is an [[link-eip-2930]] block.
         */
        isLondon() {
          return !!this.baseFeePerGas;
        }
        /**
         *  @_ignore:
         */
        orphanedEvent() {
          if (!this.isMined()) {
            throw new Error("");
          }
          return createOrphanedBlockFilter(this);
        }
      };
      _transactions = new WeakMap();
      Log = class {
        /**
         *  @_ignore:
         */
        constructor(log, provider) {
          /**
           *  The provider connected to the log used to fetch additional details
           *  if necessary.
           */
          __publicField(this, "provider");
          /**
           *  The transaction hash of the transaction this log occurred in. Use the
           *  [[Log-getTransaction]] to get the [[TransactionResponse]].
           */
          __publicField(this, "transactionHash");
          /**
           *  The block hash of the block this log occurred in. Use the
           *  [[Log-getBlock]] to get the [[Block]].
           */
          __publicField(this, "blockHash");
          /**
           *  The block number of the block this log occurred in. It is preferred
           *  to use the [[Block-hash]] when fetching the related [[Block]],
           *  since in the case of an orphaned block, the block at that height may
           *  have changed.
           */
          __publicField(this, "blockNumber");
          /**
           *  If the **Log** represents a block that was removed due to an orphaned
           *  block, this will be true.
           *
           *  This can only happen within an orphan event listener.
           */
          __publicField(this, "removed");
          /**
           *  The address of the contract that emitted this log.
           */
          __publicField(this, "address");
          /**
           *  The data included in this log when it was emitted.
           */
          __publicField(this, "data");
          /**
           *  The indexed topics included in this log when it was emitted.
           *
           *  All topics are included in the bloom filters, so they can be
           *  efficiently filtered using the [[Provider-getLogs]] method.
           */
          __publicField(this, "topics");
          /**
           *  The index within the block this log occurred at. This is generally
           *  not useful to developers, but can be used with the various roots
           *  to proof inclusion within a block.
           */
          __publicField(this, "index");
          /**
           *  The index within the transaction of this log.
           */
          __publicField(this, "transactionIndex");
          this.provider = provider;
          const topics = Object.freeze(log.topics.slice());
          defineProperties(this, {
            transactionHash: log.transactionHash,
            blockHash: log.blockHash,
            blockNumber: log.blockNumber,
            removed: log.removed,
            address: log.address,
            data: log.data,
            topics,
            index: log.index,
            transactionIndex: log.transactionIndex
          });
        }
        /**
         *  Returns a JSON-compatible object.
         */
        toJSON() {
          const { address, blockHash, blockNumber, data, index, removed, topics, transactionHash, transactionIndex } = this;
          return {
            _type: "log",
            address,
            blockHash,
            blockNumber,
            data,
            index,
            removed,
            topics,
            transactionHash,
            transactionIndex
          };
        }
        /**
         *  Returns the block that this log occurred in.
         */
        async getBlock() {
          const block = await this.provider.getBlock(this.blockHash);
          assert(!!block, "failed to find transaction", "UNKNOWN_ERROR", {});
          return block;
        }
        /**
         *  Returns the transaction that this log occurred in.
         */
        async getTransaction() {
          const tx = await this.provider.getTransaction(this.transactionHash);
          assert(!!tx, "failed to find transaction", "UNKNOWN_ERROR", {});
          return tx;
        }
        /**
         *  Returns the transaction receipt fot the transaction that this
         *  log occurred in.
         */
        async getTransactionReceipt() {
          const receipt = await this.provider.getTransactionReceipt(this.transactionHash);
          assert(!!receipt, "failed to find transaction receipt", "UNKNOWN_ERROR", {});
          return receipt;
        }
        /**
         *  @_ignore:
         */
        removedEvent() {
          return createRemovedLogFilter(this);
        }
      };
      TransactionReceipt = class {
        /**
         *  @_ignore:
         */
        constructor(tx, provider) {
          /**
           *  The provider connected to the log used to fetch additional details
           *  if necessary.
           */
          __publicField(this, "provider");
          /**
           *  The address the transaction was sent to.
           */
          __publicField(this, "to");
          /**
           *  The sender of the transaction.
           */
          __publicField(this, "from");
          /**
           *  The address of the contract if the transaction was directly
           *  responsible for deploying one.
           *
           *  This is non-null **only** if the ``to`` is empty and the ``data``
           *  was successfully executed as initcode.
           */
          __publicField(this, "contractAddress");
          /**
           *  The transaction hash.
           */
          __publicField(this, "hash");
          /**
           *  The index of this transaction within the block transactions.
           */
          __publicField(this, "index");
          /**
           *  The block hash of the [[Block]] this transaction was included in.
           */
          __publicField(this, "blockHash");
          /**
           *  The block number of the [[Block]] this transaction was included in.
           */
          __publicField(this, "blockNumber");
          /**
           *  The bloom filter bytes that represent all logs that occurred within
           *  this transaction. This is generally not useful for most developers,
           *  but can be used to validate the included logs.
           */
          __publicField(this, "logsBloom");
          /**
           *  The actual amount of gas used by this transaction.
           *
           *  When creating a transaction, the amount of gas that will be used can
           *  only be approximated, but the sender must pay the gas fee for the
           *  entire gas limit. After the transaction, the difference is refunded.
           */
          __publicField(this, "gasUsed");
          /**
           *  The gas used for BLObs. See [[link-eip-4844]].
           */
          __publicField(this, "blobGasUsed");
          /**
           *  The amount of gas used by all transactions within the block for this
           *  and all transactions with a lower ``index``.
           *
           *  This is generally not useful for developers but can be used to
           *  validate certain aspects of execution.
           */
          __publicField(this, "cumulativeGasUsed");
          /**
           *  The actual gas price used during execution.
           *
           *  Due to the complexity of [[link-eip-1559]] this value can only
           *  be caluclated after the transaction has been mined, snce the base
           *  fee is protocol-enforced.
           */
          __publicField(this, "gasPrice");
          /**
           *  The price paid per BLOB in gas. See [[link-eip-4844]].
           */
          __publicField(this, "blobGasPrice");
          /**
           *  The [[link-eip-2718]] transaction type.
           */
          __publicField(this, "type");
          //readonly byzantium!: boolean;
          /**
           *  The status of this transaction, indicating success (i.e. ``1``) or
           *  a revert (i.e. ``0``).
           *
           *  This is available in post-byzantium blocks, but some backends may
           *  backfill this value.
           */
          __publicField(this, "status");
          /**
           *  The root hash of this transaction.
           *
           *  This is no present and was only included in pre-byzantium blocks, but
           *  could be used to validate certain parts of the receipt.
           */
          __publicField(this, "root");
          __privateAdd(this, _logs);
          __privateSet(this, _logs, Object.freeze(tx.logs.map((log) => {
            return new Log(log, provider);
          })));
          let gasPrice = BN_09;
          if (tx.effectiveGasPrice != null) {
            gasPrice = tx.effectiveGasPrice;
          } else if (tx.gasPrice != null) {
            gasPrice = tx.gasPrice;
          }
          defineProperties(this, {
            provider,
            to: tx.to,
            from: tx.from,
            contractAddress: tx.contractAddress,
            hash: tx.hash,
            index: tx.index,
            blockHash: tx.blockHash,
            blockNumber: tx.blockNumber,
            logsBloom: tx.logsBloom,
            gasUsed: tx.gasUsed,
            cumulativeGasUsed: tx.cumulativeGasUsed,
            blobGasUsed: tx.blobGasUsed,
            gasPrice,
            blobGasPrice: tx.blobGasPrice,
            type: tx.type,
            //byzantium: tx.byzantium,
            status: tx.status,
            root: tx.root
          });
        }
        /**
         *  The logs for this transaction.
         */
        get logs() {
          return __privateGet(this, _logs);
        }
        /**
         *  Returns a JSON-compatible representation.
         */
        toJSON() {
          const {
            to,
            from,
            contractAddress,
            hash: hash2,
            index,
            blockHash,
            blockNumber,
            logsBloom,
            logs,
            //byzantium, 
            status,
            root
          } = this;
          return {
            _type: "TransactionReceipt",
            blockHash,
            blockNumber,
            //byzantium, 
            contractAddress,
            cumulativeGasUsed: toJson(this.cumulativeGasUsed),
            from,
            gasPrice: toJson(this.gasPrice),
            blobGasUsed: toJson(this.blobGasUsed),
            blobGasPrice: toJson(this.blobGasPrice),
            gasUsed: toJson(this.gasUsed),
            hash: hash2,
            index,
            logs,
            logsBloom,
            root,
            status,
            to
          };
        }
        /**
         *  @_ignore:
         */
        get length() {
          return this.logs.length;
        }
        [Symbol.iterator]() {
          let index = 0;
          return {
            next: () => {
              if (index < this.length) {
                return { value: this.logs[index++], done: false };
              }
              return { value: void 0, done: true };
            }
          };
        }
        /**
         *  The total fee for this transaction, in wei.
         */
        get fee() {
          return this.gasUsed * this.gasPrice;
        }
        /**
         *  Resolves to the block this transaction occurred in.
         */
        async getBlock() {
          const block = await this.provider.getBlock(this.blockHash);
          if (block == null) {
            throw new Error("TODO");
          }
          return block;
        }
        /**
         *  Resolves to the transaction this transaction occurred in.
         */
        async getTransaction() {
          const tx = await this.provider.getTransaction(this.hash);
          if (tx == null) {
            throw new Error("TODO");
          }
          return tx;
        }
        /**
         *  Resolves to the return value of the execution of this transaction.
         *
         *  Support for this feature is limited, as it requires an archive node
         *  with the ``debug_`` or ``trace_`` API enabled.
         */
        async getResult() {
          return await this.provider.getTransactionResult(this.hash);
        }
        /**
         *  Resolves to the number of confirmations this transaction has.
         */
        async confirmations() {
          return await this.provider.getBlockNumber() - this.blockNumber + 1;
        }
        /**
         *  @_ignore:
         */
        removedEvent() {
          return createRemovedTransactionFilter(this);
        }
        /**
         *  @_ignore:
         */
        reorderedEvent(other) {
          assert(!other || other.isMined(), "unmined 'other' transction cannot be orphaned", "UNSUPPORTED_OPERATION", { operation: "reorderedEvent(other)" });
          return createReorderedTransactionFilter(this, other);
        }
      };
      _logs = new WeakMap();
      _TransactionResponse = class _TransactionResponse {
        /**
         *  @_ignore:
         */
        constructor(tx, provider) {
          /**
           *  The provider this is connected to, which will influence how its
           *  methods will resolve its async inspection methods.
           */
          __publicField(this, "provider");
          /**
           *  The block number of the block that this transaction was included in.
           *
           *  This is ``null`` for pending transactions.
           */
          __publicField(this, "blockNumber");
          /**
           *  The blockHash of the block that this transaction was included in.
           *
           *  This is ``null`` for pending transactions.
           */
          __publicField(this, "blockHash");
          /**
           *  The index within the block that this transaction resides at.
           */
          __publicField(this, "index");
          /**
           *  The transaction hash.
           */
          __publicField(this, "hash");
          /**
           *  The [[link-eip-2718]] transaction envelope type. This is
           *  ``0`` for legacy transactions types.
           */
          __publicField(this, "type");
          /**
           *  The receiver of this transaction.
           *
           *  If ``null``, then the transaction is an initcode transaction.
           *  This means the result of executing the [[data]] will be deployed
           *  as a new contract on chain (assuming it does not revert) and the
           *  address may be computed using [[getCreateAddress]].
           */
          __publicField(this, "to");
          /**
           *  The sender of this transaction. It is implicitly computed
           *  from the transaction pre-image hash (as the digest) and the
           *  [[signature]] using ecrecover.
           */
          __publicField(this, "from");
          /**
           *  The nonce, which is used to prevent replay attacks and offer
           *  a method to ensure transactions from a given sender are explicitly
           *  ordered.
           *
           *  When sending a transaction, this must be equal to the number of
           *  transactions ever sent by [[from]].
           */
          __publicField(this, "nonce");
          /**
           *  The maximum units of gas this transaction can consume. If execution
           *  exceeds this, the entries transaction is reverted and the sender
           *  is charged for the full amount, despite not state changes being made.
           */
          __publicField(this, "gasLimit");
          /**
           *  The gas price can have various values, depending on the network.
           *
           *  In modern networks, for transactions that are included this is
           *  the //effective gas price// (the fee per gas that was actually
           *  charged), while for transactions that have not been included yet
           *  is the [[maxFeePerGas]].
           *
           *  For legacy transactions, or transactions on legacy networks, this
           *  is the fee that will be charged per unit of gas the transaction
           *  consumes.
           */
          __publicField(this, "gasPrice");
          /**
           *  The maximum priority fee (per unit of gas) to allow a
           *  validator to charge the sender. This is inclusive of the
           *  [[maxFeeFeePerGas]].
           */
          __publicField(this, "maxPriorityFeePerGas");
          /**
           *  The maximum fee (per unit of gas) to allow this transaction
           *  to charge the sender.
           */
          __publicField(this, "maxFeePerGas");
          /**
           *  The [[link-eip-4844]] max fee per BLOb gas.
           */
          __publicField(this, "maxFeePerBlobGas");
          /**
           *  The data.
           */
          __publicField(this, "data");
          /**
           *  The value, in wei. Use [[formatEther]] to format this value
           *  as ether.
           */
          __publicField(this, "value");
          /**
           *  The chain ID.
           */
          __publicField(this, "chainId");
          /**
           *  The signature.
           */
          __publicField(this, "signature");
          /**
           *  The [[link-eip-2930]] access list for transaction types that
           *  support it, otherwise ``null``.
           */
          __publicField(this, "accessList");
          /**
           *  The [[link-eip-4844]] BLOb versioned hashes.
           */
          __publicField(this, "blobVersionedHashes");
          /**
           *  The [[link-eip-7702]] authorizations (if any).
           */
          __publicField(this, "authorizationList");
          __privateAdd(this, _startBlock);
          this.provider = provider;
          this.blockNumber = tx.blockNumber != null ? tx.blockNumber : null;
          this.blockHash = tx.blockHash != null ? tx.blockHash : null;
          this.hash = tx.hash;
          this.index = tx.index;
          this.type = tx.type;
          this.from = tx.from;
          this.to = tx.to || null;
          this.gasLimit = tx.gasLimit;
          this.nonce = tx.nonce;
          this.data = tx.data;
          this.value = tx.value;
          this.gasPrice = tx.gasPrice;
          this.maxPriorityFeePerGas = tx.maxPriorityFeePerGas != null ? tx.maxPriorityFeePerGas : null;
          this.maxFeePerGas = tx.maxFeePerGas != null ? tx.maxFeePerGas : null;
          this.maxFeePerBlobGas = tx.maxFeePerBlobGas != null ? tx.maxFeePerBlobGas : null;
          this.chainId = tx.chainId;
          this.signature = tx.signature;
          this.accessList = tx.accessList != null ? tx.accessList : null;
          this.blobVersionedHashes = tx.blobVersionedHashes != null ? tx.blobVersionedHashes : null;
          this.authorizationList = tx.authorizationList != null ? tx.authorizationList : null;
          __privateSet(this, _startBlock, -1);
        }
        /**
         *  Returns a JSON-compatible representation of this transaction.
         */
        toJSON() {
          const { blockNumber, blockHash, index, hash: hash2, type: type2, to, from, nonce, data, signature: signature2, accessList, blobVersionedHashes } = this;
          return {
            _type: "TransactionResponse",
            accessList,
            blockNumber,
            blockHash,
            blobVersionedHashes,
            chainId: toJson(this.chainId),
            data,
            from,
            gasLimit: toJson(this.gasLimit),
            gasPrice: toJson(this.gasPrice),
            hash: hash2,
            maxFeePerGas: toJson(this.maxFeePerGas),
            maxPriorityFeePerGas: toJson(this.maxPriorityFeePerGas),
            maxFeePerBlobGas: toJson(this.maxFeePerBlobGas),
            nonce,
            signature: signature2,
            to,
            index,
            type: type2,
            value: toJson(this.value)
          };
        }
        /**
         *  Resolves to the Block that this transaction was included in.
         *
         *  This will return null if the transaction has not been included yet.
         */
        async getBlock() {
          let blockNumber = this.blockNumber;
          if (blockNumber == null) {
            const tx = await this.getTransaction();
            if (tx) {
              blockNumber = tx.blockNumber;
            }
          }
          if (blockNumber == null) {
            return null;
          }
          const block = this.provider.getBlock(blockNumber);
          if (block == null) {
            throw new Error("TODO");
          }
          return block;
        }
        /**
         *  Resolves to this transaction being re-requested from the
         *  provider. This can be used if you have an unmined transaction
         *  and wish to get an up-to-date populated instance.
         */
        async getTransaction() {
          return this.provider.getTransaction(this.hash);
        }
        /**
         *  Resolve to the number of confirmations this transaction has.
         */
        async confirmations() {
          if (this.blockNumber == null) {
            const { tx, blockNumber: blockNumber2 } = await resolveProperties({
              tx: this.getTransaction(),
              blockNumber: this.provider.getBlockNumber()
            });
            if (tx == null || tx.blockNumber == null) {
              return 0;
            }
            return blockNumber2 - tx.blockNumber + 1;
          }
          const blockNumber = await this.provider.getBlockNumber();
          return blockNumber - this.blockNumber + 1;
        }
        /**
         *  Resolves once this transaction has been mined and has
         *  %%confirms%% blocks including it (default: ``1``) with an
         *  optional %%timeout%%.
         *
         *  This can resolve to ``null`` only if %%confirms%% is ``0``
         *  and the transaction has not been mined, otherwise this will
         *  wait until enough confirmations have completed.
         */
        async wait(_confirms, _timeout2) {
          const confirms = _confirms == null ? 1 : _confirms;
          const timeout = _timeout2 == null ? 0 : _timeout2;
          let startBlock = __privateGet(this, _startBlock);
          let nextScan = -1;
          let stopScanning = startBlock === -1 ? true : false;
          const checkReplacement = async () => {
            if (stopScanning) {
              return null;
            }
            const { blockNumber, nonce } = await resolveProperties({
              blockNumber: this.provider.getBlockNumber(),
              nonce: this.provider.getTransactionCount(this.from)
            });
            if (nonce < this.nonce) {
              startBlock = blockNumber;
              return;
            }
            if (stopScanning) {
              return null;
            }
            const mined = await this.getTransaction();
            if (mined && mined.blockNumber != null) {
              return;
            }
            if (nextScan === -1) {
              nextScan = startBlock - 3;
              if (nextScan < __privateGet(this, _startBlock)) {
                nextScan = __privateGet(this, _startBlock);
              }
            }
            while (nextScan <= blockNumber) {
              if (stopScanning) {
                return null;
              }
              const block = await this.provider.getBlock(nextScan, true);
              if (block == null) {
                return;
              }
              for (const hash2 of block) {
                if (hash2 === this.hash) {
                  return;
                }
              }
              for (let i = 0; i < block.length; i++) {
                const tx = await block.getTransaction(i);
                if (tx.from === this.from && tx.nonce === this.nonce) {
                  if (stopScanning) {
                    return null;
                  }
                  const receipt2 = await this.provider.getTransactionReceipt(tx.hash);
                  if (receipt2 == null) {
                    return;
                  }
                  if (blockNumber - receipt2.blockNumber + 1 < confirms) {
                    return;
                  }
                  let reason = "replaced";
                  if (tx.data === this.data && tx.to === this.to && tx.value === this.value) {
                    reason = "repriced";
                  } else if (tx.data === "0x" && tx.from === tx.to && tx.value === BN_09) {
                    reason = "cancelled";
                  }
                  assert(false, "transaction was replaced", "TRANSACTION_REPLACED", {
                    cancelled: reason === "replaced" || reason === "cancelled",
                    reason,
                    replacement: tx.replaceableTransaction(startBlock),
                    hash: tx.hash,
                    receipt: receipt2
                  });
                }
              }
              nextScan++;
            }
            return;
          };
          const checkReceipt = (receipt2) => {
            if (receipt2 == null || receipt2.status !== 0) {
              return receipt2;
            }
            assert(false, "transaction execution reverted", "CALL_EXCEPTION", {
              action: "sendTransaction",
              data: null,
              reason: null,
              invocation: null,
              revert: null,
              transaction: {
                to: receipt2.to,
                from: receipt2.from,
                data: ""
                // @TODO: in v7, split out sendTransaction properties
              },
              receipt: receipt2
            });
          };
          const receipt = await this.provider.getTransactionReceipt(this.hash);
          if (confirms === 0) {
            return checkReceipt(receipt);
          }
          if (receipt) {
            if (await receipt.confirmations() >= confirms) {
              return checkReceipt(receipt);
            }
          } else {
            await checkReplacement();
            if (confirms === 0) {
              return null;
            }
          }
          const waiter = new Promise((resolve, reject) => {
            const cancellers = [];
            const cancel = () => {
              cancellers.forEach((c) => c());
            };
            cancellers.push(() => {
              stopScanning = true;
            });
            if (timeout > 0) {
              const timer = setTimeout(() => {
                cancel();
                reject(makeError("wait for transaction timeout", "TIMEOUT"));
              }, timeout);
              cancellers.push(() => {
                clearTimeout(timer);
              });
            }
            const txListener = async (receipt2) => {
              if (await receipt2.confirmations() >= confirms) {
                cancel();
                try {
                  resolve(checkReceipt(receipt2));
                } catch (error) {
                  reject(error);
                }
              }
            };
            cancellers.push(() => {
              this.provider.off(this.hash, txListener);
            });
            this.provider.on(this.hash, txListener);
            if (startBlock >= 0) {
              const replaceListener = async () => {
                try {
                  await checkReplacement();
                } catch (error) {
                  if (isError(error, "TRANSACTION_REPLACED")) {
                    cancel();
                    reject(error);
                    return;
                  }
                }
                if (!stopScanning) {
                  this.provider.once("block", replaceListener);
                }
              };
              cancellers.push(() => {
                this.provider.off("block", replaceListener);
              });
              this.provider.once("block", replaceListener);
            }
          });
          return await waiter;
        }
        /**
         *  Returns ``true`` if this transaction has been included.
         *
         *  This is effective only as of the time the TransactionResponse
         *  was instantiated. To get up-to-date information, use
         *  [[getTransaction]].
         *
         *  This provides a Type Guard that this transaction will have
         *  non-null property values for properties that are null for
         *  unmined transactions.
         */
        isMined() {
          return this.blockHash != null;
        }
        /**
         *  Returns true if the transaction is a legacy (i.e. ``type == 0``)
         *  transaction.
         *
         *  This provides a Type Guard that this transaction will have
         *  the ``null``-ness for hardfork-specific properties set correctly.
         */
        isLegacy() {
          return this.type === 0;
        }
        /**
         *  Returns true if the transaction is a Berlin (i.e. ``type == 1``)
         *  transaction. See [[link-eip-2070]].
         *
         *  This provides a Type Guard that this transaction will have
         *  the ``null``-ness for hardfork-specific properties set correctly.
         */
        isBerlin() {
          return this.type === 1;
        }
        /**
         *  Returns true if the transaction is a London (i.e. ``type == 2``)
         *  transaction. See [[link-eip-1559]].
         *
         *  This provides a Type Guard that this transaction will have
         *  the ``null``-ness for hardfork-specific properties set correctly.
         */
        isLondon() {
          return this.type === 2;
        }
        /**
         *  Returns true if hte transaction is a Cancun (i.e. ``type == 3``)
         *  transaction. See [[link-eip-4844]].
         */
        isCancun() {
          return this.type === 3;
        }
        /**
         *  Returns a filter which can be used to listen for orphan events
         *  that evict this transaction.
         */
        removedEvent() {
          assert(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
          return createRemovedTransactionFilter(this);
        }
        /**
         *  Returns a filter which can be used to listen for orphan events
         *  that re-order this event against %%other%%.
         */
        reorderedEvent(other) {
          assert(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
          assert(!other || other.isMined(), "unmined 'other' transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
          return createReorderedTransactionFilter(this, other);
        }
        /**
         *  Returns a new TransactionResponse instance which has the ability to
         *  detect (and throw an error) if the transaction is replaced, which
         *  will begin scanning at %%startBlock%%.
         *
         *  This should generally not be used by developers and is intended
         *  primarily for internal use. Setting an incorrect %%startBlock%% can
         *  have devastating performance consequences if used incorrectly.
         */
        replaceableTransaction(startBlock) {
          assertArgument(Number.isInteger(startBlock) && startBlock >= 0, "invalid startBlock", "startBlock", startBlock);
          const tx = new _TransactionResponse(this, this.provider);
          __privateSet(tx, _startBlock, startBlock);
          return tx;
        }
      };
      _startBlock = new WeakMap();
      TransactionResponse = _TransactionResponse;
    }
  });

  // node_modules/ethers/lib.esm/contract/wrappers.js
  var EventLog, UndecodedEventLog, _iface, ContractTransactionReceipt, _iface2, ContractTransactionResponse, ContractUnknownEventPayload, ContractEventPayload;
  var init_wrappers = __esm({
    "node_modules/ethers/lib.esm/contract/wrappers.js"() {
      init_provider();
      init_utils();
      EventLog = class extends Log {
        /**
         * @_ignore:
         */
        constructor(log, iface, fragment) {
          super(log, log.provider);
          /**
           *  The Contract Interface.
           */
          __publicField(this, "interface");
          /**
           *  The matching event.
           */
          __publicField(this, "fragment");
          /**
           *  The parsed arguments passed to the event by ``emit``.
           */
          __publicField(this, "args");
          const args = iface.decodeEventLog(fragment, log.data, log.topics);
          defineProperties(this, { args, fragment, interface: iface });
        }
        /**
         *  The name of the event.
         */
        get eventName() {
          return this.fragment.name;
        }
        /**
         *  The signature of the event.
         */
        get eventSignature() {
          return this.fragment.format();
        }
      };
      UndecodedEventLog = class extends Log {
        /**
         * @_ignore:
         */
        constructor(log, error) {
          super(log, log.provider);
          /**
           *  The error encounted when trying to decode the log.
           */
          __publicField(this, "error");
          defineProperties(this, { error });
        }
      };
      ContractTransactionReceipt = class extends TransactionReceipt {
        /**
         *  @_ignore:
         */
        constructor(iface, provider, tx) {
          super(tx, provider);
          __privateAdd(this, _iface);
          __privateSet(this, _iface, iface);
        }
        /**
         *  The parsed logs for any [[Log]] which has a matching event in the
         *  Contract ABI.
         */
        get logs() {
          return super.logs.map((log) => {
            const fragment = log.topics.length ? __privateGet(this, _iface).getEvent(log.topics[0]) : null;
            if (fragment) {
              try {
                return new EventLog(log, __privateGet(this, _iface), fragment);
              } catch (error) {
                return new UndecodedEventLog(log, error);
              }
            }
            return log;
          });
        }
      };
      _iface = new WeakMap();
      ContractTransactionResponse = class extends TransactionResponse {
        /**
         *  @_ignore:
         */
        constructor(iface, provider, tx) {
          super(tx, provider);
          __privateAdd(this, _iface2);
          __privateSet(this, _iface2, iface);
        }
        /**
         *  Resolves once this transaction has been mined and has
         *  %%confirms%% blocks including it (default: ``1``) with an
         *  optional %%timeout%%.
         *
         *  This can resolve to ``null`` only if %%confirms%% is ``0``
         *  and the transaction has not been mined, otherwise this will
         *  wait until enough confirmations have completed.
         */
        async wait(confirms, timeout) {
          const receipt = await super.wait(confirms, timeout);
          if (receipt == null) {
            return null;
          }
          return new ContractTransactionReceipt(__privateGet(this, _iface2), this.provider, receipt);
        }
      };
      _iface2 = new WeakMap();
      ContractUnknownEventPayload = class extends EventPayload {
        /**
         *  @_event:
         */
        constructor(contract, listener, filter, log) {
          super(contract, listener, filter);
          /**
           *  The log with no matching events.
           */
          __publicField(this, "log");
          defineProperties(this, { log });
        }
        /**
         *  Resolves to the block the event occured in.
         */
        async getBlock() {
          return await this.log.getBlock();
        }
        /**
         *  Resolves to the transaction the event occured in.
         */
        async getTransaction() {
          return await this.log.getTransaction();
        }
        /**
         *  Resolves to the transaction receipt the event occured in.
         */
        async getTransactionReceipt() {
          return await this.log.getTransactionReceipt();
        }
      };
      ContractEventPayload = class extends ContractUnknownEventPayload {
        /**
         *  @_ignore:
         */
        constructor(contract, listener, filter, fragment, _log) {
          super(contract, listener, filter, new EventLog(_log, contract.interface, fragment));
          const args = contract.interface.decodeEventLog(fragment, this.log.data, this.log.topics);
          defineProperties(this, { args, fragment });
        }
        /**
         *  The event name.
         */
        get eventName() {
          return this.fragment.name;
        }
        /**
         *  The event signature.
         */
        get eventSignature() {
          return this.fragment.format();
        }
      };
    }
  });

  // node_modules/ethers/lib.esm/contract/contract.js
  function canCall(value) {
    return value && typeof value.call === "function";
  }
  function canEstimate(value) {
    return value && typeof value.estimateGas === "function";
  }
  function canResolve(value) {
    return value && typeof value.resolveName === "function";
  }
  function canSend(value) {
    return value && typeof value.sendTransaction === "function";
  }
  function getResolver(value) {
    if (value != null) {
      if (canResolve(value)) {
        return value;
      }
      if (value.provider) {
        return value.provider;
      }
    }
    return void 0;
  }
  function getRunner(value, feature) {
    if (value == null) {
      return null;
    }
    if (typeof value[feature] === "function") {
      return value;
    }
    if (value.provider && typeof value.provider[feature] === "function") {
      return value.provider;
    }
    return null;
  }
  function getProvider(value) {
    if (value == null) {
      return null;
    }
    return value.provider || null;
  }
  async function copyOverrides(arg, allowed) {
    const _overrides = Typed.dereference(arg, "overrides");
    assertArgument(typeof _overrides === "object", "invalid overrides parameter", "overrides", arg);
    const overrides = copyRequest(_overrides);
    assertArgument(overrides.to == null || (allowed || []).indexOf("to") >= 0, "cannot override to", "overrides.to", overrides.to);
    assertArgument(overrides.data == null || (allowed || []).indexOf("data") >= 0, "cannot override data", "overrides.data", overrides.data);
    if (overrides.from) {
      overrides.from = overrides.from;
    }
    return overrides;
  }
  async function resolveArgs(_runner, inputs, args) {
    const runner = getRunner(_runner, "resolveName");
    const resolver = canResolve(runner) ? runner : null;
    return await Promise.all(inputs.map((param, index) => {
      return param.walkAsync(args[index], (type2, value) => {
        value = Typed.dereference(value, type2);
        if (type2 === "address") {
          return resolveAddress(value, resolver);
        }
        return value;
      });
    }));
  }
  function buildWrappedFallback(contract) {
    const populateTransaction = async function(overrides) {
      const tx = await copyOverrides(overrides, ["data"]);
      tx.to = await contract.getAddress();
      if (tx.from) {
        tx.from = await resolveAddress(tx.from, getResolver(contract.runner));
      }
      const iface = contract.interface;
      const noValue = getBigInt(tx.value || BN_010, "overrides.value") === BN_010;
      const noData = (tx.data || "0x") === "0x";
      if (iface.fallback && !iface.fallback.payable && iface.receive && !noData && !noValue) {
        assertArgument(false, "cannot send data to receive or send value to non-payable fallback", "overrides", overrides);
      }
      assertArgument(iface.fallback || noData, "cannot send data to receive-only contract", "overrides.data", tx.data);
      const payable = iface.receive || iface.fallback && iface.fallback.payable;
      assertArgument(payable || noValue, "cannot send value to non-payable fallback", "overrides.value", tx.value);
      assertArgument(iface.fallback || noData, "cannot send data to receive-only contract", "overrides.data", tx.data);
      return tx;
    };
    const staticCall = async function(overrides) {
      const runner = getRunner(contract.runner, "call");
      assert(canCall(runner), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
      const tx = await populateTransaction(overrides);
      try {
        return await runner.call(tx);
      } catch (error) {
        if (isCallException(error) && error.data) {
          throw contract.interface.makeError(error.data, tx);
        }
        throw error;
      }
    };
    const send = async function(overrides) {
      const runner = contract.runner;
      assert(canSend(runner), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
      const tx = await runner.sendTransaction(await populateTransaction(overrides));
      const provider = getProvider(contract.runner);
      return new ContractTransactionResponse(contract.interface, provider, tx);
    };
    const estimateGas = async function(overrides) {
      const runner = getRunner(contract.runner, "estimateGas");
      assert(canEstimate(runner), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" });
      return await runner.estimateGas(await populateTransaction(overrides));
    };
    const method = async (overrides) => {
      return await send(overrides);
    };
    defineProperties(method, {
      _contract: contract,
      estimateGas,
      populateTransaction,
      send,
      staticCall
    });
    return method;
  }
  function buildWrappedMethod(contract, key) {
    const getFragment = function(...args) {
      const fragment = contract.interface.getFunction(key, args);
      assert(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
        operation: "fragment",
        info: { key, args }
      });
      return fragment;
    };
    const populateTransaction = async function(...args) {
      const fragment = getFragment(...args);
      let overrides = {};
      if (fragment.inputs.length + 1 === args.length) {
        overrides = await copyOverrides(args.pop());
        if (overrides.from) {
          overrides.from = await resolveAddress(overrides.from, getResolver(contract.runner));
        }
      }
      if (fragment.inputs.length !== args.length) {
        throw new Error("internal error: fragment inputs doesn't match arguments; should not happen");
      }
      const resolvedArgs = await resolveArgs(contract.runner, fragment.inputs, args);
      return Object.assign({}, overrides, await resolveProperties({
        to: contract.getAddress(),
        data: contract.interface.encodeFunctionData(fragment, resolvedArgs)
      }));
    };
    const staticCall = async function(...args) {
      const result = await staticCallResult(...args);
      if (result.length === 1) {
        return result[0];
      }
      return result;
    };
    const send = async function(...args) {
      const runner = contract.runner;
      assert(canSend(runner), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
      const tx = await runner.sendTransaction(await populateTransaction(...args));
      const provider = getProvider(contract.runner);
      return new ContractTransactionResponse(contract.interface, provider, tx);
    };
    const estimateGas = async function(...args) {
      const runner = getRunner(contract.runner, "estimateGas");
      assert(canEstimate(runner), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" });
      return await runner.estimateGas(await populateTransaction(...args));
    };
    const staticCallResult = async function(...args) {
      const runner = getRunner(contract.runner, "call");
      assert(canCall(runner), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
      const tx = await populateTransaction(...args);
      let result = "0x";
      try {
        result = await runner.call(tx);
      } catch (error) {
        if (isCallException(error) && error.data) {
          throw contract.interface.makeError(error.data, tx);
        }
        throw error;
      }
      const fragment = getFragment(...args);
      return contract.interface.decodeFunctionResult(fragment, result);
    };
    const method = async (...args) => {
      const fragment = getFragment(...args);
      if (fragment.constant) {
        return await staticCall(...args);
      }
      return await send(...args);
    };
    defineProperties(method, {
      name: contract.interface.getFunctionName(key),
      _contract: contract,
      _key: key,
      getFragment,
      estimateGas,
      populateTransaction,
      send,
      staticCall,
      staticCallResult
    });
    Object.defineProperty(method, "fragment", {
      configurable: false,
      enumerable: true,
      get: () => {
        const fragment = contract.interface.getFunction(key);
        assert(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
          operation: "fragment",
          info: { key }
        });
        return fragment;
      }
    });
    return method;
  }
  function buildWrappedEvent(contract, key) {
    const getFragment = function(...args) {
      const fragment = contract.interface.getEvent(key, args);
      assert(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
        operation: "fragment",
        info: { key, args }
      });
      return fragment;
    };
    const method = function(...args) {
      return new PreparedTopicFilter(contract, getFragment(...args), args);
    };
    defineProperties(method, {
      name: contract.interface.getEventName(key),
      _contract: contract,
      _key: key,
      getFragment
    });
    Object.defineProperty(method, "fragment", {
      configurable: false,
      enumerable: true,
      get: () => {
        const fragment = contract.interface.getEvent(key);
        assert(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
          operation: "fragment",
          info: { key }
        });
        return fragment;
      }
    });
    return method;
  }
  function setInternal(contract, values) {
    internalValues.set(contract[internal2], values);
  }
  function getInternal(contract) {
    return internalValues.get(contract[internal2]);
  }
  function isDeferred(value) {
    return value && typeof value === "object" && "getTopicFilter" in value && typeof value.getTopicFilter === "function" && value.fragment;
  }
  async function getSubInfo(contract, event) {
    let topics;
    let fragment = null;
    if (Array.isArray(event)) {
      const topicHashify = function(name) {
        if (isHexString(name, 32)) {
          return name;
        }
        const fragment2 = contract.interface.getEvent(name);
        assertArgument(fragment2, "unknown fragment", "name", name);
        return fragment2.topicHash;
      };
      topics = event.map((e) => {
        if (e == null) {
          return null;
        }
        if (Array.isArray(e)) {
          return e.map(topicHashify);
        }
        return topicHashify(e);
      });
    } else if (event === "*") {
      topics = [null];
    } else if (typeof event === "string") {
      if (isHexString(event, 32)) {
        topics = [event];
      } else {
        fragment = contract.interface.getEvent(event);
        assertArgument(fragment, "unknown fragment", "event", event);
        topics = [fragment.topicHash];
      }
    } else if (isDeferred(event)) {
      topics = await event.getTopicFilter();
    } else if ("fragment" in event) {
      fragment = event.fragment;
      topics = [fragment.topicHash];
    } else {
      assertArgument(false, "unknown event name", "event", event);
    }
    topics = topics.map((t) => {
      if (t == null) {
        return null;
      }
      if (Array.isArray(t)) {
        const items = Array.from(new Set(t.map((t2) => t2.toLowerCase())).values());
        if (items.length === 1) {
          return items[0];
        }
        items.sort();
        return items;
      }
      return t.toLowerCase();
    });
    const tag = topics.map((t) => {
      if (t == null) {
        return "null";
      }
      if (Array.isArray(t)) {
        return t.join("|");
      }
      return t;
    }).join("&");
    return { fragment, tag, topics };
  }
  async function hasSub(contract, event) {
    const { subs } = getInternal(contract);
    return subs.get((await getSubInfo(contract, event)).tag) || null;
  }
  async function getSub(contract, operation, event) {
    const provider = getProvider(contract.runner);
    assert(provider, "contract runner does not support subscribing", "UNSUPPORTED_OPERATION", { operation });
    const { fragment, tag, topics } = await getSubInfo(contract, event);
    const { addr, subs } = getInternal(contract);
    let sub = subs.get(tag);
    if (!sub) {
      const address = addr ? addr : contract;
      const filter = { address, topics };
      const listener = (log) => {
        let foundFragment = fragment;
        if (foundFragment == null) {
          try {
            foundFragment = contract.interface.getEvent(log.topics[0]);
          } catch (error) {
          }
        }
        if (foundFragment) {
          const _foundFragment = foundFragment;
          const args = fragment ? contract.interface.decodeEventLog(fragment, log.data, log.topics) : [];
          emit(contract, event, args, (listener2) => {
            return new ContractEventPayload(contract, listener2, event, _foundFragment, log);
          });
        } else {
          emit(contract, event, [], (listener2) => {
            return new ContractUnknownEventPayload(contract, listener2, event, log);
          });
        }
      };
      let starting = [];
      const start = () => {
        if (starting.length) {
          return;
        }
        starting.push(provider.on(filter, listener));
      };
      const stop = async () => {
        if (starting.length == 0) {
          return;
        }
        let started = starting;
        starting = [];
        await Promise.all(started);
        provider.off(filter, listener);
      };
      sub = { tag, listeners: [], start, stop };
      subs.set(tag, sub);
    }
    return sub;
  }
  async function _emit(contract, event, args, payloadFunc) {
    await lastEmit;
    const sub = await hasSub(contract, event);
    if (!sub) {
      return false;
    }
    const count = sub.listeners.length;
    sub.listeners = sub.listeners.filter(({ listener, once }) => {
      const passArgs = Array.from(args);
      if (payloadFunc) {
        passArgs.push(payloadFunc(once ? null : listener));
      }
      try {
        listener.call(contract, ...passArgs);
      } catch (error) {
      }
      return !once;
    });
    if (sub.listeners.length === 0) {
      sub.stop();
      getInternal(contract).subs.delete(sub.tag);
    }
    return count > 0;
  }
  async function emit(contract, event, args, payloadFunc) {
    try {
      await lastEmit;
    } catch (error) {
    }
    const resultPromise = _emit(contract, event, args, payloadFunc);
    lastEmit = resultPromise;
    return await resultPromise;
  }
  function _ContractBase() {
    return BaseContract;
  }
  var BN_010, _filter, PreparedTopicFilter, internal2, internalValues, lastEmit, passProperties2, _a, _BaseContract, BaseContract, Contract;
  var init_contract = __esm({
    "node_modules/ethers/lib.esm/contract/contract.js"() {
      init_abi();
      init_address2();
      init_provider();
      init_utils();
      init_wrappers();
      BN_010 = BigInt(0);
      PreparedTopicFilter = class {
        constructor(contract, fragment, args) {
          __privateAdd(this, _filter);
          __publicField(this, "fragment");
          defineProperties(this, { fragment });
          if (fragment.inputs.length < args.length) {
            throw new Error("too many arguments");
          }
          const runner = getRunner(contract.runner, "resolveName");
          const resolver = canResolve(runner) ? runner : null;
          __privateSet(this, _filter, async function() {
            const resolvedArgs = await Promise.all(fragment.inputs.map((param, index) => {
              const arg = args[index];
              if (arg == null) {
                return null;
              }
              return param.walkAsync(args[index], (type2, value) => {
                if (type2 === "address") {
                  if (Array.isArray(value)) {
                    return Promise.all(value.map((v) => resolveAddress(v, resolver)));
                  }
                  return resolveAddress(value, resolver);
                }
                return value;
              });
            }));
            return contract.interface.encodeFilterTopics(fragment, resolvedArgs);
          }());
        }
        getTopicFilter() {
          return __privateGet(this, _filter);
        }
      };
      _filter = new WeakMap();
      internal2 = Symbol.for("_ethersInternal_contract");
      internalValues = /* @__PURE__ */ new WeakMap();
      lastEmit = Promise.resolve();
      passProperties2 = ["then"];
      _a = internal2;
      _BaseContract = class _BaseContract {
        /**
         *  Creates a new contract connected to %%target%% with the %%abi%% and
         *  optionally connected to a %%runner%% to perform operations on behalf
         *  of.
         */
        constructor(target, abi, runner, _deployTx) {
          /**
           *  The target to connect to.
           *
           *  This can be an address, ENS name or any [[Addressable]], such as
           *  another contract. To get the resovled address, use the ``getAddress``
           *  method.
           */
          __publicField(this, "target");
          /**
           *  The contract Interface.
           */
          __publicField(this, "interface");
          /**
           *  The connected runner. This is generally a [[Provider]] or a
           *  [[Signer]], which dictates what operations are supported.
           *
           *  For example, a **Contract** connected to a [[Provider]] may
           *  only execute read-only operations.
           */
          __publicField(this, "runner");
          /**
           *  All the Events available on this contract.
           */
          __publicField(this, "filters");
          /**
           *  @_ignore:
           */
          __publicField(this, _a);
          /**
           *  The fallback or receive function if any.
           */
          __publicField(this, "fallback");
          assertArgument(typeof target === "string" || isAddressable(target), "invalid value for Contract target", "target", target);
          if (runner == null) {
            runner = null;
          }
          const iface = Interface.from(abi);
          defineProperties(this, { target, runner, interface: iface });
          Object.defineProperty(this, internal2, { value: {} });
          let addrPromise;
          let addr = null;
          let deployTx = null;
          if (_deployTx) {
            const provider = getProvider(runner);
            deployTx = new ContractTransactionResponse(this.interface, provider, _deployTx);
          }
          let subs = /* @__PURE__ */ new Map();
          if (typeof target === "string") {
            if (isHexString(target)) {
              addr = target;
              addrPromise = Promise.resolve(target);
            } else {
              const resolver = getRunner(runner, "resolveName");
              if (!canResolve(resolver)) {
                throw makeError("contract runner does not support name resolution", "UNSUPPORTED_OPERATION", {
                  operation: "resolveName"
                });
              }
              addrPromise = resolver.resolveName(target).then((addr2) => {
                if (addr2 == null) {
                  throw makeError("an ENS name used for a contract target must be correctly configured", "UNCONFIGURED_NAME", {
                    value: target
                  });
                }
                getInternal(this).addr = addr2;
                return addr2;
              });
            }
          } else {
            addrPromise = target.getAddress().then((addr2) => {
              if (addr2 == null) {
                throw new Error("TODO");
              }
              getInternal(this).addr = addr2;
              return addr2;
            });
          }
          setInternal(this, { addrPromise, addr, deployTx, subs });
          const filters = new Proxy({}, {
            get: (target2, prop, receiver) => {
              if (typeof prop === "symbol" || passProperties2.indexOf(prop) >= 0) {
                return Reflect.get(target2, prop, receiver);
              }
              try {
                return this.getEvent(prop);
              } catch (error) {
                if (!isError(error, "INVALID_ARGUMENT") || error.argument !== "key") {
                  throw error;
                }
              }
              return void 0;
            },
            has: (target2, prop) => {
              if (passProperties2.indexOf(prop) >= 0) {
                return Reflect.has(target2, prop);
              }
              return Reflect.has(target2, prop) || this.interface.hasEvent(String(prop));
            }
          });
          defineProperties(this, { filters });
          defineProperties(this, {
            fallback: iface.receive || iface.fallback ? buildWrappedFallback(this) : null
          });
          return new Proxy(this, {
            get: (target2, prop, receiver) => {
              if (typeof prop === "symbol" || prop in target2 || passProperties2.indexOf(prop) >= 0) {
                return Reflect.get(target2, prop, receiver);
              }
              try {
                return target2.getFunction(prop);
              } catch (error) {
                if (!isError(error, "INVALID_ARGUMENT") || error.argument !== "key") {
                  throw error;
                }
              }
              return void 0;
            },
            has: (target2, prop) => {
              if (typeof prop === "symbol" || prop in target2 || passProperties2.indexOf(prop) >= 0) {
                return Reflect.has(target2, prop);
              }
              return target2.interface.hasFunction(prop);
            }
          });
        }
        /**
         *  Return a new Contract instance with the same target and ABI, but
         *  a different %%runner%%.
         */
        connect(runner) {
          return new _BaseContract(this.target, this.interface, runner);
        }
        /**
         *  Return a new Contract instance with the same ABI and runner, but
         *  a different %%target%%.
         */
        attach(target) {
          return new _BaseContract(target, this.interface, this.runner);
        }
        /**
         *  Return the resolved address of this Contract.
         */
        async getAddress() {
          return await getInternal(this).addrPromise;
        }
        /**
         *  Return the deployed bytecode or null if no bytecode is found.
         */
        async getDeployedCode() {
          const provider = getProvider(this.runner);
          assert(provider, "runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "getDeployedCode" });
          const code = await provider.getCode(await this.getAddress());
          if (code === "0x") {
            return null;
          }
          return code;
        }
        /**
         *  Resolve to this Contract once the bytecode has been deployed, or
         *  resolve immediately if already deployed.
         */
        async waitForDeployment() {
          const deployTx = this.deploymentTransaction();
          if (deployTx) {
            await deployTx.wait();
            return this;
          }
          const code = await this.getDeployedCode();
          if (code != null) {
            return this;
          }
          const provider = getProvider(this.runner);
          assert(provider != null, "contract runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "waitForDeployment" });
          return new Promise((resolve, reject) => {
            const checkCode = async () => {
              try {
                const code2 = await this.getDeployedCode();
                if (code2 != null) {
                  return resolve(this);
                }
                provider.once("block", checkCode);
              } catch (error) {
                reject(error);
              }
            };
            checkCode();
          });
        }
        /**
         *  Return the transaction used to deploy this contract.
         *
         *  This is only available if this instance was returned from a
         *  [[ContractFactory]].
         */
        deploymentTransaction() {
          return getInternal(this).deployTx;
        }
        /**
         *  Return the function for a given name. This is useful when a contract
         *  method name conflicts with a JavaScript name such as ``prototype`` or
         *  when using a Contract programatically.
         */
        getFunction(key) {
          if (typeof key !== "string") {
            key = key.format();
          }
          const func = buildWrappedMethod(this, key);
          return func;
        }
        /**
         *  Return the event for a given name. This is useful when a contract
         *  event name conflicts with a JavaScript name such as ``prototype`` or
         *  when using a Contract programatically.
         */
        getEvent(key) {
          if (typeof key !== "string") {
            key = key.format();
          }
          return buildWrappedEvent(this, key);
        }
        /**
         *  @_ignore:
         */
        async queryTransaction(hash2) {
          throw new Error("@TODO");
        }
        /*
            // @TODO: this is a non-backwards compatible change, but will be added
            //        in v7 and in a potential SmartContract class in an upcoming
            //        v6 release
            async getTransactionReceipt(hash: string): Promise<null | ContractTransactionReceipt> {
                const provider = getProvider(this.runner);
                assert(provider, "contract runner does not have a provider",
                    "UNSUPPORTED_OPERATION", { operation: "queryTransaction" });
        
                const receipt = await provider.getTransactionReceipt(hash);
                if (receipt == null) { return null; }
        
                return new ContractTransactionReceipt(this.interface, provider, receipt);
            }
            */
        /**
         *  Provide historic access to event data for %%event%% in the range
         *  %%fromBlock%% (default: ``0``) to %%toBlock%% (default: ``"latest"``)
         *  inclusive.
         */
        async queryFilter(event, fromBlock, toBlock) {
          if (fromBlock == null) {
            fromBlock = 0;
          }
          if (toBlock == null) {
            toBlock = "latest";
          }
          const { addr, addrPromise } = getInternal(this);
          const address = addr ? addr : await addrPromise;
          const { fragment, topics } = await getSubInfo(this, event);
          const filter = { address, topics, fromBlock, toBlock };
          const provider = getProvider(this.runner);
          assert(provider, "contract runner does not have a provider", "UNSUPPORTED_OPERATION", { operation: "queryFilter" });
          return (await provider.getLogs(filter)).map((log) => {
            let foundFragment = fragment;
            if (foundFragment == null) {
              try {
                foundFragment = this.interface.getEvent(log.topics[0]);
              } catch (error) {
              }
            }
            if (foundFragment) {
              try {
                return new EventLog(log, this.interface, foundFragment);
              } catch (error) {
                return new UndecodedEventLog(log, error);
              }
            }
            return new Log(log, provider);
          });
        }
        /**
         *  Add an event %%listener%% for the %%event%%.
         */
        async on(event, listener) {
          const sub = await getSub(this, "on", event);
          sub.listeners.push({ listener, once: false });
          sub.start();
          return this;
        }
        /**
         *  Add an event %%listener%% for the %%event%%, but remove the listener
         *  after it is fired once.
         */
        async once(event, listener) {
          const sub = await getSub(this, "once", event);
          sub.listeners.push({ listener, once: true });
          sub.start();
          return this;
        }
        /**
         *  Emit an %%event%% calling all listeners with %%args%%.
         *
         *  Resolves to ``true`` if any listeners were called.
         */
        async emit(event, ...args) {
          return await emit(this, event, args, null);
        }
        /**
         *  Resolves to the number of listeners of %%event%% or the total number
         *  of listeners if unspecified.
         */
        async listenerCount(event) {
          if (event) {
            const sub = await hasSub(this, event);
            if (!sub) {
              return 0;
            }
            return sub.listeners.length;
          }
          const { subs } = getInternal(this);
          let total = 0;
          for (const { listeners } of subs.values()) {
            total += listeners.length;
          }
          return total;
        }
        /**
         *  Resolves to the listeners subscribed to %%event%% or all listeners
         *  if unspecified.
         */
        async listeners(event) {
          if (event) {
            const sub = await hasSub(this, event);
            if (!sub) {
              return [];
            }
            return sub.listeners.map(({ listener }) => listener);
          }
          const { subs } = getInternal(this);
          let result = [];
          for (const { listeners } of subs.values()) {
            result = result.concat(listeners.map(({ listener }) => listener));
          }
          return result;
        }
        /**
         *  Remove the %%listener%% from the listeners for %%event%% or remove
         *  all listeners if unspecified.
         */
        async off(event, listener) {
          const sub = await hasSub(this, event);
          if (!sub) {
            return this;
          }
          if (listener) {
            const index = sub.listeners.map(({ listener: listener2 }) => listener2).indexOf(listener);
            if (index >= 0) {
              sub.listeners.splice(index, 1);
            }
          }
          if (listener == null || sub.listeners.length === 0) {
            sub.stop();
            getInternal(this).subs.delete(sub.tag);
          }
          return this;
        }
        /**
         *  Remove all the listeners for %%event%% or remove all listeners if
         *  unspecified.
         */
        async removeAllListeners(event) {
          if (event) {
            const sub = await hasSub(this, event);
            if (!sub) {
              return this;
            }
            sub.stop();
            getInternal(this).subs.delete(sub.tag);
          } else {
            const { subs } = getInternal(this);
            for (const { tag, stop } of subs.values()) {
              stop();
              subs.delete(tag);
            }
          }
          return this;
        }
        /**
         *  Alias for [on].
         */
        async addListener(event, listener) {
          return await this.on(event, listener);
        }
        /**
         *  Alias for [off].
         */
        async removeListener(event, listener) {
          return await this.off(event, listener);
        }
        /**
         *  Create a new Class for the %%abi%%.
         */
        static buildClass(abi) {
          class CustomContract extends _BaseContract {
            constructor(address, runner = null) {
              super(address, abi, runner);
            }
          }
          return CustomContract;
        }
        /**
         *  Create a new BaseContract with a specified Interface.
         */
        static from(target, abi, runner) {
          if (runner == null) {
            runner = null;
          }
          const contract = new this(target, abi, runner);
          return contract;
        }
      };
      BaseContract = _BaseContract;
      Contract = class extends _ContractBase() {
      };
    }
  });

  // node_modules/ethers/lib.esm/contract/factory.js
  var ContractFactory;
  var init_factory = __esm({
    "node_modules/ethers/lib.esm/contract/factory.js"() {
      init_abi();
      init_address2();
      init_utils();
      init_contract();
      ContractFactory = class _ContractFactory {
        /**
         *  Create a new **ContractFactory** with %%abi%% and %%bytecode%%,
         *  optionally connected to %%runner%%.
         *
         *  The %%bytecode%% may be the ``bytecode`` property within the
         *  standard Solidity JSON output.
         */
        constructor(abi, bytecode, runner) {
          /**
           *  The Contract Interface.
           */
          __publicField(this, "interface");
          /**
           *  The Contract deployment bytecode. Often called the initcode.
           */
          __publicField(this, "bytecode");
          /**
           *  The ContractRunner to deploy the Contract as.
           */
          __publicField(this, "runner");
          const iface = Interface.from(abi);
          if (bytecode instanceof Uint8Array) {
            bytecode = hexlify(getBytes(bytecode));
          } else {
            if (typeof bytecode === "object") {
              bytecode = bytecode.object;
            }
            if (!bytecode.startsWith("0x")) {
              bytecode = "0x" + bytecode;
            }
            bytecode = hexlify(getBytes(bytecode));
          }
          defineProperties(this, {
            bytecode,
            interface: iface,
            runner: runner || null
          });
        }
        attach(target) {
          return new BaseContract(target, this.interface, this.runner);
        }
        /**
         *  Resolves to the transaction to deploy the contract, passing %%args%%
         *  into the constructor.
         */
        async getDeployTransaction(...args) {
          let overrides = {};
          const fragment = this.interface.deploy;
          if (fragment.inputs.length + 1 === args.length) {
            overrides = await copyOverrides(args.pop());
          }
          if (fragment.inputs.length !== args.length) {
            throw new Error("incorrect number of arguments to constructor");
          }
          const resolvedArgs = await resolveArgs(this.runner, fragment.inputs, args);
          const data = concat([this.bytecode, this.interface.encodeDeploy(resolvedArgs)]);
          return Object.assign({}, overrides, { data });
        }
        /**
         *  Resolves to the Contract deployed by passing %%args%% into the
         *  constructor.
         *
         *  This will resolve to the Contract before it has been deployed to the
         *  network, so the [[BaseContract-waitForDeployment]] should be used before
         *  sending any transactions to it.
         */
        async deploy(...args) {
          const tx = await this.getDeployTransaction(...args);
          assert(this.runner && typeof this.runner.sendTransaction === "function", "factory runner does not support sending transactions", "UNSUPPORTED_OPERATION", {
            operation: "sendTransaction"
          });
          const sentTx = await this.runner.sendTransaction(tx);
          const address = getCreateAddress(sentTx);
          return new BaseContract(address, this.interface, this.runner, sentTx);
        }
        /**
         *  Return a new **ContractFactory** with the same ABI and bytecode,
         *  but connected to %%runner%%.
         */
        connect(runner) {
          return new _ContractFactory(this.interface, this.bytecode, runner);
        }
        /**
         *  Create a new **ContractFactory** from the standard Solidity JSON output.
         */
        static fromSolidity(output2, runner) {
          assertArgument(output2 != null, "bad compiler output", "output", output2);
          if (typeof output2 === "string") {
            output2 = JSON.parse(output2);
          }
          const abi = output2.abi;
          let bytecode = "";
          if (output2.bytecode) {
            bytecode = output2.bytecode;
          } else if (output2.evm && output2.evm.bytecode) {
            bytecode = output2.evm.bytecode;
          }
          return new this(abi, bytecode, runner);
        }
      };
    }
  });

  // node_modules/ethers/lib.esm/contract/index.js
  var init_contract2 = __esm({
    "node_modules/ethers/lib.esm/contract/index.js"() {
      init_contract();
      init_factory();
      init_wrappers();
    }
  });

  // node_modules/ethers/lib.esm/providers/ens-resolver.js
  function getIpfsLink(link) {
    if (link.match(/^ipfs:\/\/ipfs\//i)) {
      link = link.substring(12);
    } else if (link.match(/^ipfs:\/\//i)) {
      link = link.substring(7);
    } else {
      assertArgument(false, "unsupported IPFS format", "link", link);
    }
    return `https://gateway.ipfs.io/ipfs/${link}`;
  }
  var MulticoinProviderPlugin, matcherIpfs, matchers, _supports2544, _resolver, _EnsResolver_instances, fetch_fn, _EnsResolver_static, getResolver_fn, _EnsResolver, EnsResolver;
  var init_ens_resolver = __esm({
    "node_modules/ethers/lib.esm/providers/ens-resolver.js"() {
      init_address2();
      init_constants();
      init_contract2();
      init_hash();
      init_utils();
      MulticoinProviderPlugin = class {
        /**
         *  Creates a new **MulticoinProviderPluing** for %%name%%.
         */
        constructor(name) {
          /**
           *  The name.
           */
          __publicField(this, "name");
          defineProperties(this, { name });
        }
        connect(proivder) {
          return this;
        }
        /**
         *  Returns ``true`` if %%coinType%% is supported by this plugin.
         */
        supportsCoinType(coinType) {
          return false;
        }
        /**
         *  Resolves to the encoded %%address%% for %%coinType%%.
         */
        async encodeAddress(coinType, address) {
          throw new Error("unsupported coin");
        }
        /**
         *  Resolves to the decoded %%data%% for %%coinType%%.
         */
        async decodeAddress(coinType, data) {
          throw new Error("unsupported coin");
        }
      };
      matcherIpfs = new RegExp("^(ipfs)://(.*)$", "i");
      matchers = [
        new RegExp("^(https)://(.*)$", "i"),
        new RegExp("^(data):(.*)$", "i"),
        matcherIpfs,
        new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i")
      ];
      _EnsResolver = class _EnsResolver {
        constructor(provider, address, name) {
          __privateAdd(this, _EnsResolver_instances);
          /**
           *  The connected provider.
           */
          __publicField(this, "provider");
          /**
           *  The address of the resolver.
           */
          __publicField(this, "address");
          /**
           *  The name this resolver was resolved against.
           */
          __publicField(this, "name");
          // For EIP-2544 names, the ancestor that provided the resolver
          __privateAdd(this, _supports2544);
          __privateAdd(this, _resolver);
          defineProperties(this, { provider, address, name });
          __privateSet(this, _supports2544, null);
          __privateSet(this, _resolver, new Contract(address, [
            "function supportsInterface(bytes4) view returns (bool)",
            "function resolve(bytes, bytes) view returns (bytes)",
            "function addr(bytes32) view returns (address)",
            "function addr(bytes32, uint) view returns (bytes)",
            "function text(bytes32, string) view returns (string)",
            "function contenthash(bytes32) view returns (bytes)"
          ], provider));
        }
        /**
         *  Resolves to true if the resolver supports wildcard resolution.
         */
        async supportsWildcard() {
          if (__privateGet(this, _supports2544) == null) {
            __privateSet(this, _supports2544, (async () => {
              try {
                return await __privateGet(this, _resolver).supportsInterface("0x9061b923");
              } catch (error) {
                if (isError(error, "CALL_EXCEPTION")) {
                  return false;
                }
                __privateSet(this, _supports2544, null);
                throw error;
              }
            })());
          }
          return await __privateGet(this, _supports2544);
        }
        /**
         *  Resolves to the address for %%coinType%% or null if the
         *  provided %%coinType%% has not been configured.
         */
        async getAddress(coinType) {
          if (coinType == null) {
            coinType = 60;
          }
          if (coinType === 60) {
            try {
              const result = await __privateMethod(this, _EnsResolver_instances, fetch_fn).call(this, "addr(bytes32)");
              if (result == null || result === ZeroAddress) {
                return null;
              }
              return result;
            } catch (error) {
              if (isError(error, "CALL_EXCEPTION")) {
                return null;
              }
              throw error;
            }
          }
          if (coinType >= 0 && coinType < 2147483648) {
            let ethCoinType = coinType + 2147483648;
            const data2 = await __privateMethod(this, _EnsResolver_instances, fetch_fn).call(this, "addr(bytes32,uint)", [ethCoinType]);
            if (isHexString(data2, 20)) {
              return getAddress(data2);
            }
          }
          let coinPlugin = null;
          for (const plugin of this.provider.plugins) {
            if (!(plugin instanceof MulticoinProviderPlugin)) {
              continue;
            }
            if (plugin.supportsCoinType(coinType)) {
              coinPlugin = plugin;
              break;
            }
          }
          if (coinPlugin == null) {
            return null;
          }
          const data = await __privateMethod(this, _EnsResolver_instances, fetch_fn).call(this, "addr(bytes32,uint)", [coinType]);
          if (data == null || data === "0x") {
            return null;
          }
          const address = await coinPlugin.decodeAddress(coinType, data);
          if (address != null) {
            return address;
          }
          assert(false, `invalid coin data`, "UNSUPPORTED_OPERATION", {
            operation: `getAddress(${coinType})`,
            info: { coinType, data }
          });
        }
        /**
         *  Resolves to the EIP-634 text record for %%key%%, or ``null``
         *  if unconfigured.
         */
        async getText(key) {
          const data = await __privateMethod(this, _EnsResolver_instances, fetch_fn).call(this, "text(bytes32,string)", [key]);
          if (data == null || data === "0x") {
            return null;
          }
          return data;
        }
        /**
         *  Rsolves to the content-hash or ``null`` if unconfigured.
         */
        async getContentHash() {
          const data = await __privateMethod(this, _EnsResolver_instances, fetch_fn).call(this, "contenthash(bytes32)");
          if (data == null || data === "0x") {
            return null;
          }
          const ipfs = data.match(/^0x(e3010170|e5010172)(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
          if (ipfs) {
            const scheme = ipfs[1] === "e3010170" ? "ipfs" : "ipns";
            const length = parseInt(ipfs[4], 16);
            if (ipfs[5].length === length * 2) {
              return `${scheme}://${encodeBase58("0x" + ipfs[2])}`;
            }
          }
          const swarm = data.match(/^0xe40101fa011b20([0-9a-f]*)$/);
          if (swarm && swarm[1].length === 64) {
            return `bzz://${swarm[1]}`;
          }
          assert(false, `invalid or unsupported content hash data`, "UNSUPPORTED_OPERATION", {
            operation: "getContentHash()",
            info: { data }
          });
        }
        /**
         *  Resolves to the avatar url or ``null`` if the avatar is either
         *  unconfigured or incorrectly configured (e.g. references an NFT
         *  not owned by the address).
         *
         *  If diagnosing issues with configurations, the [[_getAvatar]]
         *  method may be useful.
         */
        async getAvatar() {
          const avatar = await this._getAvatar();
          return avatar.url;
        }
        /**
         *  When resolving an avatar, there are many steps involved, such
         *  fetching metadata and possibly validating ownership of an
         *  NFT.
         *
         *  This method can be used to examine each step and the value it
         *  was working from.
         */
        async _getAvatar() {
          const linkage = [{ type: "name", value: this.name }];
          try {
            const avatar = await this.getText("avatar");
            if (avatar == null) {
              linkage.push({ type: "!avatar", value: "" });
              return { url: null, linkage };
            }
            linkage.push({ type: "avatar", value: avatar });
            for (let i = 0; i < matchers.length; i++) {
              const match = avatar.match(matchers[i]);
              if (match == null) {
                continue;
              }
              const scheme = match[1].toLowerCase();
              switch (scheme) {
                case "https":
                case "data":
                  linkage.push({ type: "url", value: avatar });
                  return { linkage, url: avatar };
                case "ipfs": {
                  const url = getIpfsLink(avatar);
                  linkage.push({ type: "ipfs", value: avatar });
                  linkage.push({ type: "url", value: url });
                  return { linkage, url };
                }
                case "erc721":
                case "erc1155": {
                  const selector = scheme === "erc721" ? "tokenURI(uint256)" : "uri(uint256)";
                  linkage.push({ type: scheme, value: avatar });
                  const owner = await this.getAddress();
                  if (owner == null) {
                    linkage.push({ type: "!owner", value: "" });
                    return { url: null, linkage };
                  }
                  const comps = (match[2] || "").split("/");
                  if (comps.length !== 2) {
                    linkage.push({ type: `!${scheme}caip`, value: match[2] || "" });
                    return { url: null, linkage };
                  }
                  const tokenId = comps[1];
                  const contract = new Contract(comps[0], [
                    // ERC-721
                    "function tokenURI(uint) view returns (string)",
                    "function ownerOf(uint) view returns (address)",
                    // ERC-1155
                    "function uri(uint) view returns (string)",
                    "function balanceOf(address, uint256) view returns (uint)"
                  ], this.provider);
                  if (scheme === "erc721") {
                    const tokenOwner = await contract.ownerOf(tokenId);
                    if (owner !== tokenOwner) {
                      linkage.push({ type: "!owner", value: tokenOwner });
                      return { url: null, linkage };
                    }
                    linkage.push({ type: "owner", value: tokenOwner });
                  } else if (scheme === "erc1155") {
                    const balance = await contract.balanceOf(owner, tokenId);
                    if (!balance) {
                      linkage.push({ type: "!balance", value: "0" });
                      return { url: null, linkage };
                    }
                    linkage.push({ type: "balance", value: balance.toString() });
                  }
                  let metadataUrl = await contract[selector](tokenId);
                  if (metadataUrl == null || metadataUrl === "0x") {
                    linkage.push({ type: "!metadata-url", value: "" });
                    return { url: null, linkage };
                  }
                  linkage.push({ type: "metadata-url-base", value: metadataUrl });
                  if (scheme === "erc1155") {
                    metadataUrl = metadataUrl.replace("{id}", toBeHex(tokenId, 32).substring(2));
                    linkage.push({ type: "metadata-url-expanded", value: metadataUrl });
                  }
                  if (metadataUrl.match(/^ipfs:/i)) {
                    metadataUrl = getIpfsLink(metadataUrl);
                  }
                  linkage.push({ type: "metadata-url", value: metadataUrl });
                  let metadata = {};
                  const response = await new FetchRequest(metadataUrl).send();
                  response.assertOk();
                  try {
                    metadata = response.bodyJson;
                  } catch (error) {
                    try {
                      linkage.push({ type: "!metadata", value: response.bodyText });
                    } catch (error2) {
                      const bytes2 = response.body;
                      if (bytes2) {
                        linkage.push({ type: "!metadata", value: hexlify(bytes2) });
                      }
                      return { url: null, linkage };
                    }
                    return { url: null, linkage };
                  }
                  if (!metadata) {
                    linkage.push({ type: "!metadata", value: "" });
                    return { url: null, linkage };
                  }
                  linkage.push({ type: "metadata", value: JSON.stringify(metadata) });
                  let imageUrl = metadata.image;
                  if (typeof imageUrl !== "string") {
                    linkage.push({ type: "!imageUrl", value: "" });
                    return { url: null, linkage };
                  }
                  if (imageUrl.match(/^(https:\/\/|data:)/i)) {
                  } else {
                    const ipfs = imageUrl.match(matcherIpfs);
                    if (ipfs == null) {
                      linkage.push({ type: "!imageUrl-ipfs", value: imageUrl });
                      return { url: null, linkage };
                    }
                    linkage.push({ type: "imageUrl-ipfs", value: imageUrl });
                    imageUrl = getIpfsLink(imageUrl);
                  }
                  linkage.push({ type: "url", value: imageUrl });
                  return { linkage, url: imageUrl };
                }
              }
            }
          } catch (error) {
          }
          return { linkage, url: null };
        }
        static async getEnsAddress(provider) {
          const network = await provider.getNetwork();
          const ensPlugin = network.getPlugin("org.ethers.plugins.network.Ens");
          assert(ensPlugin, "network does not support ENS", "UNSUPPORTED_OPERATION", {
            operation: "getEnsAddress",
            info: { network }
          });
          return ensPlugin.address;
        }
        /**
         *  Resolve to the ENS resolver for %%name%% using %%provider%% or
         *  ``null`` if unconfigured.
         */
        static async fromName(provider, name) {
          var _a2;
          let currentName = name;
          while (true) {
            if (currentName === "" || currentName === ".") {
              return null;
            }
            if (name !== "eth" && currentName === "eth") {
              return null;
            }
            const addr = await __privateMethod(_a2 = _EnsResolver, _EnsResolver_static, getResolver_fn).call(_a2, provider, currentName);
            if (addr != null) {
              const resolver = new _EnsResolver(provider, addr, name);
              if (currentName !== name && !await resolver.supportsWildcard()) {
                return null;
              }
              return resolver;
            }
            currentName = currentName.split(".").slice(1).join(".");
          }
        }
      };
      _supports2544 = new WeakMap();
      _resolver = new WeakMap();
      _EnsResolver_instances = new WeakSet();
      fetch_fn = async function(funcName, params) {
        params = (params || []).slice();
        const iface = __privateGet(this, _resolver).interface;
        params.unshift(namehash(this.name));
        let fragment = null;
        if (await this.supportsWildcard()) {
          fragment = iface.getFunction(funcName);
          assert(fragment, "missing fragment", "UNKNOWN_ERROR", {
            info: { funcName }
          });
          params = [
            dnsEncode(this.name, 255),
            iface.encodeFunctionData(fragment, params)
          ];
          funcName = "resolve(bytes,bytes)";
        }
        params.push({
          enableCcipRead: true
        });
        try {
          const result = await __privateGet(this, _resolver)[funcName](...params);
          if (fragment) {
            return iface.decodeFunctionResult(fragment, result)[0];
          }
          return result;
        } catch (error) {
          if (!isError(error, "CALL_EXCEPTION")) {
            throw error;
          }
        }
        return null;
      };
      _EnsResolver_static = new WeakSet();
      getResolver_fn = async function(provider, name) {
        const ensAddr = await _EnsResolver.getEnsAddress(provider);
        try {
          const contract = new Contract(ensAddr, [
            "function resolver(bytes32) view returns (address)"
          ], provider);
          const addr = await contract.resolver(namehash(name), {
            enableCcipRead: true
          });
          if (addr === ZeroAddress) {
            return null;
          }
          return addr;
        } catch (error) {
          throw error;
        }
        return null;
      };
      __privateAdd(_EnsResolver, _EnsResolver_static);
      EnsResolver = _EnsResolver;
    }
  });

  // node_modules/ethers/lib.esm/providers/format.js
  function allowNull(format, nullValue) {
    return function(value) {
      if (value == null) {
        return nullValue;
      }
      return format(value);
    };
  }
  function arrayOf(format, allowNull2) {
    return (array2) => {
      if (allowNull2 && array2 == null) {
        return null;
      }
      if (!Array.isArray(array2)) {
        throw new Error("not an array");
      }
      return array2.map((i) => format(i));
    };
  }
  function object(format, altNames) {
    return (value) => {
      const result = {};
      for (const key in format) {
        let srcKey = key;
        if (altNames && key in altNames && !(srcKey in value)) {
          for (const altKey of altNames[key]) {
            if (altKey in value) {
              srcKey = altKey;
              break;
            }
          }
        }
        try {
          const nv = format[key](value[srcKey]);
          if (nv !== void 0) {
            result[key] = nv;
          }
        } catch (error) {
          const message = error instanceof Error ? error.message : "not-an-error";
          assert(false, `invalid value for value.${key} (${message})`, "BAD_DATA", { value });
        }
      }
      return result;
    };
  }
  function formatBoolean(value) {
    switch (value) {
      case true:
      case "true":
        return true;
      case false:
      case "false":
        return false;
    }
    assertArgument(false, `invalid boolean; ${JSON.stringify(value)}`, "value", value);
  }
  function formatData(value) {
    assertArgument(isHexString(value, true), "invalid data", "value", value);
    return value;
  }
  function formatHash(value) {
    assertArgument(isHexString(value, 32), "invalid hash", "value", value);
    return value;
  }
  function formatLog(value) {
    return _formatLog(value);
  }
  function formatBlock(value) {
    const result = _formatBlock(value);
    result.transactions = value.transactions.map((tx) => {
      if (typeof tx === "string") {
        return tx;
      }
      return formatTransactionResponse(tx);
    });
    return result;
  }
  function formatReceiptLog(value) {
    return _formatReceiptLog(value);
  }
  function formatTransactionReceipt(value) {
    return _formatTransactionReceipt(value);
  }
  function formatTransactionResponse(value) {
    if (value.to && getBigInt(value.to) === BN_011) {
      value.to = "0x0000000000000000000000000000000000000000";
    }
    const result = object({
      hash: formatHash,
      // Some nodes do not return this, usually test nodes (like Ganache)
      index: allowNull(getNumber2, void 0),
      type: (value2) => {
        if (value2 === "0x" || value2 == null) {
          return 0;
        }
        return getNumber2(value2);
      },
      accessList: allowNull(accessListify, null),
      blobVersionedHashes: allowNull(arrayOf(formatHash, true), null),
      authorizationList: allowNull(arrayOf((v) => {
        return {
          address: getAddress(v.address),
          chainId: getBigInt(v.chainId),
          nonce: getBigInt(v.nonce),
          signature: Signature.from(v.signature ? v.signature : v)
        };
      }, false), null),
      blockHash: allowNull(formatHash, null),
      blockNumber: allowNull(getNumber2, null),
      transactionIndex: allowNull(getNumber2, null),
      from: getAddress,
      // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas) must be set
      gasPrice: allowNull(getBigInt),
      maxPriorityFeePerGas: allowNull(getBigInt),
      maxFeePerGas: allowNull(getBigInt),
      maxFeePerBlobGas: allowNull(getBigInt, null),
      gasLimit: getBigInt,
      to: allowNull(getAddress, null),
      value: getBigInt,
      nonce: getNumber2,
      data: formatData,
      creates: allowNull(getAddress, null),
      chainId: allowNull(getBigInt, null)
    }, {
      data: ["input"],
      gasLimit: ["gas"],
      index: ["transactionIndex"]
    })(value);
    if (result.to == null && result.creates == null) {
      result.creates = getCreateAddress(result);
    }
    if ((value.type === 1 || value.type === 2) && value.accessList == null) {
      result.accessList = [];
    }
    if (value.signature) {
      result.signature = Signature.from(value.signature);
    } else {
      result.signature = Signature.from(value);
    }
    if (result.chainId == null) {
      const chainId = result.signature.legacyChainId;
      if (chainId != null) {
        result.chainId = chainId;
      }
    }
    if (result.blockHash && getBigInt(result.blockHash) === BN_011) {
      result.blockHash = null;
    }
    return result;
  }
  var BN_011, _formatLog, _formatBlock, _formatReceiptLog, _formatTransactionReceipt;
  var init_format = __esm({
    "node_modules/ethers/lib.esm/providers/format.js"() {
      init_address2();
      init_crypto2();
      init_transaction2();
      init_utils();
      BN_011 = BigInt(0);
      _formatLog = object({
        address: getAddress,
        blockHash: formatHash,
        blockNumber: getNumber2,
        data: formatData,
        index: getNumber2,
        removed: allowNull(formatBoolean, false),
        topics: arrayOf(formatHash),
        transactionHash: formatHash,
        transactionIndex: getNumber2
      }, {
        index: ["logIndex"]
      });
      _formatBlock = object({
        hash: allowNull(formatHash),
        parentHash: formatHash,
        parentBeaconBlockRoot: allowNull(formatHash, null),
        number: getNumber2,
        timestamp: getNumber2,
        nonce: allowNull(formatData),
        difficulty: getBigInt,
        gasLimit: getBigInt,
        gasUsed: getBigInt,
        stateRoot: allowNull(formatHash, null),
        receiptsRoot: allowNull(formatHash, null),
        blobGasUsed: allowNull(getBigInt, null),
        excessBlobGas: allowNull(getBigInt, null),
        miner: allowNull(getAddress),
        prevRandao: allowNull(formatHash, null),
        extraData: formatData,
        baseFeePerGas: allowNull(getBigInt)
      }, {
        prevRandao: ["mixHash"]
      });
      _formatReceiptLog = object({
        transactionIndex: getNumber2,
        blockNumber: getNumber2,
        transactionHash: formatHash,
        address: getAddress,
        topics: arrayOf(formatHash),
        data: formatData,
        index: getNumber2,
        blockHash: formatHash
      }, {
        index: ["logIndex"]
      });
      _formatTransactionReceipt = object({
        to: allowNull(getAddress, null),
        from: allowNull(getAddress, null),
        contractAddress: allowNull(getAddress, null),
        // should be allowNull(hash), but broken-EIP-658 support is handled in receipt
        index: getNumber2,
        root: allowNull(hexlify),
        gasUsed: getBigInt,
        blobGasUsed: allowNull(getBigInt, null),
        logsBloom: allowNull(formatData),
        blockHash: formatHash,
        hash: formatHash,
        logs: arrayOf(formatReceiptLog),
        blockNumber: getNumber2,
        //confirmations: allowNull(getNumber, null),
        cumulativeGasUsed: getBigInt,
        effectiveGasPrice: allowNull(getBigInt),
        blobGasPrice: allowNull(getBigInt, null),
        status: allowNull(getNumber2),
        type: allowNull(getNumber2, 0)
      }, {
        effectiveGasPrice: ["gasPrice"],
        hash: ["transactionHash"],
        index: ["transactionIndex"]
      });
    }
  });

  // node_modules/ethers/lib.esm/providers/plugins-network.js
  var EnsAddress, NetworkPlugin, GasCostPlugin, EnsPlugin, _feeDataFunc, _FeeDataNetworkPlugin, FeeDataNetworkPlugin, _url2, _processFunc, FetchUrlFeeDataNetworkPlugin;
  var init_plugins_network = __esm({
    "node_modules/ethers/lib.esm/providers/plugins-network.js"() {
      init_properties();
      init_utils();
      EnsAddress = "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
      NetworkPlugin = class _NetworkPlugin {
        /**
         *  Creates a new **NetworkPlugin**.
         */
        constructor(name) {
          /**
           *  The name of the plugin.
           *
           *  It is recommended to use reverse-domain-notation, which permits
           *  unique names with a known authority as well as hierarchal entries.
           */
          __publicField(this, "name");
          defineProperties(this, { name });
        }
        /**
         *  Creates a copy of this plugin.
         */
        clone() {
          return new _NetworkPlugin(this.name);
        }
      };
      GasCostPlugin = class _GasCostPlugin extends NetworkPlugin {
        /**
         *  Creates a new GasCostPlugin from %%effectiveBlock%% until the
         *  latest block or another GasCostPlugin supercedes that block number,
         *  with the associated %%costs%%.
         */
        constructor(effectiveBlock, costs) {
          if (effectiveBlock == null) {
            effectiveBlock = 0;
          }
          super(`org.ethers.network.plugins.GasCost#${effectiveBlock || 0}`);
          /**
           *  The block number to treat these values as valid from.
           *
           *  This allows a hardfork to have updated values included as well as
           *  mulutiple hardforks to be supported.
           */
          __publicField(this, "effectiveBlock");
          /**
           *  The transactions base fee.
           */
          __publicField(this, "txBase");
          /**
           *  The fee for creating a new account.
           */
          __publicField(this, "txCreate");
          /**
           *  The fee per zero-byte in the data.
           */
          __publicField(this, "txDataZero");
          /**
           *  The fee per non-zero-byte in the data.
           */
          __publicField(this, "txDataNonzero");
          /**
           *  The fee per storage key in the [[link-eip-2930]] access list.
           */
          __publicField(this, "txAccessListStorageKey");
          /**
           *  The fee per address in the [[link-eip-2930]] access list.
           */
          __publicField(this, "txAccessListAddress");
          const props = { effectiveBlock };
          function set(name, nullish) {
            let value = (costs || {})[name];
            if (value == null) {
              value = nullish;
            }
            assertArgument(typeof value === "number", `invalud value for ${name}`, "costs", costs);
            props[name] = value;
          }
          set("txBase", 21e3);
          set("txCreate", 32e3);
          set("txDataZero", 4);
          set("txDataNonzero", 16);
          set("txAccessListStorageKey", 1900);
          set("txAccessListAddress", 2400);
          defineProperties(this, props);
        }
        clone() {
          return new _GasCostPlugin(this.effectiveBlock, this);
        }
      };
      EnsPlugin = class _EnsPlugin extends NetworkPlugin {
        /**
         *  Creates a new **EnsPlugin** connected to %%address%% on the
         *  %%targetNetwork%%. The default ENS address and mainnet is used
         *  if unspecified.
         */
        constructor(address, targetNetwork) {
          super("org.ethers.plugins.network.Ens");
          /**
           *  The ENS Registrty Contract address.
           */
          __publicField(this, "address");
          /**
           *  The chain ID that the ENS contract lives on.
           */
          __publicField(this, "targetNetwork");
          defineProperties(this, {
            address: address || EnsAddress,
            targetNetwork: targetNetwork == null ? 1 : targetNetwork
          });
        }
        clone() {
          return new _EnsPlugin(this.address, this.targetNetwork);
        }
      };
      _FeeDataNetworkPlugin = class _FeeDataNetworkPlugin extends NetworkPlugin {
        /**
         *  Creates a new **FeeDataNetworkPlugin**.
         */
        constructor(feeDataFunc) {
          super("org.ethers.plugins.network.FeeData");
          __privateAdd(this, _feeDataFunc);
          __privateSet(this, _feeDataFunc, feeDataFunc);
        }
        /**
         *  The fee data function provided to the constructor.
         */
        get feeDataFunc() {
          return __privateGet(this, _feeDataFunc);
        }
        /**
         *  Resolves to the fee data.
         */
        async getFeeData(provider) {
          return await __privateGet(this, _feeDataFunc).call(this, provider);
        }
        clone() {
          return new _FeeDataNetworkPlugin(__privateGet(this, _feeDataFunc));
        }
      };
      _feeDataFunc = new WeakMap();
      FeeDataNetworkPlugin = _FeeDataNetworkPlugin;
      FetchUrlFeeDataNetworkPlugin = class extends NetworkPlugin {
        /**
         *  Creates a new **FetchUrlFeeDataNetworkPlugin** which will
         *  be used when computing the fee data for the network.
         */
        constructor(url, processFunc) {
          super("org.ethers.plugins.network.FetchUrlFeeDataPlugin");
          __privateAdd(this, _url2);
          __privateAdd(this, _processFunc);
          __privateSet(this, _url2, url);
          __privateSet(this, _processFunc, processFunc);
        }
        /**
         *  The URL to initialize the FetchRequest with in %%processFunc%%.
         */
        get url() {
          return __privateGet(this, _url2);
        }
        /**
         *  The callback to use when computing the FeeData.
         */
        get processFunc() {
          return __privateGet(this, _processFunc);
        }
        // We are immutable, so we can serve as our own clone
        clone() {
          return this;
        }
      };
      _url2 = new WeakMap();
      _processFunc = new WeakMap();
    }
  });

  // node_modules/ethers/lib.esm/providers/network.js
  function parseUnits2(_value2, decimals) {
    const value = String(_value2);
    if (!value.match(/^[0-9.]+$/)) {
      throw new Error(`invalid gwei value: ${_value2}`);
    }
    const comps = value.split(".");
    if (comps.length === 1) {
      comps.push("");
    }
    if (comps.length !== 2) {
      throw new Error(`invalid gwei value: ${_value2}`);
    }
    while (comps[1].length < decimals) {
      comps[1] += "0";
    }
    if (comps[1].length > 9) {
      let frac = BigInt(comps[1].substring(0, 9));
      if (!comps[1].substring(9).match(/^0+$/)) {
        frac++;
      }
      comps[1] = frac.toString();
    }
    return BigInt(comps[0] + comps[1]);
  }
  function getGasStationPlugin(url) {
    return new FetchUrlFeeDataNetworkPlugin(url, async (fetchFeeData, provider, request) => {
      request.setHeader("User-Agent", "ethers");
      let response;
      try {
        const [_response, _feeData] = await Promise.all([
          request.send(),
          fetchFeeData()
        ]);
        response = _response;
        const payload = response.bodyJson.standard;
        const feeData = {
          gasPrice: _feeData.gasPrice,
          maxFeePerGas: parseUnits2(payload.maxFee, 9),
          maxPriorityFeePerGas: parseUnits2(payload.maxPriorityFee, 9)
        };
        return feeData;
      } catch (error) {
        assert(false, `error encountered with polygon gas station (${JSON.stringify(request.url)})`, "SERVER_ERROR", { request, response, error });
      }
    });
  }
  function injectCommonNetworks() {
    if (injected) {
      return;
    }
    injected = true;
    function registerEth(name, chainId, options) {
      const func = function() {
        const network = new Network(name, chainId);
        if (options.ensNetwork != null) {
          network.attachPlugin(new EnsPlugin(null, options.ensNetwork));
        }
        network.attachPlugin(new GasCostPlugin());
        (options.plugins || []).forEach((plugin) => {
          network.attachPlugin(plugin);
        });
        return network;
      };
      Network.register(name, func);
      Network.register(chainId, func);
      if (options.altNames) {
        options.altNames.forEach((name2) => {
          Network.register(name2, func);
        });
      }
    }
    registerEth("mainnet", 1, { ensNetwork: 1, altNames: ["homestead"] });
    registerEth("ropsten", 3, { ensNetwork: 3 });
    registerEth("rinkeby", 4, { ensNetwork: 4 });
    registerEth("goerli", 5, { ensNetwork: 5 });
    registerEth("kovan", 42, { ensNetwork: 42 });
    registerEth("sepolia", 11155111, { ensNetwork: 11155111 });
    registerEth("holesky", 17e3, { ensNetwork: 17e3 });
    registerEth("classic", 61, {});
    registerEth("classicKotti", 6, {});
    registerEth("arbitrum", 42161, {
      ensNetwork: 1
    });
    registerEth("arbitrum-goerli", 421613, {});
    registerEth("arbitrum-sepolia", 421614, {});
    registerEth("base", 8453, { ensNetwork: 1 });
    registerEth("base-goerli", 84531, {});
    registerEth("base-sepolia", 84532, {});
    registerEth("bnb", 56, { ensNetwork: 1 });
    registerEth("bnbt", 97, {});
    registerEth("linea", 59144, { ensNetwork: 1 });
    registerEth("linea-goerli", 59140, {});
    registerEth("linea-sepolia", 59141, {});
    registerEth("matic", 137, {
      ensNetwork: 1,
      plugins: [
        getGasStationPlugin("https://gasstation.polygon.technology/v2")
      ]
    });
    registerEth("matic-amoy", 80002, {});
    registerEth("matic-mumbai", 80001, {
      altNames: ["maticMumbai", "maticmum"],
      plugins: [
        getGasStationPlugin("https://gasstation-testnet.polygon.technology/v2")
      ]
    });
    registerEth("optimism", 10, {
      ensNetwork: 1,
      plugins: []
    });
    registerEth("optimism-goerli", 420, {});
    registerEth("optimism-sepolia", 11155420, {});
    registerEth("xdai", 100, { ensNetwork: 1 });
  }
  var Networks, _name, _chainId2, _plugins, _Network, Network, injected;
  var init_network = __esm({
    "node_modules/ethers/lib.esm/providers/network.js"() {
      init_transaction2();
      init_utils();
      init_plugins_network();
      Networks = /* @__PURE__ */ new Map();
      _Network = class _Network {
        /**
         *  Creates a new **Network** for %%name%% and %%chainId%%.
         */
        constructor(name, chainId) {
          __privateAdd(this, _name);
          __privateAdd(this, _chainId2);
          __privateAdd(this, _plugins);
          __privateSet(this, _name, name);
          __privateSet(this, _chainId2, getBigInt(chainId));
          __privateSet(this, _plugins, /* @__PURE__ */ new Map());
        }
        /**
         *  Returns a JSON-compatible representation of a Network.
         */
        toJSON() {
          return { name: this.name, chainId: String(this.chainId) };
        }
        /**
         *  The network common name.
         *
         *  This is the canonical name, as networks migh have multiple
         *  names.
         */
        get name() {
          return __privateGet(this, _name);
        }
        set name(value) {
          __privateSet(this, _name, value);
        }
        /**
         *  The network chain ID.
         */
        get chainId() {
          return __privateGet(this, _chainId2);
        }
        set chainId(value) {
          __privateSet(this, _chainId2, getBigInt(value, "chainId"));
        }
        /**
         *  Returns true if %%other%% matches this network. Any chain ID
         *  must match, and if no chain ID is present, the name must match.
         *
         *  This method does not currently check for additional properties,
         *  such as ENS address or plug-in compatibility.
         */
        matches(other) {
          if (other == null) {
            return false;
          }
          if (typeof other === "string") {
            try {
              return this.chainId === getBigInt(other);
            } catch (error) {
            }
            return this.name === other;
          }
          if (typeof other === "number" || typeof other === "bigint") {
            try {
              return this.chainId === getBigInt(other);
            } catch (error) {
            }
            return false;
          }
          if (typeof other === "object") {
            if (other.chainId != null) {
              try {
                return this.chainId === getBigInt(other.chainId);
              } catch (error) {
              }
              return false;
            }
            if (other.name != null) {
              return this.name === other.name;
            }
            return false;
          }
          return false;
        }
        /**
         *  Returns the list of plugins currently attached to this Network.
         */
        get plugins() {
          return Array.from(__privateGet(this, _plugins).values());
        }
        /**
         *  Attach a new %%plugin%% to this Network. The network name
         *  must be unique, excluding any fragment.
         */
        attachPlugin(plugin) {
          if (__privateGet(this, _plugins).get(plugin.name)) {
            throw new Error(`cannot replace existing plugin: ${plugin.name} `);
          }
          __privateGet(this, _plugins).set(plugin.name, plugin.clone());
          return this;
        }
        /**
         *  Return the plugin, if any, matching %%name%% exactly. Plugins
         *  with fragments will not be returned unless %%name%% includes
         *  a fragment.
         */
        getPlugin(name) {
          return __privateGet(this, _plugins).get(name) || null;
        }
        /**
         *  Gets a list of all plugins that match %%name%%, with otr without
         *  a fragment.
         */
        getPlugins(basename) {
          return this.plugins.filter((p) => p.name.split("#")[0] === basename);
        }
        /**
         *  Create a copy of this Network.
         */
        clone() {
          const clone = new _Network(this.name, this.chainId);
          this.plugins.forEach((plugin) => {
            clone.attachPlugin(plugin.clone());
          });
          return clone;
        }
        /**
         *  Compute the intrinsic gas required for a transaction.
         *
         *  A GasCostPlugin can be attached to override the default
         *  values.
         */
        computeIntrinsicGas(tx) {
          const costs = this.getPlugin("org.ethers.plugins.network.GasCost") || new GasCostPlugin();
          let gas = costs.txBase;
          if (tx.to == null) {
            gas += costs.txCreate;
          }
          if (tx.data) {
            for (let i = 2; i < tx.data.length; i += 2) {
              if (tx.data.substring(i, i + 2) === "00") {
                gas += costs.txDataZero;
              } else {
                gas += costs.txDataNonzero;
              }
            }
          }
          if (tx.accessList) {
            const accessList = accessListify(tx.accessList);
            for (const addr in accessList) {
              gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;
            }
          }
          return gas;
        }
        /**
         *  Returns a new Network for the %%network%% name or chainId.
         */
        static from(network) {
          injectCommonNetworks();
          if (network == null) {
            return _Network.from("mainnet");
          }
          if (typeof network === "number") {
            network = BigInt(network);
          }
          if (typeof network === "string" || typeof network === "bigint") {
            const networkFunc = Networks.get(network);
            if (networkFunc) {
              return networkFunc();
            }
            if (typeof network === "bigint") {
              return new _Network("unknown", network);
            }
            assertArgument(false, "unknown network", "network", network);
          }
          if (typeof network.clone === "function") {
            const clone = network.clone();
            return clone;
          }
          if (typeof network === "object") {
            assertArgument(typeof network.name === "string" && typeof network.chainId === "number", "invalid network object name or chainId", "network", network);
            const custom = new _Network(network.name, network.chainId);
            if (network.ensAddress || network.ensNetwork != null) {
              custom.attachPlugin(new EnsPlugin(network.ensAddress, network.ensNetwork));
            }
            return custom;
          }
          assertArgument(false, "invalid network", "network", network);
        }
        /**
         *  Register %%nameOrChainId%% with a function which returns
         *  an instance of a Network representing that chain.
         */
        static register(nameOrChainId, networkFunc) {
          if (typeof nameOrChainId === "number") {
            nameOrChainId = BigInt(nameOrChainId);
          }
          const existing = Networks.get(nameOrChainId);
          if (existing) {
            assertArgument(false, `conflicting network for ${JSON.stringify(existing.name)}`, "nameOrChainId", nameOrChainId);
          }
          Networks.set(nameOrChainId, networkFunc);
        }
      };
      _name = new WeakMap();
      _chainId2 = new WeakMap();
      _plugins = new WeakMap();
      Network = _Network;
      injected = false;
    }
  });

  // node_modules/ethers/lib.esm/providers/subscriber-polling.js
  function copy(obj) {
    return JSON.parse(JSON.stringify(obj));
  }
  var _provider, _poller, _interval, _blockNumber, _PollingBlockSubscriber_instances, poll_fn, PollingBlockSubscriber, _provider2, _poll, _running, OnBlockSubscriber, _tag, _lastBlock, PollingBlockTagSubscriber, _filter2, PollingOrphanSubscriber, _hash, PollingTransactionSubscriber, _provider3, _filter3, _poller2, _running2, _blockNumber2, _PollingEventSubscriber_instances, poll_fn2, PollingEventSubscriber;
  var init_subscriber_polling = __esm({
    "node_modules/ethers/lib.esm/providers/subscriber-polling.js"() {
      PollingBlockSubscriber = class {
        /**
         *  Create a new **PollingBlockSubscriber** attached to %%provider%%.
         */
        constructor(provider) {
          __privateAdd(this, _PollingBlockSubscriber_instances);
          __privateAdd(this, _provider);
          __privateAdd(this, _poller);
          __privateAdd(this, _interval);
          // The most recent block we have scanned for events. The value -2
          // indicates we still need to fetch an initial block number
          __privateAdd(this, _blockNumber);
          __privateSet(this, _provider, provider);
          __privateSet(this, _poller, null);
          __privateSet(this, _interval, 4e3);
          __privateSet(this, _blockNumber, -2);
        }
        /**
         *  The polling interval.
         */
        get pollingInterval() {
          return __privateGet(this, _interval);
        }
        set pollingInterval(value) {
          __privateSet(this, _interval, value);
        }
        start() {
          if (__privateGet(this, _poller)) {
            return;
          }
          __privateSet(this, _poller, __privateGet(this, _provider)._setTimeout(__privateMethod(this, _PollingBlockSubscriber_instances, poll_fn).bind(this), __privateGet(this, _interval)));
          __privateMethod(this, _PollingBlockSubscriber_instances, poll_fn).call(this);
        }
        stop() {
          if (!__privateGet(this, _poller)) {
            return;
          }
          __privateGet(this, _provider)._clearTimeout(__privateGet(this, _poller));
          __privateSet(this, _poller, null);
        }
        pause(dropWhilePaused) {
          this.stop();
          if (dropWhilePaused) {
            __privateSet(this, _blockNumber, -2);
          }
        }
        resume() {
          this.start();
        }
      };
      _provider = new WeakMap();
      _poller = new WeakMap();
      _interval = new WeakMap();
      _blockNumber = new WeakMap();
      _PollingBlockSubscriber_instances = new WeakSet();
      poll_fn = async function() {
        try {
          const blockNumber = await __privateGet(this, _provider).getBlockNumber();
          if (__privateGet(this, _blockNumber) === -2) {
            __privateSet(this, _blockNumber, blockNumber);
            return;
          }
          if (blockNumber !== __privateGet(this, _blockNumber)) {
            for (let b2 = __privateGet(this, _blockNumber) + 1; b2 <= blockNumber; b2++) {
              if (__privateGet(this, _poller) == null) {
                return;
              }
              await __privateGet(this, _provider).emit("block", b2);
            }
            __privateSet(this, _blockNumber, blockNumber);
          }
        } catch (error) {
        }
        if (__privateGet(this, _poller) == null) {
          return;
        }
        __privateSet(this, _poller, __privateGet(this, _provider)._setTimeout(__privateMethod(this, _PollingBlockSubscriber_instances, poll_fn).bind(this), __privateGet(this, _interval)));
      };
      OnBlockSubscriber = class {
        /**
         *  Create a new **OnBlockSubscriber** attached to %%provider%%.
         */
        constructor(provider) {
          __privateAdd(this, _provider2);
          __privateAdd(this, _poll);
          __privateAdd(this, _running);
          __privateSet(this, _provider2, provider);
          __privateSet(this, _running, false);
          __privateSet(this, _poll, (blockNumber) => {
            this._poll(blockNumber, __privateGet(this, _provider2));
          });
        }
        /**
         *  Called on every new block.
         */
        async _poll(blockNumber, provider) {
          throw new Error("sub-classes must override this");
        }
        start() {
          if (__privateGet(this, _running)) {
            return;
          }
          __privateSet(this, _running, true);
          __privateGet(this, _poll).call(this, -2);
          __privateGet(this, _provider2).on("block", __privateGet(this, _poll));
        }
        stop() {
          if (!__privateGet(this, _running)) {
            return;
          }
          __privateSet(this, _running, false);
          __privateGet(this, _provider2).off("block", __privateGet(this, _poll));
        }
        pause(dropWhilePaused) {
          this.stop();
        }
        resume() {
          this.start();
        }
      };
      _provider2 = new WeakMap();
      _poll = new WeakMap();
      _running = new WeakMap();
      PollingBlockTagSubscriber = class extends OnBlockSubscriber {
        constructor(provider, tag) {
          super(provider);
          __privateAdd(this, _tag);
          __privateAdd(this, _lastBlock);
          __privateSet(this, _tag, tag);
          __privateSet(this, _lastBlock, -2);
        }
        pause(dropWhilePaused) {
          if (dropWhilePaused) {
            __privateSet(this, _lastBlock, -2);
          }
          super.pause(dropWhilePaused);
        }
        async _poll(blockNumber, provider) {
          const block = await provider.getBlock(__privateGet(this, _tag));
          if (block == null) {
            return;
          }
          if (__privateGet(this, _lastBlock) === -2) {
            __privateSet(this, _lastBlock, block.number);
          } else if (block.number > __privateGet(this, _lastBlock)) {
            provider.emit(__privateGet(this, _tag), block.number);
            __privateSet(this, _lastBlock, block.number);
          }
        }
      };
      _tag = new WeakMap();
      _lastBlock = new WeakMap();
      PollingOrphanSubscriber = class extends OnBlockSubscriber {
        constructor(provider, filter) {
          super(provider);
          __privateAdd(this, _filter2);
          __privateSet(this, _filter2, copy(filter));
        }
        async _poll(blockNumber, provider) {
          throw new Error("@TODO");
          console.log(__privateGet(this, _filter2));
        }
      };
      _filter2 = new WeakMap();
      PollingTransactionSubscriber = class extends OnBlockSubscriber {
        /**
         *  Create a new **PollingTransactionSubscriber** attached to
         *  %%provider%%, listening for %%hash%%.
         */
        constructor(provider, hash2) {
          super(provider);
          __privateAdd(this, _hash);
          __privateSet(this, _hash, hash2);
        }
        async _poll(blockNumber, provider) {
          const tx = await provider.getTransactionReceipt(__privateGet(this, _hash));
          if (tx) {
            provider.emit(__privateGet(this, _hash), tx);
          }
        }
      };
      _hash = new WeakMap();
      PollingEventSubscriber = class {
        /**
         *  Create a new **PollingTransactionSubscriber** attached to
         *  %%provider%%, listening for %%filter%%.
         */
        constructor(provider, filter) {
          __privateAdd(this, _PollingEventSubscriber_instances);
          __privateAdd(this, _provider3);
          __privateAdd(this, _filter3);
          __privateAdd(this, _poller2);
          __privateAdd(this, _running2);
          // The most recent block we have scanned for events. The value -2
          // indicates we still need to fetch an initial block number
          __privateAdd(this, _blockNumber2);
          __privateSet(this, _provider3, provider);
          __privateSet(this, _filter3, copy(filter));
          __privateSet(this, _poller2, __privateMethod(this, _PollingEventSubscriber_instances, poll_fn2).bind(this));
          __privateSet(this, _running2, false);
          __privateSet(this, _blockNumber2, -2);
        }
        start() {
          if (__privateGet(this, _running2)) {
            return;
          }
          __privateSet(this, _running2, true);
          if (__privateGet(this, _blockNumber2) === -2) {
            __privateGet(this, _provider3).getBlockNumber().then((blockNumber) => {
              __privateSet(this, _blockNumber2, blockNumber);
            });
          }
          __privateGet(this, _provider3).on("block", __privateGet(this, _poller2));
        }
        stop() {
          if (!__privateGet(this, _running2)) {
            return;
          }
          __privateSet(this, _running2, false);
          __privateGet(this, _provider3).off("block", __privateGet(this, _poller2));
        }
        pause(dropWhilePaused) {
          this.stop();
          if (dropWhilePaused) {
            __privateSet(this, _blockNumber2, -2);
          }
        }
        resume() {
          this.start();
        }
      };
      _provider3 = new WeakMap();
      _filter3 = new WeakMap();
      _poller2 = new WeakMap();
      _running2 = new WeakMap();
      _blockNumber2 = new WeakMap();
      _PollingEventSubscriber_instances = new WeakSet();
      poll_fn2 = async function(blockNumber) {
        if (__privateGet(this, _blockNumber2) === -2) {
          return;
        }
        const filter = copy(__privateGet(this, _filter3));
        filter.fromBlock = __privateGet(this, _blockNumber2) + 1;
        filter.toBlock = blockNumber;
        const logs = await __privateGet(this, _provider3).getLogs(filter);
        if (logs.length === 0) {
          if (__privateGet(this, _blockNumber2) < blockNumber - 60) {
            __privateSet(this, _blockNumber2, blockNumber - 60);
          }
          return;
        }
        for (const log of logs) {
          __privateGet(this, _provider3).emit(__privateGet(this, _filter3), log);
          __privateSet(this, _blockNumber2, log.blockNumber);
        }
      };
    }
  });

  // node_modules/ethers/lib.esm/providers/abstract-provider.js
  function isPromise(value) {
    return value && typeof value.then === "function";
  }
  function getTag(prefix, value) {
    return prefix + ":" + JSON.stringify(value, (k, v) => {
      if (v == null) {
        return "null";
      }
      if (typeof v === "bigint") {
        return `bigint:${v.toString()}`;
      }
      if (typeof v === "string") {
        return v.toLowerCase();
      }
      if (typeof v === "object" && !Array.isArray(v)) {
        const keys = Object.keys(v);
        keys.sort();
        return keys.reduce((accum, key) => {
          accum[key] = v[key];
          return accum;
        }, {});
      }
      return v;
    });
  }
  function copy2(value) {
    return JSON.parse(JSON.stringify(value));
  }
  function concisify(items) {
    items = Array.from(new Set(items).values());
    items.sort();
    return items;
  }
  async function getSubscription(_event2, provider) {
    if (_event2 == null) {
      throw new Error("invalid event");
    }
    if (Array.isArray(_event2)) {
      _event2 = { topics: _event2 };
    }
    if (typeof _event2 === "string") {
      switch (_event2) {
        case "block":
        case "debug":
        case "error":
        case "finalized":
        case "network":
        case "pending":
        case "safe": {
          return { type: _event2, tag: _event2 };
        }
      }
    }
    if (isHexString(_event2, 32)) {
      const hash2 = _event2.toLowerCase();
      return { type: "transaction", tag: getTag("tx", { hash: hash2 }), hash: hash2 };
    }
    if (_event2.orphan) {
      const event = _event2;
      return { type: "orphan", tag: getTag("orphan", event), filter: copy2(event) };
    }
    if (_event2.address || _event2.topics) {
      const event = _event2;
      const filter = {
        topics: (event.topics || []).map((t) => {
          if (t == null) {
            return null;
          }
          if (Array.isArray(t)) {
            return concisify(t.map((t2) => t2.toLowerCase()));
          }
          return t.toLowerCase();
        })
      };
      if (event.address) {
        const addresses = [];
        const promises = [];
        const addAddress = (addr) => {
          if (isHexString(addr)) {
            addresses.push(addr);
          } else {
            promises.push((async () => {
              addresses.push(await resolveAddress(addr, provider));
            })());
          }
        };
        if (Array.isArray(event.address)) {
          event.address.forEach(addAddress);
        } else {
          addAddress(event.address);
        }
        if (promises.length) {
          await Promise.all(promises);
        }
        filter.address = concisify(addresses.map((a) => a.toLowerCase()));
      }
      return { filter, tag: getTag("event", filter), type: "event" };
    }
    assertArgument(false, "unknown ProviderEvent", "event", _event2);
  }
  function getTime2() {
    return (/* @__PURE__ */ new Date()).getTime();
  }
  function _parseString(result, start) {
    try {
      const bytes2 = _parseBytes(result, start);
      if (bytes2) {
        return toUtf8String(bytes2);
      }
    } catch (error) {
    }
    return null;
  }
  function _parseBytes(result, start) {
    if (result === "0x") {
      return null;
    }
    try {
      const offset2 = getNumber2(dataSlice(result, start, start + 32));
      const length = getNumber2(dataSlice(result, offset2, offset2 + 32));
      return dataSlice(result, offset2 + 32, offset2 + 32 + length);
    } catch (error) {
    }
    return null;
  }
  function numPad(value) {
    const result = toBeArray(value);
    if (result.length > 32) {
      throw new Error("internal; should not happen");
    }
    const padded = new Uint8Array(32);
    padded.set(result, 32 - result.length);
    return padded;
  }
  function bytesPad(value) {
    if (value.length % 32 === 0) {
      return value;
    }
    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);
    result.set(value);
    return result;
  }
  function encodeBytes(datas) {
    const result = [];
    let byteCount = 0;
    for (let i = 0; i < datas.length; i++) {
      result.push(empty);
      byteCount += 32;
    }
    for (let i = 0; i < datas.length; i++) {
      const data = getBytes(datas[i]);
      result[i] = numPad(byteCount);
      result.push(numPad(data.length));
      result.push(bytesPad(data));
      byteCount += 32 + Math.ceil(data.length / 32) * 32;
    }
    return concat(result);
  }
  function parseOffchainLookup(data) {
    const result = {
      sender: "",
      urls: [],
      calldata: "",
      selector: "",
      extraData: "",
      errorArgs: []
    };
    assert(dataLength(data) >= 5 * 32, "insufficient OffchainLookup data", "OFFCHAIN_FAULT", {
      reason: "insufficient OffchainLookup data"
    });
    const sender = dataSlice(data, 0, 32);
    assert(dataSlice(sender, 0, 12) === dataSlice(zeros, 0, 12), "corrupt OffchainLookup sender", "OFFCHAIN_FAULT", {
      reason: "corrupt OffchainLookup sender"
    });
    result.sender = dataSlice(sender, 12);
    try {
      const urls = [];
      const urlsOffset = getNumber2(dataSlice(data, 32, 64));
      const urlsLength = getNumber2(dataSlice(data, urlsOffset, urlsOffset + 32));
      const urlsData = dataSlice(data, urlsOffset + 32);
      for (let u = 0; u < urlsLength; u++) {
        const url = _parseString(urlsData, u * 32);
        if (url == null) {
          throw new Error("abort");
        }
        urls.push(url);
      }
      result.urls = urls;
    } catch (error) {
      assert(false, "corrupt OffchainLookup urls", "OFFCHAIN_FAULT", {
        reason: "corrupt OffchainLookup urls"
      });
    }
    try {
      const calldata = _parseBytes(data, 64);
      if (calldata == null) {
        throw new Error("abort");
      }
      result.calldata = calldata;
    } catch (error) {
      assert(false, "corrupt OffchainLookup calldata", "OFFCHAIN_FAULT", {
        reason: "corrupt OffchainLookup calldata"
      });
    }
    assert(dataSlice(data, 100, 128) === dataSlice(zeros, 0, 28), "corrupt OffchainLookup callbaackSelector", "OFFCHAIN_FAULT", {
      reason: "corrupt OffchainLookup callbaackSelector"
    });
    result.selector = dataSlice(data, 96, 100);
    try {
      const extraData = _parseBytes(data, 128);
      if (extraData == null) {
        throw new Error("abort");
      }
      result.extraData = extraData;
    } catch (error) {
      assert(false, "corrupt OffchainLookup extraData", "OFFCHAIN_FAULT", {
        reason: "corrupt OffchainLookup extraData"
      });
    }
    result.errorArgs = "sender,urls,calldata,selector,extraData".split(/,/).map((k) => result[k]);
    return result;
  }
  var BN_23, MAX_CCIP_REDIRECTS, UnmanagedSubscriber, defaultOptions, _subs, _plugins2, _pausedState, _destroyed, _networkPromise, _anyNetwork, _performCache, _lastBlockNumber, _nextTimer, _timers, _disableCcipRead, _options2, _AbstractProvider_instances, perform_fn, call_fn, checkNetwork_fn, getAccountValue_fn, getBlock_fn, hasSub_fn, getSub_fn, AbstractProvider, empty, zeros;
  var init_abstract_provider = __esm({
    "node_modules/ethers/lib.esm/providers/abstract-provider.js"() {
      init_address2();
      init_constants();
      init_contract2();
      init_hash();
      init_transaction2();
      init_utils();
      init_ens_resolver();
      init_format();
      init_network();
      init_provider();
      init_subscriber_polling();
      BN_23 = BigInt(2);
      MAX_CCIP_REDIRECTS = 10;
      UnmanagedSubscriber = class {
        /**
         *  Create a new UnmanagedSubscriber with %%name%%.
         */
        constructor(name) {
          /**
           *  The name fof the event.
           */
          __publicField(this, "name");
          defineProperties(this, { name });
        }
        start() {
        }
        stop() {
        }
        pause(dropWhilePaused) {
        }
        resume() {
        }
      };
      defaultOptions = {
        cacheTimeout: 250,
        pollingInterval: 4e3
      };
      AbstractProvider = class {
        /**
         *  Create a new **AbstractProvider** connected to %%network%%, or
         *  use the various network detection capabilities to discover the
         *  [[Network]] if necessary.
         */
        constructor(_network3, options) {
          __privateAdd(this, _AbstractProvider_instances);
          __privateAdd(this, _subs);
          __privateAdd(this, _plugins2);
          // null=unpaused, true=paused+dropWhilePaused, false=paused
          __privateAdd(this, _pausedState);
          __privateAdd(this, _destroyed);
          __privateAdd(this, _networkPromise);
          __privateAdd(this, _anyNetwork);
          __privateAdd(this, _performCache);
          // The most recent block number if running an event or -1 if no "block" event
          __privateAdd(this, _lastBlockNumber);
          __privateAdd(this, _nextTimer);
          __privateAdd(this, _timers);
          __privateAdd(this, _disableCcipRead);
          __privateAdd(this, _options2);
          __privateSet(this, _options2, Object.assign({}, defaultOptions, options || {}));
          if (_network3 === "any") {
            __privateSet(this, _anyNetwork, true);
            __privateSet(this, _networkPromise, null);
          } else if (_network3) {
            const network = Network.from(_network3);
            __privateSet(this, _anyNetwork, false);
            __privateSet(this, _networkPromise, Promise.resolve(network));
            setTimeout(() => {
              this.emit("network", network, null);
            }, 0);
          } else {
            __privateSet(this, _anyNetwork, false);
            __privateSet(this, _networkPromise, null);
          }
          __privateSet(this, _lastBlockNumber, -1);
          __privateSet(this, _performCache, /* @__PURE__ */ new Map());
          __privateSet(this, _subs, /* @__PURE__ */ new Map());
          __privateSet(this, _plugins2, /* @__PURE__ */ new Map());
          __privateSet(this, _pausedState, null);
          __privateSet(this, _destroyed, false);
          __privateSet(this, _nextTimer, 1);
          __privateSet(this, _timers, /* @__PURE__ */ new Map());
          __privateSet(this, _disableCcipRead, false);
        }
        get pollingInterval() {
          return __privateGet(this, _options2).pollingInterval;
        }
        /**
         *  Returns ``this``, to allow an **AbstractProvider** to implement
         *  the [[ContractRunner]] interface.
         */
        get provider() {
          return this;
        }
        /**
         *  Returns all the registered plug-ins.
         */
        get plugins() {
          return Array.from(__privateGet(this, _plugins2).values());
        }
        /**
         *  Attach a new plug-in.
         */
        attachPlugin(plugin) {
          if (__privateGet(this, _plugins2).get(plugin.name)) {
            throw new Error(`cannot replace existing plugin: ${plugin.name} `);
          }
          __privateGet(this, _plugins2).set(plugin.name, plugin.connect(this));
          return this;
        }
        /**
         *  Get a plugin by name.
         */
        getPlugin(name) {
          return __privateGet(this, _plugins2).get(name) || null;
        }
        /**
         *  Prevent any CCIP-read operation, regardless of whether requested
         *  in a [[call]] using ``enableCcipRead``.
         */
        get disableCcipRead() {
          return __privateGet(this, _disableCcipRead);
        }
        set disableCcipRead(value) {
          __privateSet(this, _disableCcipRead, !!value);
        }
        /**
         *  Resolves to the data for executing the CCIP-read operations.
         */
        async ccipReadFetch(tx, calldata, urls) {
          if (this.disableCcipRead || urls.length === 0 || tx.to == null) {
            return null;
          }
          const sender = tx.to.toLowerCase();
          const data = calldata.toLowerCase();
          const errorMessages = [];
          for (let i = 0; i < urls.length; i++) {
            const url = urls[i];
            const href = url.replace("{sender}", sender).replace("{data}", data);
            const request = new FetchRequest(href);
            if (url.indexOf("{data}") === -1) {
              request.body = { data, sender };
            }
            this.emit("debug", { action: "sendCcipReadFetchRequest", request, index: i, urls });
            let errorMessage = "unknown error";
            let resp;
            try {
              resp = await request.send();
            } catch (error) {
              errorMessages.push(error.message);
              this.emit("debug", { action: "receiveCcipReadFetchError", request, result: { error } });
              continue;
            }
            try {
              const result = resp.bodyJson;
              if (result.data) {
                this.emit("debug", { action: "receiveCcipReadFetchResult", request, result });
                return result.data;
              }
              if (result.message) {
                errorMessage = result.message;
              }
              this.emit("debug", { action: "receiveCcipReadFetchError", request, result });
            } catch (error) {
            }
            assert(resp.statusCode < 400 || resp.statusCode >= 500, `response not found during CCIP fetch: ${errorMessage}`, "OFFCHAIN_FAULT", { reason: "404_MISSING_RESOURCE", transaction: tx, info: { url, errorMessage } });
            errorMessages.push(errorMessage);
          }
          assert(false, `error encountered during CCIP fetch: ${errorMessages.map((m) => JSON.stringify(m)).join(", ")}`, "OFFCHAIN_FAULT", {
            reason: "500_SERVER_ERROR",
            transaction: tx,
            info: { urls, errorMessages }
          });
        }
        /**
         *  Provides the opportunity for a sub-class to wrap a block before
         *  returning it, to add additional properties or an alternate
         *  sub-class of [[Block]].
         */
        _wrapBlock(value, network) {
          return new Block(formatBlock(value), this);
        }
        /**
         *  Provides the opportunity for a sub-class to wrap a log before
         *  returning it, to add additional properties or an alternate
         *  sub-class of [[Log]].
         */
        _wrapLog(value, network) {
          return new Log(formatLog(value), this);
        }
        /**
         *  Provides the opportunity for a sub-class to wrap a transaction
         *  receipt before returning it, to add additional properties or an
         *  alternate sub-class of [[TransactionReceipt]].
         */
        _wrapTransactionReceipt(value, network) {
          return new TransactionReceipt(formatTransactionReceipt(value), this);
        }
        /**
         *  Provides the opportunity for a sub-class to wrap a transaction
         *  response before returning it, to add additional properties or an
         *  alternate sub-class of [[TransactionResponse]].
         */
        _wrapTransactionResponse(tx, network) {
          return new TransactionResponse(formatTransactionResponse(tx), this);
        }
        /**
         *  Resolves to the Network, forcing a network detection using whatever
         *  technique the sub-class requires.
         *
         *  Sub-classes **must** override this.
         */
        _detectNetwork() {
          assert(false, "sub-classes must implement this", "UNSUPPORTED_OPERATION", {
            operation: "_detectNetwork"
          });
        }
        /**
         *  Sub-classes should use this to perform all built-in operations. All
         *  methods sanitizes and normalizes the values passed into this.
         *
         *  Sub-classes **must** override this.
         */
        async _perform(req) {
          assert(false, `unsupported method: ${req.method}`, "UNSUPPORTED_OPERATION", {
            operation: req.method,
            info: req
          });
        }
        // State
        async getBlockNumber() {
          const blockNumber = getNumber2(await __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, { method: "getBlockNumber" }), "%response");
          if (__privateGet(this, _lastBlockNumber) >= 0) {
            __privateSet(this, _lastBlockNumber, blockNumber);
          }
          return blockNumber;
        }
        /**
         *  Returns or resolves to the address for %%address%%, resolving ENS
         *  names and [[Addressable]] objects and returning if already an
         *  address.
         */
        _getAddress(address) {
          return resolveAddress(address, this);
        }
        /**
         *  Returns or resolves to a valid block tag for %%blockTag%%, resolving
         *  negative values and returning if already a valid block tag.
         */
        _getBlockTag(blockTag) {
          if (blockTag == null) {
            return "latest";
          }
          switch (blockTag) {
            case "earliest":
              return "0x0";
            case "finalized":
            case "latest":
            case "pending":
            case "safe":
              return blockTag;
          }
          if (isHexString(blockTag)) {
            if (isHexString(blockTag, 32)) {
              return blockTag;
            }
            return toQuantity(blockTag);
          }
          if (typeof blockTag === "bigint") {
            blockTag = getNumber2(blockTag, "blockTag");
          }
          if (typeof blockTag === "number") {
            if (blockTag >= 0) {
              return toQuantity(blockTag);
            }
            if (__privateGet(this, _lastBlockNumber) >= 0) {
              return toQuantity(__privateGet(this, _lastBlockNumber) + blockTag);
            }
            return this.getBlockNumber().then((b2) => toQuantity(b2 + blockTag));
          }
          assertArgument(false, "invalid blockTag", "blockTag", blockTag);
        }
        /**
         *  Returns or resolves to a filter for %%filter%%, resolving any ENS
         *  names or [[Addressable]] object and returning if already a valid
         *  filter.
         */
        _getFilter(filter) {
          const topics = (filter.topics || []).map((t) => {
            if (t == null) {
              return null;
            }
            if (Array.isArray(t)) {
              return concisify(t.map((t2) => t2.toLowerCase()));
            }
            return t.toLowerCase();
          });
          const blockHash = "blockHash" in filter ? filter.blockHash : void 0;
          const resolve = (_address, fromBlock2, toBlock2) => {
            let address2 = void 0;
            switch (_address.length) {
              case 0:
                break;
              case 1:
                address2 = _address[0];
                break;
              default:
                _address.sort();
                address2 = _address;
            }
            if (blockHash) {
              if (fromBlock2 != null || toBlock2 != null) {
                throw new Error("invalid filter");
              }
            }
            const filter2 = {};
            if (address2) {
              filter2.address = address2;
            }
            if (topics.length) {
              filter2.topics = topics;
            }
            if (fromBlock2) {
              filter2.fromBlock = fromBlock2;
            }
            if (toBlock2) {
              filter2.toBlock = toBlock2;
            }
            if (blockHash) {
              filter2.blockHash = blockHash;
            }
            return filter2;
          };
          let address = [];
          if (filter.address) {
            if (Array.isArray(filter.address)) {
              for (const addr of filter.address) {
                address.push(this._getAddress(addr));
              }
            } else {
              address.push(this._getAddress(filter.address));
            }
          }
          let fromBlock = void 0;
          if ("fromBlock" in filter) {
            fromBlock = this._getBlockTag(filter.fromBlock);
          }
          let toBlock = void 0;
          if ("toBlock" in filter) {
            toBlock = this._getBlockTag(filter.toBlock);
          }
          if (address.filter((a) => typeof a !== "string").length || fromBlock != null && typeof fromBlock !== "string" || toBlock != null && typeof toBlock !== "string") {
            return Promise.all([Promise.all(address), fromBlock, toBlock]).then((result) => {
              return resolve(result[0], result[1], result[2]);
            });
          }
          return resolve(address, fromBlock, toBlock);
        }
        /**
         *  Returns or resolves to a transaction for %%request%%, resolving
         *  any ENS names or [[Addressable]] and returning if already a valid
         *  transaction.
         */
        _getTransactionRequest(_request3) {
          const request = copyRequest(_request3);
          const promises = [];
          ["to", "from"].forEach((key) => {
            if (request[key] == null) {
              return;
            }
            const addr = resolveAddress(request[key], this);
            if (isPromise(addr)) {
              promises.push(async function() {
                request[key] = await addr;
              }());
            } else {
              request[key] = addr;
            }
          });
          if (request.blockTag != null) {
            const blockTag = this._getBlockTag(request.blockTag);
            if (isPromise(blockTag)) {
              promises.push(async function() {
                request.blockTag = await blockTag;
              }());
            } else {
              request.blockTag = blockTag;
            }
          }
          if (promises.length) {
            return async function() {
              await Promise.all(promises);
              return request;
            }();
          }
          return request;
        }
        async getNetwork() {
          if (__privateGet(this, _networkPromise) == null) {
            const detectNetwork = (async () => {
              try {
                const network = await this._detectNetwork();
                this.emit("network", network, null);
                return network;
              } catch (error) {
                if (__privateGet(this, _networkPromise) === detectNetwork) {
                  __privateSet(this, _networkPromise, null);
                }
                throw error;
              }
            })();
            __privateSet(this, _networkPromise, detectNetwork);
            return (await detectNetwork).clone();
          }
          const networkPromise = __privateGet(this, _networkPromise);
          const [expected, actual] = await Promise.all([
            networkPromise,
            this._detectNetwork()
            // The actual connected network
          ]);
          if (expected.chainId !== actual.chainId) {
            if (__privateGet(this, _anyNetwork)) {
              this.emit("network", actual, expected);
              if (__privateGet(this, _networkPromise) === networkPromise) {
                __privateSet(this, _networkPromise, Promise.resolve(actual));
              }
            } else {
              assert(false, `network changed: ${expected.chainId} => ${actual.chainId} `, "NETWORK_ERROR", {
                event: "changed"
              });
            }
          }
          return expected.clone();
        }
        async getFeeData() {
          const network = await this.getNetwork();
          const getFeeDataFunc = async () => {
            const { _block, gasPrice, priorityFee } = await resolveProperties({
              _block: __privateMethod(this, _AbstractProvider_instances, getBlock_fn).call(this, "latest", false),
              gasPrice: (async () => {
                try {
                  const value = await __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, { method: "getGasPrice" });
                  return getBigInt(value, "%response");
                } catch (error) {
                }
                return null;
              })(),
              priorityFee: (async () => {
                try {
                  const value = await __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, { method: "getPriorityFee" });
                  return getBigInt(value, "%response");
                } catch (error) {
                }
                return null;
              })()
            });
            let maxFeePerGas = null;
            let maxPriorityFeePerGas = null;
            const block = this._wrapBlock(_block, network);
            if (block && block.baseFeePerGas) {
              maxPriorityFeePerGas = priorityFee != null ? priorityFee : BigInt("1000000000");
              maxFeePerGas = block.baseFeePerGas * BN_23 + maxPriorityFeePerGas;
            }
            return new FeeData(gasPrice, maxFeePerGas, maxPriorityFeePerGas);
          };
          const plugin = network.getPlugin("org.ethers.plugins.network.FetchUrlFeeDataPlugin");
          if (plugin) {
            const req = new FetchRequest(plugin.url);
            const feeData = await plugin.processFunc(getFeeDataFunc, this, req);
            return new FeeData(feeData.gasPrice, feeData.maxFeePerGas, feeData.maxPriorityFeePerGas);
          }
          return await getFeeDataFunc();
        }
        async estimateGas(_tx) {
          let tx = this._getTransactionRequest(_tx);
          if (isPromise(tx)) {
            tx = await tx;
          }
          return getBigInt(await __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, {
            method: "estimateGas",
            transaction: tx
          }), "%response");
        }
        async call(_tx) {
          const { tx, blockTag } = await resolveProperties({
            tx: this._getTransactionRequest(_tx),
            blockTag: this._getBlockTag(_tx.blockTag)
          });
          return await __privateMethod(this, _AbstractProvider_instances, checkNetwork_fn).call(this, __privateMethod(this, _AbstractProvider_instances, call_fn).call(this, tx, blockTag, _tx.enableCcipRead ? 0 : -1));
        }
        async getBalance(address, blockTag) {
          return getBigInt(await __privateMethod(this, _AbstractProvider_instances, getAccountValue_fn).call(this, { method: "getBalance" }, address, blockTag), "%response");
        }
        async getTransactionCount(address, blockTag) {
          return getNumber2(await __privateMethod(this, _AbstractProvider_instances, getAccountValue_fn).call(this, { method: "getTransactionCount" }, address, blockTag), "%response");
        }
        async getCode(address, blockTag) {
          return hexlify(await __privateMethod(this, _AbstractProvider_instances, getAccountValue_fn).call(this, { method: "getCode" }, address, blockTag));
        }
        async getStorage(address, _position, blockTag) {
          const position = getBigInt(_position, "position");
          return hexlify(await __privateMethod(this, _AbstractProvider_instances, getAccountValue_fn).call(this, { method: "getStorage", position }, address, blockTag));
        }
        // Write
        async broadcastTransaction(signedTx) {
          const { blockNumber, hash: hash2, network } = await resolveProperties({
            blockNumber: this.getBlockNumber(),
            hash: this._perform({
              method: "broadcastTransaction",
              signedTransaction: signedTx
            }),
            network: this.getNetwork()
          });
          const tx = Transaction.from(signedTx);
          if (tx.hash !== hash2) {
            throw new Error("@TODO: the returned hash did not match");
          }
          return this._wrapTransactionResponse(tx, network).replaceableTransaction(blockNumber);
        }
        // Queries
        async getBlock(block, prefetchTxs) {
          const { network, params } = await resolveProperties({
            network: this.getNetwork(),
            params: __privateMethod(this, _AbstractProvider_instances, getBlock_fn).call(this, block, !!prefetchTxs)
          });
          if (params == null) {
            return null;
          }
          return this._wrapBlock(params, network);
        }
        async getTransaction(hash2) {
          const { network, params } = await resolveProperties({
            network: this.getNetwork(),
            params: __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, { method: "getTransaction", hash: hash2 })
          });
          if (params == null) {
            return null;
          }
          return this._wrapTransactionResponse(params, network);
        }
        async getTransactionReceipt(hash2) {
          const { network, params } = await resolveProperties({
            network: this.getNetwork(),
            params: __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, { method: "getTransactionReceipt", hash: hash2 })
          });
          if (params == null) {
            return null;
          }
          if (params.gasPrice == null && params.effectiveGasPrice == null) {
            const tx = await __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, { method: "getTransaction", hash: hash2 });
            if (tx == null) {
              throw new Error("report this; could not find tx or effectiveGasPrice");
            }
            params.effectiveGasPrice = tx.gasPrice;
          }
          return this._wrapTransactionReceipt(params, network);
        }
        async getTransactionResult(hash2) {
          const { result } = await resolveProperties({
            network: this.getNetwork(),
            result: __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, { method: "getTransactionResult", hash: hash2 })
          });
          if (result == null) {
            return null;
          }
          return hexlify(result);
        }
        // Bloom-filter Queries
        async getLogs(_filter5) {
          let filter = this._getFilter(_filter5);
          if (isPromise(filter)) {
            filter = await filter;
          }
          const { network, params } = await resolveProperties({
            network: this.getNetwork(),
            params: __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, { method: "getLogs", filter })
          });
          return params.map((p) => this._wrapLog(p, network));
        }
        // ENS
        _getProvider(chainId) {
          assert(false, "provider cannot connect to target network", "UNSUPPORTED_OPERATION", {
            operation: "_getProvider()"
          });
        }
        async getResolver(name) {
          return await EnsResolver.fromName(this, name);
        }
        async getAvatar(name) {
          const resolver = await this.getResolver(name);
          if (resolver) {
            return await resolver.getAvatar();
          }
          return null;
        }
        async resolveName(name) {
          const resolver = await this.getResolver(name);
          if (resolver) {
            return await resolver.getAddress();
          }
          return null;
        }
        async lookupAddress(address) {
          address = getAddress(address);
          const node = namehash(address.substring(2).toLowerCase() + ".addr.reverse");
          try {
            const ensAddr = await EnsResolver.getEnsAddress(this);
            const ensContract = new Contract(ensAddr, [
              "function resolver(bytes32) view returns (address)"
            ], this);
            const resolver = await ensContract.resolver(node);
            if (resolver == null || resolver === ZeroAddress) {
              return null;
            }
            const resolverContract = new Contract(resolver, [
              "function name(bytes32) view returns (string)"
            ], this);
            const name = await resolverContract.name(node);
            const check = await this.resolveName(name);
            if (check !== address) {
              return null;
            }
            return name;
          } catch (error) {
            if (isError(error, "BAD_DATA") && error.value === "0x") {
              return null;
            }
            if (isError(error, "CALL_EXCEPTION")) {
              return null;
            }
            throw error;
          }
          return null;
        }
        async waitForTransaction(hash2, _confirms, timeout) {
          const confirms = _confirms != null ? _confirms : 1;
          if (confirms === 0) {
            return this.getTransactionReceipt(hash2);
          }
          return new Promise(async (resolve, reject) => {
            let timer = null;
            const listener = async (blockNumber) => {
              try {
                const receipt = await this.getTransactionReceipt(hash2);
                if (receipt != null) {
                  if (blockNumber - receipt.blockNumber + 1 >= confirms) {
                    resolve(receipt);
                    if (timer) {
                      clearTimeout(timer);
                      timer = null;
                    }
                    return;
                  }
                }
              } catch (error) {
                console.log("EEE", error);
              }
              this.once("block", listener);
            };
            if (timeout != null) {
              timer = setTimeout(() => {
                if (timer == null) {
                  return;
                }
                timer = null;
                this.off("block", listener);
                reject(makeError("timeout", "TIMEOUT", { reason: "timeout" }));
              }, timeout);
            }
            listener(await this.getBlockNumber());
          });
        }
        async waitForBlock(blockTag) {
          assert(false, "not implemented yet", "NOT_IMPLEMENTED", {
            operation: "waitForBlock"
          });
        }
        /**
         *  Clear a timer created using the [[_setTimeout]] method.
         */
        _clearTimeout(timerId) {
          const timer = __privateGet(this, _timers).get(timerId);
          if (!timer) {
            return;
          }
          if (timer.timer) {
            clearTimeout(timer.timer);
          }
          __privateGet(this, _timers).delete(timerId);
        }
        /**
         *  Create a timer that will execute %%func%% after at least %%timeout%%
         *  (in ms). If %%timeout%% is unspecified, then %%func%% will execute
         *  in the next event loop.
         *
         *  [Pausing](AbstractProvider-paused) the provider will pause any
         *  associated timers.
         */
        _setTimeout(_func, timeout) {
          if (timeout == null) {
            timeout = 0;
          }
          const timerId = __privateWrapper(this, _nextTimer)._++;
          const func = () => {
            __privateGet(this, _timers).delete(timerId);
            _func();
          };
          if (this.paused) {
            __privateGet(this, _timers).set(timerId, { timer: null, func, time: timeout });
          } else {
            const timer = setTimeout(func, timeout);
            __privateGet(this, _timers).set(timerId, { timer, func, time: getTime2() });
          }
          return timerId;
        }
        /**
         *  Perform %%func%% on each subscriber.
         */
        _forEachSubscriber(func) {
          for (const sub of __privateGet(this, _subs).values()) {
            func(sub.subscriber);
          }
        }
        /**
         *  Sub-classes may override this to customize subscription
         *  implementations.
         */
        _getSubscriber(sub) {
          switch (sub.type) {
            case "debug":
            case "error":
            case "network":
              return new UnmanagedSubscriber(sub.type);
            case "block": {
              const subscriber = new PollingBlockSubscriber(this);
              subscriber.pollingInterval = this.pollingInterval;
              return subscriber;
            }
            case "safe":
            case "finalized":
              return new PollingBlockTagSubscriber(this, sub.type);
            case "event":
              return new PollingEventSubscriber(this, sub.filter);
            case "transaction":
              return new PollingTransactionSubscriber(this, sub.hash);
            case "orphan":
              return new PollingOrphanSubscriber(this, sub.filter);
          }
          throw new Error(`unsupported event: ${sub.type}`);
        }
        /**
         *  If a [[Subscriber]] fails and needs to replace itself, this
         *  method may be used.
         *
         *  For example, this is used for providers when using the
         *  ``eth_getFilterChanges`` method, which can return null if state
         *  filters are not supported by the backend, allowing the Subscriber
         *  to swap in a [[PollingEventSubscriber]].
         */
        _recoverSubscriber(oldSub, newSub) {
          for (const sub of __privateGet(this, _subs).values()) {
            if (sub.subscriber === oldSub) {
              if (sub.started) {
                sub.subscriber.stop();
              }
              sub.subscriber = newSub;
              if (sub.started) {
                newSub.start();
              }
              if (__privateGet(this, _pausedState) != null) {
                newSub.pause(__privateGet(this, _pausedState));
              }
              break;
            }
          }
        }
        async on(event, listener) {
          const sub = await __privateMethod(this, _AbstractProvider_instances, getSub_fn).call(this, event);
          sub.listeners.push({ listener, once: false });
          if (!sub.started) {
            sub.subscriber.start();
            sub.started = true;
            if (__privateGet(this, _pausedState) != null) {
              sub.subscriber.pause(__privateGet(this, _pausedState));
            }
          }
          return this;
        }
        async once(event, listener) {
          const sub = await __privateMethod(this, _AbstractProvider_instances, getSub_fn).call(this, event);
          sub.listeners.push({ listener, once: true });
          if (!sub.started) {
            sub.subscriber.start();
            sub.started = true;
            if (__privateGet(this, _pausedState) != null) {
              sub.subscriber.pause(__privateGet(this, _pausedState));
            }
          }
          return this;
        }
        async emit(event, ...args) {
          const sub = await __privateMethod(this, _AbstractProvider_instances, hasSub_fn).call(this, event, args);
          if (!sub || sub.listeners.length === 0) {
            return false;
          }
          ;
          const count = sub.listeners.length;
          sub.listeners = sub.listeners.filter(({ listener, once }) => {
            const payload = new EventPayload(this, once ? null : listener, event);
            try {
              listener.call(this, ...args, payload);
            } catch (error) {
            }
            return !once;
          });
          if (sub.listeners.length === 0) {
            if (sub.started) {
              sub.subscriber.stop();
            }
            __privateGet(this, _subs).delete(sub.tag);
          }
          return count > 0;
        }
        async listenerCount(event) {
          if (event) {
            const sub = await __privateMethod(this, _AbstractProvider_instances, hasSub_fn).call(this, event);
            if (!sub) {
              return 0;
            }
            return sub.listeners.length;
          }
          let total = 0;
          for (const { listeners } of __privateGet(this, _subs).values()) {
            total += listeners.length;
          }
          return total;
        }
        async listeners(event) {
          if (event) {
            const sub = await __privateMethod(this, _AbstractProvider_instances, hasSub_fn).call(this, event);
            if (!sub) {
              return [];
            }
            return sub.listeners.map(({ listener }) => listener);
          }
          let result = [];
          for (const { listeners } of __privateGet(this, _subs).values()) {
            result = result.concat(listeners.map(({ listener }) => listener));
          }
          return result;
        }
        async off(event, listener) {
          const sub = await __privateMethod(this, _AbstractProvider_instances, hasSub_fn).call(this, event);
          if (!sub) {
            return this;
          }
          if (listener) {
            const index = sub.listeners.map(({ listener: listener2 }) => listener2).indexOf(listener);
            if (index >= 0) {
              sub.listeners.splice(index, 1);
            }
          }
          if (!listener || sub.listeners.length === 0) {
            if (sub.started) {
              sub.subscriber.stop();
            }
            __privateGet(this, _subs).delete(sub.tag);
          }
          return this;
        }
        async removeAllListeners(event) {
          if (event) {
            const { tag, started, subscriber } = await __privateMethod(this, _AbstractProvider_instances, getSub_fn).call(this, event);
            if (started) {
              subscriber.stop();
            }
            __privateGet(this, _subs).delete(tag);
          } else {
            for (const [tag, { started, subscriber }] of __privateGet(this, _subs)) {
              if (started) {
                subscriber.stop();
              }
              __privateGet(this, _subs).delete(tag);
            }
          }
          return this;
        }
        // Alias for "on"
        async addListener(event, listener) {
          return await this.on(event, listener);
        }
        // Alias for "off"
        async removeListener(event, listener) {
          return this.off(event, listener);
        }
        /**
         *  If this provider has been destroyed using the [[destroy]] method.
         *
         *  Once destroyed, all resources are reclaimed, internal event loops
         *  and timers are cleaned up and no further requests may be sent to
         *  the provider.
         */
        get destroyed() {
          return __privateGet(this, _destroyed);
        }
        /**
         *  Sub-classes may use this to shutdown any sockets or release their
         *  resources and reject any pending requests.
         *
         *  Sub-classes **must** call ``super.destroy()``.
         */
        destroy() {
          this.removeAllListeners();
          for (const timerId of __privateGet(this, _timers).keys()) {
            this._clearTimeout(timerId);
          }
          __privateSet(this, _destroyed, true);
        }
        /**
         *  Whether the provider is currently paused.
         *
         *  A paused provider will not emit any events, and generally should
         *  not make any requests to the network, but that is up to sub-classes
         *  to manage.
         *
         *  Setting ``paused = true`` is identical to calling ``.pause(false)``,
         *  which will buffer any events that occur while paused until the
         *  provider is unpaused.
         */
        get paused() {
          return __privateGet(this, _pausedState) != null;
        }
        set paused(pause) {
          if (!!pause === this.paused) {
            return;
          }
          if (this.paused) {
            this.resume();
          } else {
            this.pause(false);
          }
        }
        /**
         *  Pause the provider. If %%dropWhilePaused%%, any events that occur
         *  while paused are dropped, otherwise all events will be emitted once
         *  the provider is unpaused.
         */
        pause(dropWhilePaused) {
          __privateSet(this, _lastBlockNumber, -1);
          if (__privateGet(this, _pausedState) != null) {
            if (__privateGet(this, _pausedState) == !!dropWhilePaused) {
              return;
            }
            assert(false, "cannot change pause type; resume first", "UNSUPPORTED_OPERATION", {
              operation: "pause"
            });
          }
          this._forEachSubscriber((s) => s.pause(dropWhilePaused));
          __privateSet(this, _pausedState, !!dropWhilePaused);
          for (const timer of __privateGet(this, _timers).values()) {
            if (timer.timer) {
              clearTimeout(timer.timer);
            }
            timer.time = getTime2() - timer.time;
          }
        }
        /**
         *  Resume the provider.
         */
        resume() {
          if (__privateGet(this, _pausedState) == null) {
            return;
          }
          this._forEachSubscriber((s) => s.resume());
          __privateSet(this, _pausedState, null);
          for (const timer of __privateGet(this, _timers).values()) {
            let timeout = timer.time;
            if (timeout < 0) {
              timeout = 0;
            }
            timer.time = getTime2();
            setTimeout(timer.func, timeout);
          }
        }
      };
      _subs = new WeakMap();
      _plugins2 = new WeakMap();
      _pausedState = new WeakMap();
      _destroyed = new WeakMap();
      _networkPromise = new WeakMap();
      _anyNetwork = new WeakMap();
      _performCache = new WeakMap();
      _lastBlockNumber = new WeakMap();
      _nextTimer = new WeakMap();
      _timers = new WeakMap();
      _disableCcipRead = new WeakMap();
      _options2 = new WeakMap();
      _AbstractProvider_instances = new WeakSet();
      perform_fn = async function(req) {
        const timeout = __privateGet(this, _options2).cacheTimeout;
        if (timeout < 0) {
          return await this._perform(req);
        }
        const tag = getTag(req.method, req);
        let perform = __privateGet(this, _performCache).get(tag);
        if (!perform) {
          perform = this._perform(req);
          __privateGet(this, _performCache).set(tag, perform);
          setTimeout(() => {
            if (__privateGet(this, _performCache).get(tag) === perform) {
              __privateGet(this, _performCache).delete(tag);
            }
          }, timeout);
        }
        return await perform;
      };
      call_fn = async function(tx, blockTag, attempt) {
        assert(attempt < MAX_CCIP_REDIRECTS, "CCIP read exceeded maximum redirections", "OFFCHAIN_FAULT", {
          reason: "TOO_MANY_REDIRECTS",
          transaction: Object.assign({}, tx, { blockTag, enableCcipRead: true })
        });
        const transaction = copyRequest(tx);
        try {
          return hexlify(await this._perform({ method: "call", transaction, blockTag }));
        } catch (error) {
          if (!this.disableCcipRead && isCallException(error) && error.data && attempt >= 0 && blockTag === "latest" && transaction.to != null && dataSlice(error.data, 0, 4) === "0x556f1830") {
            const data = error.data;
            const txSender = await resolveAddress(transaction.to, this);
            let ccipArgs;
            try {
              ccipArgs = parseOffchainLookup(dataSlice(error.data, 4));
            } catch (error2) {
              assert(false, error2.message, "OFFCHAIN_FAULT", {
                reason: "BAD_DATA",
                transaction,
                info: { data }
              });
            }
            assert(ccipArgs.sender.toLowerCase() === txSender.toLowerCase(), "CCIP Read sender mismatch", "CALL_EXCEPTION", {
              action: "call",
              data,
              reason: "OffchainLookup",
              transaction,
              invocation: null,
              revert: {
                signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                name: "OffchainLookup",
                args: ccipArgs.errorArgs
              }
            });
            const ccipResult = await this.ccipReadFetch(transaction, ccipArgs.calldata, ccipArgs.urls);
            assert(ccipResult != null, "CCIP Read failed to fetch data", "OFFCHAIN_FAULT", {
              reason: "FETCH_FAILED",
              transaction,
              info: { data: error.data, errorArgs: ccipArgs.errorArgs }
            });
            const tx2 = {
              to: txSender,
              data: concat([ccipArgs.selector, encodeBytes([ccipResult, ccipArgs.extraData])])
            };
            this.emit("debug", { action: "sendCcipReadCall", transaction: tx2 });
            try {
              const result = await __privateMethod(this, _AbstractProvider_instances, call_fn).call(this, tx2, blockTag, attempt + 1);
              this.emit("debug", { action: "receiveCcipReadCallResult", transaction: Object.assign({}, tx2), result });
              return result;
            } catch (error2) {
              this.emit("debug", { action: "receiveCcipReadCallError", transaction: Object.assign({}, tx2), error: error2 });
              throw error2;
            }
          }
          throw error;
        }
      };
      checkNetwork_fn = async function(promise) {
        const { value } = await resolveProperties({
          network: this.getNetwork(),
          value: promise
        });
        return value;
      };
      getAccountValue_fn = async function(request, _address, _blockTag) {
        let address = this._getAddress(_address);
        let blockTag = this._getBlockTag(_blockTag);
        if (typeof address !== "string" || typeof blockTag !== "string") {
          [address, blockTag] = await Promise.all([address, blockTag]);
        }
        return await __privateMethod(this, _AbstractProvider_instances, checkNetwork_fn).call(this, __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, Object.assign(request, { address, blockTag })));
      };
      getBlock_fn = async function(block, includeTransactions) {
        if (isHexString(block, 32)) {
          return await __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, {
            method: "getBlock",
            blockHash: block,
            includeTransactions
          });
        }
        let blockTag = this._getBlockTag(block);
        if (typeof blockTag !== "string") {
          blockTag = await blockTag;
        }
        return await __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, {
          method: "getBlock",
          blockTag,
          includeTransactions
        });
      };
      hasSub_fn = async function(event, emitArgs) {
        let sub = await getSubscription(event, this);
        if (sub.type === "event" && emitArgs && emitArgs.length > 0 && emitArgs[0].removed === true) {
          sub = await getSubscription({ orphan: "drop-log", log: emitArgs[0] }, this);
        }
        return __privateGet(this, _subs).get(sub.tag) || null;
      };
      getSub_fn = async function(event) {
        const subscription = await getSubscription(event, this);
        const tag = subscription.tag;
        let sub = __privateGet(this, _subs).get(tag);
        if (!sub) {
          const subscriber = this._getSubscriber(subscription);
          const addressableMap = /* @__PURE__ */ new WeakMap();
          const nameMap = /* @__PURE__ */ new Map();
          sub = { subscriber, tag, addressableMap, nameMap, started: false, listeners: [] };
          __privateGet(this, _subs).set(tag, sub);
        }
        return sub;
      };
      empty = new Uint8Array([]);
      zeros = "0x0000000000000000000000000000000000000000000000000000000000000000";
    }
  });

  // node_modules/ethers/lib.esm/providers/abstract-signer.js
  function checkProvider(signer, operation) {
    if (signer.provider) {
      return signer.provider;
    }
    assert(false, "missing provider", "UNSUPPORTED_OPERATION", { operation });
  }
  async function populate(signer, tx) {
    let pop = copyRequest(tx);
    if (pop.to != null) {
      pop.to = resolveAddress(pop.to, signer);
    }
    if (pop.from != null) {
      const from = pop.from;
      pop.from = Promise.all([
        signer.getAddress(),
        resolveAddress(from, signer)
      ]).then(([address, from2]) => {
        assertArgument(address.toLowerCase() === from2.toLowerCase(), "transaction from mismatch", "tx.from", from2);
        return address;
      });
    } else {
      pop.from = signer.getAddress();
    }
    return await resolveProperties(pop);
  }
  var AbstractSigner, _VoidSigner_instances, throwUnsupported_fn, _VoidSigner, VoidSigner;
  var init_abstract_signer = __esm({
    "node_modules/ethers/lib.esm/providers/abstract-signer.js"() {
      init_address2();
      init_transaction2();
      init_utils();
      init_provider();
      AbstractSigner = class {
        /**
         *  Creates a new Signer connected to %%provider%%.
         */
        constructor(provider) {
          /**
           *  The provider this signer is connected to.
           */
          __publicField(this, "provider");
          defineProperties(this, { provider: provider || null });
        }
        async getNonce(blockTag) {
          return checkProvider(this, "getTransactionCount").getTransactionCount(await this.getAddress(), blockTag);
        }
        async populateCall(tx) {
          const pop = await populate(this, tx);
          return pop;
        }
        async populateTransaction(tx) {
          const provider = checkProvider(this, "populateTransaction");
          const pop = await populate(this, tx);
          if (pop.nonce == null) {
            pop.nonce = await this.getNonce("pending");
          }
          if (pop.gasLimit == null) {
            pop.gasLimit = await this.estimateGas(pop);
          }
          const network = await this.provider.getNetwork();
          if (pop.chainId != null) {
            const chainId = getBigInt(pop.chainId);
            assertArgument(chainId === network.chainId, "transaction chainId mismatch", "tx.chainId", tx.chainId);
          } else {
            pop.chainId = network.chainId;
          }
          const hasEip1559 = pop.maxFeePerGas != null || pop.maxPriorityFeePerGas != null;
          if (pop.gasPrice != null && (pop.type === 2 || hasEip1559)) {
            assertArgument(false, "eip-1559 transaction do not support gasPrice", "tx", tx);
          } else if ((pop.type === 0 || pop.type === 1) && hasEip1559) {
            assertArgument(false, "pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "tx", tx);
          }
          if ((pop.type === 2 || pop.type == null) && (pop.maxFeePerGas != null && pop.maxPriorityFeePerGas != null)) {
            pop.type = 2;
          } else if (pop.type === 0 || pop.type === 1) {
            const feeData = await provider.getFeeData();
            assert(feeData.gasPrice != null, "network does not support gasPrice", "UNSUPPORTED_OPERATION", {
              operation: "getGasPrice"
            });
            if (pop.gasPrice == null) {
              pop.gasPrice = feeData.gasPrice;
            }
          } else {
            const feeData = await provider.getFeeData();
            if (pop.type == null) {
              if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {
                if (pop.authorizationList && pop.authorizationList.length) {
                  pop.type = 4;
                } else {
                  pop.type = 2;
                }
                if (pop.gasPrice != null) {
                  const gasPrice = pop.gasPrice;
                  delete pop.gasPrice;
                  pop.maxFeePerGas = gasPrice;
                  pop.maxPriorityFeePerGas = gasPrice;
                } else {
                  if (pop.maxFeePerGas == null) {
                    pop.maxFeePerGas = feeData.maxFeePerGas;
                  }
                  if (pop.maxPriorityFeePerGas == null) {
                    pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                  }
                }
              } else if (feeData.gasPrice != null) {
                assert(!hasEip1559, "network does not support EIP-1559", "UNSUPPORTED_OPERATION", {
                  operation: "populateTransaction"
                });
                if (pop.gasPrice == null) {
                  pop.gasPrice = feeData.gasPrice;
                }
                pop.type = 0;
              } else {
                assert(false, "failed to get consistent fee data", "UNSUPPORTED_OPERATION", {
                  operation: "signer.getFeeData"
                });
              }
            } else if (pop.type === 2 || pop.type === 3 || pop.type === 4) {
              if (pop.maxFeePerGas == null) {
                pop.maxFeePerGas = feeData.maxFeePerGas;
              }
              if (pop.maxPriorityFeePerGas == null) {
                pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
              }
            }
          }
          return await resolveProperties(pop);
        }
        async populateAuthorization(_auth) {
          const auth = Object.assign({}, _auth);
          if (auth.chainId == null) {
            auth.chainId = (await checkProvider(this, "getNetwork").getNetwork()).chainId;
          }
          if (auth.nonce == null) {
            auth.nonce = await this.getNonce();
          }
          return auth;
        }
        async estimateGas(tx) {
          return checkProvider(this, "estimateGas").estimateGas(await this.populateCall(tx));
        }
        async call(tx) {
          return checkProvider(this, "call").call(await this.populateCall(tx));
        }
        async resolveName(name) {
          const provider = checkProvider(this, "resolveName");
          return await provider.resolveName(name);
        }
        async sendTransaction(tx) {
          const provider = checkProvider(this, "sendTransaction");
          const pop = await this.populateTransaction(tx);
          delete pop.from;
          const txObj = Transaction.from(pop);
          return await provider.broadcastTransaction(await this.signTransaction(txObj));
        }
        // @TODO: in v7 move this to be abstract
        authorize(authorization) {
          assert(false, "authorization not implemented for this signer", "UNSUPPORTED_OPERATION", { operation: "authorize" });
        }
      };
      _VoidSigner = class _VoidSigner extends AbstractSigner {
        /**
         *  Creates a new **VoidSigner** with %%address%% attached to
         *  %%provider%%.
         */
        constructor(address, provider) {
          super(provider);
          __privateAdd(this, _VoidSigner_instances);
          /**
           *  The signer address.
           */
          __publicField(this, "address");
          defineProperties(this, { address });
        }
        async getAddress() {
          return this.address;
        }
        connect(provider) {
          return new _VoidSigner(this.address, provider);
        }
        async signTransaction(tx) {
          __privateMethod(this, _VoidSigner_instances, throwUnsupported_fn).call(this, "transactions", "signTransaction");
        }
        async signMessage(message) {
          __privateMethod(this, _VoidSigner_instances, throwUnsupported_fn).call(this, "messages", "signMessage");
        }
        async signTypedData(domain, types, value) {
          __privateMethod(this, _VoidSigner_instances, throwUnsupported_fn).call(this, "typed-data", "signTypedData");
        }
      };
      _VoidSigner_instances = new WeakSet();
      throwUnsupported_fn = function(suffix, operation) {
        assert(false, `VoidSigner cannot sign ${suffix}`, "UNSUPPORTED_OPERATION", { operation });
      };
      VoidSigner = _VoidSigner;
    }
  });

  // node_modules/ethers/lib.esm/providers/community.js
  function showThrottleMessage(service) {
    if (shown.has(service)) {
      return;
    }
    shown.add(service);
    console.log("========= NOTICE =========");
    console.log(`Request-Rate Exceeded for ${service} (this message will not be repeated)`);
    console.log("");
    console.log("The default API keys for each service are provided as a highly-throttled,");
    console.log("community resource for low-traffic projects and early prototyping.");
    console.log("");
    console.log("While your application will continue to function, we highly recommended");
    console.log("signing up for your own API keys to improve performance, increase your");
    console.log("request rate/limit and enable other perks, such as metrics and advanced APIs.");
    console.log("");
    console.log("For more details: https://docs.ethers.org/api-keys/");
    console.log("==========================");
  }
  var shown;
  var init_community = __esm({
    "node_modules/ethers/lib.esm/providers/community.js"() {
      shown = /* @__PURE__ */ new Set();
    }
  });

  // node_modules/ethers/lib.esm/providers/subscriber-filterid.js
  function copy3(obj) {
    return JSON.parse(JSON.stringify(obj));
  }
  var _provider4, _filterIdPromise, _poller3, _running3, _network, _hault, _FilterIdSubscriber_instances, poll_fn3, teardown_fn, FilterIdSubscriber, _event, FilterIdEventSubscriber, FilterIdPendingSubscriber;
  var init_subscriber_filterid = __esm({
    "node_modules/ethers/lib.esm/providers/subscriber-filterid.js"() {
      init_utils();
      init_subscriber_polling();
      FilterIdSubscriber = class {
        /**
         *  Creates a new **FilterIdSubscriber** which will used [[_subscribe]]
         *  and [[_emitResults]] to setup the subscription and provide the event
         *  to the %%provider%%.
         */
        constructor(provider) {
          __privateAdd(this, _FilterIdSubscriber_instances);
          __privateAdd(this, _provider4);
          __privateAdd(this, _filterIdPromise);
          __privateAdd(this, _poller3);
          __privateAdd(this, _running3);
          __privateAdd(this, _network);
          __privateAdd(this, _hault);
          __privateSet(this, _provider4, provider);
          __privateSet(this, _filterIdPromise, null);
          __privateSet(this, _poller3, __privateMethod(this, _FilterIdSubscriber_instances, poll_fn3).bind(this));
          __privateSet(this, _running3, false);
          __privateSet(this, _network, null);
          __privateSet(this, _hault, false);
        }
        /**
         *  Sub-classes **must** override this to begin the subscription.
         */
        _subscribe(provider) {
          throw new Error("subclasses must override this");
        }
        /**
         *  Sub-classes **must** override this handle the events.
         */
        _emitResults(provider, result) {
          throw new Error("subclasses must override this");
        }
        /**
         *  Sub-classes **must** override this handle recovery on errors.
         */
        _recover(provider) {
          throw new Error("subclasses must override this");
        }
        start() {
          if (__privateGet(this, _running3)) {
            return;
          }
          __privateSet(this, _running3, true);
          __privateMethod(this, _FilterIdSubscriber_instances, poll_fn3).call(this, -2);
        }
        stop() {
          if (!__privateGet(this, _running3)) {
            return;
          }
          __privateSet(this, _running3, false);
          __privateSet(this, _hault, true);
          __privateMethod(this, _FilterIdSubscriber_instances, teardown_fn).call(this);
          __privateGet(this, _provider4).off("block", __privateGet(this, _poller3));
        }
        pause(dropWhilePaused) {
          if (dropWhilePaused) {
            __privateMethod(this, _FilterIdSubscriber_instances, teardown_fn).call(this);
          }
          __privateGet(this, _provider4).off("block", __privateGet(this, _poller3));
        }
        resume() {
          this.start();
        }
      };
      _provider4 = new WeakMap();
      _filterIdPromise = new WeakMap();
      _poller3 = new WeakMap();
      _running3 = new WeakMap();
      _network = new WeakMap();
      _hault = new WeakMap();
      _FilterIdSubscriber_instances = new WeakSet();
      poll_fn3 = async function(blockNumber) {
        try {
          if (__privateGet(this, _filterIdPromise) == null) {
            __privateSet(this, _filterIdPromise, this._subscribe(__privateGet(this, _provider4)));
          }
          let filterId = null;
          try {
            filterId = await __privateGet(this, _filterIdPromise);
          } catch (error) {
            if (!isError(error, "UNSUPPORTED_OPERATION") || error.operation !== "eth_newFilter") {
              throw error;
            }
          }
          if (filterId == null) {
            __privateSet(this, _filterIdPromise, null);
            __privateGet(this, _provider4)._recoverSubscriber(this, this._recover(__privateGet(this, _provider4)));
            return;
          }
          const network = await __privateGet(this, _provider4).getNetwork();
          if (!__privateGet(this, _network)) {
            __privateSet(this, _network, network);
          }
          if (__privateGet(this, _network).chainId !== network.chainId) {
            throw new Error("chaid changed");
          }
          if (__privateGet(this, _hault)) {
            return;
          }
          const result = await __privateGet(this, _provider4).send("eth_getFilterChanges", [filterId]);
          await this._emitResults(__privateGet(this, _provider4), result);
        } catch (error) {
          console.log("@TODO", error);
        }
        __privateGet(this, _provider4).once("block", __privateGet(this, _poller3));
      };
      teardown_fn = function() {
        const filterIdPromise = __privateGet(this, _filterIdPromise);
        if (filterIdPromise) {
          __privateSet(this, _filterIdPromise, null);
          filterIdPromise.then((filterId) => {
            if (__privateGet(this, _provider4).destroyed) {
              return;
            }
            __privateGet(this, _provider4).send("eth_uninstallFilter", [filterId]);
          });
        }
      };
      FilterIdEventSubscriber = class extends FilterIdSubscriber {
        /**
         *  Creates a new **FilterIdEventSubscriber** attached to %%provider%%
         *  listening for %%filter%%.
         */
        constructor(provider, filter) {
          super(provider);
          __privateAdd(this, _event);
          __privateSet(this, _event, copy3(filter));
        }
        _recover(provider) {
          return new PollingEventSubscriber(provider, __privateGet(this, _event));
        }
        async _subscribe(provider) {
          const filterId = await provider.send("eth_newFilter", [__privateGet(this, _event)]);
          return filterId;
        }
        async _emitResults(provider, results) {
          for (const result of results) {
            provider.emit(__privateGet(this, _event), provider._wrapLog(result, provider._network));
          }
        }
      };
      _event = new WeakMap();
      FilterIdPendingSubscriber = class extends FilterIdSubscriber {
        async _subscribe(provider) {
          return await provider.send("eth_newPendingTransactionFilter", []);
        }
        async _emitResults(provider, results) {
          for (const result of results) {
            provider.emit("pending", result);
          }
        }
      };
    }
  });

  // node_modules/ethers/lib.esm/providers/provider-jsonrpc.js
  function deepCopy(value) {
    if (value == null || Primitive.indexOf(typeof value) >= 0) {
      return value;
    }
    if (typeof value.getAddress === "function") {
      return value;
    }
    if (Array.isArray(value)) {
      return value.map(deepCopy);
    }
    if (typeof value === "object") {
      return Object.keys(value).reduce((accum, key) => {
        accum[key] = value[key];
        return accum;
      }, {});
    }
    throw new Error(`should not happen: ${value} (${typeof value})`);
  }
  function stall(duration) {
    return new Promise((resolve) => {
      setTimeout(resolve, duration);
    });
  }
  function getLowerCase(value) {
    if (value) {
      return value.toLowerCase();
    }
    return value;
  }
  function isPollable(value) {
    return value && typeof value.pollingInterval === "number";
  }
  function spelunkData(value) {
    if (value == null) {
      return null;
    }
    if (typeof value.message === "string" && value.message.match(/revert/i) && isHexString(value.data)) {
      return { message: value.message, data: value.data };
    }
    if (typeof value === "object") {
      for (const key in value) {
        const result = spelunkData(value[key]);
        if (result) {
          return result;
        }
      }
      return null;
    }
    if (typeof value === "string") {
      try {
        return spelunkData(JSON.parse(value));
      } catch (error) {
      }
    }
    return null;
  }
  function _spelunkMessage(value, result) {
    if (value == null) {
      return;
    }
    if (typeof value.message === "string") {
      result.push(value.message);
    }
    if (typeof value === "object") {
      for (const key in value) {
        _spelunkMessage(value[key], result);
      }
    }
    if (typeof value === "string") {
      try {
        return _spelunkMessage(JSON.parse(value), result);
      } catch (error) {
      }
    }
  }
  function spelunkMessage(value) {
    const result = [];
    _spelunkMessage(value, result);
    return result;
  }
  var Primitive, defaultOptions2, JsonRpcSigner, _options3, _nextId, _payloads, _drainTimer, _notReady, _network2, _pendingDetectNetwork, _JsonRpcApiProvider_instances, scheduleDrain_fn, JsonRpcApiProvider, _pollingInterval, JsonRpcApiPollingProvider, _connect, JsonRpcProvider;
  var init_provider_jsonrpc = __esm({
    "node_modules/ethers/lib.esm/providers/provider-jsonrpc.js"() {
      init_abi();
      init_address2();
      init_hash();
      init_transaction2();
      init_utils();
      init_abstract_provider();
      init_abstract_signer();
      init_network();
      init_subscriber_filterid();
      init_subscriber_polling();
      Primitive = "bigint,boolean,function,number,string,symbol".split(/,/g);
      defaultOptions2 = {
        polling: false,
        staticNetwork: null,
        batchStallTime: 10,
        batchMaxSize: 1 << 20,
        batchMaxCount: 100,
        cacheTimeout: 250,
        pollingInterval: 4e3
      };
      JsonRpcSigner = class extends AbstractSigner {
        constructor(provider, address) {
          super(provider);
          __publicField(this, "address");
          address = getAddress(address);
          defineProperties(this, { address });
        }
        connect(provider) {
          assert(false, "cannot reconnect JsonRpcSigner", "UNSUPPORTED_OPERATION", {
            operation: "signer.connect"
          });
        }
        async getAddress() {
          return this.address;
        }
        // JSON-RPC will automatially fill in nonce, etc. so we just check from
        async populateTransaction(tx) {
          return await this.populateCall(tx);
        }
        // Returns just the hash of the transaction after sent, which is what
        // the bare JSON-RPC API does;
        async sendUncheckedTransaction(_tx) {
          const tx = deepCopy(_tx);
          const promises = [];
          if (tx.from) {
            const _from = tx.from;
            promises.push((async () => {
              const from = await resolveAddress(_from, this.provider);
              assertArgument(from != null && from.toLowerCase() === this.address.toLowerCase(), "from address mismatch", "transaction", _tx);
              tx.from = from;
            })());
          } else {
            tx.from = this.address;
          }
          if (tx.gasLimit == null) {
            promises.push((async () => {
              tx.gasLimit = await this.provider.estimateGas({ ...tx, from: this.address });
            })());
          }
          if (tx.to != null) {
            const _to2 = tx.to;
            promises.push((async () => {
              tx.to = await resolveAddress(_to2, this.provider);
            })());
          }
          if (promises.length) {
            await Promise.all(promises);
          }
          const hexTx = this.provider.getRpcTransaction(tx);
          return this.provider.send("eth_sendTransaction", [hexTx]);
        }
        async sendTransaction(tx) {
          const blockNumber = await this.provider.getBlockNumber();
          const hash2 = await this.sendUncheckedTransaction(tx);
          return await new Promise((resolve, reject) => {
            const timeouts = [1e3, 100];
            let invalids = 0;
            const checkTx = async () => {
              try {
                const tx2 = await this.provider.getTransaction(hash2);
                if (tx2 != null) {
                  resolve(tx2.replaceableTransaction(blockNumber));
                  return;
                }
              } catch (error) {
                if (isError(error, "CANCELLED") || isError(error, "BAD_DATA") || isError(error, "NETWORK_ERROR") || isError(error, "UNSUPPORTED_OPERATION")) {
                  if (error.info == null) {
                    error.info = {};
                  }
                  error.info.sendTransactionHash = hash2;
                  reject(error);
                  return;
                }
                if (isError(error, "INVALID_ARGUMENT")) {
                  invalids++;
                  if (error.info == null) {
                    error.info = {};
                  }
                  error.info.sendTransactionHash = hash2;
                  if (invalids > 10) {
                    reject(error);
                    return;
                  }
                }
                this.provider.emit("error", makeError("failed to fetch transation after sending (will try again)", "UNKNOWN_ERROR", { error }));
              }
              this.provider._setTimeout(() => {
                checkTx();
              }, timeouts.pop() || 4e3);
            };
            checkTx();
          });
        }
        async signTransaction(_tx) {
          const tx = deepCopy(_tx);
          if (tx.from) {
            const from = await resolveAddress(tx.from, this.provider);
            assertArgument(from != null && from.toLowerCase() === this.address.toLowerCase(), "from address mismatch", "transaction", _tx);
            tx.from = from;
          } else {
            tx.from = this.address;
          }
          const hexTx = this.provider.getRpcTransaction(tx);
          return await this.provider.send("eth_signTransaction", [hexTx]);
        }
        async signMessage(_message) {
          const message = typeof _message === "string" ? toUtf8Bytes(_message) : _message;
          return await this.provider.send("personal_sign", [
            hexlify(message),
            this.address.toLowerCase()
          ]);
        }
        async signTypedData(domain, types, _value2) {
          const value = deepCopy(_value2);
          const populated = await TypedDataEncoder.resolveNames(domain, types, value, async (value2) => {
            const address = await resolveAddress(value2);
            assertArgument(address != null, "TypedData does not support null address", "value", value2);
            return address;
          });
          return await this.provider.send("eth_signTypedData_v4", [
            this.address.toLowerCase(),
            JSON.stringify(TypedDataEncoder.getPayload(populated.domain, types, populated.value))
          ]);
        }
        async unlock(password) {
          return this.provider.send("personal_unlockAccount", [
            this.address.toLowerCase(),
            password,
            null
          ]);
        }
        // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign
        async _legacySignMessage(_message) {
          const message = typeof _message === "string" ? toUtf8Bytes(_message) : _message;
          return await this.provider.send("eth_sign", [
            this.address.toLowerCase(),
            hexlify(message)
          ]);
        }
      };
      JsonRpcApiProvider = class extends AbstractProvider {
        constructor(network, options) {
          super(network, options);
          __privateAdd(this, _JsonRpcApiProvider_instances);
          __privateAdd(this, _options3);
          // The next ID to use for the JSON-RPC ID field
          __privateAdd(this, _nextId);
          // Payloads are queued and triggered in batches using the drainTimer
          __privateAdd(this, _payloads);
          __privateAdd(this, _drainTimer);
          __privateAdd(this, _notReady);
          __privateAdd(this, _network2);
          __privateAdd(this, _pendingDetectNetwork);
          __privateSet(this, _nextId, 1);
          __privateSet(this, _options3, Object.assign({}, defaultOptions2, options || {}));
          __privateSet(this, _payloads, []);
          __privateSet(this, _drainTimer, null);
          __privateSet(this, _network2, null);
          __privateSet(this, _pendingDetectNetwork, null);
          {
            let resolve = null;
            const promise = new Promise((_resolve) => {
              resolve = _resolve;
            });
            __privateSet(this, _notReady, { promise, resolve });
          }
          const staticNetwork = this._getOption("staticNetwork");
          if (typeof staticNetwork === "boolean") {
            assertArgument(!staticNetwork || network !== "any", "staticNetwork cannot be used on special network 'any'", "options", options);
            if (staticNetwork && network != null) {
              __privateSet(this, _network2, Network.from(network));
            }
          } else if (staticNetwork) {
            assertArgument(network == null || staticNetwork.matches(network), "staticNetwork MUST match network object", "options", options);
            __privateSet(this, _network2, staticNetwork);
          }
        }
        /**
         *  Returns the value associated with the option %%key%%.
         *
         *  Sub-classes can use this to inquire about configuration options.
         */
        _getOption(key) {
          return __privateGet(this, _options3)[key];
        }
        /**
         *  Gets the [[Network]] this provider has committed to. On each call, the network
         *  is detected, and if it has changed, the call will reject.
         */
        get _network() {
          assert(__privateGet(this, _network2), "network is not available yet", "NETWORK_ERROR");
          return __privateGet(this, _network2);
        }
        /**
         *  Resolves to the non-normalized value by performing %%req%%.
         *
         *  Sub-classes may override this to modify behavior of actions,
         *  and should generally call ``super._perform`` as a fallback.
         */
        async _perform(req) {
          if (req.method === "call" || req.method === "estimateGas") {
            let tx = req.transaction;
            if (tx && tx.type != null && getBigInt(tx.type)) {
              if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {
                const feeData = await this.getFeeData();
                if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {
                  req = Object.assign({}, req, {
                    transaction: Object.assign({}, tx, { type: void 0 })
                  });
                }
              }
            }
          }
          const request = this.getRpcRequest(req);
          if (request != null) {
            return await this.send(request.method, request.args);
          }
          return super._perform(req);
        }
        /**
         *  Sub-classes may override this; it detects the *actual* network that
         *  we are **currently** connected to.
         *
         *  Keep in mind that [[send]] may only be used once [[ready]], otherwise the
         *  _send primitive must be used instead.
         */
        async _detectNetwork() {
          const network = this._getOption("staticNetwork");
          if (network) {
            if (network === true) {
              if (__privateGet(this, _network2)) {
                return __privateGet(this, _network2);
              }
            } else {
              return network;
            }
          }
          if (__privateGet(this, _pendingDetectNetwork)) {
            return await __privateGet(this, _pendingDetectNetwork);
          }
          if (this.ready) {
            __privateSet(this, _pendingDetectNetwork, (async () => {
              try {
                const result = Network.from(getBigInt(await this.send("eth_chainId", [])));
                __privateSet(this, _pendingDetectNetwork, null);
                return result;
              } catch (error) {
                __privateSet(this, _pendingDetectNetwork, null);
                throw error;
              }
            })());
            return await __privateGet(this, _pendingDetectNetwork);
          }
          __privateSet(this, _pendingDetectNetwork, (async () => {
            const payload = {
              id: __privateWrapper(this, _nextId)._++,
              method: "eth_chainId",
              params: [],
              jsonrpc: "2.0"
            };
            this.emit("debug", { action: "sendRpcPayload", payload });
            let result;
            try {
              result = (await this._send(payload))[0];
              __privateSet(this, _pendingDetectNetwork, null);
            } catch (error) {
              __privateSet(this, _pendingDetectNetwork, null);
              this.emit("debug", { action: "receiveRpcError", error });
              throw error;
            }
            this.emit("debug", { action: "receiveRpcResult", result });
            if ("result" in result) {
              return Network.from(getBigInt(result.result));
            }
            throw this.getRpcError(payload, result);
          })());
          return await __privateGet(this, _pendingDetectNetwork);
        }
        /**
         *  Sub-classes **MUST** call this. Until [[_start]] has been called, no calls
         *  will be passed to [[_send]] from [[send]]. If it is overridden, then
         *  ``super._start()`` **MUST** be called.
         *
         *  Calling it multiple times is safe and has no effect.
         */
        _start() {
          if (__privateGet(this, _notReady) == null || __privateGet(this, _notReady).resolve == null) {
            return;
          }
          __privateGet(this, _notReady).resolve();
          __privateSet(this, _notReady, null);
          (async () => {
            while (__privateGet(this, _network2) == null && !this.destroyed) {
              try {
                __privateSet(this, _network2, await this._detectNetwork());
              } catch (error) {
                if (this.destroyed) {
                  break;
                }
                console.log("JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)");
                this.emit("error", makeError("failed to bootstrap network detection", "NETWORK_ERROR", { event: "initial-network-discovery", info: { error } }));
                await stall(1e3);
              }
            }
            __privateMethod(this, _JsonRpcApiProvider_instances, scheduleDrain_fn).call(this);
          })();
        }
        /**
         *  Resolves once the [[_start]] has been called. This can be used in
         *  sub-classes to defer sending data until the connection has been
         *  established.
         */
        async _waitUntilReady() {
          if (__privateGet(this, _notReady) == null) {
            return;
          }
          return await __privateGet(this, _notReady).promise;
        }
        /**
         *  Return a Subscriber that will manage the %%sub%%.
         *
         *  Sub-classes may override this to modify the behavior of
         *  subscription management.
         */
        _getSubscriber(sub) {
          if (sub.type === "pending") {
            return new FilterIdPendingSubscriber(this);
          }
          if (sub.type === "event") {
            if (this._getOption("polling")) {
              return new PollingEventSubscriber(this, sub.filter);
            }
            return new FilterIdEventSubscriber(this, sub.filter);
          }
          if (sub.type === "orphan" && sub.filter.orphan === "drop-log") {
            return new UnmanagedSubscriber("orphan");
          }
          return super._getSubscriber(sub);
        }
        /**
         *  Returns true only if the [[_start]] has been called.
         */
        get ready() {
          return __privateGet(this, _notReady) == null;
        }
        /**
         *  Returns %%tx%% as a normalized JSON-RPC transaction request,
         *  which has all values hexlified and any numeric values converted
         *  to Quantity values.
         */
        getRpcTransaction(tx) {
          const result = {};
          ["chainId", "gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach((key) => {
            if (tx[key] == null) {
              return;
            }
            let dstKey = key;
            if (key === "gasLimit") {
              dstKey = "gas";
            }
            result[dstKey] = toQuantity(getBigInt(tx[key], `tx.${key}`));
          });
          ["from", "to", "data"].forEach((key) => {
            if (tx[key] == null) {
              return;
            }
            result[key] = hexlify(tx[key]);
          });
          if (tx.accessList) {
            result["accessList"] = accessListify(tx.accessList);
          }
          if (tx.blobVersionedHashes) {
            result["blobVersionedHashes"] = tx.blobVersionedHashes.map((h) => h.toLowerCase());
          }
          if (tx.authorizationList) {
            result["authorizationList"] = tx.authorizationList.map((_a2) => {
              const a = authorizationify(_a2);
              return {
                address: a.address,
                nonce: toQuantity(a.nonce),
                chainId: toQuantity(a.chainId),
                yParity: toQuantity(a.signature.yParity),
                r: a.signature.r,
                s: a.signature.s
              };
            });
          }
          return result;
        }
        /**
         *  Returns the request method and arguments required to perform
         *  %%req%%.
         */
        getRpcRequest(req) {
          switch (req.method) {
            case "chainId":
              return { method: "eth_chainId", args: [] };
            case "getBlockNumber":
              return { method: "eth_blockNumber", args: [] };
            case "getGasPrice":
              return { method: "eth_gasPrice", args: [] };
            case "getPriorityFee":
              return { method: "eth_maxPriorityFeePerGas", args: [] };
            case "getBalance":
              return {
                method: "eth_getBalance",
                args: [getLowerCase(req.address), req.blockTag]
              };
            case "getTransactionCount":
              return {
                method: "eth_getTransactionCount",
                args: [getLowerCase(req.address), req.blockTag]
              };
            case "getCode":
              return {
                method: "eth_getCode",
                args: [getLowerCase(req.address), req.blockTag]
              };
            case "getStorage":
              return {
                method: "eth_getStorageAt",
                args: [
                  getLowerCase(req.address),
                  "0x" + req.position.toString(16),
                  req.blockTag
                ]
              };
            case "broadcastTransaction":
              return {
                method: "eth_sendRawTransaction",
                args: [req.signedTransaction]
              };
            case "getBlock":
              if ("blockTag" in req) {
                return {
                  method: "eth_getBlockByNumber",
                  args: [req.blockTag, !!req.includeTransactions]
                };
              } else if ("blockHash" in req) {
                return {
                  method: "eth_getBlockByHash",
                  args: [req.blockHash, !!req.includeTransactions]
                };
              }
              break;
            case "getTransaction":
              return {
                method: "eth_getTransactionByHash",
                args: [req.hash]
              };
            case "getTransactionReceipt":
              return {
                method: "eth_getTransactionReceipt",
                args: [req.hash]
              };
            case "call":
              return {
                method: "eth_call",
                args: [this.getRpcTransaction(req.transaction), req.blockTag]
              };
            case "estimateGas": {
              return {
                method: "eth_estimateGas",
                args: [this.getRpcTransaction(req.transaction)]
              };
            }
            case "getLogs":
              if (req.filter && req.filter.address != null) {
                if (Array.isArray(req.filter.address)) {
                  req.filter.address = req.filter.address.map(getLowerCase);
                } else {
                  req.filter.address = getLowerCase(req.filter.address);
                }
              }
              return { method: "eth_getLogs", args: [req.filter] };
          }
          return null;
        }
        /**
         *  Returns an ethers-style Error for the given JSON-RPC error
         *  %%payload%%, coalescing the various strings and error shapes
         *  that different nodes return, coercing them into a machine-readable
         *  standardized error.
         */
        getRpcError(payload, _error2) {
          const { method } = payload;
          const { error } = _error2;
          if (method === "eth_estimateGas" && error.message) {
            const msg = error.message;
            if (!msg.match(/revert/i) && msg.match(/insufficient funds/i)) {
              return makeError("insufficient funds", "INSUFFICIENT_FUNDS", {
                transaction: payload.params[0],
                info: { payload, error }
              });
            } else if (msg.match(/nonce/i) && msg.match(/too low/i)) {
              return makeError("nonce has already been used", "NONCE_EXPIRED", {
                transaction: payload.params[0],
                info: { payload, error }
              });
            }
          }
          if (method === "eth_call" || method === "eth_estimateGas") {
            const result = spelunkData(error);
            const e = AbiCoder.getBuiltinCallException(method === "eth_call" ? "call" : "estimateGas", payload.params[0], result ? result.data : null);
            e.info = { error, payload };
            return e;
          }
          const message = JSON.stringify(spelunkMessage(error));
          if (typeof error.message === "string" && error.message.match(/user denied|ethers-user-denied/i)) {
            const actionMap = {
              eth_sign: "signMessage",
              personal_sign: "signMessage",
              eth_signTypedData_v4: "signTypedData",
              eth_signTransaction: "signTransaction",
              eth_sendTransaction: "sendTransaction",
              eth_requestAccounts: "requestAccess",
              wallet_requestAccounts: "requestAccess"
            };
            return makeError(`user rejected action`, "ACTION_REJECTED", {
              action: actionMap[method] || "unknown",
              reason: "rejected",
              info: { payload, error }
            });
          }
          if (method === "eth_sendRawTransaction" || method === "eth_sendTransaction") {
            const transaction = payload.params[0];
            if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {
              return makeError("insufficient funds for intrinsic transaction cost", "INSUFFICIENT_FUNDS", {
                transaction,
                info: { error }
              });
            }
            if (message.match(/nonce/i) && message.match(/too low/i)) {
              return makeError("nonce has already been used", "NONCE_EXPIRED", { transaction, info: { error } });
            }
            if (message.match(/replacement transaction/i) && message.match(/underpriced/i)) {
              return makeError("replacement fee too low", "REPLACEMENT_UNDERPRICED", { transaction, info: { error } });
            }
            if (message.match(/only replay-protected/i)) {
              return makeError("legacy pre-eip-155 transactions not supported", "UNSUPPORTED_OPERATION", {
                operation: method,
                info: { transaction, info: { error } }
              });
            }
          }
          let unsupported = !!message.match(/the method .* does not exist/i);
          if (!unsupported) {
            if (error && error.details && error.details.startsWith("Unauthorized method:")) {
              unsupported = true;
            }
          }
          if (unsupported) {
            return makeError("unsupported operation", "UNSUPPORTED_OPERATION", {
              operation: payload.method,
              info: { error, payload }
            });
          }
          return makeError("could not coalesce error", "UNKNOWN_ERROR", { error, payload });
        }
        /**
         *  Requests the %%method%% with %%params%% via the JSON-RPC protocol
         *  over the underlying channel. This can be used to call methods
         *  on the backend that do not have a high-level API within the Provider
         *  API.
         *
         *  This method queues requests according to the batch constraints
         *  in the options, assigns the request a unique ID.
         *
         *  **Do NOT override** this method in sub-classes; instead
         *  override [[_send]] or force the options values in the
         *  call to the constructor to modify this method's behavior.
         */
        send(method, params) {
          if (this.destroyed) {
            return Promise.reject(makeError("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: method }));
          }
          const id2 = __privateWrapper(this, _nextId)._++;
          const promise = new Promise((resolve, reject) => {
            __privateGet(this, _payloads).push({
              resolve,
              reject,
              payload: { method, params, id: id2, jsonrpc: "2.0" }
            });
          });
          __privateMethod(this, _JsonRpcApiProvider_instances, scheduleDrain_fn).call(this);
          return promise;
        }
        /**
         *  Resolves to the [[Signer]] account for  %%address%% managed by
         *  the client.
         *
         *  If the %%address%% is a number, it is used as an index in the
         *  the accounts from [[listAccounts]].
         *
         *  This can only be used on clients which manage accounts (such as
         *  Geth with imported account or MetaMask).
         *
         *  Throws if the account doesn't exist.
         */
        async getSigner(address) {
          if (address == null) {
            address = 0;
          }
          const accountsPromise = this.send("eth_accounts", []);
          if (typeof address === "number") {
            const accounts2 = await accountsPromise;
            if (address >= accounts2.length) {
              throw new Error("no such account");
            }
            return new JsonRpcSigner(this, accounts2[address]);
          }
          const { accounts } = await resolveProperties({
            network: this.getNetwork(),
            accounts: accountsPromise
          });
          address = getAddress(address);
          for (const account of accounts) {
            if (getAddress(account) === address) {
              return new JsonRpcSigner(this, address);
            }
          }
          throw new Error("invalid account");
        }
        async listAccounts() {
          const accounts = await this.send("eth_accounts", []);
          return accounts.map((a) => new JsonRpcSigner(this, a));
        }
        destroy() {
          if (__privateGet(this, _drainTimer)) {
            clearTimeout(__privateGet(this, _drainTimer));
            __privateSet(this, _drainTimer, null);
          }
          for (const { payload, reject } of __privateGet(this, _payloads)) {
            reject(makeError("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: payload.method }));
          }
          __privateSet(this, _payloads, []);
          super.destroy();
        }
      };
      _options3 = new WeakMap();
      _nextId = new WeakMap();
      _payloads = new WeakMap();
      _drainTimer = new WeakMap();
      _notReady = new WeakMap();
      _network2 = new WeakMap();
      _pendingDetectNetwork = new WeakMap();
      _JsonRpcApiProvider_instances = new WeakSet();
      scheduleDrain_fn = function() {
        if (__privateGet(this, _drainTimer)) {
          return;
        }
        const stallTime = this._getOption("batchMaxCount") === 1 ? 0 : this._getOption("batchStallTime");
        __privateSet(this, _drainTimer, setTimeout(() => {
          __privateSet(this, _drainTimer, null);
          const payloads = __privateGet(this, _payloads);
          __privateSet(this, _payloads, []);
          while (payloads.length) {
            const batch = [payloads.shift()];
            while (payloads.length) {
              if (batch.length === __privateGet(this, _options3).batchMaxCount) {
                break;
              }
              batch.push(payloads.shift());
              const bytes2 = JSON.stringify(batch.map((p) => p.payload));
              if (bytes2.length > __privateGet(this, _options3).batchMaxSize) {
                payloads.unshift(batch.pop());
                break;
              }
            }
            (async () => {
              const payload = batch.length === 1 ? batch[0].payload : batch.map((p) => p.payload);
              this.emit("debug", { action: "sendRpcPayload", payload });
              try {
                const result = await this._send(payload);
                this.emit("debug", { action: "receiveRpcResult", result });
                for (const { resolve, reject, payload: payload2 } of batch) {
                  if (this.destroyed) {
                    reject(makeError("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: payload2.method }));
                    continue;
                  }
                  const resp = result.filter((r) => r.id === payload2.id)[0];
                  if (resp == null) {
                    const error = makeError("missing response for request", "BAD_DATA", {
                      value: result,
                      info: { payload: payload2 }
                    });
                    this.emit("error", error);
                    reject(error);
                    continue;
                  }
                  if ("error" in resp) {
                    reject(this.getRpcError(payload2, resp));
                    continue;
                  }
                  resolve(resp.result);
                }
              } catch (error) {
                this.emit("debug", { action: "receiveRpcError", error });
                for (const { reject } of batch) {
                  reject(error);
                }
              }
            })();
          }
        }, stallTime));
      };
      JsonRpcApiPollingProvider = class extends JsonRpcApiProvider {
        constructor(network, options) {
          super(network, options);
          __privateAdd(this, _pollingInterval);
          let pollingInterval = this._getOption("pollingInterval");
          if (pollingInterval == null) {
            pollingInterval = defaultOptions2.pollingInterval;
          }
          __privateSet(this, _pollingInterval, pollingInterval);
        }
        _getSubscriber(sub) {
          const subscriber = super._getSubscriber(sub);
          if (isPollable(subscriber)) {
            subscriber.pollingInterval = __privateGet(this, _pollingInterval);
          }
          return subscriber;
        }
        /**
         *  The polling interval (default: 4000 ms)
         */
        get pollingInterval() {
          return __privateGet(this, _pollingInterval);
        }
        set pollingInterval(value) {
          if (!Number.isInteger(value) || value < 0) {
            throw new Error("invalid interval");
          }
          __privateSet(this, _pollingInterval, value);
          this._forEachSubscriber((sub) => {
            if (isPollable(sub)) {
              sub.pollingInterval = __privateGet(this, _pollingInterval);
            }
          });
        }
      };
      _pollingInterval = new WeakMap();
      JsonRpcProvider = class extends JsonRpcApiPollingProvider {
        constructor(url, network, options) {
          if (url == null) {
            url = "http://localhost:8545";
          }
          super(network, options);
          __privateAdd(this, _connect);
          if (typeof url === "string") {
            __privateSet(this, _connect, new FetchRequest(url));
          } else {
            __privateSet(this, _connect, url.clone());
          }
        }
        _getConnection() {
          return __privateGet(this, _connect).clone();
        }
        async send(method, params) {
          await this._start();
          return await super.send(method, params);
        }
        async _send(payload) {
          const request = this._getConnection();
          request.body = JSON.stringify(payload);
          request.setHeader("content-type", "application/json");
          const response = await request.send();
          response.assertOk();
          let resp = response.bodyJson;
          if (!Array.isArray(resp)) {
            resp = [resp];
          }
          return resp;
        }
      };
      _connect = new WeakMap();
    }
  });

  // node_modules/ethers/lib.esm/providers/provider-ankr.js
  function getHost(name) {
    switch (name) {
      case "mainnet":
        return "rpc.ankr.com/eth";
      case "goerli":
        return "rpc.ankr.com/eth_goerli";
      case "sepolia":
        return "rpc.ankr.com/eth_sepolia";
      case "arbitrum":
        return "rpc.ankr.com/arbitrum";
      case "base":
        return "rpc.ankr.com/base";
      case "base-goerli":
        return "rpc.ankr.com/base_goerli";
      case "base-sepolia":
        return "rpc.ankr.com/base_sepolia";
      case "bnb":
        return "rpc.ankr.com/bsc";
      case "bnbt":
        return "rpc.ankr.com/bsc_testnet_chapel";
      case "matic":
        return "rpc.ankr.com/polygon";
      case "matic-mumbai":
        return "rpc.ankr.com/polygon_mumbai";
      case "optimism":
        return "rpc.ankr.com/optimism";
      case "optimism-goerli":
        return "rpc.ankr.com/optimism_testnet";
      case "optimism-sepolia":
        return "rpc.ankr.com/optimism_sepolia";
    }
    assertArgument(false, "unsupported network", "network", name);
  }
  var defaultApiKey, AnkrProvider;
  var init_provider_ankr = __esm({
    "node_modules/ethers/lib.esm/providers/provider-ankr.js"() {
      init_utils();
      init_community();
      init_network();
      init_provider_jsonrpc();
      defaultApiKey = "9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";
      AnkrProvider = class _AnkrProvider extends JsonRpcProvider {
        /**
         *  Create a new **AnkrProvider**.
         *
         *  By default connecting to ``mainnet`` with a highly throttled
         *  API key.
         */
        constructor(_network3, apiKey) {
          if (_network3 == null) {
            _network3 = "mainnet";
          }
          const network = Network.from(_network3);
          if (apiKey == null) {
            apiKey = defaultApiKey;
          }
          const options = { polling: true, staticNetwork: network };
          const request = _AnkrProvider.getRequest(network, apiKey);
          super(request, network, options);
          /**
           *  The API key for the Ankr connection.
           */
          __publicField(this, "apiKey");
          defineProperties(this, { apiKey });
        }
        _getProvider(chainId) {
          try {
            return new _AnkrProvider(chainId, this.apiKey);
          } catch (error) {
          }
          return super._getProvider(chainId);
        }
        /**
         *  Returns a prepared request for connecting to %%network%% with
         *  %%apiKey%%.
         */
        static getRequest(network, apiKey) {
          if (apiKey == null) {
            apiKey = defaultApiKey;
          }
          const request = new FetchRequest(`https://${getHost(network.name)}/${apiKey}`);
          request.allowGzip = true;
          if (apiKey === defaultApiKey) {
            request.retryFunc = async (request2, response, attempt) => {
              showThrottleMessage("AnkrProvider");
              return true;
            };
          }
          return request;
        }
        getRpcError(payload, error) {
          if (payload.method === "eth_sendRawTransaction") {
            if (error && error.error && error.error.message === "INTERNAL_ERROR: could not replace existing tx") {
              error.error.message = "replacement transaction underpriced";
            }
          }
          return super.getRpcError(payload, error);
        }
        isCommunityResource() {
          return this.apiKey === defaultApiKey;
        }
      };
    }
  });

  // node_modules/ethers/lib.esm/providers/provider-alchemy.js
  function getHost2(name) {
    switch (name) {
      case "mainnet":
        return "eth-mainnet.alchemyapi.io";
      case "goerli":
        return "eth-goerli.g.alchemy.com";
      case "sepolia":
        return "eth-sepolia.g.alchemy.com";
      case "arbitrum":
        return "arb-mainnet.g.alchemy.com";
      case "arbitrum-goerli":
        return "arb-goerli.g.alchemy.com";
      case "arbitrum-sepolia":
        return "arb-sepolia.g.alchemy.com";
      case "base":
        return "base-mainnet.g.alchemy.com";
      case "base-goerli":
        return "base-goerli.g.alchemy.com";
      case "base-sepolia":
        return "base-sepolia.g.alchemy.com";
      case "matic":
        return "polygon-mainnet.g.alchemy.com";
      case "matic-amoy":
        return "polygon-amoy.g.alchemy.com";
      case "matic-mumbai":
        return "polygon-mumbai.g.alchemy.com";
      case "optimism":
        return "opt-mainnet.g.alchemy.com";
      case "optimism-goerli":
        return "opt-goerli.g.alchemy.com";
      case "optimism-sepolia":
        return "opt-sepolia.g.alchemy.com";
    }
    assertArgument(false, "unsupported network", "network", name);
  }
  var defaultApiKey2, AlchemyProvider;
  var init_provider_alchemy = __esm({
    "node_modules/ethers/lib.esm/providers/provider-alchemy.js"() {
      init_utils();
      init_community();
      init_network();
      init_provider_jsonrpc();
      defaultApiKey2 = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
      AlchemyProvider = class _AlchemyProvider extends JsonRpcProvider {
        constructor(_network3, apiKey) {
          if (_network3 == null) {
            _network3 = "mainnet";
          }
          const network = Network.from(_network3);
          if (apiKey == null) {
            apiKey = defaultApiKey2;
          }
          const request = _AlchemyProvider.getRequest(network, apiKey);
          super(request, network, { staticNetwork: network });
          __publicField(this, "apiKey");
          defineProperties(this, { apiKey });
        }
        _getProvider(chainId) {
          try {
            return new _AlchemyProvider(chainId, this.apiKey);
          } catch (error) {
          }
          return super._getProvider(chainId);
        }
        async _perform(req) {
          if (req.method === "getTransactionResult") {
            const { trace, tx } = await resolveProperties({
              trace: this.send("trace_transaction", [req.hash]),
              tx: this.getTransaction(req.hash)
            });
            if (trace == null || tx == null) {
              return null;
            }
            let data;
            let error = false;
            try {
              data = trace[0].result.output;
              error = trace[0].error === "Reverted";
            } catch (error2) {
            }
            if (data) {
              assert(!error, "an error occurred during transaction executions", "CALL_EXCEPTION", {
                action: "getTransactionResult",
                data,
                reason: null,
                transaction: tx,
                invocation: null,
                revert: null
                // @TODO
              });
              return data;
            }
            assert(false, "could not parse trace result", "BAD_DATA", { value: trace });
          }
          return await super._perform(req);
        }
        isCommunityResource() {
          return this.apiKey === defaultApiKey2;
        }
        static getRequest(network, apiKey) {
          if (apiKey == null) {
            apiKey = defaultApiKey2;
          }
          const request = new FetchRequest(`https://${getHost2(network.name)}/v2/${apiKey}`);
          request.allowGzip = true;
          if (apiKey === defaultApiKey2) {
            request.retryFunc = async (request2, response, attempt) => {
              showThrottleMessage("alchemy");
              return true;
            };
          }
          return request;
        }
      };
    }
  });

  // node_modules/ethers/lib.esm/providers/provider-chainstack.js
  function getApiKey(name) {
    switch (name) {
      case "mainnet":
        return "39f1d67cedf8b7831010a665328c9197";
      case "arbitrum":
        return "0550c209db33c3abf4cc927e1e18cea1";
      case "bnb":
        return "98b5a77e531614387366f6fc5da097f8";
      case "matic":
        return "cd9d4d70377471aa7c142ec4a4205249";
    }
    assertArgument(false, "unsupported network", "network", name);
  }
  function getHost3(name) {
    switch (name) {
      case "mainnet":
        return "ethereum-mainnet.core.chainstack.com";
      case "arbitrum":
        return "arbitrum-mainnet.core.chainstack.com";
      case "bnb":
        return "bsc-mainnet.core.chainstack.com";
      case "matic":
        return "polygon-mainnet.core.chainstack.com";
    }
    assertArgument(false, "unsupported network", "network", name);
  }
  var ChainstackProvider;
  var init_provider_chainstack = __esm({
    "node_modules/ethers/lib.esm/providers/provider-chainstack.js"() {
      init_utils();
      init_community();
      init_network();
      init_provider_jsonrpc();
      ChainstackProvider = class _ChainstackProvider extends JsonRpcProvider {
        /**
         *  Creates a new **ChainstackProvider**.
         */
        constructor(_network3, apiKey) {
          if (_network3 == null) {
            _network3 = "mainnet";
          }
          const network = Network.from(_network3);
          if (apiKey == null) {
            apiKey = getApiKey(network.name);
          }
          const request = _ChainstackProvider.getRequest(network, apiKey);
          super(request, network, { staticNetwork: network });
          /**
           *  The API key for the Chainstack connection.
           */
          __publicField(this, "apiKey");
          defineProperties(this, { apiKey });
        }
        _getProvider(chainId) {
          try {
            return new _ChainstackProvider(chainId, this.apiKey);
          } catch (error) {
          }
          return super._getProvider(chainId);
        }
        isCommunityResource() {
          return this.apiKey === getApiKey(this._network.name);
        }
        /**
         *  Returns a prepared request for connecting to %%network%%
         *  with %%apiKey%% and %%projectSecret%%.
         */
        static getRequest(network, apiKey) {
          if (apiKey == null) {
            apiKey = getApiKey(network.name);
          }
          const request = new FetchRequest(`https://${getHost3(network.name)}/${apiKey}`);
          request.allowGzip = true;
          if (apiKey === getApiKey(network.name)) {
            request.retryFunc = async (request2, response, attempt) => {
              showThrottleMessage("ChainstackProvider");
              return true;
            };
          }
          return request;
        }
      };
    }
  });

  // node_modules/ethers/lib.esm/providers/provider-cloudflare.js
  var CloudflareProvider;
  var init_provider_cloudflare = __esm({
    "node_modules/ethers/lib.esm/providers/provider-cloudflare.js"() {
      init_utils();
      init_network();
      init_provider_jsonrpc();
      CloudflareProvider = class extends JsonRpcProvider {
        constructor(_network3) {
          if (_network3 == null) {
            _network3 = "mainnet";
          }
          const network = Network.from(_network3);
          assertArgument(network.name === "mainnet", "unsupported network", "network", _network3);
          super("https://cloudflare-eth.com/", network, { staticNetwork: network });
        }
      };
    }
  });

  // node_modules/ethers/lib.esm/providers/provider-etherscan.js
  function isPromise2(value) {
    return value && typeof value.then === "function";
  }
  var THROTTLE, EtherscanPluginId, EtherscanPlugin, skipKeys, nextId, _plugin, EtherscanProvider;
  var init_provider_etherscan = __esm({
    "node_modules/ethers/lib.esm/providers/provider-etherscan.js"() {
      init_abi();
      init_contract2();
      init_transaction2();
      init_utils();
      init_abstract_provider();
      init_network();
      init_plugins_network();
      init_community();
      THROTTLE = 2e3;
      EtherscanPluginId = "org.ethers.plugins.provider.Etherscan";
      EtherscanPlugin = class _EtherscanPlugin extends NetworkPlugin {
        /**
         *  Creates a new **EtherscanProvider** which will use
         *  %%baseUrl%%.
         */
        constructor(baseUrl) {
          super(EtherscanPluginId);
          /**
           *  The Etherscan API base URL.
           */
          __publicField(this, "baseUrl");
          defineProperties(this, { baseUrl });
        }
        clone() {
          return new _EtherscanPlugin(this.baseUrl);
        }
      };
      skipKeys = ["enableCcipRead"];
      nextId = 1;
      EtherscanProvider = class extends AbstractProvider {
        /**
         *  Creates a new **EtherscanBaseProvider**.
         */
        constructor(_network3, _apiKey) {
          const apiKey = _apiKey != null ? _apiKey : null;
          super();
          /**
           *  The connected network.
           */
          __publicField(this, "network");
          /**
           *  The API key or null if using the community provided bandwidth.
           */
          __publicField(this, "apiKey");
          __privateAdd(this, _plugin);
          const network = Network.from(_network3);
          __privateSet(this, _plugin, network.getPlugin(EtherscanPluginId));
          defineProperties(this, { apiKey, network });
          this.getBaseUrl();
        }
        /**
         *  Returns the base URL.
         *
         *  If an [[EtherscanPlugin]] is configured on the
         *  [[EtherscanBaseProvider_network]], returns the plugin's
         *  baseUrl.
         */
        getBaseUrl() {
          if (__privateGet(this, _plugin)) {
            return __privateGet(this, _plugin).baseUrl;
          }
          switch (this.network.name) {
            case "mainnet":
              return "https://api.etherscan.io";
            case "goerli":
              return "https://api-goerli.etherscan.io";
            case "sepolia":
              return "https://api-sepolia.etherscan.io";
            case "holesky":
              return "https://api-holesky.etherscan.io";
            case "arbitrum":
              return "https://api.arbiscan.io";
            case "arbitrum-goerli":
              return "https://api-goerli.arbiscan.io";
            case "base":
              return "https://api.basescan.org";
            case "base-sepolia":
              return "https://api-sepolia.basescan.org";
            case "bnb":
              return "https://api.bscscan.com";
            case "bnbt":
              return "https://api-testnet.bscscan.com";
            case "matic":
              return "https://api.polygonscan.com";
            case "matic-amoy":
              return "https://api-amoy.polygonscan.com";
            case "matic-mumbai":
              return "https://api-testnet.polygonscan.com";
            case "optimism":
              return "https://api-optimistic.etherscan.io";
            case "optimism-goerli":
              return "https://api-goerli-optimistic.etherscan.io";
            default:
          }
          assertArgument(false, "unsupported network", "network", this.network);
        }
        /**
         *  Returns the URL for the %%module%% and %%params%%.
         */
        getUrl(module, params) {
          const query = Object.keys(params).reduce((accum, key) => {
            const value = params[key];
            if (value != null) {
              accum += `&${key}=${value}`;
            }
            return accum;
          }, "");
          const apiKey = this.apiKey ? `&apikey=${this.apiKey}` : "";
          return `${this.getBaseUrl()}/api?module=${module}${query}${apiKey}`;
        }
        /**
         *  Returns the URL for using POST requests.
         */
        getPostUrl() {
          return `${this.getBaseUrl()}/api`;
        }
        /**
         *  Returns the parameters for using POST requests.
         */
        getPostData(module, params) {
          params.module = module;
          params.apikey = this.apiKey;
          return params;
        }
        async detectNetwork() {
          return this.network;
        }
        /**
         *  Resolves to the result of calling %%module%% with %%params%%.
         *
         *  If %%post%%, the request is made as a POST request.
         */
        async fetch(module, params, post) {
          const id2 = nextId++;
          const url = post ? this.getPostUrl() : this.getUrl(module, params);
          const payload = post ? this.getPostData(module, params) : null;
          this.emit("debug", { action: "sendRequest", id: id2, url, payload });
          const request = new FetchRequest(url);
          request.setThrottleParams({ slotInterval: 1e3 });
          request.retryFunc = (req, resp, attempt) => {
            if (this.isCommunityResource()) {
              showThrottleMessage("Etherscan");
            }
            return Promise.resolve(true);
          };
          request.processFunc = async (request2, response2) => {
            const result2 = response2.hasBody() ? JSON.parse(toUtf8String(response2.body)) : {};
            const throttle = (typeof result2.result === "string" ? result2.result : "").toLowerCase().indexOf("rate limit") >= 0;
            if (module === "proxy") {
              if (result2 && result2.status == 0 && result2.message == "NOTOK" && throttle) {
                this.emit("debug", { action: "receiveError", id: id2, reason: "proxy-NOTOK", error: result2 });
                response2.throwThrottleError(result2.result, THROTTLE);
              }
            } else {
              if (throttle) {
                this.emit("debug", { action: "receiveError", id: id2, reason: "null result", error: result2.result });
                response2.throwThrottleError(result2.result, THROTTLE);
              }
            }
            return response2;
          };
          if (payload) {
            request.setHeader("content-type", "application/x-www-form-urlencoded; charset=UTF-8");
            request.body = Object.keys(payload).map((k) => `${k}=${payload[k]}`).join("&");
          }
          const response = await request.send();
          try {
            response.assertOk();
          } catch (error) {
            this.emit("debug", { action: "receiveError", id: id2, error, reason: "assertOk" });
            assert(false, "response error", "SERVER_ERROR", { request, response });
          }
          if (!response.hasBody()) {
            this.emit("debug", { action: "receiveError", id: id2, error: "missing body", reason: "null body" });
            assert(false, "missing response", "SERVER_ERROR", { request, response });
          }
          const result = JSON.parse(toUtf8String(response.body));
          if (module === "proxy") {
            if (result.jsonrpc != "2.0") {
              this.emit("debug", { action: "receiveError", id: id2, result, reason: "invalid JSON-RPC" });
              assert(false, "invalid JSON-RPC response (missing jsonrpc='2.0')", "SERVER_ERROR", { request, response, info: { result } });
            }
            if (result.error) {
              this.emit("debug", { action: "receiveError", id: id2, result, reason: "JSON-RPC error" });
              assert(false, "error response", "SERVER_ERROR", { request, response, info: { result } });
            }
            this.emit("debug", { action: "receiveRequest", id: id2, result });
            return result.result;
          } else {
            if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) {
              this.emit("debug", { action: "receiveRequest", id: id2, result });
              return result.result;
            }
            if (result.status != 1 || typeof result.message === "string" && !result.message.match(/^OK/)) {
              this.emit("debug", { action: "receiveError", id: id2, result });
              assert(false, "error response", "SERVER_ERROR", { request, response, info: { result } });
            }
            this.emit("debug", { action: "receiveRequest", id: id2, result });
            return result.result;
          }
        }
        /**
         *  Returns %%transaction%% normalized for the Etherscan API.
         */
        _getTransactionPostData(transaction) {
          const result = {};
          for (let key in transaction) {
            if (skipKeys.indexOf(key) >= 0) {
              continue;
            }
            if (transaction[key] == null) {
              continue;
            }
            let value = transaction[key];
            if (key === "type" && value === 0) {
              continue;
            }
            if (key === "blockTag" && value === "latest") {
              continue;
            }
            if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key]) {
              value = toQuantity(value);
            } else if (key === "accessList") {
              value = "[" + accessListify(value).map((set) => {
                return `{address:"${set.address}",storageKeys:["${set.storageKeys.join('","')}"]}`;
              }).join(",") + "]";
            } else if (key === "blobVersionedHashes") {
              if (value.length === 0) {
                continue;
              }
              assert(false, "Etherscan API does not support blobVersionedHashes", "UNSUPPORTED_OPERATION", {
                operation: "_getTransactionPostData",
                info: { transaction }
              });
            } else {
              value = hexlify(value);
            }
            result[key] = value;
          }
          return result;
        }
        /**
         *  Throws the normalized Etherscan error.
         */
        _checkError(req, error, transaction) {
          let message = "";
          if (isError(error, "SERVER_ERROR")) {
            try {
              message = error.info.result.error.message;
            } catch (e) {
            }
            if (!message) {
              try {
                message = error.info.message;
              } catch (e) {
              }
            }
          }
          if (req.method === "estimateGas") {
            if (!message.match(/revert/i) && message.match(/insufficient funds/i)) {
              assert(false, "insufficient funds", "INSUFFICIENT_FUNDS", {
                transaction: req.transaction
              });
            }
          }
          if (req.method === "call" || req.method === "estimateGas") {
            if (message.match(/execution reverted/i)) {
              let data = "";
              try {
                data = error.info.result.error.data;
              } catch (error2) {
              }
              const e = AbiCoder.getBuiltinCallException(req.method, req.transaction, data);
              e.info = { request: req, error };
              throw e;
            }
          }
          if (message) {
            if (req.method === "broadcastTransaction") {
              const transaction2 = Transaction.from(req.signedTransaction);
              if (message.match(/replacement/i) && message.match(/underpriced/i)) {
                assert(false, "replacement fee too low", "REPLACEMENT_UNDERPRICED", {
                  transaction: transaction2
                });
              }
              if (message.match(/insufficient funds/)) {
                assert(false, "insufficient funds for intrinsic transaction cost", "INSUFFICIENT_FUNDS", {
                  transaction: transaction2
                });
              }
              if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {
                assert(false, "nonce has already been used", "NONCE_EXPIRED", {
                  transaction: transaction2
                });
              }
            }
          }
          throw error;
        }
        async _detectNetwork() {
          return this.network;
        }
        async _perform(req) {
          switch (req.method) {
            case "chainId":
              return this.network.chainId;
            case "getBlockNumber":
              return this.fetch("proxy", { action: "eth_blockNumber" });
            case "getGasPrice":
              return this.fetch("proxy", { action: "eth_gasPrice" });
            case "getPriorityFee":
              if (this.network.name === "mainnet") {
                return "1000000000";
              } else if (this.network.name === "optimism") {
                return "1000000";
              } else {
                throw new Error("fallback onto the AbstractProvider default");
              }
            /* Working with Etherscan to get this added:
            try {
                const test = await this.fetch("proxy", {
                    action: "eth_maxPriorityFeePerGas"
                });
                console.log(test);
                return test;
            } catch (e) {
                console.log("DEBUG", e);
                throw e;
            }
            */
            /* This might be safe; but due to rounding neither myself
               or Etherscan are necessarily comfortable with this. :)
            try {
                const result = await this.fetch("gastracker", { action: "gasoracle" });
                console.log(result);
                const gasPrice = parseUnits(result.SafeGasPrice, "gwei");
                const baseFee = parseUnits(result.suggestBaseFee, "gwei");
                const priorityFee = gasPrice - baseFee;
                if (priorityFee < 0) { throw new Error("negative priority fee; defer to abstract provider default"); }
                return priorityFee;
            } catch (error) {
                console.log("DEBUG", error);
                throw error;
            }
            */
            case "getBalance":
              return this.fetch("account", {
                action: "balance",
                address: req.address,
                tag: req.blockTag
              });
            case "getTransactionCount":
              return this.fetch("proxy", {
                action: "eth_getTransactionCount",
                address: req.address,
                tag: req.blockTag
              });
            case "getCode":
              return this.fetch("proxy", {
                action: "eth_getCode",
                address: req.address,
                tag: req.blockTag
              });
            case "getStorage":
              return this.fetch("proxy", {
                action: "eth_getStorageAt",
                address: req.address,
                position: req.position,
                tag: req.blockTag
              });
            case "broadcastTransaction":
              return this.fetch("proxy", {
                action: "eth_sendRawTransaction",
                hex: req.signedTransaction
              }, true).catch((error) => {
                return this._checkError(req, error, req.signedTransaction);
              });
            case "getBlock":
              if ("blockTag" in req) {
                return this.fetch("proxy", {
                  action: "eth_getBlockByNumber",
                  tag: req.blockTag,
                  boolean: req.includeTransactions ? "true" : "false"
                });
              }
              assert(false, "getBlock by blockHash not supported by Etherscan", "UNSUPPORTED_OPERATION", {
                operation: "getBlock(blockHash)"
              });
            case "getTransaction":
              return this.fetch("proxy", {
                action: "eth_getTransactionByHash",
                txhash: req.hash
              });
            case "getTransactionReceipt":
              return this.fetch("proxy", {
                action: "eth_getTransactionReceipt",
                txhash: req.hash
              });
            case "call": {
              if (req.blockTag !== "latest") {
                throw new Error("EtherscanProvider does not support blockTag for call");
              }
              const postData = this._getTransactionPostData(req.transaction);
              postData.module = "proxy";
              postData.action = "eth_call";
              try {
                return await this.fetch("proxy", postData, true);
              } catch (error) {
                return this._checkError(req, error, req.transaction);
              }
            }
            case "estimateGas": {
              const postData = this._getTransactionPostData(req.transaction);
              postData.module = "proxy";
              postData.action = "eth_estimateGas";
              try {
                return await this.fetch("proxy", postData, true);
              } catch (error) {
                return this._checkError(req, error, req.transaction);
              }
            }
            /*
                        case "getLogs": {
                            // Needs to complain if more than one address is passed in
                            const args: Record<string, any> = { action: "getLogs" }
            
                            if (params.filter.fromBlock) {
                                args.fromBlock = checkLogTag(params.filter.fromBlock);
                            }
            
                            if (params.filter.toBlock) {
                                args.toBlock = checkLogTag(params.filter.toBlock);
                            }
            
                            if (params.filter.address) {
                                args.address = params.filter.address;
                            }
            
                            // @TODO: We can handle slightly more complicated logs using the logs API
                            if (params.filter.topics && params.filter.topics.length > 0) {
                                if (params.filter.topics.length > 1) {
                                    logger.throwError("unsupported topic count", Logger.Errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });
                                }
                                if (params.filter.topics.length === 1) {
                                    const topic0 = params.filter.topics[0];
                                    if (typeof(topic0) !== "string" || topic0.length !== 66) {
                                        logger.throwError("unsupported topic format", Logger.Errors.UNSUPPORTED_OPERATION, { topic0: topic0 });
                                    }
                                    args.topic0 = topic0;
                                }
                            }
            
                            const logs: Array<any> = await this.fetch("logs", args);
            
                            // Cache txHash => blockHash
                            let blocks: { [tag: string]: string } = {};
            
                            // Add any missing blockHash to the logs
                            for (let i = 0; i < logs.length; i++) {
                                const log = logs[i];
                                if (log.blockHash != null) { continue; }
                                if (blocks[log.blockNumber] == null) {
                                    const block = await this.getBlock(log.blockNumber);
                                    if (block) {
                                        blocks[log.blockNumber] = block.hash;
                                    }
                                }
            
                                log.blockHash = blocks[log.blockNumber];
                            }
            
                            return logs;
                        }
            */
            default:
              break;
          }
          return super._perform(req);
        }
        async getNetwork() {
          return this.network;
        }
        /**
         *  Resolves to the current price of ether.
         *
         *  This returns ``0`` on any network other than ``mainnet``.
         */
        async getEtherPrice() {
          if (this.network.name !== "mainnet") {
            return 0;
          }
          return parseFloat((await this.fetch("stats", { action: "ethprice" })).ethusd);
        }
        /**
         *  Resolves to a [Contract]] for %%address%%, using the
         *  Etherscan API to retreive the Contract ABI.
         */
        async getContract(_address) {
          let address = this._getAddress(_address);
          if (isPromise2(address)) {
            address = await address;
          }
          try {
            const resp = await this.fetch("contract", {
              action: "getabi",
              address
            });
            const abi = JSON.parse(resp);
            return new Contract(address, abi, this);
          } catch (error) {
            return null;
          }
        }
        isCommunityResource() {
          return this.apiKey == null;
        }
      };
      _plugin = new WeakMap();
    }
  });

  // node_modules/ethers/lib.esm/providers/ws-browser.js
  function getGlobal2() {
    if (typeof self !== "undefined") {
      return self;
    }
    if (typeof window !== "undefined") {
      return window;
    }
    if (typeof global !== "undefined") {
      return global;
    }
    throw new Error("unable to locate global object");
  }
  var _WebSocket;
  var init_ws_browser = __esm({
    "node_modules/ethers/lib.esm/providers/ws-browser.js"() {
      _WebSocket = getGlobal2().WebSocket;
    }
  });

  // node_modules/ethers/lib.esm/providers/provider-socket.js
  var _provider5, _filter4, _filterId, _paused, _emitPromise, SocketSubscriber, SocketBlockSubscriber, SocketPendingSubscriber, _logFilter, SocketEventSubscriber, _callbacks, _subs2, _pending, SocketProvider;
  var init_provider_socket = __esm({
    "node_modules/ethers/lib.esm/providers/provider-socket.js"() {
      init_abstract_provider();
      init_utils();
      init_provider_jsonrpc();
      SocketSubscriber = class {
        /**
         *  Creates a new **SocketSubscriber** attached to %%provider%% listening
         *  to %%filter%%.
         */
        constructor(provider, filter) {
          __privateAdd(this, _provider5);
          __privateAdd(this, _filter4);
          __privateAdd(this, _filterId);
          __privateAdd(this, _paused);
          __privateAdd(this, _emitPromise);
          __privateSet(this, _provider5, provider);
          __privateSet(this, _filter4, JSON.stringify(filter));
          __privateSet(this, _filterId, null);
          __privateSet(this, _paused, null);
          __privateSet(this, _emitPromise, null);
        }
        /**
         *  The filter.
         */
        get filter() {
          return JSON.parse(__privateGet(this, _filter4));
        }
        start() {
          __privateSet(this, _filterId, __privateGet(this, _provider5).send("eth_subscribe", this.filter).then((filterId) => {
            ;
            __privateGet(this, _provider5)._register(filterId, this);
            return filterId;
          }));
        }
        stop() {
          __privateGet(this, _filterId).then((filterId) => {
            if (__privateGet(this, _provider5).destroyed) {
              return;
            }
            __privateGet(this, _provider5).send("eth_unsubscribe", [filterId]);
          });
          __privateSet(this, _filterId, null);
        }
        // @TODO: pause should trap the current blockNumber, unsub, and on resume use getLogs
        //        and resume
        pause(dropWhilePaused) {
          assert(dropWhilePaused, "preserve logs while paused not supported by SocketSubscriber yet", "UNSUPPORTED_OPERATION", { operation: "pause(false)" });
          __privateSet(this, _paused, !!dropWhilePaused);
        }
        resume() {
          __privateSet(this, _paused, null);
        }
        /**
         *  @_ignore:
         */
        _handleMessage(message) {
          if (__privateGet(this, _filterId) == null) {
            return;
          }
          if (__privateGet(this, _paused) === null) {
            let emitPromise = __privateGet(this, _emitPromise);
            if (emitPromise == null) {
              emitPromise = this._emit(__privateGet(this, _provider5), message);
            } else {
              emitPromise = emitPromise.then(async () => {
                await this._emit(__privateGet(this, _provider5), message);
              });
            }
            __privateSet(this, _emitPromise, emitPromise.then(() => {
              if (__privateGet(this, _emitPromise) === emitPromise) {
                __privateSet(this, _emitPromise, null);
              }
            }));
          }
        }
        /**
         *  Sub-classes **must** override this to emit the events on the
         *  provider.
         */
        async _emit(provider, message) {
          throw new Error("sub-classes must implemente this; _emit");
        }
      };
      _provider5 = new WeakMap();
      _filter4 = new WeakMap();
      _filterId = new WeakMap();
      _paused = new WeakMap();
      _emitPromise = new WeakMap();
      SocketBlockSubscriber = class extends SocketSubscriber {
        /**
         *  @_ignore:
         */
        constructor(provider) {
          super(provider, ["newHeads"]);
        }
        async _emit(provider, message) {
          provider.emit("block", parseInt(message.number));
        }
      };
      SocketPendingSubscriber = class extends SocketSubscriber {
        /**
         *  @_ignore:
         */
        constructor(provider) {
          super(provider, ["newPendingTransactions"]);
        }
        async _emit(provider, message) {
          provider.emit("pending", message);
        }
      };
      SocketEventSubscriber = class extends SocketSubscriber {
        /**
         *  @_ignore:
         */
        constructor(provider, filter) {
          super(provider, ["logs", filter]);
          __privateAdd(this, _logFilter);
          __privateSet(this, _logFilter, JSON.stringify(filter));
        }
        /**
         *  The filter.
         */
        get logFilter() {
          return JSON.parse(__privateGet(this, _logFilter));
        }
        async _emit(provider, message) {
          provider.emit(this.logFilter, provider._wrapLog(message, provider._network));
        }
      };
      _logFilter = new WeakMap();
      SocketProvider = class extends JsonRpcApiProvider {
        /**
         *  Creates a new **SocketProvider** connected to %%network%%.
         *
         *  If unspecified, the network will be discovered.
         */
        constructor(network, _options4) {
          const options = Object.assign({}, _options4 != null ? _options4 : {});
          assertArgument(options.batchMaxCount == null || options.batchMaxCount === 1, "sockets-based providers do not support batches", "options.batchMaxCount", _options4);
          options.batchMaxCount = 1;
          if (options.staticNetwork == null) {
            options.staticNetwork = true;
          }
          super(network, options);
          __privateAdd(this, _callbacks);
          // Maps each filterId to its subscriber
          __privateAdd(this, _subs2);
          // If any events come in before a subscriber has finished
          // registering, queue them
          __privateAdd(this, _pending);
          __privateSet(this, _callbacks, /* @__PURE__ */ new Map());
          __privateSet(this, _subs2, /* @__PURE__ */ new Map());
          __privateSet(this, _pending, /* @__PURE__ */ new Map());
        }
        // This value is only valid after _start has been called
        /*
        get _network(): Network {
            if (this.#network == null) {
                throw new Error("this shouldn't happen");
            }
            return this.#network.clone();
        }
        */
        _getSubscriber(sub) {
          switch (sub.type) {
            case "close":
              return new UnmanagedSubscriber("close");
            case "block":
              return new SocketBlockSubscriber(this);
            case "pending":
              return new SocketPendingSubscriber(this);
            case "event":
              return new SocketEventSubscriber(this, sub.filter);
            case "orphan":
              if (sub.filter.orphan === "drop-log") {
                return new UnmanagedSubscriber("drop-log");
              }
          }
          return super._getSubscriber(sub);
        }
        /**
         *  Register a new subscriber. This is used internalled by Subscribers
         *  and generally is unecessary unless extending capabilities.
         */
        _register(filterId, subscriber) {
          __privateGet(this, _subs2).set(filterId, subscriber);
          const pending = __privateGet(this, _pending).get(filterId);
          if (pending) {
            for (const message of pending) {
              subscriber._handleMessage(message);
            }
            __privateGet(this, _pending).delete(filterId);
          }
        }
        async _send(payload) {
          assertArgument(!Array.isArray(payload), "WebSocket does not support batch send", "payload", payload);
          const promise = new Promise((resolve, reject) => {
            __privateGet(this, _callbacks).set(payload.id, { payload, resolve, reject });
          });
          await this._waitUntilReady();
          await this._write(JSON.stringify(payload));
          return [await promise];
        }
        // Sub-classes must call this once they are connected
        /*
            async _start(): Promise<void> {
                if (this.#ready) { return; }
        
                for (const { payload } of this.#callbacks.values()) {
                    await this._write(JSON.stringify(payload));
                }
        
                this.#ready = (async function() {
                    await super._start();
                })();
            }
            */
        /**
         *  Sub-classes **must** call this with messages received over their
         *  transport to be processed and dispatched.
         */
        async _processMessage(message) {
          const result = JSON.parse(message);
          if (result && typeof result === "object" && "id" in result) {
            const callback = __privateGet(this, _callbacks).get(result.id);
            if (callback == null) {
              this.emit("error", makeError("received result for unknown id", "UNKNOWN_ERROR", {
                reasonCode: "UNKNOWN_ID",
                result
              }));
              return;
            }
            __privateGet(this, _callbacks).delete(result.id);
            callback.resolve(result);
          } else if (result && result.method === "eth_subscription") {
            const filterId = result.params.subscription;
            const subscriber = __privateGet(this, _subs2).get(filterId);
            if (subscriber) {
              subscriber._handleMessage(result.params.result);
            } else {
              let pending = __privateGet(this, _pending).get(filterId);
              if (pending == null) {
                pending = [];
                __privateGet(this, _pending).set(filterId, pending);
              }
              pending.push(result.params.result);
            }
          } else {
            this.emit("error", makeError("received unexpected message", "UNKNOWN_ERROR", {
              reasonCode: "UNEXPECTED_MESSAGE",
              result
            }));
            return;
          }
        }
        /**
         *  Sub-classes **must** override this to send %%message%% over their
         *  transport.
         */
        async _write(message) {
          throw new Error("sub-classes must override this");
        }
      };
      _callbacks = new WeakMap();
      _subs2 = new WeakMap();
      _pending = new WeakMap();
    }
  });

  // node_modules/ethers/lib.esm/providers/provider-websocket.js
  var _connect2, _websocket, WebSocketProvider;
  var init_provider_websocket = __esm({
    "node_modules/ethers/lib.esm/providers/provider-websocket.js"() {
      init_ws_browser();
      init_provider_socket();
      WebSocketProvider = class extends SocketProvider {
        constructor(url, network, options) {
          super(network, options);
          __privateAdd(this, _connect2);
          __privateAdd(this, _websocket);
          if (typeof url === "string") {
            __privateSet(this, _connect2, () => {
              return new _WebSocket(url);
            });
            __privateSet(this, _websocket, __privateGet(this, _connect2).call(this));
          } else if (typeof url === "function") {
            __privateSet(this, _connect2, url);
            __privateSet(this, _websocket, url());
          } else {
            __privateSet(this, _connect2, null);
            __privateSet(this, _websocket, url);
          }
          this.websocket.onopen = async () => {
            try {
              await this._start();
              this.resume();
            } catch (error) {
              console.log("failed to start WebsocketProvider", error);
            }
          };
          this.websocket.onmessage = (message) => {
            this._processMessage(message.data);
          };
        }
        get websocket() {
          if (__privateGet(this, _websocket) == null) {
            throw new Error("websocket closed");
          }
          return __privateGet(this, _websocket);
        }
        async _write(message) {
          this.websocket.send(message);
        }
        async destroy() {
          if (__privateGet(this, _websocket) != null) {
            __privateGet(this, _websocket).close();
            __privateSet(this, _websocket, null);
          }
          super.destroy();
        }
      };
      _connect2 = new WeakMap();
      _websocket = new WeakMap();
    }
  });

  // node_modules/ethers/lib.esm/providers/provider-infura.js
  function getHost4(name) {
    switch (name) {
      case "mainnet":
        return "mainnet.infura.io";
      case "goerli":
        return "goerli.infura.io";
      case "sepolia":
        return "sepolia.infura.io";
      case "arbitrum":
        return "arbitrum-mainnet.infura.io";
      case "arbitrum-goerli":
        return "arbitrum-goerli.infura.io";
      case "arbitrum-sepolia":
        return "arbitrum-sepolia.infura.io";
      case "base":
        return "base-mainnet.infura.io";
      case "base-goerlia":
      // @TODO: Remove this typo in the future!
      case "base-goerli":
        return "base-goerli.infura.io";
      case "base-sepolia":
        return "base-sepolia.infura.io";
      case "bnb":
        return "bsc-mainnet.infura.io";
      case "bnbt":
        return "bsc-testnet.infura.io";
      case "linea":
        return "linea-mainnet.infura.io";
      case "linea-goerli":
        return "linea-goerli.infura.io";
      case "linea-sepolia":
        return "linea-sepolia.infura.io";
      case "matic":
        return "polygon-mainnet.infura.io";
      case "matic-amoy":
        return "polygon-amoy.infura.io";
      case "matic-mumbai":
        return "polygon-mumbai.infura.io";
      case "optimism":
        return "optimism-mainnet.infura.io";
      case "optimism-goerli":
        return "optimism-goerli.infura.io";
      case "optimism-sepolia":
        return "optimism-sepolia.infura.io";
    }
    assertArgument(false, "unsupported network", "network", name);
  }
  var defaultProjectId, InfuraWebSocketProvider, InfuraProvider;
  var init_provider_infura = __esm({
    "node_modules/ethers/lib.esm/providers/provider-infura.js"() {
      init_utils();
      init_community();
      init_network();
      init_provider_jsonrpc();
      init_provider_websocket();
      defaultProjectId = "84842078b09946638c03157f83405213";
      InfuraWebSocketProvider = class extends WebSocketProvider {
        /**
         *  Creates a new **InfuraWebSocketProvider**.
         */
        constructor(network, projectId) {
          const provider = new InfuraProvider(network, projectId);
          const req = provider._getConnection();
          assert(!req.credentials, "INFURA WebSocket project secrets unsupported", "UNSUPPORTED_OPERATION", { operation: "InfuraProvider.getWebSocketProvider()" });
          const url = req.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
          super(url, provider._network);
          /**
           *  The Project ID for the INFURA connection.
           */
          __publicField(this, "projectId");
          /**
           *  The Project Secret.
           *
           *  If null, no authenticated requests are made. This should not
           *  be used outside of private contexts.
           */
          __publicField(this, "projectSecret");
          defineProperties(this, {
            projectId: provider.projectId,
            projectSecret: provider.projectSecret
          });
        }
        isCommunityResource() {
          return this.projectId === defaultProjectId;
        }
      };
      InfuraProvider = class _InfuraProvider extends JsonRpcProvider {
        /**
         *  Creates a new **InfuraProvider**.
         */
        constructor(_network3, projectId, projectSecret) {
          if (_network3 == null) {
            _network3 = "mainnet";
          }
          const network = Network.from(_network3);
          if (projectId == null) {
            projectId = defaultProjectId;
          }
          if (projectSecret == null) {
            projectSecret = null;
          }
          const request = _InfuraProvider.getRequest(network, projectId, projectSecret);
          super(request, network, { staticNetwork: network });
          /**
           *  The Project ID for the INFURA connection.
           */
          __publicField(this, "projectId");
          /**
           *  The Project Secret.
           *
           *  If null, no authenticated requests are made. This should not
           *  be used outside of private contexts.
           */
          __publicField(this, "projectSecret");
          defineProperties(this, { projectId, projectSecret });
        }
        _getProvider(chainId) {
          try {
            return new _InfuraProvider(chainId, this.projectId, this.projectSecret);
          } catch (error) {
          }
          return super._getProvider(chainId);
        }
        isCommunityResource() {
          return this.projectId === defaultProjectId;
        }
        /**
         *  Creates a new **InfuraWebSocketProvider**.
         */
        static getWebSocketProvider(network, projectId) {
          return new InfuraWebSocketProvider(network, projectId);
        }
        /**
         *  Returns a prepared request for connecting to %%network%%
         *  with %%projectId%% and %%projectSecret%%.
         */
        static getRequest(network, projectId, projectSecret) {
          if (projectId == null) {
            projectId = defaultProjectId;
          }
          if (projectSecret == null) {
            projectSecret = null;
          }
          const request = new FetchRequest(`https://${getHost4(network.name)}/v3/${projectId}`);
          request.allowGzip = true;
          if (projectSecret) {
            request.setCredentials("", projectSecret);
          }
          if (projectId === defaultProjectId) {
            request.retryFunc = async (request2, response, attempt) => {
              showThrottleMessage("InfuraProvider");
              return true;
            };
          }
          return request;
        }
      };
    }
  });

  // node_modules/ethers/lib.esm/providers/provider-quicknode.js
  function getHost5(name) {
    switch (name) {
      case "mainnet":
        return "ethers.quiknode.pro";
      case "goerli":
        return "ethers.ethereum-goerli.quiknode.pro";
      case "sepolia":
        return "ethers.ethereum-sepolia.quiknode.pro";
      case "holesky":
        return "ethers.ethereum-holesky.quiknode.pro";
      case "arbitrum":
        return "ethers.arbitrum-mainnet.quiknode.pro";
      case "arbitrum-goerli":
        return "ethers.arbitrum-goerli.quiknode.pro";
      case "arbitrum-sepolia":
        return "ethers.arbitrum-sepolia.quiknode.pro";
      case "base":
        return "ethers.base-mainnet.quiknode.pro";
      case "base-goerli":
        return "ethers.base-goerli.quiknode.pro";
      case "base-spolia":
        return "ethers.base-sepolia.quiknode.pro";
      case "bnb":
        return "ethers.bsc.quiknode.pro";
      case "bnbt":
        return "ethers.bsc-testnet.quiknode.pro";
      case "matic":
        return "ethers.matic.quiknode.pro";
      case "matic-mumbai":
        return "ethers.matic-testnet.quiknode.pro";
      case "optimism":
        return "ethers.optimism.quiknode.pro";
      case "optimism-goerli":
        return "ethers.optimism-goerli.quiknode.pro";
      case "optimism-sepolia":
        return "ethers.optimism-sepolia.quiknode.pro";
      case "xdai":
        return "ethers.xdai.quiknode.pro";
    }
    assertArgument(false, "unsupported network", "network", name);
  }
  var defaultToken, QuickNodeProvider;
  var init_provider_quicknode = __esm({
    "node_modules/ethers/lib.esm/providers/provider-quicknode.js"() {
      init_utils();
      init_community();
      init_network();
      init_provider_jsonrpc();
      defaultToken = "919b412a057b5e9c9b6dce193c5a60242d6efadb";
      QuickNodeProvider = class _QuickNodeProvider extends JsonRpcProvider {
        /**
         *  Creates a new **QuickNodeProvider**.
         */
        constructor(_network3, token) {
          if (_network3 == null) {
            _network3 = "mainnet";
          }
          const network = Network.from(_network3);
          if (token == null) {
            token = defaultToken;
          }
          const request = _QuickNodeProvider.getRequest(network, token);
          super(request, network, { staticNetwork: network });
          /**
           *  The API token.
           */
          __publicField(this, "token");
          defineProperties(this, { token });
        }
        _getProvider(chainId) {
          try {
            return new _QuickNodeProvider(chainId, this.token);
          } catch (error) {
          }
          return super._getProvider(chainId);
        }
        isCommunityResource() {
          return this.token === defaultToken;
        }
        /**
         *  Returns a new request prepared for %%network%% and the
         *  %%token%%.
         */
        static getRequest(network, token) {
          if (token == null) {
            token = defaultToken;
          }
          const request = new FetchRequest(`https://${getHost5(network.name)}/${token}`);
          request.allowGzip = true;
          if (token === defaultToken) {
            request.retryFunc = async (request2, response, attempt) => {
              showThrottleMessage("QuickNodeProvider");
              return true;
            };
          }
          return request;
        }
      };
    }
  });

  // node_modules/ethers/lib.esm/providers/provider-fallback.js
  function shuffle(array2) {
    for (let i = array2.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      const tmp = array2[i];
      array2[i] = array2[j];
      array2[j] = tmp;
    }
  }
  function stall2(duration) {
    return new Promise((resolve) => {
      setTimeout(resolve, duration);
    });
  }
  function getTime3() {
    return (/* @__PURE__ */ new Date()).getTime();
  }
  function stringify2(value) {
    return JSON.stringify(value, (key, value2) => {
      if (typeof value2 === "bigint") {
        return { type: "bigint", value: value2.toString() };
      }
      return value2;
    });
  }
  async function waitForSync(config, blockNumber) {
    while (config.blockNumber < 0 || config.blockNumber < blockNumber) {
      if (!config._updateNumber) {
        config._updateNumber = (async () => {
          try {
            const blockNumber2 = await config.provider.getBlockNumber();
            if (blockNumber2 > config.blockNumber) {
              config.blockNumber = blockNumber2;
            }
          } catch (error) {
            config.blockNumber = -2;
            config._lastFatalError = error;
            config._lastFatalErrorTimestamp = getTime3();
          }
          config._updateNumber = null;
        })();
      }
      await config._updateNumber;
      config.outOfSync++;
      if (config._lastFatalError) {
        break;
      }
    }
  }
  function _normalize(value) {
    if (value == null) {
      return "null";
    }
    if (Array.isArray(value)) {
      return "[" + value.map(_normalize).join(",") + "]";
    }
    if (typeof value === "object" && typeof value.toJSON === "function") {
      return _normalize(value.toJSON());
    }
    switch (typeof value) {
      case "boolean":
      case "symbol":
        return value.toString();
      case "bigint":
      case "number":
        return BigInt(value).toString();
      case "string":
        return JSON.stringify(value);
      case "object": {
        const keys = Object.keys(value);
        keys.sort();
        return "{" + keys.map((k) => `${JSON.stringify(k)}:${_normalize(value[k])}`).join(",") + "}";
      }
    }
    console.log("Could not serialize", value);
    throw new Error("Hmm...");
  }
  function normalizeResult(method, value) {
    if ("error" in value) {
      const error = value.error;
      let tag;
      if (isError(error, "CALL_EXCEPTION")) {
        tag = _normalize(Object.assign({}, error, {
          shortMessage: void 0,
          reason: void 0,
          info: void 0
        }));
      } else {
        tag = _normalize(error);
      }
      return { tag, value: error };
    }
    const result = value.result;
    return { tag: _normalize(result), value: result };
  }
  function checkQuorum(quorum, results) {
    const tally = /* @__PURE__ */ new Map();
    for (const { value, tag, weight } of results) {
      const t = tally.get(tag) || { value, weight: 0 };
      t.weight += weight;
      tally.set(tag, t);
    }
    let best = null;
    for (const r of tally.values()) {
      if (r.weight >= quorum && (!best || r.weight > best.weight)) {
        best = r;
      }
    }
    if (best) {
      return best.value;
    }
    return void 0;
  }
  function getMedian(quorum, results) {
    let resultWeight = 0;
    const errorMap = /* @__PURE__ */ new Map();
    let bestError = null;
    const values = [];
    for (const { value, tag, weight } of results) {
      if (value instanceof Error) {
        const e = errorMap.get(tag) || { value, weight: 0 };
        e.weight += weight;
        errorMap.set(tag, e);
        if (bestError == null || e.weight > bestError.weight) {
          bestError = e;
        }
      } else {
        values.push(BigInt(value));
        resultWeight += weight;
      }
    }
    if (resultWeight < quorum) {
      if (bestError && bestError.weight >= quorum) {
        return bestError.value;
      }
      return void 0;
    }
    values.sort((a, b2) => a < b2 ? -1 : b2 > a ? 1 : 0);
    const mid = Math.floor(values.length / 2);
    if (values.length % 2) {
      return values[mid];
    }
    return (values[mid - 1] + values[mid] + BN_16) / BN_24;
  }
  function getAnyResult(quorum, results) {
    const result = checkQuorum(quorum, results);
    if (result !== void 0) {
      return result;
    }
    for (const r of results) {
      if (r.value) {
        return r.value;
      }
    }
    return void 0;
  }
  function getFuzzyMode(quorum, results) {
    if (quorum === 1) {
      return getNumber2(getMedian(quorum, results), "%internal");
    }
    const tally = /* @__PURE__ */ new Map();
    const add3 = (result, weight) => {
      const t = tally.get(result) || { result, weight: 0 };
      t.weight += weight;
      tally.set(result, t);
    };
    for (const { weight, value } of results) {
      const r = getNumber2(value);
      add3(r - 1, weight);
      add3(r, weight);
      add3(r + 1, weight);
    }
    let bestWeight = 0;
    let bestResult = void 0;
    for (const { weight, result } of tally.values()) {
      if (weight >= quorum && (weight > bestWeight || bestResult != null && weight === bestWeight && result > bestResult)) {
        bestWeight = weight;
        bestResult = result;
      }
    }
    return bestResult;
  }
  var BN_16, BN_24, defaultConfig, defaultState, _configs, _height, _initialSyncPromise, _FallbackProvider_instances, getNextConfig_fn, addRunner_fn, initialSync_fn, checkQuorum_fn, waitForQuorum_fn, FallbackProvider;
  var init_provider_fallback = __esm({
    "node_modules/ethers/lib.esm/providers/provider-fallback.js"() {
      init_utils();
      init_abstract_provider();
      init_network();
      BN_16 = BigInt("1");
      BN_24 = BigInt("2");
      defaultConfig = { stallTimeout: 400, priority: 1, weight: 1 };
      defaultState = {
        blockNumber: -2,
        requests: 0,
        lateResponses: 0,
        errorResponses: 0,
        outOfSync: -1,
        unsupportedEvents: 0,
        rollingDuration: 0,
        score: 0,
        _network: null,
        _updateNumber: null,
        _totalTime: 0,
        _lastFatalError: null,
        _lastFatalErrorTimestamp: 0
      };
      FallbackProvider = class extends AbstractProvider {
        /**
         *  Creates a new **FallbackProvider** with %%providers%% connected to
         *  %%network%%.
         *
         *  If a [[Provider]] is included in %%providers%%, defaults are used
         *  for the configuration.
         */
        constructor(providers, network, options) {
          super(network, options);
          __privateAdd(this, _FallbackProvider_instances);
          /**
           *  The number of backends that must agree on a value before it is
           *  accpeted.
           */
          __publicField(this, "quorum");
          /**
           *  @_ignore:
           */
          __publicField(this, "eventQuorum");
          /**
           *  @_ignore:
           */
          __publicField(this, "eventWorkers");
          __privateAdd(this, _configs);
          __privateAdd(this, _height);
          __privateAdd(this, _initialSyncPromise);
          __privateSet(this, _configs, providers.map((p) => {
            if (p instanceof AbstractProvider) {
              return Object.assign({ provider: p }, defaultConfig, defaultState);
            } else {
              return Object.assign({}, defaultConfig, p, defaultState);
            }
          }));
          __privateSet(this, _height, -2);
          __privateSet(this, _initialSyncPromise, null);
          if (options && options.quorum != null) {
            this.quorum = options.quorum;
          } else {
            this.quorum = Math.ceil(__privateGet(this, _configs).reduce((accum, config) => {
              accum += config.weight;
              return accum;
            }, 0) / 2);
          }
          this.eventQuorum = 1;
          this.eventWorkers = 1;
          assertArgument(this.quorum <= __privateGet(this, _configs).reduce((a, c) => a + c.weight, 0), "quorum exceed provider weight", "quorum", this.quorum);
        }
        get providerConfigs() {
          return __privateGet(this, _configs).map((c) => {
            const result = Object.assign({}, c);
            for (const key in result) {
              if (key[0] === "_") {
                delete result[key];
              }
            }
            return result;
          });
        }
        async _detectNetwork() {
          return Network.from(getBigInt(await this._perform({ method: "chainId" })));
        }
        // @TODO: Add support to select providers to be the event subscriber
        //_getSubscriber(sub: Subscription): Subscriber {
        //    throw new Error("@TODO");
        //}
        /**
         *  Transforms a %%req%% into the correct method call on %%provider%%.
         */
        async _translatePerform(provider, req) {
          switch (req.method) {
            case "broadcastTransaction":
              return await provider.broadcastTransaction(req.signedTransaction);
            case "call":
              return await provider.call(Object.assign({}, req.transaction, { blockTag: req.blockTag }));
            case "chainId":
              return (await provider.getNetwork()).chainId;
            case "estimateGas":
              return await provider.estimateGas(req.transaction);
            case "getBalance":
              return await provider.getBalance(req.address, req.blockTag);
            case "getBlock": {
              const block = "blockHash" in req ? req.blockHash : req.blockTag;
              return await provider.getBlock(block, req.includeTransactions);
            }
            case "getBlockNumber":
              return await provider.getBlockNumber();
            case "getCode":
              return await provider.getCode(req.address, req.blockTag);
            case "getGasPrice":
              return (await provider.getFeeData()).gasPrice;
            case "getPriorityFee":
              return (await provider.getFeeData()).maxPriorityFeePerGas;
            case "getLogs":
              return await provider.getLogs(req.filter);
            case "getStorage":
              return await provider.getStorage(req.address, req.position, req.blockTag);
            case "getTransaction":
              return await provider.getTransaction(req.hash);
            case "getTransactionCount":
              return await provider.getTransactionCount(req.address, req.blockTag);
            case "getTransactionReceipt":
              return await provider.getTransactionReceipt(req.hash);
            case "getTransactionResult":
              return await provider.getTransactionResult(req.hash);
          }
        }
        async _perform(req) {
          if (req.method === "broadcastTransaction") {
            const results = __privateGet(this, _configs).map((c) => null);
            const broadcasts = __privateGet(this, _configs).map(async ({ provider, weight }, index) => {
              try {
                const result3 = await provider._perform(req);
                results[index] = Object.assign(normalizeResult(req.method, { result: result3 }), { weight });
              } catch (error) {
                results[index] = Object.assign(normalizeResult(req.method, { error }), { weight });
              }
            });
            while (true) {
              const done = results.filter((r) => r != null);
              for (const { value } of done) {
                if (!(value instanceof Error)) {
                  return value;
                }
              }
              const result3 = checkQuorum(this.quorum, results.filter((r) => r != null));
              if (isError(result3, "INSUFFICIENT_FUNDS")) {
                throw result3;
              }
              const waiting = broadcasts.filter((b2, i) => results[i] == null);
              if (waiting.length === 0) {
                break;
              }
              await Promise.race(waiting);
            }
            const result2 = getAnyResult(this.quorum, results);
            assert(result2 !== void 0, "problem multi-broadcasting", "SERVER_ERROR", {
              request: "%sub-requests",
              info: { request: req, results: results.map(stringify2) }
            });
            if (result2 instanceof Error) {
              throw result2;
            }
            return result2;
          }
          await __privateMethod(this, _FallbackProvider_instances, initialSync_fn).call(this);
          const running = /* @__PURE__ */ new Set();
          let inflightQuorum = 0;
          while (true) {
            const runner = __privateMethod(this, _FallbackProvider_instances, addRunner_fn).call(this, running, req);
            if (runner == null) {
              break;
            }
            inflightQuorum += runner.config.weight;
            if (inflightQuorum >= this.quorum) {
              break;
            }
          }
          const result = await __privateMethod(this, _FallbackProvider_instances, waitForQuorum_fn).call(this, running, req);
          for (const runner of running) {
            if (runner.perform && runner.result == null) {
              runner.config.lateResponses++;
            }
          }
          return result;
        }
        async destroy() {
          for (const { provider } of __privateGet(this, _configs)) {
            provider.destroy();
          }
          super.destroy();
        }
      };
      _configs = new WeakMap();
      _height = new WeakMap();
      _initialSyncPromise = new WeakMap();
      _FallbackProvider_instances = new WeakSet();
      // Grab the next (random) config that is not already part of
      // the running set
      getNextConfig_fn = function(running) {
        const configs = Array.from(running).map((r) => r.config);
        const allConfigs = __privateGet(this, _configs).slice();
        shuffle(allConfigs);
        allConfigs.sort((a, b2) => a.priority - b2.priority);
        for (const config of allConfigs) {
          if (config._lastFatalError) {
            continue;
          }
          if (configs.indexOf(config) === -1) {
            return config;
          }
        }
        return null;
      };
      // Adds a new runner (if available) to running.
      addRunner_fn = function(running, req) {
        const config = __privateMethod(this, _FallbackProvider_instances, getNextConfig_fn).call(this, running);
        if (config == null) {
          return null;
        }
        const runner = {
          config,
          result: null,
          didBump: false,
          perform: null,
          staller: null
        };
        const now = getTime3();
        runner.perform = (async () => {
          try {
            config.requests++;
            const result = await this._translatePerform(config.provider, req);
            runner.result = { result };
          } catch (error) {
            config.errorResponses++;
            runner.result = { error };
          }
          const dt = getTime3() - now;
          config._totalTime += dt;
          config.rollingDuration = 0.95 * config.rollingDuration + 0.05 * dt;
          runner.perform = null;
        })();
        runner.staller = (async () => {
          await stall2(config.stallTimeout);
          runner.staller = null;
        })();
        running.add(runner);
        return runner;
      };
      initialSync_fn = async function() {
        let initialSync = __privateGet(this, _initialSyncPromise);
        if (!initialSync) {
          const promises = [];
          __privateGet(this, _configs).forEach((config) => {
            promises.push((async () => {
              await waitForSync(config, 0);
              if (!config._lastFatalError) {
                config._network = await config.provider.getNetwork();
              }
            })());
          });
          __privateSet(this, _initialSyncPromise, initialSync = (async () => {
            await Promise.all(promises);
            let chainId = null;
            for (const config of __privateGet(this, _configs)) {
              if (config._lastFatalError) {
                continue;
              }
              const network = config._network;
              if (chainId == null) {
                chainId = network.chainId;
              } else if (network.chainId !== chainId) {
                assert(false, "cannot mix providers on different networks", "UNSUPPORTED_OPERATION", {
                  operation: "new FallbackProvider"
                });
              }
            }
          })());
        }
        await initialSync;
      };
      checkQuorum_fn = async function(running, req) {
        const results = [];
        for (const runner of running) {
          if (runner.result != null) {
            const { tag, value } = normalizeResult(req.method, runner.result);
            results.push({ tag, value, weight: runner.config.weight });
          }
        }
        if (results.reduce((a, r) => a + r.weight, 0) < this.quorum) {
          return void 0;
        }
        switch (req.method) {
          case "getBlockNumber": {
            if (__privateGet(this, _height) === -2) {
              __privateSet(this, _height, Math.ceil(getNumber2(getMedian(this.quorum, __privateGet(this, _configs).filter((c) => !c._lastFatalError).map((c) => ({
                value: c.blockNumber,
                tag: getNumber2(c.blockNumber).toString(),
                weight: c.weight
              }))))));
            }
            const mode = getFuzzyMode(this.quorum, results);
            if (mode === void 0) {
              return void 0;
            }
            if (mode > __privateGet(this, _height)) {
              __privateSet(this, _height, mode);
            }
            return __privateGet(this, _height);
          }
          case "getGasPrice":
          case "getPriorityFee":
          case "estimateGas":
            return getMedian(this.quorum, results);
          case "getBlock":
            if ("blockTag" in req && req.blockTag === "pending") {
              return getAnyResult(this.quorum, results);
            }
            return checkQuorum(this.quorum, results);
          case "call":
          case "chainId":
          case "getBalance":
          case "getTransactionCount":
          case "getCode":
          case "getStorage":
          case "getTransaction":
          case "getTransactionReceipt":
          case "getLogs":
            return checkQuorum(this.quorum, results);
          case "broadcastTransaction":
            return getAnyResult(this.quorum, results);
        }
        assert(false, "unsupported method", "UNSUPPORTED_OPERATION", {
          operation: `_perform(${stringify2(req.method)})`
        });
      };
      waitForQuorum_fn = async function(running, req) {
        if (running.size === 0) {
          throw new Error("no runners?!");
        }
        const interesting = [];
        let newRunners = 0;
        for (const runner of running) {
          if (runner.perform) {
            interesting.push(runner.perform);
          }
          if (runner.staller) {
            interesting.push(runner.staller);
            continue;
          }
          if (runner.didBump) {
            continue;
          }
          runner.didBump = true;
          newRunners++;
        }
        const value = await __privateMethod(this, _FallbackProvider_instances, checkQuorum_fn).call(this, running, req);
        if (value !== void 0) {
          if (value instanceof Error) {
            throw value;
          }
          return value;
        }
        for (let i = 0; i < newRunners; i++) {
          __privateMethod(this, _FallbackProvider_instances, addRunner_fn).call(this, running, req);
        }
        assert(interesting.length > 0, "quorum not met", "SERVER_ERROR", {
          request: "%sub-requests",
          info: { request: req, results: Array.from(running).map((r) => stringify2(r.result)) }
        });
        await Promise.race(interesting);
        return await __privateMethod(this, _FallbackProvider_instances, waitForQuorum_fn).call(this, running, req);
      };
    }
  });

  // node_modules/ethers/lib.esm/providers/default-provider.js
  function isWebSocketLike(value) {
    return value && typeof value.send === "function" && typeof value.close === "function";
  }
  function getDefaultProvider(network, options) {
    if (options == null) {
      options = {};
    }
    const allowService = (name) => {
      if (options[name] === "-") {
        return false;
      }
      if (typeof options.exclusive === "string") {
        return name === options.exclusive;
      }
      if (Array.isArray(options.exclusive)) {
        return options.exclusive.indexOf(name) !== -1;
      }
      return true;
    };
    if (typeof network === "string" && network.match(/^https?:/)) {
      return new JsonRpcProvider(network);
    }
    if (typeof network === "string" && network.match(/^wss?:/) || isWebSocketLike(network)) {
      return new WebSocketProvider(network);
    }
    let staticNetwork = null;
    try {
      staticNetwork = Network.from(network);
    } catch (error) {
    }
    const providers = [];
    if (allowService("publicPolygon") && staticNetwork) {
      if (staticNetwork.name === "matic") {
        providers.push(new JsonRpcProvider("https://polygon-rpc.com/", staticNetwork, { staticNetwork }));
      } else if (staticNetwork.name === "matic-amoy") {
        providers.push(new JsonRpcProvider("https://rpc-amoy.polygon.technology/", staticNetwork, { staticNetwork }));
      }
    }
    if (allowService("alchemy")) {
      try {
        providers.push(new AlchemyProvider(network, options.alchemy));
      } catch (error) {
      }
    }
    if (allowService("ankr") && options.ankr != null) {
      try {
        providers.push(new AnkrProvider(network, options.ankr));
      } catch (error) {
      }
    }
    if (allowService("chainstack")) {
      try {
        providers.push(new ChainstackProvider(network, options.chainstack));
      } catch (error) {
      }
    }
    if (allowService("cloudflare")) {
      try {
        providers.push(new CloudflareProvider(network));
      } catch (error) {
      }
    }
    if (allowService("etherscan")) {
      try {
        providers.push(new EtherscanProvider(network, options.etherscan));
      } catch (error) {
      }
    }
    if (allowService("infura")) {
      try {
        let projectId = options.infura;
        let projectSecret = void 0;
        if (typeof projectId === "object") {
          projectSecret = projectId.projectSecret;
          projectId = projectId.projectId;
        }
        providers.push(new InfuraProvider(network, projectId, projectSecret));
      } catch (error) {
      }
    }
    if (allowService("quicknode")) {
      try {
        let token = options.quicknode;
        providers.push(new QuickNodeProvider(network, token));
      } catch (error) {
      }
    }
    assert(providers.length, "unsupported default network", "UNSUPPORTED_OPERATION", {
      operation: "getDefaultProvider"
    });
    if (providers.length === 1) {
      return providers[0];
    }
    let quorum = Math.floor(providers.length / 2);
    if (quorum > 2) {
      quorum = 2;
    }
    if (staticNetwork && Testnets.indexOf(staticNetwork.name) !== -1) {
      quorum = 1;
    }
    if (options && options.quorum) {
      quorum = options.quorum;
    }
    return new FallbackProvider(providers, void 0, { quorum });
  }
  var Testnets;
  var init_default_provider = __esm({
    "node_modules/ethers/lib.esm/providers/default-provider.js"() {
      init_utils();
      init_provider_ankr();
      init_provider_alchemy();
      init_provider_chainstack();
      init_provider_cloudflare();
      init_provider_etherscan();
      init_provider_infura();
      init_provider_quicknode();
      init_provider_fallback();
      init_provider_jsonrpc();
      init_network();
      init_provider_websocket();
      Testnets = "goerli kovan sepolia classicKotti optimism-goerli arbitrum-goerli matic-mumbai bnbt".split(" ");
    }
  });

  // node_modules/ethers/lib.esm/providers/signer-noncemanager.js
  var _noncePromise, _delta, _NonceManager, NonceManager;
  var init_signer_noncemanager = __esm({
    "node_modules/ethers/lib.esm/providers/signer-noncemanager.js"() {
      init_utils();
      init_abstract_signer();
      _NonceManager = class _NonceManager extends AbstractSigner {
        /**
         *  Creates a new **NonceManager** to manage %%signer%%.
         */
        constructor(signer) {
          super(signer.provider);
          /**
           *  The Signer being managed.
           */
          __publicField(this, "signer");
          __privateAdd(this, _noncePromise);
          __privateAdd(this, _delta);
          defineProperties(this, { signer });
          __privateSet(this, _noncePromise, null);
          __privateSet(this, _delta, 0);
        }
        async getAddress() {
          return this.signer.getAddress();
        }
        connect(provider) {
          return new _NonceManager(this.signer.connect(provider));
        }
        async getNonce(blockTag) {
          if (blockTag === "pending") {
            if (__privateGet(this, _noncePromise) == null) {
              __privateSet(this, _noncePromise, super.getNonce("pending"));
            }
            const delta = __privateGet(this, _delta);
            return await __privateGet(this, _noncePromise) + delta;
          }
          return super.getNonce(blockTag);
        }
        /**
         *  Manually increment the nonce. This may be useful when managng
         *  offline transactions.
         */
        increment() {
          __privateWrapper(this, _delta)._++;
        }
        /**
         *  Resets the nonce, causing the **NonceManager** to reload the current
         *  nonce from the blockchain on the next transaction.
         */
        reset() {
          __privateSet(this, _delta, 0);
          __privateSet(this, _noncePromise, null);
        }
        async sendTransaction(tx) {
          const noncePromise = this.getNonce("pending");
          this.increment();
          tx = await this.signer.populateTransaction(tx);
          tx.nonce = await noncePromise;
          return await this.signer.sendTransaction(tx);
        }
        signTransaction(tx) {
          return this.signer.signTransaction(tx);
        }
        signMessage(message) {
          return this.signer.signMessage(message);
        }
        signTypedData(domain, types, value) {
          return this.signer.signTypedData(domain, types, value);
        }
      };
      _noncePromise = new WeakMap();
      _delta = new WeakMap();
      NonceManager = _NonceManager;
    }
  });

  // node_modules/ethers/lib.esm/providers/provider-browser.js
  var _request2, _providerInfo, _BrowserProvider, BrowserProvider;
  var init_provider_browser = __esm({
    "node_modules/ethers/lib.esm/providers/provider-browser.js"() {
      init_utils();
      init_provider_jsonrpc();
      _BrowserProvider = class _BrowserProvider extends JsonRpcApiPollingProvider {
        /**
         *  Connect to the %%ethereum%% provider, optionally forcing the
         *  %%network%%.
         */
        constructor(ethereum, network, _options4) {
          const options = Object.assign({}, _options4 != null ? _options4 : {}, { batchMaxCount: 1 });
          assertArgument(ethereum && ethereum.request, "invalid EIP-1193 provider", "ethereum", ethereum);
          super(network, options);
          __privateAdd(this, _request2);
          __privateAdd(this, _providerInfo);
          __privateSet(this, _providerInfo, null);
          if (_options4 && _options4.providerInfo) {
            __privateSet(this, _providerInfo, _options4.providerInfo);
          }
          __privateSet(this, _request2, async (method, params) => {
            const payload = { method, params };
            this.emit("debug", { action: "sendEip1193Request", payload });
            try {
              const result = await ethereum.request(payload);
              this.emit("debug", { action: "receiveEip1193Result", result });
              return result;
            } catch (e) {
              const error = new Error(e.message);
              error.code = e.code;
              error.data = e.data;
              error.payload = payload;
              this.emit("debug", { action: "receiveEip1193Error", error });
              throw error;
            }
          });
        }
        get providerInfo() {
          return __privateGet(this, _providerInfo);
        }
        async send(method, params) {
          await this._start();
          return await super.send(method, params);
        }
        async _send(payload) {
          assertArgument(!Array.isArray(payload), "EIP-1193 does not support batch request", "payload", payload);
          try {
            const result = await __privateGet(this, _request2).call(this, payload.method, payload.params || []);
            return [{ id: payload.id, result }];
          } catch (e) {
            return [{
              id: payload.id,
              error: { code: e.code, data: e.data, message: e.message }
            }];
          }
        }
        getRpcError(payload, error) {
          error = JSON.parse(JSON.stringify(error));
          switch (error.error.code || -1) {
            case 4001:
              error.error.message = `ethers-user-denied: ${error.error.message}`;
              break;
            case 4200:
              error.error.message = `ethers-unsupported: ${error.error.message}`;
              break;
          }
          return super.getRpcError(payload, error);
        }
        /**
         *  Resolves to ``true`` if the provider manages the %%address%%.
         */
        async hasSigner(address) {
          if (address == null) {
            address = 0;
          }
          const accounts = await this.send("eth_accounts", []);
          if (typeof address === "number") {
            return accounts.length > address;
          }
          address = address.toLowerCase();
          return accounts.filter((a) => a.toLowerCase() === address).length !== 0;
        }
        async getSigner(address) {
          if (address == null) {
            address = 0;
          }
          if (!await this.hasSigner(address)) {
            try {
              await __privateGet(this, _request2).call(this, "eth_requestAccounts", []);
            } catch (error) {
              const payload = error.payload;
              throw this.getRpcError(payload, { id: payload.id, error });
            }
          }
          return await super.getSigner(address);
        }
        /**
         *  Discover and connect to a Provider in the Browser using the
         *  [[link-eip-6963]] discovery mechanism. If no providers are
         *  present, ``null`` is resolved.
         */
        static async discover(options) {
          if (options == null) {
            options = {};
          }
          if (options.provider) {
            return new _BrowserProvider(options.provider);
          }
          const context = options.window ? options.window : typeof window !== "undefined" ? window : null;
          if (context == null) {
            return null;
          }
          const anyProvider = options.anyProvider;
          if (anyProvider && context.ethereum) {
            return new _BrowserProvider(context.ethereum);
          }
          if (!("addEventListener" in context && "dispatchEvent" in context && "removeEventListener" in context)) {
            return null;
          }
          const timeout = options.timeout ? options.timeout : 300;
          if (timeout === 0) {
            return null;
          }
          return await new Promise((resolve, reject) => {
            let found = [];
            const addProvider = (event) => {
              found.push(event.detail);
              if (anyProvider) {
                finalize();
              }
            };
            const finalize = () => {
              clearTimeout(timer);
              if (found.length) {
                if (options && options.filter) {
                  const filtered = options.filter(found.map((i) => Object.assign({}, i.info)));
                  if (filtered == null) {
                    resolve(null);
                  } else if (filtered instanceof _BrowserProvider) {
                    resolve(filtered);
                  } else {
                    let match = null;
                    if (filtered.uuid) {
                      const matches = found.filter((f3) => filtered.uuid === f3.info.uuid);
                      match = matches[0];
                    }
                    if (match) {
                      const { provider, info } = match;
                      resolve(new _BrowserProvider(provider, void 0, {
                        providerInfo: info
                      }));
                    } else {
                      reject(makeError("filter returned unknown info", "UNSUPPORTED_OPERATION", {
                        value: filtered
                      }));
                    }
                  }
                } else {
                  const { provider, info } = found[0];
                  resolve(new _BrowserProvider(provider, void 0, {
                    providerInfo: info
                  }));
                }
              } else {
                resolve(null);
              }
              context.removeEventListener("eip6963:announceProvider", addProvider);
            };
            const timer = setTimeout(() => {
              finalize();
            }, timeout);
            context.addEventListener("eip6963:announceProvider", addProvider);
            context.dispatchEvent(new Event("eip6963:requestProvider"));
          });
        }
      };
      _request2 = new WeakMap();
      _providerInfo = new WeakMap();
      BrowserProvider = _BrowserProvider;
    }
  });

  // node_modules/ethers/lib.esm/providers/provider-blockscout.js
  function getUrl(name) {
    switch (name) {
      case "mainnet":
        return "https://eth.blockscout.com/api/eth-rpc";
      case "sepolia":
        return "https://eth-sepolia.blockscout.com/api/eth-rpc";
      case "holesky":
        return "https://eth-holesky.blockscout.com/api/eth-rpc";
      case "classic":
        return "https://etc.blockscout.com/api/eth-rpc";
      case "arbitrum":
        return "https://arbitrum.blockscout.com/api/eth-rpc";
      case "base":
        return "https://base.blockscout.com/api/eth-rpc";
      case "base-sepolia":
        return "https://base-sepolia.blockscout.com/api/eth-rpc";
      case "matic":
        return "https://polygon.blockscout.com/api/eth-rpc";
      case "optimism":
        return "https://optimism.blockscout.com/api/eth-rpc";
      case "optimism-sepolia":
        return "https://optimism-sepolia.blockscout.com/api/eth-rpc";
      case "xdai":
        return "https://gnosis.blockscout.com/api/eth-rpc";
    }
    assertArgument(false, "unsupported network", "network", name);
  }
  var BlockscoutProvider;
  var init_provider_blockscout = __esm({
    "node_modules/ethers/lib.esm/providers/provider-blockscout.js"() {
      init_utils();
      init_network();
      init_provider_jsonrpc();
      BlockscoutProvider = class _BlockscoutProvider extends JsonRpcProvider {
        /**
         *  Creates a new **BlockscoutProvider**.
         */
        constructor(_network3, apiKey) {
          if (_network3 == null) {
            _network3 = "mainnet";
          }
          const network = Network.from(_network3);
          if (apiKey == null) {
            apiKey = null;
          }
          const request = _BlockscoutProvider.getRequest(network);
          super(request, network, { staticNetwork: network });
          /**
           *  The API key.
           */
          __publicField(this, "apiKey");
          defineProperties(this, { apiKey });
        }
        _getProvider(chainId) {
          try {
            return new _BlockscoutProvider(chainId, this.apiKey);
          } catch (error) {
          }
          return super._getProvider(chainId);
        }
        isCommunityResource() {
          return this.apiKey === null;
        }
        getRpcRequest(req) {
          const resp = super.getRpcRequest(req);
          if (resp && resp.method === "eth_estimateGas" && resp.args.length == 1) {
            resp.args = resp.args.slice();
            resp.args.push("latest");
          }
          return resp;
        }
        getRpcError(payload, _error2) {
          const error = _error2 ? _error2.error : null;
          if (error && error.code === -32015 && !isHexString(error.data || "", true)) {
            const panicCodes = {
              "assert(false)": "01",
              "arithmetic underflow or overflow": "11",
              "division or modulo by zero": "12",
              "out-of-bounds array access; popping on an empty array": "31",
              "out-of-bounds access of an array or bytesN": "32"
            };
            let panicCode = "";
            if (error.message === "VM execution error.") {
              panicCode = panicCodes[error.data] || "";
            } else if (panicCodes[error.message || ""]) {
              panicCode = panicCodes[error.message || ""];
            }
            if (panicCode) {
              error.message += ` (reverted: ${error.data})`;
              error.data = "0x4e487b7100000000000000000000000000000000000000000000000000000000000000" + panicCode;
            }
          } else if (error && error.code === -32e3) {
            if (error.message === "wrong transaction nonce") {
              error.message += " (nonce too low)";
            }
          }
          return super.getRpcError(payload, _error2);
        }
        /**
         *  Returns a prepared request for connecting to %%network%%
         *  with %%apiKey%%.
         */
        static getRequest(network) {
          const request = new FetchRequest(getUrl(network.name));
          request.allowGzip = true;
          return request;
        }
      };
    }
  });

  // node_modules/ethers/lib.esm/providers/provider-pocket.js
  function getHost6(name) {
    switch (name) {
      case "mainnet":
        return "eth-mainnet.gateway.pokt.network";
      case "goerli":
        return "eth-goerli.gateway.pokt.network";
      case "matic":
        return "poly-mainnet.gateway.pokt.network";
      case "matic-mumbai":
        return "polygon-mumbai-rpc.gateway.pokt.network";
    }
    assertArgument(false, "unsupported network", "network", name);
  }
  var defaultApplicationId, PocketProvider;
  var init_provider_pocket = __esm({
    "node_modules/ethers/lib.esm/providers/provider-pocket.js"() {
      init_utils();
      init_community();
      init_network();
      init_provider_jsonrpc();
      defaultApplicationId = "62e1ad51b37b8e00394bda3b";
      PocketProvider = class _PocketProvider extends JsonRpcProvider {
        /**
         *  Create a new **PocketProvider**.
         *
         *  By default connecting to ``mainnet`` with a highly throttled
         *  API key.
         */
        constructor(_network3, applicationId, applicationSecret) {
          if (_network3 == null) {
            _network3 = "mainnet";
          }
          const network = Network.from(_network3);
          if (applicationId == null) {
            applicationId = defaultApplicationId;
          }
          if (applicationSecret == null) {
            applicationSecret = null;
          }
          const options = { staticNetwork: network };
          const request = _PocketProvider.getRequest(network, applicationId, applicationSecret);
          super(request, network, options);
          /**
           *  The Application ID for the Pocket connection.
           */
          __publicField(this, "applicationId");
          /**
           *  The Application Secret for making authenticated requests
           *  to the Pocket connection.
           */
          __publicField(this, "applicationSecret");
          defineProperties(this, { applicationId, applicationSecret });
        }
        _getProvider(chainId) {
          try {
            return new _PocketProvider(chainId, this.applicationId, this.applicationSecret);
          } catch (error) {
          }
          return super._getProvider(chainId);
        }
        /**
         *  Returns a prepared request for connecting to %%network%% with
         *  %%applicationId%%.
         */
        static getRequest(network, applicationId, applicationSecret) {
          if (applicationId == null) {
            applicationId = defaultApplicationId;
          }
          const request = new FetchRequest(`https://${getHost6(network.name)}/v1/lb/${applicationId}`);
          request.allowGzip = true;
          if (applicationSecret) {
            request.setCredentials("", applicationSecret);
          }
          if (applicationId === defaultApplicationId) {
            request.retryFunc = async (request2, response, attempt) => {
              showThrottleMessage("PocketProvider");
              return true;
            };
          }
          return request;
        }
        isCommunityResource() {
          return this.applicationId === defaultApplicationId;
        }
      };
    }
  });

  // node_modules/ethers/lib.esm/providers/provider-ipcsocket-browser.js
  var IpcSocketProvider;
  var init_provider_ipcsocket_browser = __esm({
    "node_modules/ethers/lib.esm/providers/provider-ipcsocket-browser.js"() {
      IpcSocketProvider = void 0;
    }
  });

  // node_modules/ethers/lib.esm/providers/index.js
  var init_providers = __esm({
    "node_modules/ethers/lib.esm/providers/index.js"() {
      init_abstract_provider();
      init_abstract_signer();
      init_community();
      init_default_provider();
      init_ens_resolver();
      init_network();
      init_signer_noncemanager();
      init_plugins_network();
      init_provider();
      init_provider_fallback();
      init_provider_jsonrpc();
      init_provider_browser();
      init_provider_alchemy();
      init_provider_blockscout();
      init_provider_ankr();
      init_provider_cloudflare();
      init_provider_chainstack();
      init_provider_etherscan();
      init_provider_infura();
      init_provider_pocket();
      init_provider_quicknode();
      init_provider_ipcsocket_browser();
      init_provider_socket();
      init_provider_websocket();
      init_provider_socket();
    }
  });

  // node_modules/ethers/lib.esm/wallet/base-wallet.js
  var _signingKey, _BaseWallet, BaseWallet;
  var init_base_wallet = __esm({
    "node_modules/ethers/lib.esm/wallet/base-wallet.js"() {
      init_address2();
      init_hash();
      init_providers();
      init_transaction2();
      init_utils();
      _BaseWallet = class _BaseWallet extends AbstractSigner {
        /**
         *  Creates a new BaseWallet for %%privateKey%%, optionally
         *  connected to %%provider%%.
         *
         *  If %%provider%% is not specified, only offline methods can
         *  be used.
         */
        constructor(privateKey, provider) {
          super(provider);
          /**
           *  The wallet address.
           */
          __publicField(this, "address");
          __privateAdd(this, _signingKey);
          assertArgument(privateKey && typeof privateKey.sign === "function", "invalid private key", "privateKey", "[ REDACTED ]");
          __privateSet(this, _signingKey, privateKey);
          const address = computeAddress(this.signingKey.publicKey);
          defineProperties(this, { address });
        }
        // Store private values behind getters to reduce visibility
        // in console.log
        /**
         *  The [[SigningKey]] used for signing payloads.
         */
        get signingKey() {
          return __privateGet(this, _signingKey);
        }
        /**
         *  The private key for this wallet.
         */
        get privateKey() {
          return this.signingKey.privateKey;
        }
        async getAddress() {
          return this.address;
        }
        connect(provider) {
          return new _BaseWallet(__privateGet(this, _signingKey), provider);
        }
        async signTransaction(tx) {
          tx = copyRequest(tx);
          const { to, from } = await resolveProperties({
            to: tx.to ? resolveAddress(tx.to, this) : void 0,
            from: tx.from ? resolveAddress(tx.from, this) : void 0
          });
          if (to != null) {
            tx.to = to;
          }
          if (from != null) {
            tx.from = from;
          }
          if (tx.from != null) {
            assertArgument(getAddress(tx.from) === this.address, "transaction from address mismatch", "tx.from", tx.from);
            delete tx.from;
          }
          const btx = Transaction.from(tx);
          btx.signature = this.signingKey.sign(btx.unsignedHash);
          return btx.serialized;
        }
        async signMessage(message) {
          return this.signMessageSync(message);
        }
        // @TODO: Add a secialized signTx and signTyped sync that enforces
        // all parameters are known?
        /**
         *  Returns the signature for %%message%% signed with this wallet.
         */
        signMessageSync(message) {
          return this.signingKey.sign(hashMessage(message)).serialized;
        }
        /**
         *  Returns the Authorization for %%auth%%.
         */
        authorizeSync(auth) {
          assertArgument(typeof auth.address === "string", "invalid address for authorizeSync", "auth.address", auth);
          const signature2 = this.signingKey.sign(hashAuthorization(auth));
          return Object.assign({}, {
            address: getAddress(auth.address),
            nonce: getBigInt(auth.nonce || 0),
            chainId: getBigInt(auth.chainId || 0)
          }, { signature: signature2 });
        }
        /**
         *  Resolves to the Authorization for %%auth%%.
         */
        async authorize(auth) {
          auth = Object.assign({}, auth, {
            address: await resolveAddress(auth.address, this)
          });
          return this.authorizeSync(await this.populateAuthorization(auth));
        }
        async signTypedData(domain, types, value) {
          const populated = await TypedDataEncoder.resolveNames(domain, types, value, async (name) => {
            assert(this.provider != null, "cannot resolve ENS names without a provider", "UNSUPPORTED_OPERATION", {
              operation: "resolveName",
              info: { name }
            });
            const address = await this.provider.resolveName(name);
            assert(address != null, "unconfigured ENS name", "UNCONFIGURED_NAME", {
              value: name
            });
            return address;
          });
          return this.signingKey.sign(TypedDataEncoder.hash(populated.domain, types, populated.value)).serialized;
        }
      };
      _signingKey = new WeakMap();
      BaseWallet = _BaseWallet;
    }
  });

  // node_modules/ethers/lib.esm/wordlists/decode-owl.js
  function unfold(words2, sep) {
    let initial = 97;
    return words2.reduce((accum, word) => {
      if (word === sep) {
        initial++;
      } else if (word.match(Word)) {
        accum.push(String.fromCharCode(initial) + word);
      } else {
        initial = 97;
        accum.push(word);
      }
      return accum;
    }, []);
  }
  function decode(data, subs) {
    for (let i = subsChrs.length - 1; i >= 0; i--) {
      data = data.split(subsChrs[i]).join(subs.substring(2 * i, 2 * i + 2));
    }
    const clumps = [];
    const leftover = data.replace(/(:|([0-9])|([A-Z][a-z]*))/g, (all, item, semi, word) => {
      if (semi) {
        for (let i = parseInt(semi); i >= 0; i--) {
          clumps.push(";");
        }
      } else {
        clumps.push(item.toLowerCase());
      }
      return "";
    });
    if (leftover) {
      throw new Error(`leftovers: ${JSON.stringify(leftover)}`);
    }
    return unfold(unfold(clumps, ";"), ":");
  }
  function decodeOwl(data) {
    assertArgument(data[0] === "0", "unsupported auwl data", "data", data);
    return decode(data.substring(1 + 2 * subsChrs.length), data.substring(1, 1 + 2 * subsChrs.length));
  }
  var subsChrs, Word;
  var init_decode_owl = __esm({
    "node_modules/ethers/lib.esm/wordlists/decode-owl.js"() {
      init_utils();
      subsChrs = " !#$%&'()*+,-./<=>?@[]^_`{|}~";
      Word = /^[a-z]*$/i;
    }
  });

  // node_modules/ethers/lib.esm/wordlists/wordlist.js
  var Wordlist;
  var init_wordlist = __esm({
    "node_modules/ethers/lib.esm/wordlists/wordlist.js"() {
      init_utils();
      Wordlist = class {
        /**
         *  Creates a new Wordlist instance.
         *
         *  Sub-classes MUST call this if they provide their own constructor,
         *  passing in the locale string of the language.
         *
         *  Generally there is no need to create instances of a Wordlist,
         *  since each language-specific Wordlist creates an instance and
         *  there is no state kept internally, so they are safe to share.
         */
        constructor(locale) {
          __publicField(this, "locale");
          defineProperties(this, { locale });
        }
        /**
         *  Sub-classes may override this to provide a language-specific
         *  method for spliting %%phrase%% into individual words.
         *
         *  By default, %%phrase%% is split using any sequences of
         *  white-space as defined by regular expressions (i.e. ``/\s+/``).
         */
        split(phrase) {
          return phrase.toLowerCase().split(/\s+/g);
        }
        /**
         *  Sub-classes may override this to provider a language-specific
         *  method for joining %%words%% into a phrase.
         *
         *  By default, %%words%% are joined by a single space.
         */
        join(words2) {
          return words2.join(" ");
        }
      };
    }
  });

  // node_modules/ethers/lib.esm/wordlists/wordlist-owl.js
  var _data4, _checksum, _words, _WordlistOwl_instances, loadWords_fn, WordlistOwl;
  var init_wordlist_owl = __esm({
    "node_modules/ethers/lib.esm/wordlists/wordlist-owl.js"() {
      init_hash();
      init_utils();
      init_decode_owl();
      init_wordlist();
      WordlistOwl = class extends Wordlist {
        /**
         *  Creates a new Wordlist for %%locale%% using the OWL %%data%%
         *  and validated against the %%checksum%%.
         */
        constructor(locale, data, checksum2) {
          super(locale);
          __privateAdd(this, _WordlistOwl_instances);
          __privateAdd(this, _data4);
          __privateAdd(this, _checksum);
          __privateAdd(this, _words);
          __privateSet(this, _data4, data);
          __privateSet(this, _checksum, checksum2);
          __privateSet(this, _words, null);
        }
        /**
         *  The OWL-encoded data.
         */
        get _data() {
          return __privateGet(this, _data4);
        }
        /**
         *  Decode all the words for the wordlist.
         */
        _decodeWords() {
          return decodeOwl(__privateGet(this, _data4));
        }
        getWord(index) {
          const words2 = __privateMethod(this, _WordlistOwl_instances, loadWords_fn).call(this);
          assertArgument(index >= 0 && index < words2.length, `invalid word index: ${index}`, "index", index);
          return words2[index];
        }
        getWordIndex(word) {
          return __privateMethod(this, _WordlistOwl_instances, loadWords_fn).call(this).indexOf(word);
        }
      };
      _data4 = new WeakMap();
      _checksum = new WeakMap();
      _words = new WeakMap();
      _WordlistOwl_instances = new WeakSet();
      loadWords_fn = function() {
        if (__privateGet(this, _words) == null) {
          const words2 = this._decodeWords();
          const checksum2 = id(words2.join("\n") + "\n");
          if (checksum2 !== __privateGet(this, _checksum)) {
            throw new Error(`BIP39 Wordlist for ${this.locale} FAILED`);
          }
          __privateSet(this, _words, words2);
        }
        return __privateGet(this, _words);
      };
    }
  });

  // node_modules/ethers/lib.esm/wordlists/lang-en.js
  var words, checksum, wordlist, LangEn;
  var init_lang_en = __esm({
    "node_modules/ethers/lib.esm/wordlists/lang-en.js"() {
      init_wordlist_owl();
      words = "0erleonalorenseinceregesticitStanvetearctssi#ch2Athck&tneLl0And#Il.yLeOutO=S|S%b/ra@SurdU'0Ce[Cid|CountCu'Hie=IdOu,-Qui*Ro[TT]T%T*[Tu$0AptDD-tD*[Ju,M.UltV<)Vi)0Rob-0FairF%dRaid0A(EEntRee0Ead0MRRp%tS!_rmBumCoholErtI&LLeyLowMo,O}PhaReadySoT Ways0A>urAz(gOngOuntU'd0Aly,Ch%Ci|G G!GryIm$K!Noun)Nu$O` Sw T&naTiqueXietyY1ArtOlogyPe?P!Pro=Ril1ChCt-EaEnaGueMMedM%MyOundR<+Re,Ri=RowTTefa@Ti,Tw%k0KPe@SaultSetSi,SumeThma0H!>OmTa{T&dT.udeTra@0Ct]D.Gu,NtTh%ToTumn0Era+OcadoOid0AkeA*AyEsomeFulKw?d0Is:ByChel%C#D+GL<)Lc#y~MbooN<aNn RRelyRga(R*lSeS-SketTt!3A^AnAutyCau'ComeEfF%eG(Ha=H(dLie=LowLtN^Nef./TrayTt Twe&Y#d3Cyc!DKeNdOlogyRdR`Tt _{AdeAmeAnketA,EakE[IndOodO[omOu'UeUrUsh_rdAtDyIlMbNeNusOkO,Rd R(gRrowSsTtomUn)XY_{etA(AndA[A=EadEezeI{Id+IefIghtIngIskOccoliOk&OnzeOomO` OwnUsh2Bb!DdyD+tFf$oIldLbLkL!tNd!Nk Rd&Rg R,SS(e[SyTt Y Zz:Bba+B(B!CtusGeKe~LmM aMpNN$N)lNdyNn#NoeNvasNy#Pab!P.$Pta(RRb#RdRgoRpetRryRtSeShS(o/!Su$TT$ogT^Teg%yTt!UghtU'Ut]Ve3Il(gL yM|NsusNturyRe$Rta(_irAlkAmp]An+AosApt Ar+A'AtEapE{Ee'EfErryE,I{&IefIldIm}yOi)Oo'R#-U{!UnkUrn0G?Nnam#Rc!Tiz&TyVil_imApArifyAwAyE<ErkEv I{I|IffImbIn-IpO{OgO'O`OudOwnUbUmpU, Ut^_^A,C#utDeFfeeIlInL!@L%LumnMb(eMeMf%tM-Mm#Mp<yNc tNdu@NfirmNg*[N}@Nsid NtrolNv()OkOlPp PyR$ReRnR*@/Tt#U^UntryUp!Ur'Us(V Yo>_{Ad!AftAmA}AshAt AwlAzyEamEd.EekEwI{etImeIspIt-OpO[Ou^OwdUci$UelUi'Umb!Un^UshYY,$2BeLtu*PPbo?dRiousRr|Rta(R=Sh]/omTe3C!:DMa+MpN)Ng R(gShUght WnY3AlBa>BrisCadeCemb CideCl(eC%a>C*a'ErF&'F(eFyG*eLayLiv M<dMi'Ni$Nti,NyP?tP&dPos.P`PutyRi=ScribeS tSignSkSpair/royTailTe@VelopVi)Vo>3AgramAlAm#dAryCeE'lEtFf G.$Gn.yLemmaNn NosaurRe@RtSag*eScov Sea'ShSmi[S%d Splay/<)V tVideV%)Zzy5Ct%Cum|G~Lph(Ma(Na>NkeyN%OrSeUb!Ve_ftAg#AmaA,-AwEamE[IftIllInkIpI=OpUmY2CkMbNeR(g/T^Ty1Arf1Nam-:G G!RlyRnR`Sily/Sy1HoOlogyOnomy0GeItUca>1F%t0G1GhtTh 2BowD E@r-Eg<tEm|Eph<tEvat%I>Se0B?kBodyBra)Er+Ot]PloyPow Pty0Ab!A@DD![D%'EmyErgyF%)Ga+G(eH<)JoyLi,OughR-hRollSu*T Ti*TryVelope1Isode0U$Uip0AA'OdeOs]R%Upt0CapeSayS&)Ta>0Ern$H-s1Id&)IlOkeOl=1A@Amp!Ce[Ch<+C.eCludeCu'Ecu>Erci'Hau,Hib.I!I,ItOt-P<dPe@Pi*Pla(Po'P*[T&dTra0EEbrow:Br-CeCultyDeIntI`~L'MeMilyMousNNcyNtasyRmSh]TT$Th TigueUltV%.e3Atu*Bru?yD $EEdElMa!N)/iv$T^V W3B Ct]EldGu*LeLmLt N$NdNeNg NishReRmR,Sc$ShTT}[X_gAmeAshAtAv%EeIghtIpOatO{O%Ow UidUshY_mCusGIlLd~owOdOtR)Re,R+tRkRtu}RumRw?dSsil/ UndX_gi!AmeEqu|EshI&dIn+OgOntO,OwnOz&U.2ElNNnyRna)RyTu*:D+tInLaxy~ yMePRa+Rba+Rd&Rl-Rm|SSpTeTh U+Ze3N $NiusN*Nt!Nu(e/u*2O,0AntFtGg!Ng RaffeRlVe_dAn)A*A[IdeImp'ObeOomOryO=OwUe_tDde[LdOdO'RillaSpelSsipV nWn_bA)A(AntApeA[Av.yEatE&IdIefItOc yOupOwUnt_rdE[IdeIltIt?N3M:B.IrLfMm M, NdPpyRb%RdRshR=,TVeWkZ?d3AdAl`ArtAvyD+hogIght~oLmetLpNRo3Dd&Gh~NtPRe/%y5BbyCkeyLdLeLiday~owMeNeyOdPeRnRr%R'Sp.$/TelUrV 5BGeM<Mb!M%Nd*dNgryNtRd!RryRtSb<d3Brid:1EOn0EaEntifyLe2N%e4LLeg$L}[0A+Ita>M&'Mu}Pa@Po'Pro=Pul'0ChCludeComeC*a'DexD-a>Do%Du,ryF<tFl-tF%mHa!H .Iti$Je@JuryMa>N Noc|PutQuiryS<eSe@SideSpi*/$lTa@T e,ToVe,V.eVol=3On0L<dOla>Sue0Em1Ory:CketGu?RZz3AlousAns~yWel9BInKeUr}yY5D+I)MpNg!Ni%Nk/:Ng?oo3EnEpT^upY3CkDD}yNdNgdomSsTT^&TeTt&Wi4EeIfeO{Ow:BBelB%Dd DyKeMpNgua+PtopR+T T(UghUndryVaWWnWsu.Y Zy3Ad AfArnA=Ctu*FtGG$G&dIsu*M#NdNg`NsOp?dSs#Tt Vel3ArB tyBr?yC&'FeFtGhtKeMbM.NkOnQuid/Tt!VeZ?d5AdAnB, C$CkG-NelyNgOpTt yUdUn+VeY$5CkyGga+Mb N?N^Xury3R-s:Ch(eDG-G}tIdIlInJ%KeMm$NNa+Nda>NgoNs]Nu$P!Rb!R^Rg(R(eRketRria+SkSs/ T^T i$ThTrixTt XimumZe3AdowAnAsu*AtCh<-D$DiaLodyLtMb M%yNt]NuRcyR+R.RryShSsa+T$Thod3Dd!DnightLk~]M-NdNimumN%Nu>Rac!Rr%S ySs/akeXXedXtu*5Bi!DelDifyMM|N.%NkeyN, N`OnR$ReRn(gSqu.oTh T]T%Unta(U'VeVie5ChFf(LeLtiplySc!SeumShroomS-/Tu$3Self/ yTh:I=MePk(Rrow/yT]Tu*3ArCkEdGati=G!@I` PhewR=/TTw%kUtr$V WsXt3CeGht5B!I'M(eeOd!Rm$R`SeTab!TeTh(gTi)VelW5C!?Mb R'T:K0EyJe@Li+Scu*S =Ta(Vious0CurE<Tob 0Or1FF Fi)T&2L1Ay0DI=Ymp-0It0CeEI#L(eLy1EnEraIn]Po'T]1An+B.Ch?dD D(?yG<I|Ig($Ph<0Tr-h0H 0Tdo%T TputTside0AlEnEr0NN 0Yg&0/ 0O}:CtDd!GeIrLa)LmNdaNelN-N` P RadeR|RkRrotRtySsT^ThTi|TrolTt nU'VeYm|3A)AnutArAs<tL-<NN$tyNcilOp!Pp Rfe@Rm.Rs#T2O}OtoRa'Ys-$0AnoCn-Ctu*E)GGe#~LotNkO} Pe/olT^Zza_)A}tA,-A>AyEa'Ed+U{UgUn+2EmEtIntL?LeLi)NdNyOlPul?Rt]S.]Ssib!/TatoTt yV tyWd W _@i)Ai'Ed-tEf Epa*Es|EttyEv|I)IdeIm?yIntI%.yIs#Iva>IzeOb!mO)[Odu)Of.OgramOje@Omo>OofOp tyOsp O>@OudOvide2Bl-Dd(g~LpL'Mpk(N^PilPpyR^a'R.yRpo'R'ShTZz!3Ramid:99Al.yAntumArt E,]I{ItIzO>:Bb.Cco#CeCkD?DioIlInI'~yMpN^NdomN+PidReTeTh V&WZ%3AdyAlAs#BelBuildC$lCei=CipeC%dCyc!Du)F!@F%mFu'G]G*tGul?Je@LaxLea'LiefLyMa(Memb M(dMo=Nd NewNtOp&PairPeatPla)P%tQui*ScueSemb!Si,Sour)Sp#'SultTi*T*atTurnUn]Ve$ViewW?d2Y`m0BBb#CeChDeD+F!GhtGidNgOtPp!SkTu$V$V 5AdA,BotBu,CketM<)OfOkieOmSeTa>UghUndU>Y$5Bb DeGLeNNwayR$:DDd!D}[FeIlLadLm#L#LtLu>MeMp!NdTisfyToshiU)Usa+VeY1A!AnA*Att E}HemeHoolI&)I[%sOrp]OutRapRe&RiptRub1AAr^As#AtC#dC*tCt]Cur.yEdEkGm|Le@~M(?Ni%N'Nt&)RiesRvi)Ss]Tt!TupV&_dowAftAllowA*EdEllEriffIeldIftI}IpIv O{OeOotOpOrtOuld O=RimpRugUff!Y0Bl(gCkDeE+GhtGnL|Lk~yLv Mil?Mp!N)NgR&/ Tua>XZe1A>Et^IIllInIrtUll0AbAmEepEnd I)IdeIghtImOg<OtOwUsh0AllArtI!OkeOo`0A{AkeApIffOw0ApCc Ci$CkDaFtL?Ldi LidLut]L=Me#eNgOnRryRtUlUndUpUr)U`0A)A*Ati$AwnEakEci$EedEllEndH eI)Id IkeInIr.L.OilOns%O#OrtOtRayReadR(gY0Ua*UeezeUir*l_b!AdiumAffA+AirsAmpAndArtA>AyEakEelEmEpE*oI{IllIngO{Oma^O}OolOryO=Ra>gyReetRikeR#gRugg!Ud|UffUmb!Y!0Bje@Bm.BwayC)[ChDd&Ff G?G+,ItMm NNnyN'tP PplyP*meReRfa)R+Rpri'RroundR=ySpe@/a(1AllowAmpApArmE?EetIftImIngIt^Ord1MbolMptomRup/em:B!Ck!GIlL|LkNkPeR+tSk/eTtooXi3A^Am~NN<tNnisNtRm/Xt_nkAtEmeEnE%yE*EyIngIsOughtReeRi=RowUmbUnd 0CketDeG LtMb MeNyPRedSsueT!5A,BaccoDayDdl EGe` I!tK&MatoM%rowNeNgueNightOlO`PP-Pp!R^RnadoRtoi'SsT$Uri,W?dW WnY_{AdeAff-Ag-A(Ansf ApAshA=lAyEatEeEndI$IbeI{Igg ImIpOphyOub!U{UeUlyUmpetU,U`Y2BeIt]Mb!NaN}lRkeyRnRt!1El=EntyI)InI,O1PeP-$:5Ly5B*lla0Ab!Awa*C!Cov D DoFairFoldHappyIf%mIqueItIv 'KnownLo{TilUsu$Veil1Da>GradeHoldOnP Set1B<Ge0A+EEdEfulE![U$0Il.y:C<tCuumGueLidL!yL=NNishP%Rious/Ult3H-!L=tNd%Ntu*NueRbRifyRs]RyS'lT <3Ab!Br<tCiousCt%yDeoEw~a+Nta+Ol(Rtu$RusSaS.Su$T$Vid5C$I)IdLc<oLumeTeYa+:GeG#ItLk~LnutNtRfa*RmRri%ShSp/eT VeY3Al`Ap#ArA'lA` BDd(gEk&dIrdLcome/T_!AtEatEelEnE*IpIsp 0DeD`FeLd~NNdowNeNgNkNn Nt ReSdomSeShT}[5LfM<Nd OdOlRdRkRldRryR`_pE{E,!I,I>Ong::Rd3Ar~ow9UUngU`:3BraRo9NeO";
      checksum = "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60";
      wordlist = null;
      LangEn = class _LangEn extends WordlistOwl {
        /**
         *  Creates a new instance of the English language Wordlist.
         *
         *  This should be unnecessary most of the time as the exported
         *  [[langEn]] should suffice.
         *
         *  @_ignore:
         */
        constructor() {
          super("en", words, checksum);
        }
        /**
         *  Returns a singleton instance of a ``LangEn``, creating it
         *  if this is the first time being called.
         */
        static wordlist() {
          if (wordlist == null) {
            wordlist = new _LangEn();
          }
          return wordlist;
        }
      };
    }
  });

  // node_modules/ethers/lib.esm/wallet/mnemonic.js
  function getUpperMask(bits) {
    return (1 << bits) - 1 << 8 - bits & 255;
  }
  function getLowerMask(bits) {
    return (1 << bits) - 1 & 255;
  }
  function mnemonicToEntropy(mnemonic, wordlist2) {
    assertNormalize("NFKD");
    if (wordlist2 == null) {
      wordlist2 = LangEn.wordlist();
    }
    const words2 = wordlist2.split(mnemonic);
    assertArgument(words2.length % 3 === 0 && words2.length >= 12 && words2.length <= 24, "invalid mnemonic length", "mnemonic", "[ REDACTED ]");
    const entropy = new Uint8Array(Math.ceil(11 * words2.length / 8));
    let offset2 = 0;
    for (let i = 0; i < words2.length; i++) {
      let index = wordlist2.getWordIndex(words2[i].normalize("NFKD"));
      assertArgument(index >= 0, `invalid mnemonic word at index ${i}`, "mnemonic", "[ REDACTED ]");
      for (let bit = 0; bit < 11; bit++) {
        if (index & 1 << 10 - bit) {
          entropy[offset2 >> 3] |= 1 << 7 - offset2 % 8;
        }
        offset2++;
      }
    }
    const entropyBits = 32 * words2.length / 3;
    const checksumBits = words2.length / 3;
    const checksumMask = getUpperMask(checksumBits);
    const checksum2 = getBytes(sha2562(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
    assertArgument(checksum2 === (entropy[entropy.length - 1] & checksumMask), "invalid mnemonic checksum", "mnemonic", "[ REDACTED ]");
    return hexlify(entropy.slice(0, entropyBits / 8));
  }
  function entropyToMnemonic(entropy, wordlist2) {
    assertArgument(entropy.length % 4 === 0 && entropy.length >= 16 && entropy.length <= 32, "invalid entropy size", "entropy", "[ REDACTED ]");
    if (wordlist2 == null) {
      wordlist2 = LangEn.wordlist();
    }
    const indices = [0];
    let remainingBits = 11;
    for (let i = 0; i < entropy.length; i++) {
      if (remainingBits > 8) {
        indices[indices.length - 1] <<= 8;
        indices[indices.length - 1] |= entropy[i];
        remainingBits -= 8;
      } else {
        indices[indices.length - 1] <<= remainingBits;
        indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits;
        indices.push(entropy[i] & getLowerMask(8 - remainingBits));
        remainingBits += 3;
      }
    }
    const checksumBits = entropy.length / 4;
    const checksum2 = parseInt(sha2562(entropy).substring(2, 4), 16) & getUpperMask(checksumBits);
    indices[indices.length - 1] <<= checksumBits;
    indices[indices.length - 1] |= checksum2 >> 8 - checksumBits;
    return wordlist2.join(indices.map((index) => wordlist2.getWord(index)));
  }
  var _guard5, Mnemonic;
  var init_mnemonic = __esm({
    "node_modules/ethers/lib.esm/wallet/mnemonic.js"() {
      init_crypto2();
      init_utils();
      init_lang_en();
      _guard5 = {};
      Mnemonic = class _Mnemonic {
        /**
         *  @private
         */
        constructor(guard, entropy, phrase, password, wordlist2) {
          /**
           *  The mnemonic phrase of 12, 15, 18, 21 or 24 words.
           *
           *  Use the [[wordlist]] ``split`` method to get the individual words.
           */
          __publicField(this, "phrase");
          /**
           *  The password used for this mnemonic. If no password is used this
           *  is the empty string (i.e. ``""``) as per the specification.
           */
          __publicField(this, "password");
          /**
           *  The wordlist for this mnemonic.
           */
          __publicField(this, "wordlist");
          /**
           *  The underlying entropy which the mnemonic encodes.
           */
          __publicField(this, "entropy");
          if (password == null) {
            password = "";
          }
          if (wordlist2 == null) {
            wordlist2 = LangEn.wordlist();
          }
          assertPrivate(guard, _guard5, "Mnemonic");
          defineProperties(this, { phrase, password, wordlist: wordlist2, entropy });
        }
        /**
         *  Returns the seed for the mnemonic.
         */
        computeSeed() {
          const salt = toUtf8Bytes("mnemonic" + this.password, "NFKD");
          return pbkdf22(toUtf8Bytes(this.phrase, "NFKD"), salt, 2048, 64, "sha512");
        }
        /**
         *  Creates a new Mnemonic for the %%phrase%%.
         *
         *  The default %%password%% is the empty string and the default
         *  wordlist is the [English wordlists](LangEn).
         */
        static fromPhrase(phrase, password, wordlist2) {
          const entropy = mnemonicToEntropy(phrase, wordlist2);
          phrase = entropyToMnemonic(getBytes(entropy), wordlist2);
          return new _Mnemonic(_guard5, entropy, phrase, password, wordlist2);
        }
        /**
         *  Create a new **Mnemonic** from the %%entropy%%.
         *
         *  The default %%password%% is the empty string and the default
         *  wordlist is the [English wordlists](LangEn).
         */
        static fromEntropy(_entropy, password, wordlist2) {
          const entropy = getBytes(_entropy, "entropy");
          const phrase = entropyToMnemonic(entropy, wordlist2);
          return new _Mnemonic(_guard5, hexlify(entropy), phrase, password, wordlist2);
        }
        /**
         *  Returns the phrase for %%mnemonic%%.
         */
        static entropyToPhrase(_entropy, wordlist2) {
          const entropy = getBytes(_entropy, "entropy");
          return entropyToMnemonic(entropy, wordlist2);
        }
        /**
         *  Returns the entropy for %%phrase%%.
         */
        static phraseToEntropy(phrase, wordlist2) {
          return mnemonicToEntropy(phrase, wordlist2);
        }
        /**
         *  Returns true if %%phrase%% is a valid [[link-bip-39]] phrase.
         *
         *  This checks all the provided words belong to the %%wordlist%%,
         *  that the length is valid and the checksum is correct.
         */
        static isValidMnemonic(phrase, wordlist2) {
          try {
            mnemonicToEntropy(phrase, wordlist2);
            return true;
          } catch (error) {
          }
          return false;
        }
      };
    }
  });

  // node_modules/aes-js/lib.esm/aes.js
  function convertToInt32(bytes2) {
    const result = [];
    for (let i = 0; i < bytes2.length; i += 4) {
      result.push(bytes2[i] << 24 | bytes2[i + 1] << 16 | bytes2[i + 2] << 8 | bytes2[i + 3]);
    }
    return result;
  }
  var __classPrivateFieldGet, __classPrivateFieldSet, _AES_key, _AES_Kd, _AES_Ke, numberOfRounds, rcon, S, Si, T12, T2, T3, T4, T5, T6, T7, T8, U1, U2, U3, U4, AES;
  var init_aes = __esm({
    "node_modules/aes-js/lib.esm/aes.js"() {
      __classPrivateFieldGet = function(receiver, state, kind, f3) {
        if (kind === "a" && !f3) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f3 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f3 : kind === "a" ? f3.call(receiver) : f3 ? f3.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f3) {
        if (kind === "m") throw new TypeError("Private method is not writable");
        if (kind === "a" && !f3) throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f3 : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f3.call(receiver, value) : f3 ? f3.value = value : state.set(receiver, value), value;
      };
      numberOfRounds = { 16: 10, 24: 12, 32: 14 };
      rcon = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145];
      S = [99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22];
      Si = [82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125];
      T12 = [3328402341, 4168907908, 4000806809, 4135287693, 4294111757, 3597364157, 3731845041, 2445657428, 1613770832, 33620227, 3462883241, 1445669757, 3892248089, 3050821474, 1303096294, 3967186586, 2412431941, 528646813, 2311702848, 4202528135, 4026202645, 2992200171, 2387036105, 4226871307, 1101901292, 3017069671, 1604494077, 1169141738, 597466303, 1403299063, 3832705686, 2613100635, 1974974402, 3791519004, 1033081774, 1277568618, 1815492186, 2118074177, 4126668546, 2211236943, 1748251740, 1369810420, 3521504564, 4193382664, 3799085459, 2883115123, 1647391059, 706024767, 134480908, 2512897874, 1176707941, 2646852446, 806885416, 932615841, 168101135, 798661301, 235341577, 605164086, 461406363, 3756188221, 3454790438, 1311188841, 2142417613, 3933566367, 302582043, 495158174, 1479289972, 874125870, 907746093, 3698224818, 3025820398, 1537253627, 2756858614, 1983593293, 3084310113, 2108928974, 1378429307, 3722699582, 1580150641, 327451799, 2790478837, 3117535592, 0, 3253595436, 1075847264, 3825007647, 2041688520, 3059440621, 3563743934, 2378943302, 1740553945, 1916352843, 2487896798, 2555137236, 2958579944, 2244988746, 3151024235, 3320835882, 1336584933, 3992714006, 2252555205, 2588757463, 1714631509, 293963156, 2319795663, 3925473552, 67240454, 4269768577, 2689618160, 2017213508, 631218106, 1269344483, 2723238387, 1571005438, 2151694528, 93294474, 1066570413, 563977660, 1882732616, 4059428100, 1673313503, 2008463041, 2950355573, 1109467491, 537923632, 3858759450, 4260623118, 3218264685, 2177748300, 403442708, 638784309, 3287084079, 3193921505, 899127202, 2286175436, 773265209, 2479146071, 1437050866, 4236148354, 2050833735, 3362022572, 3126681063, 840505643, 3866325909, 3227541664, 427917720, 2655997905, 2749160575, 1143087718, 1412049534, 999329963, 193497219, 2353415882, 3354324521, 1807268051, 672404540, 2816401017, 3160301282, 369822493, 2916866934, 3688947771, 1681011286, 1949973070, 336202270, 2454276571, 201721354, 1210328172, 3093060836, 2680341085, 3184776046, 1135389935, 3294782118, 965841320, 831886756, 3554993207, 4068047243, 3588745010, 2345191491, 1849112409, 3664604599, 26054028, 2983581028, 2622377682, 1235855840, 3630984372, 2891339514, 4092916743, 3488279077, 3395642799, 4101667470, 1202630377, 268961816, 1874508501, 4034427016, 1243948399, 1546530418, 941366308, 1470539505, 1941222599, 2546386513, 3421038627, 2715671932, 3899946140, 1042226977, 2521517021, 1639824860, 227249030, 260737669, 3765465232, 2084453954, 1907733956, 3429263018, 2420656344, 100860677, 4160157185, 470683154, 3261161891, 1781871967, 2924959737, 1773779408, 394692241, 2579611992, 974986535, 664706745, 3655459128, 3958962195, 731420851, 571543859, 3530123707, 2849626480, 126783113, 865375399, 765172662, 1008606754, 361203602, 3387549984, 2278477385, 2857719295, 1344809080, 2782912378, 59542671, 1503764984, 160008576, 437062935, 1707065306, 3622233649, 2218934982, 3496503480, 2185314755, 697932208, 1512910199, 504303377, 2075177163, 2824099068, 1841019862, 739644986];
      T2 = [2781242211, 2230877308, 2582542199, 2381740923, 234877682, 3184946027, 2984144751, 1418839493, 1348481072, 50462977, 2848876391, 2102799147, 434634494, 1656084439, 3863849899, 2599188086, 1167051466, 2636087938, 1082771913, 2281340285, 368048890, 3954334041, 3381544775, 201060592, 3963727277, 1739838676, 4250903202, 3930435503, 3206782108, 4149453988, 2531553906, 1536934080, 3262494647, 484572669, 2923271059, 1783375398, 1517041206, 1098792767, 49674231, 1334037708, 1550332980, 4098991525, 886171109, 150598129, 2481090929, 1940642008, 1398944049, 1059722517, 201851908, 1385547719, 1699095331, 1587397571, 674240536, 2704774806, 252314885, 3039795866, 151914247, 908333586, 2602270848, 1038082786, 651029483, 1766729511, 3447698098, 2682942837, 454166793, 2652734339, 1951935532, 775166490, 758520603, 3000790638, 4004797018, 4217086112, 4137964114, 1299594043, 1639438038, 3464344499, 2068982057, 1054729187, 1901997871, 2534638724, 4121318227, 1757008337, 0, 750906861, 1614815264, 535035132, 3363418545, 3988151131, 3201591914, 1183697867, 3647454910, 1265776953, 3734260298, 3566750796, 3903871064, 1250283471, 1807470800, 717615087, 3847203498, 384695291, 3313910595, 3617213773, 1432761139, 2484176261, 3481945413, 283769337, 100925954, 2180939647, 4037038160, 1148730428, 3123027871, 3813386408, 4087501137, 4267549603, 3229630528, 2315620239, 2906624658, 3156319645, 1215313976, 82966005, 3747855548, 3245848246, 1974459098, 1665278241, 807407632, 451280895, 251524083, 1841287890, 1283575245, 337120268, 891687699, 801369324, 3787349855, 2721421207, 3431482436, 959321879, 1469301956, 4065699751, 2197585534, 1199193405, 2898814052, 3887750493, 724703513, 2514908019, 2696962144, 2551808385, 3516813135, 2141445340, 1715741218, 2119445034, 2872807568, 2198571144, 3398190662, 700968686, 3547052216, 1009259540, 2041044702, 3803995742, 487983883, 1991105499, 1004265696, 1449407026, 1316239930, 504629770, 3683797321, 168560134, 1816667172, 3837287516, 1570751170, 1857934291, 4014189740, 2797888098, 2822345105, 2754712981, 936633572, 2347923833, 852879335, 1133234376, 1500395319, 3084545389, 2348912013, 1689376213, 3533459022, 3762923945, 3034082412, 4205598294, 133428468, 634383082, 2949277029, 2398386810, 3913789102, 403703816, 3580869306, 2297460856, 1867130149, 1918643758, 607656988, 4049053350, 3346248884, 1368901318, 600565992, 2090982877, 2632479860, 557719327, 3717614411, 3697393085, 2249034635, 2232388234, 2430627952, 1115438654, 3295786421, 2865522278, 3633334344, 84280067, 33027830, 303828494, 2747425121, 1600795957, 4188952407, 3496589753, 2434238086, 1486471617, 658119965, 3106381470, 953803233, 334231800, 3005978776, 857870609, 3151128937, 1890179545, 2298973838, 2805175444, 3056442267, 574365214, 2450884487, 550103529, 1233637070, 4289353045, 2018519080, 2057691103, 2399374476, 4166623649, 2148108681, 387583245, 3664101311, 836232934, 3330556482, 3100665960, 3280093505, 2955516313, 2002398509, 287182607, 3413881008, 4238890068, 3597515707, 975967766];
      T3 = [1671808611, 2089089148, 2006576759, 2072901243, 4061003762, 1807603307, 1873927791, 3310653893, 810573872, 16974337, 1739181671, 729634347, 4263110654, 3613570519, 2883997099, 1989864566, 3393556426, 2191335298, 3376449993, 2106063485, 4195741690, 1508618841, 1204391495, 4027317232, 2917941677, 3563566036, 2734514082, 2951366063, 2629772188, 2767672228, 1922491506, 3227229120, 3082974647, 4246528509, 2477669779, 644500518, 911895606, 1061256767, 4144166391, 3427763148, 878471220, 2784252325, 3845444069, 4043897329, 1905517169, 3631459288, 827548209, 356461077, 67897348, 3344078279, 593839651, 3277757891, 405286936, 2527147926, 84871685, 2595565466, 118033927, 305538066, 2157648768, 3795705826, 3945188843, 661212711, 2999812018, 1973414517, 152769033, 2208177539, 745822252, 439235610, 455947803, 1857215598, 1525593178, 2700827552, 1391895634, 994932283, 3596728278, 3016654259, 695947817, 3812548067, 795958831, 2224493444, 1408607827, 3513301457, 0, 3979133421, 543178784, 4229948412, 2982705585, 1542305371, 1790891114, 3410398667, 3201918910, 961245753, 1256100938, 1289001036, 1491644504, 3477767631, 3496721360, 4012557807, 2867154858, 4212583931, 1137018435, 1305975373, 861234739, 2241073541, 1171229253, 4178635257, 33948674, 2139225727, 1357946960, 1011120188, 2679776671, 2833468328, 1374921297, 2751356323, 1086357568, 2408187279, 2460827538, 2646352285, 944271416, 4110742005, 3168756668, 3066132406, 3665145818, 560153121, 271589392, 4279952895, 4077846003, 3530407890, 3444343245, 202643468, 322250259, 3962553324, 1608629855, 2543990167, 1154254916, 389623319, 3294073796, 2817676711, 2122513534, 1028094525, 1689045092, 1575467613, 422261273, 1939203699, 1621147744, 2174228865, 1339137615, 3699352540, 577127458, 712922154, 2427141008, 2290289544, 1187679302, 3995715566, 3100863416, 339486740, 3732514782, 1591917662, 186455563, 3681988059, 3762019296, 844522546, 978220090, 169743370, 1239126601, 101321734, 611076132, 1558493276, 3260915650, 3547250131, 2901361580, 1655096418, 2443721105, 2510565781, 3828863972, 2039214713, 3878868455, 3359869896, 928607799, 1840765549, 2374762893, 3580146133, 1322425422, 2850048425, 1823791212, 1459268694, 4094161908, 3928346602, 1706019429, 2056189050, 2934523822, 135794696, 3134549946, 2022240376, 628050469, 779246638, 472135708, 2800834470, 3032970164, 3327236038, 3894660072, 3715932637, 1956440180, 522272287, 1272813131, 3185336765, 2340818315, 2323976074, 1888542832, 1044544574, 3049550261, 1722469478, 1222152264, 50660867, 4127324150, 236067854, 1638122081, 895445557, 1475980887, 3117443513, 2257655686, 3243809217, 489110045, 2662934430, 3778599393, 4162055160, 2561878936, 288563729, 1773916777, 3648039385, 2391345038, 2493985684, 2612407707, 505560094, 2274497927, 3911240169, 3460925390, 1442818645, 678973480, 3749357023, 2358182796, 2717407649, 2306869641, 219617805, 3218761151, 3862026214, 1120306242, 1756942440, 1103331905, 2578459033, 762796589, 252780047, 2966125488, 1425844308, 3151392187, 372911126];
      T4 = [1667474886, 2088535288, 2004326894, 2071694838, 4075949567, 1802223062, 1869591006, 3318043793, 808472672, 16843522, 1734846926, 724270422, 4278065639, 3621216949, 2880169549, 1987484396, 3402253711, 2189597983, 3385409673, 2105378810, 4210693615, 1499065266, 1195886990, 4042263547, 2913856577, 3570689971, 2728590687, 2947541573, 2627518243, 2762274643, 1920112356, 3233831835, 3082273397, 4261223649, 2475929149, 640051788, 909531756, 1061110142, 4160160501, 3435941763, 875846760, 2779116625, 3857003729, 4059105529, 1903268834, 3638064043, 825316194, 353713962, 67374088, 3351728789, 589522246, 3284360861, 404236336, 2526454071, 84217610, 2593830191, 117901582, 303183396, 2155911963, 3806477791, 3958056653, 656894286, 2998062463, 1970642922, 151591698, 2206440989, 741110872, 437923380, 454765878, 1852748508, 1515908788, 2694904667, 1381168804, 993742198, 3604373943, 3014905469, 690584402, 3823320797, 791638366, 2223281939, 1398011302, 3520161977, 0, 3991743681, 538992704, 4244381667, 2981218425, 1532751286, 1785380564, 3419096717, 3200178535, 960056178, 1246420628, 1280103576, 1482221744, 3486468741, 3503319995, 4025428677, 2863326543, 4227536621, 1128514950, 1296947098, 859002214, 2240123921, 1162203018, 4193849577, 33687044, 2139062782, 1347481760, 1010582648, 2678045221, 2829640523, 1364325282, 2745433693, 1077985408, 2408548869, 2459086143, 2644360225, 943212656, 4126475505, 3166494563, 3065430391, 3671750063, 555836226, 269496352, 4294908645, 4092792573, 3537006015, 3452783745, 202118168, 320025894, 3974901699, 1600119230, 2543297077, 1145359496, 387397934, 3301201811, 2812801621, 2122220284, 1027426170, 1684319432, 1566435258, 421079858, 1936954854, 1616945344, 2172753945, 1330631070, 3705438115, 572679748, 707427924, 2425400123, 2290647819, 1179044492, 4008585671, 3099120491, 336870440, 3739122087, 1583276732, 185277718, 3688593069, 3772791771, 842159716, 976899700, 168435220, 1229577106, 101059084, 606366792, 1549591736, 3267517855, 3553849021, 2897014595, 1650632388, 2442242105, 2509612081, 3840161747, 2038008818, 3890688725, 3368567691, 926374254, 1835907034, 2374863873, 3587531953, 1313788572, 2846482505, 1819063512, 1448540844, 4109633523, 3941213647, 1701162954, 2054852340, 2930698567, 134748176, 3132806511, 2021165296, 623210314, 774795868, 471606328, 2795958615, 3031746419, 3334885783, 3907527627, 3722280097, 1953799400, 522133822, 1263263126, 3183336545, 2341176845, 2324333839, 1886425312, 1044267644, 3048588401, 1718004428, 1212733584, 50529542, 4143317495, 235803164, 1633788866, 892690282, 1465383342, 3115962473, 2256965911, 3250673817, 488449850, 2661202215, 3789633753, 4177007595, 2560144171, 286339874, 1768537042, 3654906025, 2391705863, 2492770099, 2610673197, 505291324, 2273808917, 3924369609, 3469625735, 1431699370, 673740880, 3755965093, 2358021891, 2711746649, 2307489801, 218961690, 3217021541, 3873845719, 1111672452, 1751693520, 1094828930, 2576986153, 757954394, 252645662, 2964376443, 1414855848, 3149649517, 370555436];
      T5 = [1374988112, 2118214995, 437757123, 975658646, 1001089995, 530400753, 2902087851, 1273168787, 540080725, 2910219766, 2295101073, 4110568485, 1340463100, 3307916247, 641025152, 3043140495, 3736164937, 632953703, 1172967064, 1576976609, 3274667266, 2169303058, 2370213795, 1809054150, 59727847, 361929877, 3211623147, 2505202138, 3569255213, 1484005843, 1239443753, 2395588676, 1975683434, 4102977912, 2572697195, 666464733, 3202437046, 4035489047, 3374361702, 2110667444, 1675577880, 3843699074, 2538681184, 1649639237, 2976151520, 3144396420, 4269907996, 4178062228, 1883793496, 2403728665, 2497604743, 1383856311, 2876494627, 1917518562, 3810496343, 1716890410, 3001755655, 800440835, 2261089178, 3543599269, 807962610, 599762354, 33778362, 3977675356, 2328828971, 2809771154, 4077384432, 1315562145, 1708848333, 101039829, 3509871135, 3299278474, 875451293, 2733856160, 92987698, 2767645557, 193195065, 1080094634, 1584504582, 3178106961, 1042385657, 2531067453, 3711829422, 1306967366, 2438237621, 1908694277, 67556463, 1615861247, 429456164, 3602770327, 2302690252, 1742315127, 2968011453, 126454664, 3877198648, 2043211483, 2709260871, 2084704233, 4169408201, 0, 159417987, 841739592, 504459436, 1817866830, 4245618683, 260388950, 1034867998, 908933415, 168810852, 1750902305, 2606453969, 607530554, 202008497, 2472011535, 3035535058, 463180190, 2160117071, 1641816226, 1517767529, 470948374, 3801332234, 3231722213, 1008918595, 303765277, 235474187, 4069246893, 766945465, 337553864, 1475418501, 2943682380, 4003061179, 2743034109, 4144047775, 1551037884, 1147550661, 1543208500, 2336434550, 3408119516, 3069049960, 3102011747, 3610369226, 1113818384, 328671808, 2227573024, 2236228733, 3535486456, 2935566865, 3341394285, 496906059, 3702665459, 226906860, 2009195472, 733156972, 2842737049, 294930682, 1206477858, 2835123396, 2700099354, 1451044056, 573804783, 2269728455, 3644379585, 2362090238, 2564033334, 2801107407, 2776292904, 3669462566, 1068351396, 742039012, 1350078989, 1784663195, 1417561698, 4136440770, 2430122216, 775550814, 2193862645, 2673705150, 1775276924, 1876241833, 3475313331, 3366754619, 270040487, 3902563182, 3678124923, 3441850377, 1851332852, 3969562369, 2203032232, 3868552805, 2868897406, 566021896, 4011190502, 3135740889, 1248802510, 3936291284, 699432150, 832877231, 708780849, 3332740144, 899835584, 1951317047, 4236429990, 3767586992, 866637845, 4043610186, 1106041591, 2144161806, 395441711, 1984812685, 1139781709, 3433712980, 3835036895, 2664543715, 1282050075, 3240894392, 1181045119, 2640243204, 25965917, 4203181171, 4211818798, 3009879386, 2463879762, 3910161971, 1842759443, 2597806476, 933301370, 1509430414, 3943906441, 3467192302, 3076639029, 3776767469, 2051518780, 2631065433, 1441952575, 404016761, 1942435775, 1408749034, 1610459739, 3745345300, 2017778566, 3400528769, 3110650942, 941896748, 3265478751, 371049330, 3168937228, 675039627, 4279080257, 967311729, 135050206, 3635733660, 1683407248, 2076935265, 3576870512, 1215061108, 3501741890];
      T6 = [1347548327, 1400783205, 3273267108, 2520393566, 3409685355, 4045380933, 2880240216, 2471224067, 1428173050, 4138563181, 2441661558, 636813900, 4233094615, 3620022987, 2149987652, 2411029155, 1239331162, 1730525723, 2554718734, 3781033664, 46346101, 310463728, 2743944855, 3328955385, 3875770207, 2501218972, 3955191162, 3667219033, 768917123, 3545789473, 692707433, 1150208456, 1786102409, 2029293177, 1805211710, 3710368113, 3065962831, 401639597, 1724457132, 3028143674, 409198410, 2196052529, 1620529459, 1164071807, 3769721975, 2226875310, 486441376, 2499348523, 1483753576, 428819965, 2274680428, 3075636216, 598438867, 3799141122, 1474502543, 711349675, 129166120, 53458370, 2592523643, 2782082824, 4063242375, 2988687269, 3120694122, 1559041666, 730517276, 2460449204, 4042459122, 2706270690, 3446004468, 3573941694, 533804130, 2328143614, 2637442643, 2695033685, 839224033, 1973745387, 957055980, 2856345839, 106852767, 1371368976, 4181598602, 1033297158, 2933734917, 1179510461, 3046200461, 91341917, 1862534868, 4284502037, 605657339, 2547432937, 3431546947, 2003294622, 3182487618, 2282195339, 954669403, 3682191598, 1201765386, 3917234703, 3388507166, 0, 2198438022, 1211247597, 2887651696, 1315723890, 4227665663, 1443857720, 507358933, 657861945, 1678381017, 560487590, 3516619604, 975451694, 2970356327, 261314535, 3535072918, 2652609425, 1333838021, 2724322336, 1767536459, 370938394, 182621114, 3854606378, 1128014560, 487725847, 185469197, 2918353863, 3106780840, 3356761769, 2237133081, 1286567175, 3152976349, 4255350624, 2683765030, 3160175349, 3309594171, 878443390, 1988838185, 3704300486, 1756818940, 1673061617, 3403100636, 272786309, 1075025698, 545572369, 2105887268, 4174560061, 296679730, 1841768865, 1260232239, 4091327024, 3960309330, 3497509347, 1814803222, 2578018489, 4195456072, 575138148, 3299409036, 446754879, 3629546796, 4011996048, 3347532110, 3252238545, 4270639778, 915985419, 3483825537, 681933534, 651868046, 2755636671, 3828103837, 223377554, 2607439820, 1649704518, 3270937875, 3901806776, 1580087799, 4118987695, 3198115200, 2087309459, 2842678573, 3016697106, 1003007129, 2802849917, 1860738147, 2077965243, 164439672, 4100872472, 32283319, 2827177882, 1709610350, 2125135846, 136428751, 3874428392, 3652904859, 3460984630, 3572145929, 3593056380, 2939266226, 824852259, 818324884, 3224740454, 930369212, 2801566410, 2967507152, 355706840, 1257309336, 4148292826, 243256656, 790073846, 2373340630, 1296297904, 1422699085, 3756299780, 3818836405, 457992840, 3099667487, 2135319889, 77422314, 1560382517, 1945798516, 788204353, 1521706781, 1385356242, 870912086, 325965383, 2358957921, 2050466060, 2388260884, 2313884476, 4006521127, 901210569, 3990953189, 1014646705, 1503449823, 1062597235, 2031621326, 3212035895, 3931371469, 1533017514, 350174575, 2256028891, 2177544179, 1052338372, 741876788, 1606591296, 1914052035, 213705253, 2334669897, 1107234197, 1899603969, 3725069491, 2631447780, 2422494913, 1635502980, 1893020342, 1950903388, 1120974935];
      T7 = [2807058932, 1699970625, 2764249623, 1586903591, 1808481195, 1173430173, 1487645946, 59984867, 4199882800, 1844882806, 1989249228, 1277555970, 3623636965, 3419915562, 1149249077, 2744104290, 1514790577, 459744698, 244860394, 3235995134, 1963115311, 4027744588, 2544078150, 4190530515, 1608975247, 2627016082, 2062270317, 1507497298, 2200818878, 567498868, 1764313568, 3359936201, 2305455554, 2037970062, 1047239e3, 1910319033, 1337376481, 2904027272, 2892417312, 984907214, 1243112415, 830661914, 861968209, 2135253587, 2011214180, 2927934315, 2686254721, 731183368, 1750626376, 4246310725, 1820824798, 4172763771, 3542330227, 48394827, 2404901663, 2871682645, 671593195, 3254988725, 2073724613, 145085239, 2280796200, 2779915199, 1790575107, 2187128086, 472615631, 3029510009, 4075877127, 3802222185, 4107101658, 3201631749, 1646252340, 4270507174, 1402811438, 1436590835, 3778151818, 3950355702, 3963161475, 4020912224, 2667994737, 273792366, 2331590177, 104699613, 95345982, 3175501286, 2377486676, 1560637892, 3564045318, 369057872, 4213447064, 3919042237, 1137477952, 2658625497, 1119727848, 2340947849, 1530455833, 4007360968, 172466556, 266959938, 516552836, 0, 2256734592, 3980931627, 1890328081, 1917742170, 4294704398, 945164165, 3575528878, 958871085, 3647212047, 2787207260, 1423022939, 775562294, 1739656202, 3876557655, 2530391278, 2443058075, 3310321856, 547512796, 1265195639, 437656594, 3121275539, 719700128, 3762502690, 387781147, 218828297, 3350065803, 2830708150, 2848461854, 428169201, 122466165, 3720081049, 1627235199, 648017665, 4122762354, 1002783846, 2117360635, 695634755, 3336358691, 4234721005, 4049844452, 3704280881, 2232435299, 574624663, 287343814, 612205898, 1039717051, 840019705, 2708326185, 793451934, 821288114, 1391201670, 3822090177, 376187827, 3113855344, 1224348052, 1679968233, 2361698556, 1058709744, 752375421, 2431590963, 1321699145, 3519142200, 2734591178, 188127444, 2177869557, 3727205754, 2384911031, 3215212461, 2648976442, 2450346104, 3432737375, 1180849278, 331544205, 3102249176, 4150144569, 2952102595, 2159976285, 2474404304, 766078933, 313773861, 2570832044, 2108100632, 1668212892, 3145456443, 2013908262, 418672217, 3070356634, 2594734927, 1852171925, 3867060991, 3473416636, 3907448597, 2614737639, 919489135, 164948639, 2094410160, 2997825956, 590424639, 2486224549, 1723872674, 3157750862, 3399941250, 3501252752, 3625268135, 2555048196, 3673637356, 1343127501, 4130281361, 3599595085, 2957853679, 1297403050, 81781910, 3051593425, 2283490410, 532201772, 1367295589, 3926170974, 895287692, 1953757831, 1093597963, 492483431, 3528626907, 1446242576, 1192455638, 1636604631, 209336225, 344873464, 1015671571, 669961897, 3375740769, 3857572124, 2973530695, 3747192018, 1933530610, 3464042516, 935293895, 3454686199, 2858115069, 1863638845, 3683022916, 4085369519, 3292445032, 875313188, 1080017571, 3279033885, 621591778, 1233856572, 2504130317, 24197544, 3017672716, 3835484340, 3247465558, 2220981195, 3060847922, 1551124588, 1463996600];
      T8 = [4104605777, 1097159550, 396673818, 660510266, 2875968315, 2638606623, 4200115116, 3808662347, 821712160, 1986918061, 3430322568, 38544885, 3856137295, 718002117, 893681702, 1654886325, 2975484382, 3122358053, 3926825029, 4274053469, 796197571, 1290801793, 1184342925, 3556361835, 2405426947, 2459735317, 1836772287, 1381620373, 3196267988, 1948373848, 3764988233, 3385345166, 3263785589, 2390325492, 1480485785, 3111247143, 3780097726, 2293045232, 548169417, 3459953789, 3746175075, 439452389, 1362321559, 1400849762, 1685577905, 1806599355, 2174754046, 137073913, 1214797936, 1174215055, 3731654548, 2079897426, 1943217067, 1258480242, 529487843, 1437280870, 3945269170, 3049390895, 3313212038, 923313619, 679998e3, 3215307299, 57326082, 377642221, 3474729866, 2041877159, 133361907, 1776460110, 3673476453, 96392454, 878845905, 2801699524, 777231668, 4082475170, 2330014213, 4142626212, 2213296395, 1626319424, 1906247262, 1846563261, 562755902, 3708173718, 1040559837, 3871163981, 1418573201, 3294430577, 114585348, 1343618912, 2566595609, 3186202582, 1078185097, 3651041127, 3896688048, 2307622919, 425408743, 3371096953, 2081048481, 1108339068, 2216610296, 0, 2156299017, 736970802, 292596766, 1517440620, 251657213, 2235061775, 2933202493, 758720310, 265905162, 1554391400, 1532285339, 908999204, 174567692, 1474760595, 4002861748, 2610011675, 3234156416, 3693126241, 2001430874, 303699484, 2478443234, 2687165888, 585122620, 454499602, 151849742, 2345119218, 3064510765, 514443284, 4044981591, 1963412655, 2581445614, 2137062819, 19308535, 1928707164, 1715193156, 4219352155, 1126790795, 600235211, 3992742070, 3841024952, 836553431, 1669664834, 2535604243, 3323011204, 1243905413, 3141400786, 4180808110, 698445255, 2653899549, 2989552604, 2253581325, 3252932727, 3004591147, 1891211689, 2487810577, 3915653703, 4237083816, 4030667424, 2100090966, 865136418, 1229899655, 953270745, 3399679628, 3557504664, 4118925222, 2061379749, 3079546586, 2915017791, 983426092, 2022837584, 1607244650, 2118541908, 2366882550, 3635996816, 972512814, 3283088770, 1568718495, 3499326569, 3576539503, 621982671, 2895723464, 410887952, 2623762152, 1002142683, 645401037, 1494807662, 2595684844, 1335535747, 2507040230, 4293295786, 3167684641, 367585007, 3885750714, 1865862730, 2668221674, 2960971305, 2763173681, 1059270954, 2777952454, 2724642869, 1320957812, 2194319100, 2429595872, 2815956275, 77089521, 3973773121, 3444575871, 2448830231, 1305906550, 4021308739, 2857194700, 2516901860, 3518358430, 1787304780, 740276417, 1699839814, 1592394909, 2352307457, 2272556026, 188821243, 1729977011, 3687994002, 274084841, 3594982253, 3613494426, 2701949495, 4162096729, 322734571, 2837966542, 1640576439, 484830689, 1202797690, 3537852828, 4067639125, 349075736, 3342319475, 4157467219, 4255800159, 1030690015, 1155237496, 2951971274, 1757691577, 607398968, 2738905026, 499347990, 3794078908, 1011452712, 227885567, 2818666809, 213114376, 3034881240, 1455525988, 3414450555, 850817237, 1817998408, 3092726480];
      U1 = [0, 235474187, 470948374, 303765277, 941896748, 908933415, 607530554, 708780849, 1883793496, 2118214995, 1817866830, 1649639237, 1215061108, 1181045119, 1417561698, 1517767529, 3767586992, 4003061179, 4236429990, 4069246893, 3635733660, 3602770327, 3299278474, 3400528769, 2430122216, 2664543715, 2362090238, 2193862645, 2835123396, 2801107407, 3035535058, 3135740889, 3678124923, 3576870512, 3341394285, 3374361702, 3810496343, 3977675356, 4279080257, 4043610186, 2876494627, 2776292904, 3076639029, 3110650942, 2472011535, 2640243204, 2403728665, 2169303058, 1001089995, 899835584, 666464733, 699432150, 59727847, 226906860, 530400753, 294930682, 1273168787, 1172967064, 1475418501, 1509430414, 1942435775, 2110667444, 1876241833, 1641816226, 2910219766, 2743034109, 2976151520, 3211623147, 2505202138, 2606453969, 2302690252, 2269728455, 3711829422, 3543599269, 3240894392, 3475313331, 3843699074, 3943906441, 4178062228, 4144047775, 1306967366, 1139781709, 1374988112, 1610459739, 1975683434, 2076935265, 1775276924, 1742315127, 1034867998, 866637845, 566021896, 800440835, 92987698, 193195065, 429456164, 395441711, 1984812685, 2017778566, 1784663195, 1683407248, 1315562145, 1080094634, 1383856311, 1551037884, 101039829, 135050206, 437757123, 337553864, 1042385657, 807962610, 573804783, 742039012, 2531067453, 2564033334, 2328828971, 2227573024, 2935566865, 2700099354, 3001755655, 3168937228, 3868552805, 3902563182, 4203181171, 4102977912, 3736164937, 3501741890, 3265478751, 3433712980, 1106041591, 1340463100, 1576976609, 1408749034, 2043211483, 2009195472, 1708848333, 1809054150, 832877231, 1068351396, 766945465, 599762354, 159417987, 126454664, 361929877, 463180190, 2709260871, 2943682380, 3178106961, 3009879386, 2572697195, 2538681184, 2236228733, 2336434550, 3509871135, 3745345300, 3441850377, 3274667266, 3910161971, 3877198648, 4110568485, 4211818798, 2597806476, 2497604743, 2261089178, 2295101073, 2733856160, 2902087851, 3202437046, 2968011453, 3936291284, 3835036895, 4136440770, 4169408201, 3535486456, 3702665459, 3467192302, 3231722213, 2051518780, 1951317047, 1716890410, 1750902305, 1113818384, 1282050075, 1584504582, 1350078989, 168810852, 67556463, 371049330, 404016761, 841739592, 1008918595, 775550814, 540080725, 3969562369, 3801332234, 4035489047, 4269907996, 3569255213, 3669462566, 3366754619, 3332740144, 2631065433, 2463879762, 2160117071, 2395588676, 2767645557, 2868897406, 3102011747, 3069049960, 202008497, 33778362, 270040487, 504459436, 875451293, 975658646, 675039627, 641025152, 2084704233, 1917518562, 1615861247, 1851332852, 1147550661, 1248802510, 1484005843, 1451044056, 933301370, 967311729, 733156972, 632953703, 260388950, 25965917, 328671808, 496906059, 1206477858, 1239443753, 1543208500, 1441952575, 2144161806, 1908694277, 1675577880, 1842759443, 3610369226, 3644379585, 3408119516, 3307916247, 4011190502, 3776767469, 4077384432, 4245618683, 2809771154, 2842737049, 3144396420, 3043140495, 2673705150, 2438237621, 2203032232, 2370213795];
      U2 = [0, 185469197, 370938394, 487725847, 741876788, 657861945, 975451694, 824852259, 1483753576, 1400783205, 1315723890, 1164071807, 1950903388, 2135319889, 1649704518, 1767536459, 2967507152, 3152976349, 2801566410, 2918353863, 2631447780, 2547432937, 2328143614, 2177544179, 3901806776, 3818836405, 4270639778, 4118987695, 3299409036, 3483825537, 3535072918, 3652904859, 2077965243, 1893020342, 1841768865, 1724457132, 1474502543, 1559041666, 1107234197, 1257309336, 598438867, 681933534, 901210569, 1052338372, 261314535, 77422314, 428819965, 310463728, 3409685355, 3224740454, 3710368113, 3593056380, 3875770207, 3960309330, 4045380933, 4195456072, 2471224067, 2554718734, 2237133081, 2388260884, 3212035895, 3028143674, 2842678573, 2724322336, 4138563181, 4255350624, 3769721975, 3955191162, 3667219033, 3516619604, 3431546947, 3347532110, 2933734917, 2782082824, 3099667487, 3016697106, 2196052529, 2313884476, 2499348523, 2683765030, 1179510461, 1296297904, 1347548327, 1533017514, 1786102409, 1635502980, 2087309459, 2003294622, 507358933, 355706840, 136428751, 53458370, 839224033, 957055980, 605657339, 790073846, 2373340630, 2256028891, 2607439820, 2422494913, 2706270690, 2856345839, 3075636216, 3160175349, 3573941694, 3725069491, 3273267108, 3356761769, 4181598602, 4063242375, 4011996048, 3828103837, 1033297158, 915985419, 730517276, 545572369, 296679730, 446754879, 129166120, 213705253, 1709610350, 1860738147, 1945798516, 2029293177, 1239331162, 1120974935, 1606591296, 1422699085, 4148292826, 4233094615, 3781033664, 3931371469, 3682191598, 3497509347, 3446004468, 3328955385, 2939266226, 2755636671, 3106780840, 2988687269, 2198438022, 2282195339, 2501218972, 2652609425, 1201765386, 1286567175, 1371368976, 1521706781, 1805211710, 1620529459, 2105887268, 1988838185, 533804130, 350174575, 164439672, 46346101, 870912086, 954669403, 636813900, 788204353, 2358957921, 2274680428, 2592523643, 2441661558, 2695033685, 2880240216, 3065962831, 3182487618, 3572145929, 3756299780, 3270937875, 3388507166, 4174560061, 4091327024, 4006521127, 3854606378, 1014646705, 930369212, 711349675, 560487590, 272786309, 457992840, 106852767, 223377554, 1678381017, 1862534868, 1914052035, 2031621326, 1211247597, 1128014560, 1580087799, 1428173050, 32283319, 182621114, 401639597, 486441376, 768917123, 651868046, 1003007129, 818324884, 1503449823, 1385356242, 1333838021, 1150208456, 1973745387, 2125135846, 1673061617, 1756818940, 2970356327, 3120694122, 2802849917, 2887651696, 2637442643, 2520393566, 2334669897, 2149987652, 3917234703, 3799141122, 4284502037, 4100872472, 3309594171, 3460984630, 3545789473, 3629546796, 2050466060, 1899603969, 1814803222, 1730525723, 1443857720, 1560382517, 1075025698, 1260232239, 575138148, 692707433, 878443390, 1062597235, 243256656, 91341917, 409198410, 325965383, 3403100636, 3252238545, 3704300486, 3620022987, 3874428392, 3990953189, 4042459122, 4227665663, 2460449204, 2578018489, 2226875310, 2411029155, 3198115200, 3046200461, 2827177882, 2743944855];
      U3 = [0, 218828297, 437656594, 387781147, 875313188, 958871085, 775562294, 590424639, 1750626376, 1699970625, 1917742170, 2135253587, 1551124588, 1367295589, 1180849278, 1265195639, 3501252752, 3720081049, 3399941250, 3350065803, 3835484340, 3919042237, 4270507174, 4085369519, 3102249176, 3051593425, 2734591178, 2952102595, 2361698556, 2177869557, 2530391278, 2614737639, 3145456443, 3060847922, 2708326185, 2892417312, 2404901663, 2187128086, 2504130317, 2555048196, 3542330227, 3727205754, 3375740769, 3292445032, 3876557655, 3926170974, 4246310725, 4027744588, 1808481195, 1723872674, 1910319033, 2094410160, 1608975247, 1391201670, 1173430173, 1224348052, 59984867, 244860394, 428169201, 344873464, 935293895, 984907214, 766078933, 547512796, 1844882806, 1627235199, 2011214180, 2062270317, 1507497298, 1423022939, 1137477952, 1321699145, 95345982, 145085239, 532201772, 313773861, 830661914, 1015671571, 731183368, 648017665, 3175501286, 2957853679, 2807058932, 2858115069, 2305455554, 2220981195, 2474404304, 2658625497, 3575528878, 3625268135, 3473416636, 3254988725, 3778151818, 3963161475, 4213447064, 4130281361, 3599595085, 3683022916, 3432737375, 3247465558, 3802222185, 4020912224, 4172763771, 4122762354, 3201631749, 3017672716, 2764249623, 2848461854, 2331590177, 2280796200, 2431590963, 2648976442, 104699613, 188127444, 472615631, 287343814, 840019705, 1058709744, 671593195, 621591778, 1852171925, 1668212892, 1953757831, 2037970062, 1514790577, 1463996600, 1080017571, 1297403050, 3673637356, 3623636965, 3235995134, 3454686199, 4007360968, 3822090177, 4107101658, 4190530515, 2997825956, 3215212461, 2830708150, 2779915199, 2256734592, 2340947849, 2627016082, 2443058075, 172466556, 122466165, 273792366, 492483431, 1047239e3, 861968209, 612205898, 695634755, 1646252340, 1863638845, 2013908262, 1963115311, 1446242576, 1530455833, 1277555970, 1093597963, 1636604631, 1820824798, 2073724613, 1989249228, 1436590835, 1487645946, 1337376481, 1119727848, 164948639, 81781910, 331544205, 516552836, 1039717051, 821288114, 669961897, 719700128, 2973530695, 3157750862, 2871682645, 2787207260, 2232435299, 2283490410, 2667994737, 2450346104, 3647212047, 3564045318, 3279033885, 3464042516, 3980931627, 3762502690, 4150144569, 4199882800, 3070356634, 3121275539, 2904027272, 2686254721, 2200818878, 2384911031, 2570832044, 2486224549, 3747192018, 3528626907, 3310321856, 3359936201, 3950355702, 3867060991, 4049844452, 4234721005, 1739656202, 1790575107, 2108100632, 1890328081, 1402811438, 1586903591, 1233856572, 1149249077, 266959938, 48394827, 369057872, 418672217, 1002783846, 919489135, 567498868, 752375421, 209336225, 24197544, 376187827, 459744698, 945164165, 895287692, 574624663, 793451934, 1679968233, 1764313568, 2117360635, 1933530610, 1343127501, 1560637892, 1243112415, 1192455638, 3704280881, 3519142200, 3336358691, 3419915562, 3907448597, 3857572124, 4075877127, 4294704398, 3029510009, 3113855344, 2927934315, 2744104290, 2159976285, 2377486676, 2594734927, 2544078150];
      U4 = [0, 151849742, 303699484, 454499602, 607398968, 758720310, 908999204, 1059270954, 1214797936, 1097159550, 1517440620, 1400849762, 1817998408, 1699839814, 2118541908, 2001430874, 2429595872, 2581445614, 2194319100, 2345119218, 3034881240, 3186202582, 2801699524, 2951971274, 3635996816, 3518358430, 3399679628, 3283088770, 4237083816, 4118925222, 4002861748, 3885750714, 1002142683, 850817237, 698445255, 548169417, 529487843, 377642221, 227885567, 77089521, 1943217067, 2061379749, 1640576439, 1757691577, 1474760595, 1592394909, 1174215055, 1290801793, 2875968315, 2724642869, 3111247143, 2960971305, 2405426947, 2253581325, 2638606623, 2487810577, 3808662347, 3926825029, 4044981591, 4162096729, 3342319475, 3459953789, 3576539503, 3693126241, 1986918061, 2137062819, 1685577905, 1836772287, 1381620373, 1532285339, 1078185097, 1229899655, 1040559837, 923313619, 740276417, 621982671, 439452389, 322734571, 137073913, 19308535, 3871163981, 4021308739, 4104605777, 4255800159, 3263785589, 3414450555, 3499326569, 3651041127, 2933202493, 2815956275, 3167684641, 3049390895, 2330014213, 2213296395, 2566595609, 2448830231, 1305906550, 1155237496, 1607244650, 1455525988, 1776460110, 1626319424, 2079897426, 1928707164, 96392454, 213114376, 396673818, 514443284, 562755902, 679998e3, 865136418, 983426092, 3708173718, 3557504664, 3474729866, 3323011204, 4180808110, 4030667424, 3945269170, 3794078908, 2507040230, 2623762152, 2272556026, 2390325492, 2975484382, 3092726480, 2738905026, 2857194700, 3973773121, 3856137295, 4274053469, 4157467219, 3371096953, 3252932727, 3673476453, 3556361835, 2763173681, 2915017791, 3064510765, 3215307299, 2156299017, 2307622919, 2459735317, 2610011675, 2081048481, 1963412655, 1846563261, 1729977011, 1480485785, 1362321559, 1243905413, 1126790795, 878845905, 1030690015, 645401037, 796197571, 274084841, 425408743, 38544885, 188821243, 3613494426, 3731654548, 3313212038, 3430322568, 4082475170, 4200115116, 3780097726, 3896688048, 2668221674, 2516901860, 2366882550, 2216610296, 3141400786, 2989552604, 2837966542, 2687165888, 1202797690, 1320957812, 1437280870, 1554391400, 1669664834, 1787304780, 1906247262, 2022837584, 265905162, 114585348, 499347990, 349075736, 736970802, 585122620, 972512814, 821712160, 2595684844, 2478443234, 2293045232, 2174754046, 3196267988, 3079546586, 2895723464, 2777952454, 3537852828, 3687994002, 3234156416, 3385345166, 4142626212, 4293295786, 3841024952, 3992742070, 174567692, 57326082, 410887952, 292596766, 777231668, 660510266, 1011452712, 893681702, 1108339068, 1258480242, 1343618912, 1494807662, 1715193156, 1865862730, 1948373848, 2100090966, 2701949495, 2818666809, 3004591147, 3122358053, 2235061775, 2352307457, 2535604243, 2653899549, 3915653703, 3764988233, 4219352155, 4067639125, 3444575871, 3294430577, 3746175075, 3594982253, 836553431, 953270745, 600235211, 718002117, 367585007, 484830689, 133361907, 251657213, 2041877159, 1891211689, 1806599355, 1654886325, 1568718495, 1418573201, 1335535747, 1184342925];
      AES = class _AES {
        get key() {
          return __classPrivateFieldGet(this, _AES_key, "f").slice();
        }
        constructor(key) {
          _AES_key.set(this, void 0);
          _AES_Kd.set(this, void 0);
          _AES_Ke.set(this, void 0);
          if (!(this instanceof _AES)) {
            throw Error("AES must be instanitated with `new`");
          }
          __classPrivateFieldSet(this, _AES_key, new Uint8Array(key), "f");
          const rounds = numberOfRounds[this.key.length];
          if (rounds == null) {
            throw new TypeError("invalid key size (must be 16, 24 or 32 bytes)");
          }
          __classPrivateFieldSet(this, _AES_Ke, [], "f");
          __classPrivateFieldSet(this, _AES_Kd, [], "f");
          for (let i = 0; i <= rounds; i++) {
            __classPrivateFieldGet(this, _AES_Ke, "f").push([0, 0, 0, 0]);
            __classPrivateFieldGet(this, _AES_Kd, "f").push([0, 0, 0, 0]);
          }
          const roundKeyCount = (rounds + 1) * 4;
          const KC = this.key.length / 4;
          const tk = convertToInt32(this.key);
          let index;
          for (let i = 0; i < KC; i++) {
            index = i >> 2;
            __classPrivateFieldGet(this, _AES_Ke, "f")[index][i % 4] = tk[i];
            __classPrivateFieldGet(this, _AES_Kd, "f")[rounds - index][i % 4] = tk[i];
          }
          let rconpointer = 0;
          let t = KC, tt;
          while (t < roundKeyCount) {
            tt = tk[KC - 1];
            tk[0] ^= S[tt >> 16 & 255] << 24 ^ S[tt >> 8 & 255] << 16 ^ S[tt & 255] << 8 ^ S[tt >> 24 & 255] ^ rcon[rconpointer] << 24;
            rconpointer += 1;
            if (KC != 8) {
              for (let i2 = 1; i2 < KC; i2++) {
                tk[i2] ^= tk[i2 - 1];
              }
            } else {
              for (let i2 = 1; i2 < KC / 2; i2++) {
                tk[i2] ^= tk[i2 - 1];
              }
              tt = tk[KC / 2 - 1];
              tk[KC / 2] ^= S[tt & 255] ^ S[tt >> 8 & 255] << 8 ^ S[tt >> 16 & 255] << 16 ^ S[tt >> 24 & 255] << 24;
              for (let i2 = KC / 2 + 1; i2 < KC; i2++) {
                tk[i2] ^= tk[i2 - 1];
              }
            }
            let i = 0, r, c;
            while (i < KC && t < roundKeyCount) {
              r = t >> 2;
              c = t % 4;
              __classPrivateFieldGet(this, _AES_Ke, "f")[r][c] = tk[i];
              __classPrivateFieldGet(this, _AES_Kd, "f")[rounds - r][c] = tk[i++];
              t++;
            }
          }
          for (let r = 1; r < rounds; r++) {
            for (let c = 0; c < 4; c++) {
              tt = __classPrivateFieldGet(this, _AES_Kd, "f")[r][c];
              __classPrivateFieldGet(this, _AES_Kd, "f")[r][c] = U1[tt >> 24 & 255] ^ U2[tt >> 16 & 255] ^ U3[tt >> 8 & 255] ^ U4[tt & 255];
            }
          }
        }
        encrypt(plaintext) {
          if (plaintext.length != 16) {
            throw new TypeError("invalid plaintext size (must be 16 bytes)");
          }
          const rounds = __classPrivateFieldGet(this, _AES_Ke, "f").length - 1;
          const a = [0, 0, 0, 0];
          let t = convertToInt32(plaintext);
          for (let i = 0; i < 4; i++) {
            t[i] ^= __classPrivateFieldGet(this, _AES_Ke, "f")[0][i];
          }
          for (let r = 1; r < rounds; r++) {
            for (let i = 0; i < 4; i++) {
              a[i] = T12[t[i] >> 24 & 255] ^ T2[t[(i + 1) % 4] >> 16 & 255] ^ T3[t[(i + 2) % 4] >> 8 & 255] ^ T4[t[(i + 3) % 4] & 255] ^ __classPrivateFieldGet(this, _AES_Ke, "f")[r][i];
            }
            t = a.slice();
          }
          const result = new Uint8Array(16);
          let tt = 0;
          for (let i = 0; i < 4; i++) {
            tt = __classPrivateFieldGet(this, _AES_Ke, "f")[rounds][i];
            result[4 * i] = (S[t[i] >> 24 & 255] ^ tt >> 24) & 255;
            result[4 * i + 1] = (S[t[(i + 1) % 4] >> 16 & 255] ^ tt >> 16) & 255;
            result[4 * i + 2] = (S[t[(i + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
            result[4 * i + 3] = (S[t[(i + 3) % 4] & 255] ^ tt) & 255;
          }
          return result;
        }
        decrypt(ciphertext) {
          if (ciphertext.length != 16) {
            throw new TypeError("invalid ciphertext size (must be 16 bytes)");
          }
          const rounds = __classPrivateFieldGet(this, _AES_Kd, "f").length - 1;
          const a = [0, 0, 0, 0];
          let t = convertToInt32(ciphertext);
          for (let i = 0; i < 4; i++) {
            t[i] ^= __classPrivateFieldGet(this, _AES_Kd, "f")[0][i];
          }
          for (let r = 1; r < rounds; r++) {
            for (let i = 0; i < 4; i++) {
              a[i] = T5[t[i] >> 24 & 255] ^ T6[t[(i + 3) % 4] >> 16 & 255] ^ T7[t[(i + 2) % 4] >> 8 & 255] ^ T8[t[(i + 1) % 4] & 255] ^ __classPrivateFieldGet(this, _AES_Kd, "f")[r][i];
            }
            t = a.slice();
          }
          const result = new Uint8Array(16);
          let tt = 0;
          for (let i = 0; i < 4; i++) {
            tt = __classPrivateFieldGet(this, _AES_Kd, "f")[rounds][i];
            result[4 * i] = (Si[t[i] >> 24 & 255] ^ tt >> 24) & 255;
            result[4 * i + 1] = (Si[t[(i + 3) % 4] >> 16 & 255] ^ tt >> 16) & 255;
            result[4 * i + 2] = (Si[t[(i + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
            result[4 * i + 3] = (Si[t[(i + 1) % 4] & 255] ^ tt) & 255;
          }
          return result;
        }
      };
      _AES_key = /* @__PURE__ */ new WeakMap(), _AES_Kd = /* @__PURE__ */ new WeakMap(), _AES_Ke = /* @__PURE__ */ new WeakMap();
    }
  });

  // node_modules/aes-js/lib.esm/mode.js
  var ModeOfOperation;
  var init_mode = __esm({
    "node_modules/aes-js/lib.esm/mode.js"() {
      init_aes();
      ModeOfOperation = class {
        constructor(name, key, cls) {
          if (cls && !(this instanceof cls)) {
            throw new Error(`${name} must be instantiated with "new"`);
          }
          Object.defineProperties(this, {
            aes: { enumerable: true, value: new AES(key) },
            name: { enumerable: true, value: name }
          });
        }
      };
    }
  });

  // node_modules/aes-js/lib.esm/mode-cbc.js
  var __classPrivateFieldSet2, __classPrivateFieldGet2, _CBC_iv, _CBC_lastBlock, CBC;
  var init_mode_cbc = __esm({
    "node_modules/aes-js/lib.esm/mode-cbc.js"() {
      init_mode();
      __classPrivateFieldSet2 = function(receiver, state, value, kind, f3) {
        if (kind === "m") throw new TypeError("Private method is not writable");
        if (kind === "a" && !f3) throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f3 : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f3.call(receiver, value) : f3 ? f3.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldGet2 = function(receiver, state, kind, f3) {
        if (kind === "a" && !f3) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f3 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f3 : kind === "a" ? f3.call(receiver) : f3 ? f3.value : state.get(receiver);
      };
      CBC = class _CBC extends ModeOfOperation {
        constructor(key, iv) {
          super("ECC", key, _CBC);
          _CBC_iv.set(this, void 0);
          _CBC_lastBlock.set(this, void 0);
          if (iv) {
            if (iv.length % 16) {
              throw new TypeError("invalid iv size (must be 16 bytes)");
            }
            __classPrivateFieldSet2(this, _CBC_iv, new Uint8Array(iv), "f");
          } else {
            __classPrivateFieldSet2(this, _CBC_iv, new Uint8Array(16), "f");
          }
          __classPrivateFieldSet2(this, _CBC_lastBlock, this.iv, "f");
        }
        get iv() {
          return new Uint8Array(__classPrivateFieldGet2(this, _CBC_iv, "f"));
        }
        encrypt(plaintext) {
          if (plaintext.length % 16) {
            throw new TypeError("invalid plaintext size (must be multiple of 16 bytes)");
          }
          const ciphertext = new Uint8Array(plaintext.length);
          for (let i = 0; i < plaintext.length; i += 16) {
            for (let j = 0; j < 16; j++) {
              __classPrivateFieldGet2(this, _CBC_lastBlock, "f")[j] ^= plaintext[i + j];
            }
            __classPrivateFieldSet2(this, _CBC_lastBlock, this.aes.encrypt(__classPrivateFieldGet2(this, _CBC_lastBlock, "f")), "f");
            ciphertext.set(__classPrivateFieldGet2(this, _CBC_lastBlock, "f"), i);
          }
          return ciphertext;
        }
        decrypt(ciphertext) {
          if (ciphertext.length % 16) {
            throw new TypeError("invalid ciphertext size (must be multiple of 16 bytes)");
          }
          const plaintext = new Uint8Array(ciphertext.length);
          for (let i = 0; i < ciphertext.length; i += 16) {
            const block = this.aes.decrypt(ciphertext.subarray(i, i + 16));
            for (let j = 0; j < 16; j++) {
              plaintext[i + j] = block[j] ^ __classPrivateFieldGet2(this, _CBC_lastBlock, "f")[j];
              __classPrivateFieldGet2(this, _CBC_lastBlock, "f")[j] = ciphertext[i + j];
            }
          }
          return plaintext;
        }
      };
      _CBC_iv = /* @__PURE__ */ new WeakMap(), _CBC_lastBlock = /* @__PURE__ */ new WeakMap();
    }
  });

  // node_modules/aes-js/lib.esm/mode-cfb.js
  var __classPrivateFieldGet3, _CFB_instances, _CFB_iv, _CFB_shiftRegister, _CFB_shift;
  var init_mode_cfb = __esm({
    "node_modules/aes-js/lib.esm/mode-cfb.js"() {
      init_mode();
      __classPrivateFieldGet3 = function(receiver, state, kind, f3) {
        if (kind === "a" && !f3) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f3 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f3 : kind === "a" ? f3.call(receiver) : f3 ? f3.value : state.get(receiver);
      };
      _CFB_iv = /* @__PURE__ */ new WeakMap(), _CFB_shiftRegister = /* @__PURE__ */ new WeakMap(), _CFB_instances = /* @__PURE__ */ new WeakSet(), _CFB_shift = function _CFB_shift2(data) {
        const segmentSize = this.segmentSize / 8;
        __classPrivateFieldGet3(this, _CFB_shiftRegister, "f").set(__classPrivateFieldGet3(this, _CFB_shiftRegister, "f").subarray(segmentSize));
        __classPrivateFieldGet3(this, _CFB_shiftRegister, "f").set(data.subarray(0, segmentSize), 16 - segmentSize);
      };
    }
  });

  // node_modules/aes-js/lib.esm/mode-ctr.js
  var __classPrivateFieldSet3, __classPrivateFieldGet4, _CTR_remaining, _CTR_remainingIndex, _CTR_counter, CTR;
  var init_mode_ctr = __esm({
    "node_modules/aes-js/lib.esm/mode-ctr.js"() {
      init_mode();
      __classPrivateFieldSet3 = function(receiver, state, value, kind, f3) {
        if (kind === "m") throw new TypeError("Private method is not writable");
        if (kind === "a" && !f3) throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f3 : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f3.call(receiver, value) : f3 ? f3.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldGet4 = function(receiver, state, kind, f3) {
        if (kind === "a" && !f3) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f3 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f3 : kind === "a" ? f3.call(receiver) : f3 ? f3.value : state.get(receiver);
      };
      CTR = class _CTR extends ModeOfOperation {
        constructor(key, initialValue) {
          super("CTR", key, _CTR);
          _CTR_remaining.set(this, void 0);
          _CTR_remainingIndex.set(this, void 0);
          _CTR_counter.set(this, void 0);
          __classPrivateFieldSet3(this, _CTR_counter, new Uint8Array(16), "f");
          __classPrivateFieldGet4(this, _CTR_counter, "f").fill(0);
          __classPrivateFieldSet3(this, _CTR_remaining, __classPrivateFieldGet4(this, _CTR_counter, "f"), "f");
          __classPrivateFieldSet3(this, _CTR_remainingIndex, 16, "f");
          if (initialValue == null) {
            initialValue = 1;
          }
          if (typeof initialValue === "number") {
            this.setCounterValue(initialValue);
          } else {
            this.setCounterBytes(initialValue);
          }
        }
        get counter() {
          return new Uint8Array(__classPrivateFieldGet4(this, _CTR_counter, "f"));
        }
        setCounterValue(value) {
          if (!Number.isInteger(value) || value < 0 || value > Number.MAX_SAFE_INTEGER) {
            throw new TypeError("invalid counter initial integer value");
          }
          for (let index = 15; index >= 0; --index) {
            __classPrivateFieldGet4(this, _CTR_counter, "f")[index] = value % 256;
            value = Math.floor(value / 256);
          }
        }
        setCounterBytes(value) {
          if (value.length !== 16) {
            throw new TypeError("invalid counter initial Uint8Array value length");
          }
          __classPrivateFieldGet4(this, _CTR_counter, "f").set(value);
        }
        increment() {
          for (let i = 15; i >= 0; i--) {
            if (__classPrivateFieldGet4(this, _CTR_counter, "f")[i] === 255) {
              __classPrivateFieldGet4(this, _CTR_counter, "f")[i] = 0;
            } else {
              __classPrivateFieldGet4(this, _CTR_counter, "f")[i]++;
              break;
            }
          }
        }
        encrypt(plaintext) {
          var _a2, _b;
          const crypttext = new Uint8Array(plaintext);
          for (let i = 0; i < crypttext.length; i++) {
            if (__classPrivateFieldGet4(this, _CTR_remainingIndex, "f") === 16) {
              __classPrivateFieldSet3(this, _CTR_remaining, this.aes.encrypt(__classPrivateFieldGet4(this, _CTR_counter, "f")), "f");
              __classPrivateFieldSet3(this, _CTR_remainingIndex, 0, "f");
              this.increment();
            }
            crypttext[i] ^= __classPrivateFieldGet4(this, _CTR_remaining, "f")[__classPrivateFieldSet3(this, _CTR_remainingIndex, (_b = __classPrivateFieldGet4(this, _CTR_remainingIndex, "f"), _a2 = _b++, _b), "f"), _a2];
          }
          return crypttext;
        }
        decrypt(ciphertext) {
          return this.encrypt(ciphertext);
        }
      };
      _CTR_remaining = /* @__PURE__ */ new WeakMap(), _CTR_remainingIndex = /* @__PURE__ */ new WeakMap(), _CTR_counter = /* @__PURE__ */ new WeakMap();
    }
  });

  // node_modules/aes-js/lib.esm/mode-ecb.js
  var init_mode_ecb = __esm({
    "node_modules/aes-js/lib.esm/mode-ecb.js"() {
      init_mode();
    }
  });

  // node_modules/aes-js/lib.esm/mode-ofb.js
  var _OFB_iv, _OFB_lastPrecipher, _OFB_lastPrecipherIndex;
  var init_mode_ofb = __esm({
    "node_modules/aes-js/lib.esm/mode-ofb.js"() {
      init_mode();
      _OFB_iv = /* @__PURE__ */ new WeakMap(), _OFB_lastPrecipher = /* @__PURE__ */ new WeakMap(), _OFB_lastPrecipherIndex = /* @__PURE__ */ new WeakMap();
    }
  });

  // node_modules/aes-js/lib.esm/padding.js
  function pkcs7Strip(data) {
    if (data.length < 16) {
      throw new TypeError("PKCS#7 invalid length");
    }
    const padder = data[data.length - 1];
    if (padder > 16) {
      throw new TypeError("PKCS#7 padding byte out of range");
    }
    const length = data.length - padder;
    for (let i = 0; i < padder; i++) {
      if (data[length + i] !== padder) {
        throw new TypeError("PKCS#7 invalid padding byte");
      }
    }
    return new Uint8Array(data.subarray(0, length));
  }
  var init_padding = __esm({
    "node_modules/aes-js/lib.esm/padding.js"() {
    }
  });

  // node_modules/aes-js/lib.esm/index.js
  var init_lib = __esm({
    "node_modules/aes-js/lib.esm/index.js"() {
      init_aes();
      init_mode();
      init_mode_cbc();
      init_mode_cfb();
      init_mode_ctr();
      init_mode_ecb();
      init_mode_ofb();
      init_padding();
    }
  });

  // node_modules/ethers/lib.esm/wallet/utils.js
  function looseArrayify(hexString) {
    if (typeof hexString === "string" && !hexString.startsWith("0x")) {
      hexString = "0x" + hexString;
    }
    return getBytesCopy(hexString);
  }
  function zpad(value, length) {
    value = String(value);
    while (value.length < length) {
      value = "0" + value;
    }
    return value;
  }
  function getPassword(password) {
    if (typeof password === "string") {
      return toUtf8Bytes(password, "NFKC");
    }
    return getBytesCopy(password);
  }
  function spelunk(object2, _path) {
    const match = _path.match(/^([a-z0-9$_.-]*)(:([a-z]+))?(!)?$/i);
    assertArgument(match != null, "invalid path", "path", _path);
    const path = match[1];
    const type2 = match[3];
    const reqd = match[4] === "!";
    let cur = object2;
    for (const comp of path.toLowerCase().split(".")) {
      if (Array.isArray(cur)) {
        if (!comp.match(/^[0-9]+$/)) {
          break;
        }
        cur = cur[parseInt(comp)];
      } else if (typeof cur === "object") {
        let found = null;
        for (const key in cur) {
          if (key.toLowerCase() === comp) {
            found = cur[key];
            break;
          }
        }
        cur = found;
      } else {
        cur = null;
      }
      if (cur == null) {
        break;
      }
    }
    assertArgument(!reqd || cur != null, "missing required value", "path", path);
    if (type2 && cur != null) {
      if (type2 === "int") {
        if (typeof cur === "string" && cur.match(/^-?[0-9]+$/)) {
          return parseInt(cur);
        } else if (Number.isSafeInteger(cur)) {
          return cur;
        }
      }
      if (type2 === "number") {
        if (typeof cur === "string" && cur.match(/^-?[0-9.]*$/)) {
          return parseFloat(cur);
        }
      }
      if (type2 === "data") {
        if (typeof cur === "string") {
          return looseArrayify(cur);
        }
      }
      if (type2 === "array" && Array.isArray(cur)) {
        return cur;
      }
      if (type2 === typeof cur) {
        return cur;
      }
      assertArgument(false, `wrong type found for ${type2} `, "path", path);
    }
    return cur;
  }
  var init_utils4 = __esm({
    "node_modules/ethers/lib.esm/wallet/utils.js"() {
      init_utils();
    }
  });

  // node_modules/ethers/lib.esm/wallet/json-keystore.js
  function isKeystoreJson(json) {
    try {
      const data = JSON.parse(json);
      const version3 = data.version != null ? parseInt(data.version) : 0;
      if (version3 === 3) {
        return true;
      }
    } catch (error) {
    }
    return false;
  }
  function decrypt(data, key, ciphertext) {
    const cipher = spelunk(data, "crypto.cipher:string");
    if (cipher === "aes-128-ctr") {
      const iv = spelunk(data, "crypto.cipherparams.iv:data!");
      const aesCtr = new CTR(key, iv);
      return hexlify(aesCtr.decrypt(ciphertext));
    }
    assert(false, "unsupported cipher", "UNSUPPORTED_OPERATION", {
      operation: "decrypt"
    });
  }
  function getAccount(data, _key) {
    const key = getBytes(_key);
    const ciphertext = spelunk(data, "crypto.ciphertext:data!");
    const computedMAC = hexlify(keccak256(concat([key.slice(16, 32), ciphertext]))).substring(2);
    assertArgument(computedMAC === spelunk(data, "crypto.mac:string!").toLowerCase(), "incorrect password", "password", "[ REDACTED ]");
    const privateKey = decrypt(data, key.slice(0, 16), ciphertext);
    const address = computeAddress(privateKey);
    if (data.address) {
      let check = data.address.toLowerCase();
      if (!check.startsWith("0x")) {
        check = "0x" + check;
      }
      assertArgument(getAddress(check) === address, "keystore address/privateKey mismatch", "address", data.address);
    }
    const account = { address, privateKey };
    const version3 = spelunk(data, "x-ethers.version:string");
    if (version3 === "0.1") {
      const mnemonicKey = key.slice(32, 64);
      const mnemonicCiphertext = spelunk(data, "x-ethers.mnemonicCiphertext:data!");
      const mnemonicIv = spelunk(data, "x-ethers.mnemonicCounter:data!");
      const mnemonicAesCtr = new CTR(mnemonicKey, mnemonicIv);
      account.mnemonic = {
        path: spelunk(data, "x-ethers.path:string") || defaultPath,
        locale: spelunk(data, "x-ethers.locale:string") || "en",
        entropy: hexlify(getBytes(mnemonicAesCtr.decrypt(mnemonicCiphertext)))
      };
    }
    return account;
  }
  function getDecryptKdfParams(data) {
    const kdf = spelunk(data, "crypto.kdf:string");
    if (kdf && typeof kdf === "string") {
      if (kdf.toLowerCase() === "scrypt") {
        const salt = spelunk(data, "crypto.kdfparams.salt:data!");
        const N3 = spelunk(data, "crypto.kdfparams.n:int!");
        const r = spelunk(data, "crypto.kdfparams.r:int!");
        const p = spelunk(data, "crypto.kdfparams.p:int!");
        assertArgument(N3 > 0 && (N3 & N3 - 1) === 0, "invalid kdf.N", "kdf.N", N3);
        assertArgument(r > 0 && p > 0, "invalid kdf", "kdf", kdf);
        const dkLen = spelunk(data, "crypto.kdfparams.dklen:int!");
        assertArgument(dkLen === 32, "invalid kdf.dklen", "kdf.dflen", dkLen);
        return { name: "scrypt", salt, N: N3, r, p, dkLen: 64 };
      } else if (kdf.toLowerCase() === "pbkdf2") {
        const salt = spelunk(data, "crypto.kdfparams.salt:data!");
        const prf = spelunk(data, "crypto.kdfparams.prf:string!");
        const algorithm = prf.split("-").pop();
        assertArgument(algorithm === "sha256" || algorithm === "sha512", "invalid kdf.pdf", "kdf.pdf", prf);
        const count = spelunk(data, "crypto.kdfparams.c:int!");
        const dkLen = spelunk(data, "crypto.kdfparams.dklen:int!");
        assertArgument(dkLen === 32, "invalid kdf.dklen", "kdf.dklen", dkLen);
        return { name: "pbkdf2", salt, count, dkLen, algorithm };
      }
    }
    assertArgument(false, "unsupported key-derivation function", "kdf", kdf);
  }
  function decryptKeystoreJsonSync(json, _password) {
    const data = JSON.parse(json);
    const password = getPassword(_password);
    const params = getDecryptKdfParams(data);
    if (params.name === "pbkdf2") {
      const { salt: salt2, count, dkLen: dkLen2, algorithm } = params;
      const key2 = pbkdf22(password, salt2, count, dkLen2, algorithm);
      return getAccount(data, key2);
    }
    assert(params.name === "scrypt", "cannot be reached", "UNKNOWN_ERROR", { params });
    const { salt, N: N3, r, p, dkLen } = params;
    const key = scryptSync(password, salt, N3, r, p, dkLen);
    return getAccount(data, key);
  }
  function stall3(duration) {
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve();
      }, duration);
    });
  }
  async function decryptKeystoreJson(json, _password, progress) {
    const data = JSON.parse(json);
    const password = getPassword(_password);
    const params = getDecryptKdfParams(data);
    if (params.name === "pbkdf2") {
      if (progress) {
        progress(0);
        await stall3(0);
      }
      const { salt: salt2, count, dkLen: dkLen2, algorithm } = params;
      const key2 = pbkdf22(password, salt2, count, dkLen2, algorithm);
      if (progress) {
        progress(1);
        await stall3(0);
      }
      return getAccount(data, key2);
    }
    assert(params.name === "scrypt", "cannot be reached", "UNKNOWN_ERROR", { params });
    const { salt, N: N3, r, p, dkLen } = params;
    const key = await scrypt2(password, salt, N3, r, p, dkLen, progress);
    return getAccount(data, key);
  }
  function getEncryptKdfParams(options) {
    const salt = options.salt != null ? getBytes(options.salt, "options.salt") : randomBytes3(32);
    let N3 = 1 << 17, r = 8, p = 1;
    if (options.scrypt) {
      if (options.scrypt.N) {
        N3 = options.scrypt.N;
      }
      if (options.scrypt.r) {
        r = options.scrypt.r;
      }
      if (options.scrypt.p) {
        p = options.scrypt.p;
      }
    }
    assertArgument(typeof N3 === "number" && N3 > 0 && Number.isSafeInteger(N3) && (BigInt(N3) & BigInt(N3 - 1)) === BigInt(0), "invalid scrypt N parameter", "options.N", N3);
    assertArgument(typeof r === "number" && r > 0 && Number.isSafeInteger(r), "invalid scrypt r parameter", "options.r", r);
    assertArgument(typeof p === "number" && p > 0 && Number.isSafeInteger(p), "invalid scrypt p parameter", "options.p", p);
    return { name: "scrypt", dkLen: 32, salt, N: N3, r, p };
  }
  function _encryptKeystore(key, kdf, account, options) {
    const privateKey = getBytes(account.privateKey, "privateKey");
    const iv = options.iv != null ? getBytes(options.iv, "options.iv") : randomBytes3(16);
    assertArgument(iv.length === 16, "invalid options.iv length", "options.iv", options.iv);
    const uuidRandom = options.uuid != null ? getBytes(options.uuid, "options.uuid") : randomBytes3(16);
    assertArgument(uuidRandom.length === 16, "invalid options.uuid length", "options.uuid", options.iv);
    const derivedKey = key.slice(0, 16);
    const macPrefix = key.slice(16, 32);
    const aesCtr = new CTR(derivedKey, iv);
    const ciphertext = getBytes(aesCtr.encrypt(privateKey));
    const mac = keccak256(concat([macPrefix, ciphertext]));
    const data = {
      address: account.address.substring(2).toLowerCase(),
      id: uuidV4(uuidRandom),
      version: 3,
      Crypto: {
        cipher: "aes-128-ctr",
        cipherparams: {
          iv: hexlify(iv).substring(2)
        },
        ciphertext: hexlify(ciphertext).substring(2),
        kdf: "scrypt",
        kdfparams: {
          salt: hexlify(kdf.salt).substring(2),
          n: kdf.N,
          dklen: 32,
          p: kdf.p,
          r: kdf.r
        },
        mac: mac.substring(2)
      }
    };
    if (account.mnemonic) {
      const client = options.client != null ? options.client : `ethers/${version}`;
      const path = account.mnemonic.path || defaultPath;
      const locale = account.mnemonic.locale || "en";
      const mnemonicKey = key.slice(32, 64);
      const entropy = getBytes(account.mnemonic.entropy, "account.mnemonic.entropy");
      const mnemonicIv = randomBytes3(16);
      const mnemonicAesCtr = new CTR(mnemonicKey, mnemonicIv);
      const mnemonicCiphertext = getBytes(mnemonicAesCtr.encrypt(entropy));
      const now = /* @__PURE__ */ new Date();
      const timestamp = now.getUTCFullYear() + "-" + zpad(now.getUTCMonth() + 1, 2) + "-" + zpad(now.getUTCDate(), 2) + "T" + zpad(now.getUTCHours(), 2) + "-" + zpad(now.getUTCMinutes(), 2) + "-" + zpad(now.getUTCSeconds(), 2) + ".0Z";
      const gethFilename = "UTC--" + timestamp + "--" + data.address;
      data["x-ethers"] = {
        client,
        gethFilename,
        path,
        locale,
        mnemonicCounter: hexlify(mnemonicIv).substring(2),
        mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),
        version: "0.1"
      };
    }
    return JSON.stringify(data);
  }
  function encryptKeystoreJsonSync(account, password, options) {
    if (options == null) {
      options = {};
    }
    const passwordBytes = getPassword(password);
    const kdf = getEncryptKdfParams(options);
    const key = scryptSync(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64);
    return _encryptKeystore(getBytes(key), kdf, account, options);
  }
  async function encryptKeystoreJson(account, password, options) {
    if (options == null) {
      options = {};
    }
    const passwordBytes = getPassword(password);
    const kdf = getEncryptKdfParams(options);
    const key = await scrypt2(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64, options.progressCallback);
    return _encryptKeystore(getBytes(key), kdf, account, options);
  }
  var defaultPath;
  var init_json_keystore = __esm({
    "node_modules/ethers/lib.esm/wallet/json-keystore.js"() {
      init_lib();
      init_address2();
      init_crypto2();
      init_transaction2();
      init_utils();
      init_utils4();
      init_version2();
      defaultPath = "m/44'/60'/0'/0/0";
    }
  });

  // node_modules/ethers/lib.esm/wallet/hdwallet.js
  function zpad2(value, length) {
    let result = "";
    while (value) {
      result = Nibbles2[value % 16] + result;
      value = Math.trunc(value / 16);
    }
    while (result.length < length * 2) {
      result = "0" + result;
    }
    return "0x" + result;
  }
  function encodeBase58Check(_value2) {
    const value = getBytes(_value2);
    const check = dataSlice(sha2562(sha2562(value)), 0, 4);
    const bytes2 = concat([value, check]);
    return encodeBase58(bytes2);
  }
  function ser_I(index, chainCode, publicKey2, privateKey) {
    const data = new Uint8Array(37);
    if (index & HardenedBit) {
      assert(privateKey != null, "cannot derive child of neutered node", "UNSUPPORTED_OPERATION", {
        operation: "deriveChild"
      });
      data.set(getBytes(privateKey), 1);
    } else {
      data.set(getBytes(publicKey2));
    }
    for (let i = 24; i >= 0; i -= 8) {
      data[33 + (i >> 3)] = index >> 24 - i & 255;
    }
    const I = getBytes(computeHmac("sha512", chainCode, data));
    return { IL: I.slice(0, 32), IR: I.slice(32) };
  }
  function derivePath(node, path) {
    const components = path.split("/");
    assertArgument(components.length > 0, "invalid path", "path", path);
    if (components[0] === "m") {
      assertArgument(node.depth === 0, `cannot derive root path (i.e. path starting with "m/") for a node at non-zero depth ${node.depth}`, "path", path);
      components.shift();
    }
    let result = node;
    for (let i = 0; i < components.length; i++) {
      const component = components[i];
      if (component.match(/^[0-9]+'$/)) {
        const index = parseInt(component.substring(0, component.length - 1));
        assertArgument(index < HardenedBit, "invalid path index", `path[${i}]`, component);
        result = result.deriveChild(HardenedBit + index);
      } else if (component.match(/^[0-9]+$/)) {
        const index = parseInt(component);
        assertArgument(index < HardenedBit, "invalid path index", `path[${i}]`, component);
        result = result.deriveChild(index);
      } else {
        assertArgument(false, "invalid path component", `path[${i}]`, component);
      }
    }
    return result;
  }
  function getAccountPath(_index) {
    const index = getNumber2(_index, "index");
    assertArgument(index >= 0 && index < HardenedBit, "invalid account index", "index", index);
    return `m/44'/60'/${index}'/0/0`;
  }
  function getIndexedAccountPath(_index) {
    const index = getNumber2(_index, "index");
    assertArgument(index >= 0 && index < HardenedBit, "invalid account index", "index", index);
    return `m/44'/60'/0'/0/${index}`;
  }
  var defaultPath2, MasterSecret, HardenedBit, N2, Nibbles2, _guard6, _HDNodeWallet_instances, account_fn, _HDNodeWallet_static, fromSeed_fn, _HDNodeWallet, HDNodeWallet, HDNodeVoidWallet;
  var init_hdwallet = __esm({
    "node_modules/ethers/lib.esm/wallet/hdwallet.js"() {
      init_crypto2();
      init_providers();
      init_transaction2();
      init_utils();
      init_lang_en();
      init_base_wallet();
      init_mnemonic();
      init_json_keystore();
      defaultPath2 = "m/44'/60'/0'/0/0";
      MasterSecret = new Uint8Array([66, 105, 116, 99, 111, 105, 110, 32, 115, 101, 101, 100]);
      HardenedBit = 2147483648;
      N2 = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
      Nibbles2 = "0123456789abcdef";
      _guard6 = {};
      _HDNodeWallet = class _HDNodeWallet extends BaseWallet {
        /**
         *  @private
         */
        constructor(guard, signingKey, parentFingerprint, chainCode, path, index, depth, mnemonic, provider) {
          super(signingKey, provider);
          __privateAdd(this, _HDNodeWallet_instances);
          /**
           *  The compressed public key.
           */
          __publicField(this, "publicKey");
          /**
           *  The fingerprint.
           *
           *  A fingerprint allows quick qay to detect parent and child nodes,
           *  but developers should be prepared to deal with collisions as it
           *  is only 4 bytes.
           */
          __publicField(this, "fingerprint");
          /**
           *  The parent fingerprint.
           */
          __publicField(this, "parentFingerprint");
          /**
           *  The mnemonic used to create this HD Node, if available.
           *
           *  Sources such as extended keys do not encode the mnemonic, in
           *  which case this will be ``null``.
           */
          __publicField(this, "mnemonic");
          /**
           *  The chaincode, which is effectively a public key used
           *  to derive children.
           */
          __publicField(this, "chainCode");
          /**
           *  The derivation path of this wallet.
           *
           *  Since extended keys do not provide full path details, this
           *  may be ``null``, if instantiated from a source that does not
           *  encode it.
           */
          __publicField(this, "path");
          /**
           *  The child index of this wallet. Values over ``2 *\* 31`` indicate
           *  the node is hardened.
           */
          __publicField(this, "index");
          /**
           *  The depth of this wallet, which is the number of components
           *  in its path.
           */
          __publicField(this, "depth");
          assertPrivate(guard, _guard6, "HDNodeWallet");
          defineProperties(this, { publicKey: signingKey.compressedPublicKey });
          const fingerprint = dataSlice(ripemd1602(sha2562(this.publicKey)), 0, 4);
          defineProperties(this, {
            parentFingerprint,
            fingerprint,
            chainCode,
            path,
            index,
            depth
          });
          defineProperties(this, { mnemonic });
        }
        connect(provider) {
          return new _HDNodeWallet(_guard6, this.signingKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.mnemonic, provider);
        }
        /**
         *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with
         *  %%password%%.
         *
         *  If %%progressCallback%% is specified, it will receive periodic
         *  updates as the encryption process progreses.
         */
        async encrypt(password, progressCallback) {
          return await encryptKeystoreJson(__privateMethod(this, _HDNodeWallet_instances, account_fn).call(this), password, { progressCallback });
        }
        /**
         *  Returns a [JSON Keystore Wallet](json-wallets) encryped with
         *  %%password%%.
         *
         *  It is preferred to use the [async version](encrypt) instead,
         *  which allows a [[ProgressCallback]] to keep the user informed.
         *
         *  This method will block the event loop (freezing all UI) until
         *  it is complete, which may be a non-trivial duration.
         */
        encryptSync(password) {
          return encryptKeystoreJsonSync(__privateMethod(this, _HDNodeWallet_instances, account_fn).call(this), password);
        }
        /**
         *  The extended key.
         *
         *  This key will begin with the prefix ``xpriv`` and can be used to
         *  reconstruct this HD Node to derive its children.
         */
        get extendedKey() {
          assert(this.depth < 256, "Depth too deep", "UNSUPPORTED_OPERATION", { operation: "extendedKey" });
          return encodeBase58Check(concat([
            "0x0488ADE4",
            zpad2(this.depth, 1),
            this.parentFingerprint,
            zpad2(this.index, 4),
            this.chainCode,
            concat(["0x00", this.privateKey])
          ]));
        }
        /**
         *  Returns true if this wallet has a path, providing a Type Guard
         *  that the path is non-null.
         */
        hasPath() {
          return this.path != null;
        }
        /**
         *  Returns a neutered HD Node, which removes the private details
         *  of an HD Node.
         *
         *  A neutered node has no private key, but can be used to derive
         *  child addresses and other public data about the HD Node.
         */
        neuter() {
          return new HDNodeVoidWallet(_guard6, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.provider);
        }
        /**
         *  Return the child for %%index%%.
         */
        deriveChild(_index) {
          const index = getNumber2(_index, "index");
          assertArgument(index <= 4294967295, "invalid index", "index", index);
          let path = this.path;
          if (path) {
            path += "/" + (index & ~HardenedBit);
            if (index & HardenedBit) {
              path += "'";
            }
          }
          const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, this.privateKey);
          const ki = new SigningKey(toBeHex((toBigInt(IL) + BigInt(this.privateKey)) % N2, 32));
          return new _HDNodeWallet(_guard6, ki, this.fingerprint, hexlify(IR), path, index, this.depth + 1, this.mnemonic, this.provider);
        }
        /**
         *  Return the HDNode for %%path%% from this node.
         */
        derivePath(path) {
          return derivePath(this, path);
        }
        /**
         *  Creates a new HD Node from %%extendedKey%%.
         *
         *  If the %%extendedKey%% will either have a prefix or ``xpub`` or
         *  ``xpriv``, returning a neutered HD Node ([[HDNodeVoidWallet]])
         *  or full HD Node ([[HDNodeWallet) respectively.
         */
        static fromExtendedKey(extendedKey) {
          const bytes2 = toBeArray(decodeBase58(extendedKey));
          assertArgument(bytes2.length === 82 || encodeBase58Check(bytes2.slice(0, 78)) === extendedKey, "invalid extended key", "extendedKey", "[ REDACTED ]");
          const depth = bytes2[4];
          const parentFingerprint = hexlify(bytes2.slice(5, 9));
          const index = parseInt(hexlify(bytes2.slice(9, 13)).substring(2), 16);
          const chainCode = hexlify(bytes2.slice(13, 45));
          const key = bytes2.slice(45, 78);
          switch (hexlify(bytes2.slice(0, 4))) {
            // Public Key
            case "0x0488b21e":
            case "0x043587cf": {
              const publicKey2 = hexlify(key);
              return new HDNodeVoidWallet(_guard6, computeAddress(publicKey2), publicKey2, parentFingerprint, chainCode, null, index, depth, null);
            }
            // Private Key
            case "0x0488ade4":
            case "0x04358394 ":
              if (key[0] !== 0) {
                break;
              }
              return new _HDNodeWallet(_guard6, new SigningKey(key.slice(1)), parentFingerprint, chainCode, null, index, depth, null, null);
          }
          assertArgument(false, "invalid extended key prefix", "extendedKey", "[ REDACTED ]");
        }
        /**
         *  Creates a new random HDNode.
         */
        static createRandom(password, path, wordlist2) {
          var _a2;
          if (password == null) {
            password = "";
          }
          if (path == null) {
            path = defaultPath2;
          }
          if (wordlist2 == null) {
            wordlist2 = LangEn.wordlist();
          }
          const mnemonic = Mnemonic.fromEntropy(randomBytes3(16), password, wordlist2);
          return __privateMethod(_a2 = _HDNodeWallet, _HDNodeWallet_static, fromSeed_fn).call(_a2, mnemonic.computeSeed(), mnemonic).derivePath(path);
        }
        /**
         *  Create an HD Node from %%mnemonic%%.
         */
        static fromMnemonic(mnemonic, path) {
          var _a2;
          if (!path) {
            path = defaultPath2;
          }
          return __privateMethod(_a2 = _HDNodeWallet, _HDNodeWallet_static, fromSeed_fn).call(_a2, mnemonic.computeSeed(), mnemonic).derivePath(path);
        }
        /**
         *  Creates an HD Node from a mnemonic %%phrase%%.
         */
        static fromPhrase(phrase, password, path, wordlist2) {
          var _a2;
          if (password == null) {
            password = "";
          }
          if (path == null) {
            path = defaultPath2;
          }
          if (wordlist2 == null) {
            wordlist2 = LangEn.wordlist();
          }
          const mnemonic = Mnemonic.fromPhrase(phrase, password, wordlist2);
          return __privateMethod(_a2 = _HDNodeWallet, _HDNodeWallet_static, fromSeed_fn).call(_a2, mnemonic.computeSeed(), mnemonic).derivePath(path);
        }
        /**
         *  Creates an HD Node from a %%seed%%.
         */
        static fromSeed(seed) {
          var _a2;
          return __privateMethod(_a2 = _HDNodeWallet, _HDNodeWallet_static, fromSeed_fn).call(_a2, seed, null);
        }
      };
      _HDNodeWallet_instances = new WeakSet();
      account_fn = function() {
        const account = { address: this.address, privateKey: this.privateKey };
        const m = this.mnemonic;
        if (this.path && m && m.wordlist.locale === "en" && m.password === "") {
          account.mnemonic = {
            path: this.path,
            locale: "en",
            entropy: m.entropy
          };
        }
        return account;
      };
      _HDNodeWallet_static = new WeakSet();
      fromSeed_fn = function(_seed, mnemonic) {
        assertArgument(isBytesLike(_seed), "invalid seed", "seed", "[REDACTED]");
        const seed = getBytes(_seed, "seed");
        assertArgument(seed.length >= 16 && seed.length <= 64, "invalid seed", "seed", "[REDACTED]");
        const I = getBytes(computeHmac("sha512", MasterSecret, seed));
        const signingKey = new SigningKey(hexlify(I.slice(0, 32)));
        return new _HDNodeWallet(_guard6, signingKey, "0x00000000", hexlify(I.slice(32)), "m", 0, 0, mnemonic, null);
      };
      __privateAdd(_HDNodeWallet, _HDNodeWallet_static);
      HDNodeWallet = _HDNodeWallet;
      HDNodeVoidWallet = class _HDNodeVoidWallet extends VoidSigner {
        /**
         *  @private
         */
        constructor(guard, address, publicKey2, parentFingerprint, chainCode, path, index, depth, provider) {
          super(address, provider);
          /**
           *  The compressed public key.
           */
          __publicField(this, "publicKey");
          /**
           *  The fingerprint.
           *
           *  A fingerprint allows quick qay to detect parent and child nodes,
           *  but developers should be prepared to deal with collisions as it
           *  is only 4 bytes.
           */
          __publicField(this, "fingerprint");
          /**
           *  The parent node fingerprint.
           */
          __publicField(this, "parentFingerprint");
          /**
           *  The chaincode, which is effectively a public key used
           *  to derive children.
           */
          __publicField(this, "chainCode");
          /**
           *  The derivation path of this wallet.
           *
           *  Since extended keys do not provider full path details, this
           *  may be ``null``, if instantiated from a source that does not
           *  enocde it.
           */
          __publicField(this, "path");
          /**
           *  The child index of this wallet. Values over ``2 *\* 31`` indicate
           *  the node is hardened.
           */
          __publicField(this, "index");
          /**
           *  The depth of this wallet, which is the number of components
           *  in its path.
           */
          __publicField(this, "depth");
          assertPrivate(guard, _guard6, "HDNodeVoidWallet");
          defineProperties(this, { publicKey: publicKey2 });
          const fingerprint = dataSlice(ripemd1602(sha2562(publicKey2)), 0, 4);
          defineProperties(this, {
            publicKey: publicKey2,
            fingerprint,
            parentFingerprint,
            chainCode,
            path,
            index,
            depth
          });
        }
        connect(provider) {
          return new _HDNodeVoidWallet(_guard6, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, provider);
        }
        /**
         *  The extended key.
         *
         *  This key will begin with the prefix ``xpub`` and can be used to
         *  reconstruct this neutered key to derive its children addresses.
         */
        get extendedKey() {
          assert(this.depth < 256, "Depth too deep", "UNSUPPORTED_OPERATION", { operation: "extendedKey" });
          return encodeBase58Check(concat([
            "0x0488B21E",
            zpad2(this.depth, 1),
            this.parentFingerprint,
            zpad2(this.index, 4),
            this.chainCode,
            this.publicKey
          ]));
        }
        /**
         *  Returns true if this wallet has a path, providing a Type Guard
         *  that the path is non-null.
         */
        hasPath() {
          return this.path != null;
        }
        /**
         *  Return the child for %%index%%.
         */
        deriveChild(_index) {
          const index = getNumber2(_index, "index");
          assertArgument(index <= 4294967295, "invalid index", "index", index);
          let path = this.path;
          if (path) {
            path += "/" + (index & ~HardenedBit);
            if (index & HardenedBit) {
              path += "'";
            }
          }
          const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, null);
          const Ki = SigningKey.addPoints(IL, this.publicKey, true);
          const address = computeAddress(Ki);
          return new _HDNodeVoidWallet(_guard6, address, Ki, this.fingerprint, hexlify(IR), path, index, this.depth + 1, this.provider);
        }
        /**
         *  Return the signer for %%path%% from this node.
         */
        derivePath(path) {
          return derivePath(this, path);
        }
      };
    }
  });

  // node_modules/ethers/lib.esm/wallet/json-crowdsale.js
  function isCrowdsaleJson(json) {
    try {
      const data = JSON.parse(json);
      if (data.encseed) {
        return true;
      }
    } catch (error) {
    }
    return false;
  }
  function decryptCrowdsaleJson(json, _password) {
    const data = JSON.parse(json);
    const password = getPassword(_password);
    const address = getAddress(spelunk(data, "ethaddr:string!"));
    const encseed = looseArrayify(spelunk(data, "encseed:string!"));
    assertArgument(encseed && encseed.length % 16 === 0, "invalid encseed", "json", json);
    const key = getBytes(pbkdf22(password, password, 2e3, 32, "sha256")).slice(0, 16);
    const iv = encseed.slice(0, 16);
    const encryptedSeed = encseed.slice(16);
    const aesCbc = new CBC(key, iv);
    const seed = pkcs7Strip(getBytes(aesCbc.decrypt(encryptedSeed)));
    let seedHex = "";
    for (let i = 0; i < seed.length; i++) {
      seedHex += String.fromCharCode(seed[i]);
    }
    return { address, privateKey: id(seedHex) };
  }
  var init_json_crowdsale = __esm({
    "node_modules/ethers/lib.esm/wallet/json-crowdsale.js"() {
      init_lib();
      init_address2();
      init_crypto2();
      init_hash();
      init_utils();
      init_utils4();
    }
  });

  // node_modules/ethers/lib.esm/wallet/wallet.js
  function stall4(duration) {
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve();
      }, duration);
    });
  }
  var _Wallet_static, fromAccount_fn, _Wallet, Wallet;
  var init_wallet = __esm({
    "node_modules/ethers/lib.esm/wallet/wallet.js"() {
      init_crypto2();
      init_utils();
      init_base_wallet();
      init_hdwallet();
      init_json_crowdsale();
      init_json_keystore();
      init_mnemonic();
      _Wallet = class _Wallet extends BaseWallet {
        /**
         *  Create a new wallet for the private %%key%%, optionally connected
         *  to %%provider%%.
         */
        constructor(key, provider) {
          if (typeof key === "string" && !key.startsWith("0x")) {
            key = "0x" + key;
          }
          let signingKey = typeof key === "string" ? new SigningKey(key) : key;
          super(signingKey, provider);
        }
        connect(provider) {
          return new _Wallet(this.signingKey, provider);
        }
        /**
         *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with
         *  %%password%%.
         *
         *  If %%progressCallback%% is specified, it will receive periodic
         *  updates as the encryption process progreses.
         */
        async encrypt(password, progressCallback) {
          const account = { address: this.address, privateKey: this.privateKey };
          return await encryptKeystoreJson(account, password, { progressCallback });
        }
        /**
         *  Returns a [JSON Keystore Wallet](json-wallets) encryped with
         *  %%password%%.
         *
         *  It is preferred to use the [async version](encrypt) instead,
         *  which allows a [[ProgressCallback]] to keep the user informed.
         *
         *  This method will block the event loop (freezing all UI) until
         *  it is complete, which may be a non-trivial duration.
         */
        encryptSync(password) {
          const account = { address: this.address, privateKey: this.privateKey };
          return encryptKeystoreJsonSync(account, password);
        }
        /**
         *  Creates (asynchronously) a **Wallet** by decrypting the %%json%%
         *  with %%password%%.
         *
         *  If %%progress%% is provided, it is called periodically during
         *  decryption so that any UI can be updated.
         */
        static async fromEncryptedJson(json, password, progress) {
          var _a2;
          let account = null;
          if (isKeystoreJson(json)) {
            account = await decryptKeystoreJson(json, password, progress);
          } else if (isCrowdsaleJson(json)) {
            if (progress) {
              progress(0);
              await stall4(0);
            }
            account = decryptCrowdsaleJson(json, password);
            if (progress) {
              progress(1);
              await stall4(0);
            }
          }
          return __privateMethod(_a2 = _Wallet, _Wallet_static, fromAccount_fn).call(_a2, account);
        }
        /**
         *  Creates a **Wallet** by decrypting the %%json%% with %%password%%.
         *
         *  The [[fromEncryptedJson]] method is preferred, as this method
         *  will lock up and freeze the UI during decryption, which may take
         *  some time.
         */
        static fromEncryptedJsonSync(json, password) {
          var _a2;
          let account = null;
          if (isKeystoreJson(json)) {
            account = decryptKeystoreJsonSync(json, password);
          } else if (isCrowdsaleJson(json)) {
            account = decryptCrowdsaleJson(json, password);
          } else {
            assertArgument(false, "invalid JSON wallet", "json", "[ REDACTED ]");
          }
          return __privateMethod(_a2 = _Wallet, _Wallet_static, fromAccount_fn).call(_a2, account);
        }
        /**
         *  Creates a new random [[HDNodeWallet]] using the available
         *  [cryptographic random source](randomBytes).
         *
         *  If there is no crytographic random source, this will throw.
         */
        static createRandom(provider) {
          const wallet = HDNodeWallet.createRandom();
          if (provider) {
            return wallet.connect(provider);
          }
          return wallet;
        }
        /**
         *  Creates a [[HDNodeWallet]] for %%phrase%%.
         */
        static fromPhrase(phrase, provider) {
          const wallet = HDNodeWallet.fromPhrase(phrase);
          if (provider) {
            return wallet.connect(provider);
          }
          return wallet;
        }
      };
      _Wallet_static = new WeakSet();
      fromAccount_fn = function(account) {
        assertArgument(account, "invalid JSON wallet", "json", "[ REDACTED ]");
        if ("mnemonic" in account && account.mnemonic && account.mnemonic.locale === "en") {
          const mnemonic = Mnemonic.fromEntropy(account.mnemonic.entropy);
          const wallet2 = HDNodeWallet.fromMnemonic(mnemonic, account.mnemonic.path);
          if (wallet2.address === account.address && wallet2.privateKey === account.privateKey) {
            return wallet2;
          }
          console.log("WARNING: JSON mismatch address/privateKey != mnemonic; fallback onto private key");
        }
        const wallet = new _Wallet(account.privateKey);
        assertArgument(wallet.address === account.address, "address/privateKey mismatch", "json", "[ REDACTED ]");
        return wallet;
      };
      __privateAdd(_Wallet, _Wallet_static);
      Wallet = _Wallet;
    }
  });

  // node_modules/ethers/lib.esm/wallet/index.js
  var init_wallet2 = __esm({
    "node_modules/ethers/lib.esm/wallet/index.js"() {
      init_base_wallet();
      init_hdwallet();
      init_json_crowdsale();
      init_json_keystore();
      init_mnemonic();
      init_wallet();
    }
  });

  // node_modules/ethers/lib.esm/wordlists/bit-reader.js
  function decodeBits(width, data) {
    const maxValue2 = (1 << width) - 1;
    const result = [];
    let accum = 0, bits = 0, flood = 0;
    for (let i = 0; i < data.length; i++) {
      accum = accum << 6 | Base64.indexOf(data[i]);
      bits += 6;
      while (bits >= width) {
        const value = accum >> bits - width;
        accum &= (1 << bits - width) - 1;
        bits -= width;
        if (value === 0) {
          flood += maxValue2;
        } else {
          result.push(value + flood);
          flood = 0;
        }
      }
    }
    return result;
  }
  var Base64;
  var init_bit_reader = __esm({
    "node_modules/ethers/lib.esm/wordlists/bit-reader.js"() {
      Base64 = ")!@#$%^&*(ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_";
    }
  });

  // node_modules/ethers/lib.esm/wordlists/decode-owla.js
  function decodeOwlA(data, accents) {
    let words2 = decodeOwl(data).join(",");
    accents.split(/,/g).forEach((accent) => {
      const match = accent.match(/^([a-z]*)([0-9]+)([0-9])(.*)$/);
      assertArgument(match !== null, "internal error parsing accents", "accents", accents);
      let posOffset = 0;
      const positions = decodeBits(parseInt(match[3]), match[4]);
      const charCode = parseInt(match[2]);
      const regex = new RegExp(`([${match[1]}])`, "g");
      words2 = words2.replace(regex, (all, letter) => {
        const rem = --positions[posOffset];
        if (rem === 0) {
          letter = String.fromCharCode(letter.charCodeAt(0), charCode);
          posOffset++;
        }
        return letter;
      });
    });
    return words2.split(",");
  }
  var init_decode_owla = __esm({
    "node_modules/ethers/lib.esm/wordlists/decode-owla.js"() {
      init_utils();
      init_bit_reader();
      init_decode_owl();
    }
  });

  // node_modules/ethers/lib.esm/wordlists/wordlist-owla.js
  var _accent, WordlistOwlA;
  var init_wordlist_owla = __esm({
    "node_modules/ethers/lib.esm/wordlists/wordlist-owla.js"() {
      init_wordlist_owl();
      init_decode_owla();
      WordlistOwlA = class extends WordlistOwl {
        /**
         *  Creates a new Wordlist for %%locale%% using the OWLA %%data%%
         *  and %%accent%% data and validated against the %%checksum%%.
         */
        constructor(locale, data, accent, checksum2) {
          super(locale, data, checksum2);
          __privateAdd(this, _accent);
          __privateSet(this, _accent, accent);
        }
        /**
         *  The OWLA-encoded accent data.
         */
        get _accent() {
          return __privateGet(this, _accent);
        }
        /**
         *  Decode all the words for the wordlist.
         */
        _decodeWords() {
          return decodeOwlA(this._data, this._accent);
        }
      };
      _accent = new WeakMap();
    }
  });

  // node_modules/ethers/lib.esm/wordlists/wordlists-browser.js
  var wordlists;
  var init_wordlists_browser = __esm({
    "node_modules/ethers/lib.esm/wordlists/wordlists-browser.js"() {
      init_lang_en();
      wordlists = {
        en: LangEn.wordlist()
      };
    }
  });

  // node_modules/ethers/lib.esm/wordlists/index.js
  var init_wordlists = __esm({
    "node_modules/ethers/lib.esm/wordlists/index.js"() {
      init_wordlist();
      init_lang_en();
      init_wordlist_owl();
      init_wordlist_owla();
      init_wordlists_browser();
    }
  });

  // node_modules/ethers/lib.esm/ethers.js
  var ethers_exports = {};
  __export(ethers_exports, {
    AbiCoder: () => AbiCoder,
    AbstractProvider: () => AbstractProvider,
    AbstractSigner: () => AbstractSigner,
    AlchemyProvider: () => AlchemyProvider,
    AnkrProvider: () => AnkrProvider,
    BaseContract: () => BaseContract,
    BaseWallet: () => BaseWallet,
    Block: () => Block,
    BlockscoutProvider: () => BlockscoutProvider,
    BrowserProvider: () => BrowserProvider,
    ChainstackProvider: () => ChainstackProvider,
    CloudflareProvider: () => CloudflareProvider,
    ConstructorFragment: () => ConstructorFragment,
    Contract: () => Contract,
    ContractEventPayload: () => ContractEventPayload,
    ContractFactory: () => ContractFactory,
    ContractTransactionReceipt: () => ContractTransactionReceipt,
    ContractTransactionResponse: () => ContractTransactionResponse,
    ContractUnknownEventPayload: () => ContractUnknownEventPayload,
    EnsPlugin: () => EnsPlugin,
    EnsResolver: () => EnsResolver,
    ErrorDescription: () => ErrorDescription,
    ErrorFragment: () => ErrorFragment,
    EtherSymbol: () => EtherSymbol,
    EtherscanPlugin: () => EtherscanPlugin,
    EtherscanProvider: () => EtherscanProvider,
    EventFragment: () => EventFragment,
    EventLog: () => EventLog,
    EventPayload: () => EventPayload,
    FallbackFragment: () => FallbackFragment,
    FallbackProvider: () => FallbackProvider,
    FeeData: () => FeeData,
    FeeDataNetworkPlugin: () => FeeDataNetworkPlugin,
    FetchCancelSignal: () => FetchCancelSignal,
    FetchRequest: () => FetchRequest,
    FetchResponse: () => FetchResponse,
    FetchUrlFeeDataNetworkPlugin: () => FetchUrlFeeDataNetworkPlugin,
    FixedNumber: () => FixedNumber,
    Fragment: () => Fragment,
    FunctionFragment: () => FunctionFragment,
    GasCostPlugin: () => GasCostPlugin,
    HDNodeVoidWallet: () => HDNodeVoidWallet,
    HDNodeWallet: () => HDNodeWallet,
    Indexed: () => Indexed,
    InfuraProvider: () => InfuraProvider,
    InfuraWebSocketProvider: () => InfuraWebSocketProvider,
    Interface: () => Interface,
    IpcSocketProvider: () => IpcSocketProvider,
    JsonRpcApiProvider: () => JsonRpcApiProvider,
    JsonRpcProvider: () => JsonRpcProvider,
    JsonRpcSigner: () => JsonRpcSigner,
    LangEn: () => LangEn,
    Log: () => Log,
    LogDescription: () => LogDescription,
    MaxInt256: () => MaxInt256,
    MaxUint256: () => MaxUint256,
    MessagePrefix: () => MessagePrefix,
    MinInt256: () => MinInt256,
    Mnemonic: () => Mnemonic,
    MulticoinProviderPlugin: () => MulticoinProviderPlugin,
    N: () => N,
    NamedFragment: () => NamedFragment,
    Network: () => Network,
    NetworkPlugin: () => NetworkPlugin,
    NonceManager: () => NonceManager,
    ParamType: () => ParamType,
    PocketProvider: () => PocketProvider,
    QuickNodeProvider: () => QuickNodeProvider,
    Result: () => Result,
    Signature: () => Signature,
    SigningKey: () => SigningKey,
    SocketBlockSubscriber: () => SocketBlockSubscriber,
    SocketEventSubscriber: () => SocketEventSubscriber,
    SocketPendingSubscriber: () => SocketPendingSubscriber,
    SocketProvider: () => SocketProvider,
    SocketSubscriber: () => SocketSubscriber,
    StructFragment: () => StructFragment,
    Transaction: () => Transaction,
    TransactionDescription: () => TransactionDescription,
    TransactionReceipt: () => TransactionReceipt,
    TransactionResponse: () => TransactionResponse,
    Typed: () => Typed,
    TypedDataEncoder: () => TypedDataEncoder,
    UndecodedEventLog: () => UndecodedEventLog,
    UnmanagedSubscriber: () => UnmanagedSubscriber,
    Utf8ErrorFuncs: () => Utf8ErrorFuncs,
    VoidSigner: () => VoidSigner,
    Wallet: () => Wallet,
    WebSocketProvider: () => WebSocketProvider,
    WeiPerEther: () => WeiPerEther,
    Wordlist: () => Wordlist,
    WordlistOwl: () => WordlistOwl,
    WordlistOwlA: () => WordlistOwlA,
    ZeroAddress: () => ZeroAddress,
    ZeroHash: () => ZeroHash,
    accessListify: () => accessListify,
    assert: () => assert,
    assertArgument: () => assertArgument,
    assertArgumentCount: () => assertArgumentCount,
    assertNormalize: () => assertNormalize,
    assertPrivate: () => assertPrivate,
    authorizationify: () => authorizationify,
    checkResultErrors: () => checkResultErrors,
    computeAddress: () => computeAddress,
    computeHmac: () => computeHmac,
    concat: () => concat,
    copyRequest: () => copyRequest,
    dataLength: () => dataLength,
    dataSlice: () => dataSlice,
    decodeBase58: () => decodeBase58,
    decodeBase64: () => decodeBase64,
    decodeBytes32String: () => decodeBytes32String,
    decodeRlp: () => decodeRlp,
    decryptCrowdsaleJson: () => decryptCrowdsaleJson,
    decryptKeystoreJson: () => decryptKeystoreJson,
    decryptKeystoreJsonSync: () => decryptKeystoreJsonSync,
    defaultPath: () => defaultPath2,
    defineProperties: () => defineProperties,
    dnsEncode: () => dnsEncode,
    encodeBase58: () => encodeBase58,
    encodeBase64: () => encodeBase64,
    encodeBytes32String: () => encodeBytes32String,
    encodeRlp: () => encodeRlp,
    encryptKeystoreJson: () => encryptKeystoreJson,
    encryptKeystoreJsonSync: () => encryptKeystoreJsonSync,
    ensNormalize: () => ensNormalize,
    formatEther: () => formatEther,
    formatUnits: () => formatUnits,
    fromTwos: () => fromTwos,
    getAccountPath: () => getAccountPath,
    getAddress: () => getAddress,
    getBigInt: () => getBigInt,
    getBytes: () => getBytes,
    getBytesCopy: () => getBytesCopy,
    getCreate2Address: () => getCreate2Address,
    getCreateAddress: () => getCreateAddress,
    getDefaultProvider: () => getDefaultProvider,
    getIcapAddress: () => getIcapAddress,
    getIndexedAccountPath: () => getIndexedAccountPath,
    getNumber: () => getNumber2,
    getUint: () => getUint,
    hashAuthorization: () => hashAuthorization,
    hashMessage: () => hashMessage,
    hexlify: () => hexlify,
    id: () => id,
    isAddress: () => isAddress,
    isAddressable: () => isAddressable,
    isBytesLike: () => isBytesLike,
    isCallException: () => isCallException,
    isCrowdsaleJson: () => isCrowdsaleJson,
    isError: () => isError,
    isHexString: () => isHexString,
    isKeystoreJson: () => isKeystoreJson,
    isValidName: () => isValidName,
    keccak256: () => keccak256,
    lock: () => lock,
    makeError: () => makeError,
    mask: () => mask,
    namehash: () => namehash,
    parseEther: () => parseEther,
    parseUnits: () => parseUnits,
    pbkdf2: () => pbkdf22,
    randomBytes: () => randomBytes3,
    recoverAddress: () => recoverAddress,
    resolveAddress: () => resolveAddress,
    resolveProperties: () => resolveProperties,
    ripemd160: () => ripemd1602,
    scrypt: () => scrypt2,
    scryptSync: () => scryptSync,
    sha256: () => sha2562,
    sha512: () => sha5122,
    showThrottleMessage: () => showThrottleMessage,
    solidityPacked: () => solidityPacked,
    solidityPackedKeccak256: () => solidityPackedKeccak256,
    solidityPackedSha256: () => solidityPackedSha256,
    stripZerosLeft: () => stripZerosLeft,
    toBeArray: () => toBeArray,
    toBeHex: () => toBeHex,
    toBigInt: () => toBigInt,
    toNumber: () => toNumber,
    toQuantity: () => toQuantity,
    toTwos: () => toTwos,
    toUtf8Bytes: () => toUtf8Bytes,
    toUtf8CodePoints: () => toUtf8CodePoints,
    toUtf8String: () => toUtf8String,
    uuidV4: () => uuidV4,
    verifyAuthorization: () => verifyAuthorization,
    verifyMessage: () => verifyMessage,
    verifyTypedData: () => verifyTypedData,
    version: () => version,
    wordlists: () => wordlists,
    zeroPadBytes: () => zeroPadBytes,
    zeroPadValue: () => zeroPadValue
  });
  var init_ethers = __esm({
    "node_modules/ethers/lib.esm/ethers.js"() {
      init_version2();
      init_abi();
      init_address2();
      init_constants();
      init_contract2();
      init_crypto2();
      init_hash();
      init_providers();
      init_transaction2();
      init_utils();
      init_wallet2();
      init_wordlists();
    }
  });

  // node_modules/ethers/lib.esm/index.js
  var init_lib2 = __esm({
    "node_modules/ethers/lib.esm/index.js"() {
      init_ethers();
      init_ethers();
    }
  });

  // node_modules/@meshconnect/web-link-sdk/utils/connectors/evm/provider.js
  var activeEVMProvider, activeRawProvider, setActiveEVMProvider, getActiveEVMProvider, getActiveRawProvider, clearActiveProviders;
  var init_provider2 = __esm({
    "node_modules/@meshconnect/web-link-sdk/utils/connectors/evm/provider.js"() {
      activeEVMProvider = null;
      activeRawProvider = null;
      setActiveEVMProvider = function(provider, rawProvider) {
        activeEVMProvider = provider;
        activeRawProvider = rawProvider;
      };
      getActiveEVMProvider = function() {
        return activeEVMProvider;
      };
      getActiveRawProvider = function() {
        return activeRawProvider;
      };
      clearActiveProviders = function() {
        activeEVMProvider = null;
        activeRawProvider = null;
      };
    }
  });

  // node_modules/@meshconnect/web-link-sdk/utils/connectors/evm/chainConfigs.js
  var chainConfigs, getChainConfiguration;
  var init_chainConfigs = __esm({
    "node_modules/@meshconnect/web-link-sdk/utils/connectors/evm/chainConfigs.js"() {
      chainConfigs = {
        43114: {
          // Avalanche
          name: "Avalanche",
          nativeCurrency: {
            decimals: 18,
            name: "Avalanche",
            symbol: "AVAX"
          },
          rpcUrls: {
            default: { http: ["https://avalanche-mainnet.infura.io"] }
          },
          blockExplorers: {
            default: {
              name: "SnowTrace",
              url: "https://snowtrace.io"
            }
          }
        },
        42161: {
          // Arbitrum
          name: "Arbitrum One",
          nativeCurrency: {
            decimals: 18,
            name: "Ether",
            symbol: "ETH"
          },
          rpcUrls: {
            default: { http: ["https://arb1.arbitrum.io/rpc"] }
          },
          blockExplorers: {
            default: {
              name: "Arbiscan",
              url: "https://arbiscan.io"
            }
          }
        },
        10: {
          // Optimism
          name: "OP Mainnet",
          nativeCurrency: {
            decimals: 18,
            name: "Ether",
            symbol: "ETH"
          },
          rpcUrls: {
            default: { http: ["https://mainnet.optimism.io"] }
          },
          blockExplorers: {
            default: {
              name: "Optimism Explorer",
              url: "https://optimistic.etherscan.io"
            }
          }
        },
        8453: {
          // Base
          name: "Base",
          nativeCurrency: {
            decimals: 18,
            name: "Ether",
            symbol: "ETH"
          },
          rpcUrls: {
            default: { http: ["https://mainnet.base.org"] }
          },
          blockExplorers: {
            default: {
              name: "Basescan",
              url: "https://basescan.org"
            }
          }
        },
        137: {
          // Polygon
          name: "Polygon",
          nativeCurrency: {
            decimals: 18,
            name: "MATIC",
            symbol: "MATIC"
          },
          rpcUrls: {
            default: { http: ["https://polygon-rpc.com"] }
          },
          blockExplorers: {
            default: {
              name: "PolygonScan",
              url: "https://polygonscan.com"
            }
          }
        },
        56: {
          // BSC
          name: "BNB Smart Chain",
          nativeCurrency: {
            decimals: 18,
            name: "BNB",
            symbol: "BNB"
          },
          rpcUrls: {
            default: { http: ["https://rpc.ankr.com/bsc"] }
          },
          blockExplorers: {
            default: {
              name: "BscScan",
              url: "https://bscscan.com"
            }
          }
        }
      };
      getChainConfiguration = function(chainId) {
        return chainConfigs[chainId];
      };
    }
  });

  // node_modules/@meshconnect/web-link-sdk/utils/connectors/evm/chainSwitching.js
  var __awaiter, __generator, __spreadArray, MAX_RETRY_ATTEMPTS, RETRY_DELAY, waitForPendingSwitch, switchEVMChain, switchChain, handleSwitchError, addChain, isUserRejection;
  var init_chainSwitching = __esm({
    "node_modules/@meshconnect/web-link-sdk/utils/connectors/evm/chainSwitching.js"() {
      init_chainConfigs();
      init_provider2();
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1) throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f3, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
        return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n2) {
          return function(v) {
            return step([n2, v]);
          };
        }
        function step(op) {
          if (f3) throw new TypeError("Generator is already executing.");
          while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f3 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2]) _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f3 = t = 0;
          }
          if (op[0] & 5) throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __spreadArray = function(to, from, pack2) {
        if (pack2 || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
          }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      MAX_RETRY_ATTEMPTS = 3;
      RETRY_DELAY = 1e3;
      waitForPendingSwitch = function(provider_1, chainIdHex_1) {
        var args_1 = [];
        for (var _i = 2; _i < arguments.length; _i++) {
          args_1[_i - 2] = arguments[_i];
        }
        return __awaiter(void 0, __spreadArray([provider_1, chainIdHex_1], args_1, true), void 0, function(provider, chainIdHex, attempt) {
          var currentChainHex, error_1;
          if (attempt === void 0) {
            attempt = 0;
          }
          return __generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                _a2.trys.push([0, 3, , 6]);
                return [4, provider.request({ method: "eth_chainId" })];
              case 1:
                currentChainHex = _a2.sent();
                if (currentChainHex === chainIdHex) {
                  return [
                    2
                    /*return*/
                  ];
                }
                if (attempt >= MAX_RETRY_ATTEMPTS) {
                  throw new Error("Chain switch timeout");
                }
                return [4, new Promise(function(resolve) {
                  return setTimeout(resolve, RETRY_DELAY);
                })];
              case 2:
                _a2.sent();
                return [2, waitForPendingSwitch(provider, chainIdHex, attempt + 1)];
              case 3:
                error_1 = _a2.sent();
                if (!(error_1.code === -32002)) return [3, 5];
                return [4, new Promise(function(resolve) {
                  return setTimeout(resolve, RETRY_DELAY);
                })];
              case 4:
                _a2.sent();
                return [2, waitForPendingSwitch(provider, chainIdHex, attempt + 1)];
              case 5:
                throw error_1;
              case 6:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      switchEVMChain = function(chainId, provider) {
        return __awaiter(void 0, void 0, void 0, function() {
          var targetProvider, chainIdHex, switchError_1, accounts, error_2;
          return __generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                _a2.trys.push([0, 7, , 9]);
                targetProvider = provider || getActiveRawProvider();
                if (!targetProvider) {
                  throw new Error("No active EVM provider");
                }
                chainIdHex = "0x".concat(chainId.toString(16));
                _a2.label = 1;
              case 1:
                _a2.trys.push([1, 3, , 5]);
                return [4, switchChain(targetProvider, chainIdHex)];
              case 2:
                _a2.sent();
                return [3, 5];
              case 3:
                switchError_1 = _a2.sent();
                return [4, handleSwitchError(switchError_1, targetProvider, chainId, chainIdHex)];
              case 4:
                _a2.sent();
                return [3, 5];
              case 5:
                return [4, targetProvider.request({ method: "eth_accounts" })];
              case 6:
                accounts = _a2.sent();
                return [2, { chainId, accounts }];
              case 7:
                error_2 = _a2.sent();
                if (isUserRejection(error_2)) {
                  return [2, new Error("User rejected chain switch")];
                }
                return [4, new Promise(function(resolve) {
                  return setTimeout(resolve, 1e3);
                })];
              case 8:
                _a2.sent();
                console.error("Chain switch error:", error_2);
                return [2, error_2 instanceof Error ? error_2 : new Error("Failed to switch chain")];
              case 9:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      switchChain = function(provider, chainIdHex) {
        return __awaiter(void 0, void 0, void 0, function() {
          return __generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                return [4, provider.request({
                  method: "wallet_switchEthereumChain",
                  params: [{ chainId: chainIdHex }]
                })];
              case 1:
                _a2.sent();
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      handleSwitchError = function(error, provider, chainId, chainIdHex) {
        return __awaiter(void 0, void 0, void 0, function() {
          return __generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                if (error.code === 4001) {
                  throw new Error("User rejected chain switch");
                }
                if (!(error.code === -32002)) return [3, 2];
                return [4, waitForPendingSwitch(provider, chainIdHex)];
              case 1:
                _a2.sent();
                return [
                  2
                  /*return*/
                ];
              case 2:
                if (!(error.code === 4902 || error.code === -32603)) return [3, 5];
                return [4, addChain(provider, chainId, chainIdHex)];
              case 3:
                _a2.sent();
                return [4, switchChain(provider, chainIdHex)];
              case 4:
                _a2.sent();
                return [3, 6];
              case 5:
                throw error;
              case 6:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      addChain = function(provider, chainId, chainIdHex) {
        return __awaiter(void 0, void 0, void 0, function() {
          var chainConfig, addError_1;
          return __generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                chainConfig = getChainConfiguration(chainId);
                if (!chainConfig) {
                  throw new Error("No configuration found for chain ".concat(chainId));
                }
                _a2.label = 1;
              case 1:
                _a2.trys.push([1, 3, , 4]);
                return [4, provider.request({
                  method: "wallet_addEthereumChain",
                  params: [
                    {
                      chainId: chainIdHex,
                      chainName: chainConfig.name,
                      nativeCurrency: chainConfig.nativeCurrency,
                      rpcUrls: chainConfig.rpcUrls.default.http,
                      blockExplorerUrls: [chainConfig.blockExplorers.default.url]
                    }
                  ]
                })];
              case 2:
                _a2.sent();
                return [3, 4];
              case 3:
                addError_1 = _a2.sent();
                if (addError_1.code === 4001) {
                  throw new Error("User rejected chain add");
                }
                throw addError_1;
              case 4:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      isUserRejection = function(error) {
        return error instanceof Error && error.message.includes("rejected");
      };
    }
  });

  // node_modules/@meshconnect/web-link-sdk/utils/connectors/evm/walletDiscovery.js
  var __spreadArray2, discoveredWallets, initializeWalletDiscovery, findAvailableProviders;
  var init_walletDiscovery = __esm({
    "node_modules/@meshconnect/web-link-sdk/utils/connectors/evm/walletDiscovery.js"() {
      __spreadArray2 = function(to, from, pack2) {
        if (pack2 || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
          }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      discoveredWallets = [];
      initializeWalletDiscovery = function() {
        var handleAnnouncement = function(event) {
          var providerDetail = event.detail;
          discoveredWallets = __spreadArray2(__spreadArray2([], discoveredWallets, true), [providerDetail], false);
        };
        window.addEventListener("eip6963:announceProvider", handleAnnouncement);
        window.dispatchEvent(new Event("eip6963:requestProvider"));
        return function() {
          window.removeEventListener("eip6963:announceProvider", handleAnnouncement);
        };
      };
      findAvailableProviders = function() {
        var providers = [];
        if (discoveredWallets.length === 0) {
          initializeWalletDiscovery();
        }
        discoveredWallets.forEach(function(wallet) {
          var injectedData = {
            provider: wallet.provider
          };
          for (var key in wallet.provider) {
            var provider = wallet.provider;
            if (key.startsWith("is") && typeof provider[key] === "boolean") {
              injectedData[key] = provider[key];
            }
          }
          providers.push({
            name: wallet.info.name,
            id: wallet.info.uuid,
            icon: wallet.info.icon,
            injectedData
          });
        });
        return providers;
      };
    }
  });

  // node_modules/@meshconnect/web-link-sdk/utils/connectors/evm/walletConnection.js
  var __awaiter2, __generator2, getEVMProvider, connectToEVMWallet, disconnectFromEVMWallet;
  var init_walletConnection = __esm({
    "node_modules/@meshconnect/web-link-sdk/utils/connectors/evm/walletConnection.js"() {
      init_lib2();
      init_provider2();
      init_chainSwitching();
      init_walletDiscovery();
      __awaiter2 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator2 = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1) throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f3, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
        return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n2) {
          return function(v) {
            return step([n2, v]);
          };
        }
        function step(op) {
          if (f3) throw new TypeError("Generator is already executing.");
          while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f3 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2]) _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f3 = t = 0;
          }
          if (op[0] & 5) throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      initializeWalletDiscovery();
      getEVMProvider = function(walletName, walletDetail) {
        if (walletDetail === null || walletDetail === void 0 ? void 0 : walletDetail.provider) {
          return walletDetail.provider;
        }
        if (!walletName) {
          throw new Error("Wallet name is required");
        }
        var providers = findAvailableProviders();
        var matchingProvider = providers.find(function(p) {
          return p.name.toLowerCase() === walletName.toLowerCase();
        });
        if (matchingProvider) {
          return matchingProvider.injectedData.provider;
        }
        if (window.ethereum) {
          return window.ethereum;
        }
        throw new Error("No provider found for wallet ".concat(walletName, ". Please make sure the wallet is installed and enabled."));
      };
      connectToEVMWallet = function(walletName, targetChainId, walletDetail) {
        return __awaiter2(void 0, void 0, void 0, function() {
          var provider, browserProvider, existingAccounts, signer, address, chainId, switchResult, error_1;
          return __generator2(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                _a2.trys.push([0, 9, , 10]);
                provider = void 0;
                try {
                  provider = getEVMProvider(walletName, walletDetail);
                } catch (error) {
                  throw new Error("No provider found for wallet ".concat(walletName));
                }
                browserProvider = new ethers_exports.BrowserProvider(provider);
                setActiveEVMProvider(browserProvider, provider);
                return [4, provider.request({ method: "eth_accounts" })];
              case 1:
                existingAccounts = _a2.sent();
                if (!(!existingAccounts || existingAccounts.length === 0)) return [3, 3];
                return [4, browserProvider.send("eth_requestAccounts", [])];
              case 2:
                _a2.sent();
                _a2.label = 3;
              case 3:
                return [4, browserProvider.getSigner()];
              case 4:
                signer = _a2.sent();
                return [4, signer.getAddress()];
              case 5:
                address = _a2.sent();
                return [4, browserProvider.getNetwork().then(function(network) {
                  return Number(network.chainId);
                })];
              case 6:
                chainId = _a2.sent();
                if (!(targetChainId && chainId !== targetChainId)) return [3, 8];
                return [4, switchEVMChain(targetChainId, provider)];
              case 7:
                switchResult = _a2.sent();
                if (switchResult instanceof Error) {
                  throw switchResult;
                }
                chainId = switchResult.chainId;
                _a2.label = 8;
              case 8:
                return [2, {
                  accounts: [address],
                  chainId,
                  isConnected: true
                }];
              case 9:
                error_1 = _a2.sent();
                console.error("EVM wallet connection error:", error_1);
                return [2, error_1 instanceof Error ? error_1 : new Error("Failed to connect to ".concat(walletName, " wallet"))];
              case 10:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      disconnectFromEVMWallet = function(walletName) {
        return __awaiter2(void 0, void 0, void 0, function() {
          var provider;
          return __generator2(this, function(_a2) {
            try {
              provider = getActiveRawProvider();
              if (!provider) {
                return [
                  2
                  /*return*/
                ];
              }
              if (provider.removeAllListeners) {
                provider.removeAllListeners();
              }
              clearActiveProviders();
            } catch (error) {
              console.error("EVM wallet disconnection error:", error);
              return [2, error instanceof Error ? error : new Error("Failed to disconnect from ".concat(walletName, " wallet"))];
            }
            return [
              2
              /*return*/
            ];
          });
        });
      };
    }
  });

  // node_modules/@meshconnect/web-link-sdk/utils/connectors/evm/transactions.js
  function toSafeNumber(value, name) {
    if (typeof value !== "number" || Number.isNaN(value)) {
      throw new TypeError("Invalid ".concat(name, ": expected a number, got ").concat(typeof value, " (").concat(value, ")"));
    }
    return value;
  }
  var __awaiter3, __generator3, isUserRejection2, sendEVMTransaction, sendEVMTokenTransaction;
  var init_transactions = __esm({
    "node_modules/@meshconnect/web-link-sdk/utils/connectors/evm/transactions.js"() {
      init_lib2();
      init_provider2();
      __awaiter3 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator3 = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1) throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f3, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
        return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n2) {
          return function(v) {
            return step([n2, v]);
          };
        }
        function step(op) {
          if (f3) throw new TypeError("Generator is already executing.");
          while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f3 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2]) _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f3 = t = 0;
          }
          if (op[0] & 5) throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      isUserRejection2 = function(error) {
        var _a2;
        if (!error)
          return false;
        var message = ((_a2 = error.message) === null || _a2 === void 0 ? void 0 : _a2.toLowerCase()) || "";
        return error.code === 4001 || // Standard EIP-1193 user rejection code
        message.includes("user rejected") || message.includes("user denied") || message.includes("user cancelled") || message.includes("declined");
      };
      sendEVMTransaction = function(toAddress, amount, fromAddress, gasLimit, maxFeePerGas, maxPriorityFeePerGas) {
        return __awaiter3(void 0, void 0, void 0, function() {
          var activeRawProvider2, chainIdHex, chainId, provider, signer, network, tx, receipt, txError_1, error_1;
          return __generator3(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                _a2.trys.push([0, 9, , 10]);
                activeRawProvider2 = getActiveRawProvider();
                if (!activeRawProvider2) {
                  throw new Error("No active EVM provider");
                }
                return [4, activeRawProvider2.request({
                  method: "eth_chainId"
                })];
              case 1:
                chainIdHex = _a2.sent();
                chainId = parseInt(chainIdHex, 16);
                provider = new ethers_exports.BrowserProvider(activeRawProvider2);
                return [
                  4,
                  provider.getSigner(fromAddress)
                  // Verify we're still on the same network before proceeding
                ];
              case 2:
                signer = _a2.sent();
                return [4, provider.getNetwork()];
              case 3:
                network = _a2.sent();
                if (Number(network.chainId) !== chainId) {
                  throw new Error("Network changed during transaction setup");
                }
                _a2.label = 4;
              case 4:
                _a2.trys.push([4, 7, , 8]);
                return [4, signer.sendTransaction({
                  to: toAddress,
                  value: amount,
                  gasLimit: gasLimit ? BigInt(Math.floor(gasLimit)) : void 0,
                  maxFeePerGas: maxFeePerGas ? BigInt(Math.floor(maxFeePerGas)) : void 0,
                  maxPriorityFeePerGas: maxPriorityFeePerGas ? BigInt(Math.floor(maxPriorityFeePerGas)) : void 0
                })];
              case 5:
                tx = _a2.sent();
                return [4, tx.wait()];
              case 6:
                receipt = _a2.sent();
                return [2, receipt ? receipt.hash : ""];
              case 7:
                txError_1 = _a2.sent();
                if (isUserRejection2(txError_1)) {
                  return [2, new Error("Transaction was rejected by user")];
                }
                throw txError_1;
              case 8:
                return [3, 10];
              case 9:
                error_1 = _a2.sent();
                console.error("Transaction error:", error_1);
                if (isUserRejection2(error_1)) {
                  return [2, new Error("Transaction was rejected by user")];
                }
                if (error_1.code === "NETWORK_ERROR") {
                  return [2, new Error("Network changed during transaction. Please try again.")];
                }
                return [2, error_1 instanceof Error ? error_1 : new Error("Failed to send transaction")];
              case 10:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      sendEVMTokenTransaction = function(contractAddress, abi, functionName, args, fromAddress) {
        return __awaiter3(void 0, void 0, void 0, function() {
          var activeRawProvider2, chainIdHex, chainId, provider, signer, network, contract, txOptions, gasLimit, maxFeePerGas, maxPriorityFeePerGas, tx, receipt, txError_2, error_2;
          return __generator3(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                _a2.trys.push([0, 9, , 10]);
                activeRawProvider2 = getActiveRawProvider();
                if (!activeRawProvider2) {
                  throw new Error("No active EVM provider");
                }
                return [4, activeRawProvider2.request({
                  method: "eth_chainId"
                })];
              case 1:
                chainIdHex = _a2.sent();
                chainId = parseInt(chainIdHex, 16);
                provider = new ethers_exports.BrowserProvider(activeRawProvider2);
                return [
                  4,
                  provider.getSigner(fromAddress)
                  // Verify we're still on the same network before proceeding
                ];
              case 2:
                signer = _a2.sent();
                return [4, provider.getNetwork()];
              case 3:
                network = _a2.sent();
                if (Number(network.chainId) !== chainId) {
                  throw new Error("Network changed during transaction setup");
                }
                contract = new ethers_exports.Contract(contractAddress, abi, signer);
                txOptions = {};
                gasLimit = (args === null || args === void 0 ? void 0 : args[2]) !== void 0 ? toSafeNumber(args[2], "gasLimit") : void 0;
                maxFeePerGas = (args === null || args === void 0 ? void 0 : args[3]) !== void 0 ? toSafeNumber(args[3], "maxFeePerGas") : void 0;
                maxPriorityFeePerGas = (args === null || args === void 0 ? void 0 : args[4]) !== void 0 ? toSafeNumber(args[4], "maxPriorityFeePerGas") : void 0;
                txOptions.gasLimit = gasLimit ? BigInt(Math.floor(gasLimit)) : void 0;
                txOptions.maxFeePerGas = maxFeePerGas ? BigInt(Math.floor(maxFeePerGas)) : void 0;
                txOptions.maxPriorityFeePerGas = maxPriorityFeePerGas ? BigInt(Math.floor(maxPriorityFeePerGas)) : void 0;
                _a2.label = 4;
              case 4:
                _a2.trys.push([4, 7, , 8]);
                return [
                  4,
                  contract[functionName](args[0], args[1], txOptions)
                  // Wait for transaction confirmation
                ];
              case 5:
                tx = _a2.sent();
                return [4, tx.wait()];
              case 6:
                receipt = _a2.sent();
                return [2, receipt ? receipt.hash : ""];
              case 7:
                txError_2 = _a2.sent();
                if (isUserRejection2(txError_2)) {
                  return [2, new Error("Transaction was rejected by user")];
                }
                throw txError_2;
              case 8:
                return [3, 10];
              case 9:
                error_2 = _a2.sent();
                console.error("Token transaction error:", error_2);
                if (isUserRejection2(error_2)) {
                  return [2, new Error("Transaction was rejected by user")];
                }
                if (error_2.code === "NETWORK_ERROR") {
                  return [2, new Error("Network changed during transaction. Please try again.")];
                }
                return [2, error_2 instanceof Error ? error_2 : new Error("Failed to send token transaction")];
              case 10:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
    }
  });

  // node_modules/@meshconnect/web-link-sdk/utils/connectors/evm/signing.js
  var __awaiter4, __generator4, signEVMMessage;
  var init_signing = __esm({
    "node_modules/@meshconnect/web-link-sdk/utils/connectors/evm/signing.js"() {
      init_lib2();
      init_provider2();
      __awaiter4 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator4 = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1) throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f3, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
        return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n2) {
          return function(v) {
            return step([n2, v]);
          };
        }
        function step(op) {
          if (f3) throw new TypeError("Generator is already executing.");
          while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f3 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2]) _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f3 = t = 0;
          }
          if (op[0] & 5) throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      signEVMMessage = function(walletName, address, message) {
        return __awaiter4(void 0, void 0, void 0, function() {
          var activeProvider, activeRawProvider2, messageHex, signature_1, provider, signer, signature2, error_1;
          return __generator4(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                _a2.trys.push([0, 5, , 6]);
                activeProvider = getActiveEVMProvider();
                activeRawProvider2 = getActiveRawProvider();
                if (!activeProvider || !activeRawProvider2) {
                  throw new Error("No active EVM provider");
                }
                if (!(walletName.toLowerCase() === "rainbow")) return [3, 2];
                messageHex = ethers_exports.hexlify(ethers_exports.toUtf8Bytes(message));
                return [4, activeRawProvider2.request({
                  method: "personal_sign",
                  // EIP-191 standard order: address first, then message
                  params: [address.toLowerCase(), messageHex]
                })];
              case 1:
                signature_1 = _a2.sent();
                return [2, signature_1];
              case 2:
                provider = new ethers_exports.BrowserProvider(activeRawProvider2);
                return [4, provider.getSigner(address)];
              case 3:
                signer = _a2.sent();
                return [4, signer.signMessage(message)];
              case 4:
                signature2 = _a2.sent();
                return [2, signature2];
              case 5:
                error_1 = _a2.sent();
                console.error("EVM message signing error:", error_1);
                return [2, error_1 instanceof Error ? error_1 : new Error("Failed to sign message with ".concat(walletName, " wallet"))];
              case 6:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
    }
  });

  // node_modules/@meshconnect/web-link-sdk/utils/connectors/evm/index.js
  var init_evm = __esm({
    "node_modules/@meshconnect/web-link-sdk/utils/connectors/evm/index.js"() {
      init_types2();
      init_walletConnection();
      init_transactions();
      init_chainSwitching();
      init_walletDiscovery();
      init_provider2();
      init_chainConfigs();
      init_signing();
    }
  });

  // node_modules/@meshconnect/web-link-sdk/utils/wallet/EVMWalletStrategy.js
  var __extends, __awaiter5, __generator5, EVMWalletStrategy;
  var init_EVMWalletStrategy = __esm({
    "node_modules/@meshconnect/web-link-sdk/utils/wallet/EVMWalletStrategy.js"() {
      init_WalletStrategy();
      init_evm();
      __extends = /* @__PURE__ */ function() {
        var extendStatics = function(d, b2) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b3) {
            d2.__proto__ = b3;
          } || function(d2, b3) {
            for (var p in b3) if (Object.prototype.hasOwnProperty.call(b3, p)) d2[p] = b3[p];
          };
          return extendStatics(d, b2);
        };
        return function(d, b2) {
          if (typeof b2 !== "function" && b2 !== null)
            throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
          extendStatics(d, b2);
          function __() {
            this.constructor = d;
          }
          d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
      }();
      __awaiter5 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator5 = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1) throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f3, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
        return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n2) {
          return function(v) {
            return step([n2, v]);
          };
        }
        function step(op) {
          if (f3) throw new TypeError("Generator is already executing.");
          while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f3 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2]) _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f3 = t = 0;
          }
          if (op[0] & 5) throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      EVMWalletStrategy = /** @class */
      function(_super) {
        __extends(EVMWalletStrategy2, _super);
        function EVMWalletStrategy2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        EVMWalletStrategy2.prototype.connect = function(payload) {
          return __awaiter5(this, void 0, void 0, function() {
            var result, error_1;
            return __generator5(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  _a2.trys.push([0, 2, , 3]);
                  return [4, connectToEVMWallet(payload.integrationName, payload.targetChainId ? parseInt(payload.targetChainId, 10) : void 0)];
                case 1:
                  result = _a2.sent();
                  if (result instanceof Error) {
                    throw result;
                  }
                  return [2, {
                    accounts: result.accounts,
                    chainId: result.chainId,
                    isConnected: result.isConnected
                  }];
                case 2:
                  error_1 = _a2.sent();
                  throw this.handleError(error_1, "connect to EVM wallet");
                case 3:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        EVMWalletStrategy2.prototype.disconnect = function(payload) {
          return __awaiter5(this, void 0, void 0, function() {
            var result, error_2;
            return __generator5(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  _a2.trys.push([0, 2, , 3]);
                  return [4, disconnectFromEVMWallet(payload.walletName || "Unknown Wallet")];
                case 1:
                  result = _a2.sent();
                  if (result instanceof Error) {
                    throw result;
                  }
                  return [3, 3];
                case 2:
                  error_2 = _a2.sent();
                  throw this.handleError(error_2, "disconnect from EVM wallet");
                case 3:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        EVMWalletStrategy2.prototype.signMessage = function(payload) {
          return __awaiter5(this, void 0, void 0, function() {
            var result, error_3;
            return __generator5(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  _a2.trys.push([0, 2, , 3]);
                  return [4, signEVMMessage(payload.walletName || "Unknown Wallet", payload.address, payload.message)];
                case 1:
                  result = _a2.sent();
                  if (result instanceof Error) {
                    throw result;
                  }
                  return [2, result];
                case 2:
                  error_3 = _a2.sent();
                  throw this.handleError(error_3, "sign EVM message");
                case 3:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        EVMWalletStrategy2.prototype.switchChain = function(payload) {
          return __awaiter5(this, void 0, void 0, function() {
            var result, error_4;
            return __generator5(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  _a2.trys.push([0, 2, , 3]);
                  return [4, switchEVMChain(payload.chainId)];
                case 1:
                  result = _a2.sent();
                  if (result instanceof Error) {
                    throw result;
                  }
                  return [2, result];
                case 2:
                  error_4 = _a2.sent();
                  throw this.handleError(error_4, "switch EVM chain");
                case 3:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        EVMWalletStrategy2.prototype.sendNativeTransfer = function(payload) {
          return __awaiter5(this, void 0, void 0, function() {
            var result, error_5;
            return __generator5(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  _a2.trys.push([0, 2, , 3]);
                  return [4, sendEVMTransaction(payload.toAddress, BigInt(payload.amount * Math.pow(10, payload.decimalPlaces)), payload.account, payload.gasLimit, payload.maxFeePerGas, payload.maxPriorityFeePerGas)];
                case 1:
                  result = _a2.sent();
                  if (result instanceof Error) {
                    throw result;
                  }
                  return [2, result];
                case 2:
                  error_5 = _a2.sent();
                  throw this.handleError(error_5, "send EVM native transfer");
                case 3:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        EVMWalletStrategy2.prototype.sendSmartContractInteraction = function(payload) {
          return __awaiter5(this, void 0, void 0, function() {
            var result, error_6;
            return __generator5(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  _a2.trys.push([0, 2, , 3]);
                  return [4, sendEVMTokenTransaction(payload.address, JSON.parse(payload.abi), payload.functionName, payload.args, payload.account)];
                case 1:
                  result = _a2.sent();
                  if (result instanceof Error) {
                    throw result;
                  }
                  return [2, result];
                case 2:
                  error_6 = _a2.sent();
                  throw this.handleError(error_6, "send EVM smart contract interaction");
                case 3:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        EVMWalletStrategy2.prototype.getProviders = function() {
          return findAvailableProviders().map(function(provider) {
            return {
              icon: provider.icon,
              id: provider.id,
              name: provider.name,
              type: "evm"
            };
          });
        };
        return EVMWalletStrategy2;
      }(BaseWalletStrategy);
    }
  });

  // node_modules/@meshconnect/web-link-sdk/utils/connectors/solana/types.js
  var SolanaWalletType;
  var init_types3 = __esm({
    "node_modules/@meshconnect/web-link-sdk/utils/connectors/solana/types.js"() {
      (function(SolanaWalletType2) {
        SolanaWalletType2["PHANTOM"] = "phantom";
        SolanaWalletType2["SOLFLARE"] = "solflare";
        SolanaWalletType2["TRUST"] = "trustwallet";
        SolanaWalletType2["EXODUS"] = "exodus";
        SolanaWalletType2["UNKNOWN"] = "unknown";
      })(SolanaWalletType || (SolanaWalletType = {}));
    }
  });

  // node_modules/@meshconnect/web-link-sdk/utils/connectors/solana/providerDiscovery.js
  var identifyWalletType, getProviderByType, findAvailableSolanaProviders, getSolanaProvider;
  var init_providerDiscovery = __esm({
    "node_modules/@meshconnect/web-link-sdk/utils/connectors/solana/providerDiscovery.js"() {
      init_types3();
      identifyWalletType = function(provider) {
        if (provider.isPhantom)
          return SolanaWalletType.PHANTOM;
        if (provider.isSolflare)
          return SolanaWalletType.SOLFLARE;
        if (provider.isTrust || provider.isTrustWallet)
          return SolanaWalletType.TRUST;
        if (provider.isExodus)
          return SolanaWalletType.EXODUS;
        return SolanaWalletType.UNKNOWN;
      };
      getProviderByType = function(type2) {
        var _a2, _b, _c, _d;
        var dynamicProvider = (_a2 = window[type2]) === null || _a2 === void 0 ? void 0 : _a2.solana;
        if (dynamicProvider) {
          return dynamicProvider;
        }
        switch (type2) {
          case SolanaWalletType.PHANTOM:
            return (_b = window.phantom) === null || _b === void 0 ? void 0 : _b.solana;
          case SolanaWalletType.SOLFLARE:
            return window.solflare;
          case SolanaWalletType.TRUST:
            return (_c = window.trustwallet) === null || _c === void 0 ? void 0 : _c.solana;
          case SolanaWalletType.EXODUS:
            return (_d = window.exodus) === null || _d === void 0 ? void 0 : _d.solana;
          case SolanaWalletType.UNKNOWN:
            return window.solana;
        }
      };
      findAvailableSolanaProviders = function() {
        var providers = {};
        Object.values(SolanaWalletType).forEach(function(type2) {
          if (getProviderByType(type2)) {
            providers[type2] = true;
          }
        });
        if (window.solana && !Object.keys(providers).length) {
          var walletType = identifyWalletType(window.solana);
          providers[walletType] = true;
        }
        return providers;
      };
      getSolanaProvider = function(walletName) {
        var _a2;
        var normalizedName = walletName.toLowerCase().replace(/\s+/g, "");
        var availableProviders = findAvailableSolanaProviders();
        if (availableProviders[normalizedName]) {
          var provider = getProviderByType(normalizedName);
          if (provider)
            return provider;
        }
        var dynamicProvider = (_a2 = window[normalizedName]) === null || _a2 === void 0 ? void 0 : _a2.solana;
        if (dynamicProvider) {
          return dynamicProvider;
        }
        if (window.solana) {
          var detectedType = identifyWalletType(window.solana);
          if (detectedType === normalizedName || normalizedName === SolanaWalletType.UNKNOWN) {
            return window.solana;
          }
        }
        throw new Error("Provider not found for wallet: ".concat(walletName));
      };
    }
  });

  // node_modules/base64-js/index.js
  var require_base64_js = __commonJS({
    "node_modules/base64-js/index.js"(exports) {
      "use strict";
      exports.byteLength = byteLength;
      exports.toByteArray = toByteArray;
      exports.fromByteArray = fromByteArray;
      var lookup = [];
      var revLookup = [];
      var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
      var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      for (i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }
      var i;
      var len;
      revLookup["-".charCodeAt(0)] = 62;
      revLookup["_".charCodeAt(0)] = 63;
      function getLens(b64) {
        var len2 = b64.length;
        if (len2 % 4 > 0) {
          throw new Error("Invalid string. Length must be a multiple of 4");
        }
        var validLen = b64.indexOf("=");
        if (validLen === -1) validLen = len2;
        var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
        return [validLen, placeHoldersLen];
      }
      function byteLength(b64) {
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function _byteLength(b64, validLen, placeHoldersLen) {
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function toByteArray(b64) {
        var tmp;
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
        var curByte = 0;
        var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
        var i2;
        for (i2 = 0; i2 < len2; i2 += 4) {
          tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
          arr[curByte++] = tmp >> 16 & 255;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 2) {
          tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 1) {
          tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        return arr;
      }
      function tripletToBase64(num) {
        return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
      }
      function encodeChunk(uint8, start, end) {
        var tmp;
        var output2 = [];
        for (var i2 = start; i2 < end; i2 += 3) {
          tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
          output2.push(tripletToBase64(tmp));
        }
        return output2.join("");
      }
      function fromByteArray(uint8) {
        var tmp;
        var len2 = uint8.length;
        var extraBytes = len2 % 3;
        var parts = [];
        var maxChunkLength = 16383;
        for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
          parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
        }
        if (extraBytes === 1) {
          tmp = uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
          );
        } else if (extraBytes === 2) {
          tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
          );
        }
        return parts.join("");
      }
    }
  });

  // node_modules/ieee754/index.js
  var require_ieee754 = __commonJS({
    "node_modules/ieee754/index.js"(exports) {
      exports.read = function(buffer, offset2, isLE3, mLen, nBytes) {
        var e, m;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = -7;
        var i = isLE3 ? nBytes - 1 : 0;
        var d = isLE3 ? -1 : 1;
        var s = buffer[offset2 + i];
        i += d;
        e = s & (1 << -nBits) - 1;
        s >>= -nBits;
        nBits += eLen;
        for (; nBits > 0; e = e * 256 + buffer[offset2 + i], i += d, nBits -= 8) {
        }
        m = e & (1 << -nBits) - 1;
        e >>= -nBits;
        nBits += mLen;
        for (; nBits > 0; m = m * 256 + buffer[offset2 + i], i += d, nBits -= 8) {
        }
        if (e === 0) {
          e = 1 - eBias;
        } else if (e === eMax) {
          return m ? NaN : (s ? -1 : 1) * Infinity;
        } else {
          m = m + Math.pow(2, mLen);
          e = e - eBias;
        }
        return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
      };
      exports.write = function(buffer, value, offset2, isLE3, mLen, nBytes) {
        var e, m, c;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var i = isLE3 ? 0 : nBytes - 1;
        var d = isLE3 ? 1 : -1;
        var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
        value = Math.abs(value);
        if (isNaN(value) || value === Infinity) {
          m = isNaN(value) ? 1 : 0;
          e = eMax;
        } else {
          e = Math.floor(Math.log(value) / Math.LN2);
          if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
          }
          if (e + eBias >= 1) {
            value += rt / c;
          } else {
            value += rt * Math.pow(2, 1 - eBias);
          }
          if (value * c >= 2) {
            e++;
            c /= 2;
          }
          if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
          } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
          } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
          }
        }
        for (; mLen >= 8; buffer[offset2 + i] = m & 255, i += d, m /= 256, mLen -= 8) {
        }
        e = e << mLen | m;
        eLen += mLen;
        for (; eLen > 0; buffer[offset2 + i] = e & 255, i += d, e /= 256, eLen -= 8) {
        }
        buffer[offset2 + i - d] |= s * 128;
      };
    }
  });

  // node_modules/buffer/index.js
  var require_buffer = __commonJS({
    "node_modules/buffer/index.js"(exports) {
      "use strict";
      var base64 = require_base64_js();
      var ieee754 = require_ieee754();
      var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
      exports.Buffer = Buffer5;
      exports.SlowBuffer = SlowBuffer;
      exports.INSPECT_MAX_BYTES = 50;
      var K_MAX_LENGTH = 2147483647;
      exports.kMaxLength = K_MAX_LENGTH;
      Buffer5.TYPED_ARRAY_SUPPORT = typedArraySupport();
      if (!Buffer5.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
        console.error(
          "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
        );
      }
      function typedArraySupport() {
        try {
          const arr = new Uint8Array(1);
          const proto = { foo: function() {
            return 42;
          } };
          Object.setPrototypeOf(proto, Uint8Array.prototype);
          Object.setPrototypeOf(arr, proto);
          return arr.foo() === 42;
        } catch (e) {
          return false;
        }
      }
      Object.defineProperty(Buffer5.prototype, "parent", {
        enumerable: true,
        get: function() {
          if (!Buffer5.isBuffer(this)) return void 0;
          return this.buffer;
        }
      });
      Object.defineProperty(Buffer5.prototype, "offset", {
        enumerable: true,
        get: function() {
          if (!Buffer5.isBuffer(this)) return void 0;
          return this.byteOffset;
        }
      });
      function createBuffer(length) {
        if (length > K_MAX_LENGTH) {
          throw new RangeError('The value "' + length + '" is invalid for option "size"');
        }
        const buf = new Uint8Array(length);
        Object.setPrototypeOf(buf, Buffer5.prototype);
        return buf;
      }
      function Buffer5(arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          if (typeof encodingOrOffset === "string") {
            throw new TypeError(
              'The "string" argument must be of type string. Received type number'
            );
          }
          return allocUnsafe(arg);
        }
        return from(arg, encodingOrOffset, length);
      }
      Buffer5.poolSize = 8192;
      function from(value, encodingOrOffset, length) {
        if (typeof value === "string") {
          return fromString(value, encodingOrOffset);
        }
        if (ArrayBuffer.isView(value)) {
          return fromArrayView(value);
        }
        if (value == null) {
          throw new TypeError(
            "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
          );
        }
        if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof value === "number") {
          throw new TypeError(
            'The "value" argument must not be of type number. Received type number'
          );
        }
        const valueOf = value.valueOf && value.valueOf();
        if (valueOf != null && valueOf !== value) {
          return Buffer5.from(valueOf, encodingOrOffset, length);
        }
        const b2 = fromObject(value);
        if (b2) return b2;
        if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
          return Buffer5.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
        }
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      Buffer5.from = function(value, encodingOrOffset, length) {
        return from(value, encodingOrOffset, length);
      };
      Object.setPrototypeOf(Buffer5.prototype, Uint8Array.prototype);
      Object.setPrototypeOf(Buffer5, Uint8Array);
      function assertSize(size) {
        if (typeof size !== "number") {
          throw new TypeError('"size" argument must be of type number');
        } else if (size < 0) {
          throw new RangeError('The value "' + size + '" is invalid for option "size"');
        }
      }
      function alloc(size, fill, encoding) {
        assertSize(size);
        if (size <= 0) {
          return createBuffer(size);
        }
        if (fill !== void 0) {
          return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
        }
        return createBuffer(size);
      }
      Buffer5.alloc = function(size, fill, encoding) {
        return alloc(size, fill, encoding);
      };
      function allocUnsafe(size) {
        assertSize(size);
        return createBuffer(size < 0 ? 0 : checked(size) | 0);
      }
      Buffer5.allocUnsafe = function(size) {
        return allocUnsafe(size);
      };
      Buffer5.allocUnsafeSlow = function(size) {
        return allocUnsafe(size);
      };
      function fromString(string2, encoding) {
        if (typeof encoding !== "string" || encoding === "") {
          encoding = "utf8";
        }
        if (!Buffer5.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        const length = byteLength(string2, encoding) | 0;
        let buf = createBuffer(length);
        const actual = buf.write(string2, encoding);
        if (actual !== length) {
          buf = buf.slice(0, actual);
        }
        return buf;
      }
      function fromArrayLike(array2) {
        const length = array2.length < 0 ? 0 : checked(array2.length) | 0;
        const buf = createBuffer(length);
        for (let i = 0; i < length; i += 1) {
          buf[i] = array2[i] & 255;
        }
        return buf;
      }
      function fromArrayView(arrayView) {
        if (isInstance(arrayView, Uint8Array)) {
          const copy4 = new Uint8Array(arrayView);
          return fromArrayBuffer(copy4.buffer, copy4.byteOffset, copy4.byteLength);
        }
        return fromArrayLike(arrayView);
      }
      function fromArrayBuffer(array2, byteOffset, length) {
        if (byteOffset < 0 || array2.byteLength < byteOffset) {
          throw new RangeError('"offset" is outside of buffer bounds');
        }
        if (array2.byteLength < byteOffset + (length || 0)) {
          throw new RangeError('"length" is outside of buffer bounds');
        }
        let buf;
        if (byteOffset === void 0 && length === void 0) {
          buf = new Uint8Array(array2);
        } else if (length === void 0) {
          buf = new Uint8Array(array2, byteOffset);
        } else {
          buf = new Uint8Array(array2, byteOffset, length);
        }
        Object.setPrototypeOf(buf, Buffer5.prototype);
        return buf;
      }
      function fromObject(obj) {
        if (Buffer5.isBuffer(obj)) {
          const len = checked(obj.length) | 0;
          const buf = createBuffer(len);
          if (buf.length === 0) {
            return buf;
          }
          obj.copy(buf, 0, 0, len);
          return buf;
        }
        if (obj.length !== void 0) {
          if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
            return createBuffer(0);
          }
          return fromArrayLike(obj);
        }
        if (obj.type === "Buffer" && Array.isArray(obj.data)) {
          return fromArrayLike(obj.data);
        }
      }
      function checked(length) {
        if (length >= K_MAX_LENGTH) {
          throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
        }
        return length | 0;
      }
      function SlowBuffer(length) {
        if (+length != length) {
          length = 0;
        }
        return Buffer5.alloc(+length);
      }
      Buffer5.isBuffer = function isBuffer(b2) {
        return b2 != null && b2._isBuffer === true && b2 !== Buffer5.prototype;
      };
      Buffer5.compare = function compare(a, b2) {
        if (isInstance(a, Uint8Array)) a = Buffer5.from(a, a.offset, a.byteLength);
        if (isInstance(b2, Uint8Array)) b2 = Buffer5.from(b2, b2.offset, b2.byteLength);
        if (!Buffer5.isBuffer(a) || !Buffer5.isBuffer(b2)) {
          throw new TypeError(
            'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
          );
        }
        if (a === b2) return 0;
        let x = a.length;
        let y = b2.length;
        for (let i = 0, len = Math.min(x, y); i < len; ++i) {
          if (a[i] !== b2[i]) {
            x = a[i];
            y = b2[i];
            break;
          }
        }
        if (x < y) return -1;
        if (y < x) return 1;
        return 0;
      };
      Buffer5.isEncoding = function isEncoding(encoding) {
        switch (String(encoding).toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "latin1":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return true;
          default:
            return false;
        }
      };
      Buffer5.concat = function concat2(list, length) {
        if (!Array.isArray(list)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        if (list.length === 0) {
          return Buffer5.alloc(0);
        }
        let i;
        if (length === void 0) {
          length = 0;
          for (i = 0; i < list.length; ++i) {
            length += list[i].length;
          }
        }
        const buffer = Buffer5.allocUnsafe(length);
        let pos = 0;
        for (i = 0; i < list.length; ++i) {
          let buf = list[i];
          if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
              if (!Buffer5.isBuffer(buf)) buf = Buffer5.from(buf);
              buf.copy(buffer, pos);
            } else {
              Uint8Array.prototype.set.call(
                buffer,
                buf,
                pos
              );
            }
          } else if (!Buffer5.isBuffer(buf)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          } else {
            buf.copy(buffer, pos);
          }
          pos += buf.length;
        }
        return buffer;
      };
      function byteLength(string2, encoding) {
        if (Buffer5.isBuffer(string2)) {
          return string2.length;
        }
        if (ArrayBuffer.isView(string2) || isInstance(string2, ArrayBuffer)) {
          return string2.byteLength;
        }
        if (typeof string2 !== "string") {
          throw new TypeError(
            'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string2
          );
        }
        const len = string2.length;
        const mustMatch = arguments.length > 2 && arguments[2] === true;
        if (!mustMatch && len === 0) return 0;
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "ascii":
            case "latin1":
            case "binary":
              return len;
            case "utf8":
            case "utf-8":
              return utf8ToBytes4(string2).length;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return len * 2;
            case "hex":
              return len >>> 1;
            case "base64":
              return base64ToBytes(string2).length;
            default:
              if (loweredCase) {
                return mustMatch ? -1 : utf8ToBytes4(string2).length;
              }
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer5.byteLength = byteLength;
      function slowToString(encoding, start, end) {
        let loweredCase = false;
        if (start === void 0 || start < 0) {
          start = 0;
        }
        if (start > this.length) {
          return "";
        }
        if (end === void 0 || end > this.length) {
          end = this.length;
        }
        if (end <= 0) {
          return "";
        }
        end >>>= 0;
        start >>>= 0;
        if (end <= start) {
          return "";
        }
        if (!encoding) encoding = "utf8";
        while (true) {
          switch (encoding) {
            case "hex":
              return hexSlice(this, start, end);
            case "utf8":
            case "utf-8":
              return utf8Slice(this, start, end);
            case "ascii":
              return asciiSlice(this, start, end);
            case "latin1":
            case "binary":
              return latin1Slice(this, start, end);
            case "base64":
              return base64Slice(this, start, end);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return utf16leSlice(this, start, end);
            default:
              if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
              encoding = (encoding + "").toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer5.prototype._isBuffer = true;
      function swap(b2, n2, m) {
        const i = b2[n2];
        b2[n2] = b2[m];
        b2[m] = i;
      }
      Buffer5.prototype.swap16 = function swap16() {
        const len = this.length;
        if (len % 2 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 16-bits");
        }
        for (let i = 0; i < len; i += 2) {
          swap(this, i, i + 1);
        }
        return this;
      };
      Buffer5.prototype.swap32 = function swap32() {
        const len = this.length;
        if (len % 4 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 32-bits");
        }
        for (let i = 0; i < len; i += 4) {
          swap(this, i, i + 3);
          swap(this, i + 1, i + 2);
        }
        return this;
      };
      Buffer5.prototype.swap64 = function swap64() {
        const len = this.length;
        if (len % 8 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 64-bits");
        }
        for (let i = 0; i < len; i += 8) {
          swap(this, i, i + 7);
          swap(this, i + 1, i + 6);
          swap(this, i + 2, i + 5);
          swap(this, i + 3, i + 4);
        }
        return this;
      };
      Buffer5.prototype.toString = function toString2() {
        const length = this.length;
        if (length === 0) return "";
        if (arguments.length === 0) return utf8Slice(this, 0, length);
        return slowToString.apply(this, arguments);
      };
      Buffer5.prototype.toLocaleString = Buffer5.prototype.toString;
      Buffer5.prototype.equals = function equals(b2) {
        if (!Buffer5.isBuffer(b2)) throw new TypeError("Argument must be a Buffer");
        if (this === b2) return true;
        return Buffer5.compare(this, b2) === 0;
      };
      Buffer5.prototype.inspect = function inspect() {
        let str = "";
        const max = exports.INSPECT_MAX_BYTES;
        str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
        if (this.length > max) str += " ... ";
        return "<Buffer " + str + ">";
      };
      if (customInspectSymbol) {
        Buffer5.prototype[customInspectSymbol] = Buffer5.prototype.inspect;
      }
      Buffer5.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
        if (isInstance(target, Uint8Array)) {
          target = Buffer5.from(target, target.offset, target.byteLength);
        }
        if (!Buffer5.isBuffer(target)) {
          throw new TypeError(
            'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
          );
        }
        if (start === void 0) {
          start = 0;
        }
        if (end === void 0) {
          end = target ? target.length : 0;
        }
        if (thisStart === void 0) {
          thisStart = 0;
        }
        if (thisEnd === void 0) {
          thisEnd = this.length;
        }
        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
          throw new RangeError("out of range index");
        }
        if (thisStart >= thisEnd && start >= end) {
          return 0;
        }
        if (thisStart >= thisEnd) {
          return -1;
        }
        if (start >= end) {
          return 1;
        }
        start >>>= 0;
        end >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;
        if (this === target) return 0;
        let x = thisEnd - thisStart;
        let y = end - start;
        const len = Math.min(x, y);
        const thisCopy = this.slice(thisStart, thisEnd);
        const targetCopy = target.slice(start, end);
        for (let i = 0; i < len; ++i) {
          if (thisCopy[i] !== targetCopy[i]) {
            x = thisCopy[i];
            y = targetCopy[i];
            break;
          }
        }
        if (x < y) return -1;
        if (y < x) return 1;
        return 0;
      };
      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
        if (buffer.length === 0) return -1;
        if (typeof byteOffset === "string") {
          encoding = byteOffset;
          byteOffset = 0;
        } else if (byteOffset > 2147483647) {
          byteOffset = 2147483647;
        } else if (byteOffset < -2147483648) {
          byteOffset = -2147483648;
        }
        byteOffset = +byteOffset;
        if (numberIsNaN(byteOffset)) {
          byteOffset = dir ? 0 : buffer.length - 1;
        }
        if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
        if (byteOffset >= buffer.length) {
          if (dir) return -1;
          else byteOffset = buffer.length - 1;
        } else if (byteOffset < 0) {
          if (dir) byteOffset = 0;
          else return -1;
        }
        if (typeof val === "string") {
          val = Buffer5.from(val, encoding);
        }
        if (Buffer5.isBuffer(val)) {
          if (val.length === 0) {
            return -1;
          }
          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
        } else if (typeof val === "number") {
          val = val & 255;
          if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) {
              return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            } else {
              return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
            }
          }
          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
        }
        throw new TypeError("val must be string, number or Buffer");
      }
      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
        let indexSize = 1;
        let arrLength = arr.length;
        let valLength = val.length;
        if (encoding !== void 0) {
          encoding = String(encoding).toLowerCase();
          if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) {
              return -1;
            }
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
          }
        }
        function read(buf, i2) {
          if (indexSize === 1) {
            return buf[i2];
          } else {
            return buf.readUInt16BE(i2 * indexSize);
          }
        }
        let i;
        if (dir) {
          let foundIndex = -1;
          for (i = byteOffset; i < arrLength; i++) {
            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
              if (foundIndex === -1) foundIndex = i;
              if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
            } else {
              if (foundIndex !== -1) i -= i - foundIndex;
              foundIndex = -1;
            }
          }
        } else {
          if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
          for (i = byteOffset; i >= 0; i--) {
            let found = true;
            for (let j = 0; j < valLength; j++) {
              if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
              }
            }
            if (found) return i;
          }
        }
        return -1;
      }
      Buffer5.prototype.includes = function includes(val, byteOffset, encoding) {
        return this.indexOf(val, byteOffset, encoding) !== -1;
      };
      Buffer5.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
      };
      Buffer5.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
      };
      function hexWrite(buf, string2, offset2, length) {
        offset2 = Number(offset2) || 0;
        const remaining = buf.length - offset2;
        if (!length) {
          length = remaining;
        } else {
          length = Number(length);
          if (length > remaining) {
            length = remaining;
          }
        }
        const strLen = string2.length;
        if (length > strLen / 2) {
          length = strLen / 2;
        }
        let i;
        for (i = 0; i < length; ++i) {
          const parsed = parseInt(string2.substr(i * 2, 2), 16);
          if (numberIsNaN(parsed)) return i;
          buf[offset2 + i] = parsed;
        }
        return i;
      }
      function utf8Write(buf, string2, offset2, length) {
        return blitBuffer(utf8ToBytes4(string2, buf.length - offset2), buf, offset2, length);
      }
      function asciiWrite(buf, string2, offset2, length) {
        return blitBuffer(asciiToBytes(string2), buf, offset2, length);
      }
      function base64Write(buf, string2, offset2, length) {
        return blitBuffer(base64ToBytes(string2), buf, offset2, length);
      }
      function ucs2Write(buf, string2, offset2, length) {
        return blitBuffer(utf16leToBytes(string2, buf.length - offset2), buf, offset2, length);
      }
      Buffer5.prototype.write = function write(string2, offset2, length, encoding) {
        if (offset2 === void 0) {
          encoding = "utf8";
          length = this.length;
          offset2 = 0;
        } else if (length === void 0 && typeof offset2 === "string") {
          encoding = offset2;
          length = this.length;
          offset2 = 0;
        } else if (isFinite(offset2)) {
          offset2 = offset2 >>> 0;
          if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === void 0) encoding = "utf8";
          } else {
            encoding = length;
            length = void 0;
          }
        } else {
          throw new Error(
            "Buffer.write(string, encoding, offset[, length]) is no longer supported"
          );
        }
        const remaining = this.length - offset2;
        if (length === void 0 || length > remaining) length = remaining;
        if (string2.length > 0 && (length < 0 || offset2 < 0) || offset2 > this.length) {
          throw new RangeError("Attempt to write outside buffer bounds");
        }
        if (!encoding) encoding = "utf8";
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "hex":
              return hexWrite(this, string2, offset2, length);
            case "utf8":
            case "utf-8":
              return utf8Write(this, string2, offset2, length);
            case "ascii":
            case "latin1":
            case "binary":
              return asciiWrite(this, string2, offset2, length);
            case "base64":
              return base64Write(this, string2, offset2, length);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return ucs2Write(this, string2, offset2, length);
            default:
              if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      };
      Buffer5.prototype.toJSON = function toJSON() {
        return {
          type: "Buffer",
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      };
      function base64Slice(buf, start, end) {
        if (start === 0 && end === buf.length) {
          return base64.fromByteArray(buf);
        } else {
          return base64.fromByteArray(buf.slice(start, end));
        }
      }
      function utf8Slice(buf, start, end) {
        end = Math.min(buf.length, end);
        const res = [];
        let i = start;
        while (i < end) {
          const firstByte = buf[i];
          let codePoint = null;
          let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
          if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch (bytesPerSequence) {
              case 1:
                if (firstByte < 128) {
                  codePoint = firstByte;
                }
                break;
              case 2:
                secondByte = buf[i + 1];
                if ((secondByte & 192) === 128) {
                  tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                  if (tempCodePoint > 127) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 3:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                  if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 4:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                fourthByte = buf[i + 3];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                  if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                    codePoint = tempCodePoint;
                  }
                }
            }
          }
          if (codePoint === null) {
            codePoint = 65533;
            bytesPerSequence = 1;
          } else if (codePoint > 65535) {
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
          }
          res.push(codePoint);
          i += bytesPerSequence;
        }
        return decodeCodePointsArray(res);
      }
      var MAX_ARGUMENTS_LENGTH = 4096;
      function decodeCodePointsArray(codePoints) {
        const len = codePoints.length;
        if (len <= MAX_ARGUMENTS_LENGTH) {
          return String.fromCharCode.apply(String, codePoints);
        }
        let res = "";
        let i = 0;
        while (i < len) {
          res += String.fromCharCode.apply(
            String,
            codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
          );
        }
        return res;
      }
      function asciiSlice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i] & 127);
        }
        return ret;
      }
      function latin1Slice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i]);
        }
        return ret;
      }
      function hexSlice(buf, start, end) {
        const len = buf.length;
        if (!start || start < 0) start = 0;
        if (!end || end < 0 || end > len) end = len;
        let out = "";
        for (let i = start; i < end; ++i) {
          out += hexSliceLookupTable[buf[i]];
        }
        return out;
      }
      function utf16leSlice(buf, start, end) {
        const bytes2 = buf.slice(start, end);
        let res = "";
        for (let i = 0; i < bytes2.length - 1; i += 2) {
          res += String.fromCharCode(bytes2[i] + bytes2[i + 1] * 256);
        }
        return res;
      }
      Buffer5.prototype.slice = function slice(start, end) {
        const len = this.length;
        start = ~~start;
        end = end === void 0 ? len : ~~end;
        if (start < 0) {
          start += len;
          if (start < 0) start = 0;
        } else if (start > len) {
          start = len;
        }
        if (end < 0) {
          end += len;
          if (end < 0) end = 0;
        } else if (end > len) {
          end = len;
        }
        if (end < start) end = start;
        const newBuf = this.subarray(start, end);
        Object.setPrototypeOf(newBuf, Buffer5.prototype);
        return newBuf;
      };
      function checkOffset(offset2, ext, length) {
        if (offset2 % 1 !== 0 || offset2 < 0) throw new RangeError("offset is not uint");
        if (offset2 + ext > length) throw new RangeError("Trying to access beyond buffer length");
      }
      Buffer5.prototype.readUintLE = Buffer5.prototype.readUIntLE = function readUIntLE(offset2, byteLength2, noAssert) {
        offset2 = offset2 >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) checkOffset(offset2, byteLength2, this.length);
        let val = this[offset2];
        let mul = 1;
        let i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset2 + i] * mul;
        }
        return val;
      };
      Buffer5.prototype.readUintBE = Buffer5.prototype.readUIntBE = function readUIntBE(offset2, byteLength2, noAssert) {
        offset2 = offset2 >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          checkOffset(offset2, byteLength2, this.length);
        }
        let val = this[offset2 + --byteLength2];
        let mul = 1;
        while (byteLength2 > 0 && (mul *= 256)) {
          val += this[offset2 + --byteLength2] * mul;
        }
        return val;
      };
      Buffer5.prototype.readUint8 = Buffer5.prototype.readUInt8 = function readUInt8(offset2, noAssert) {
        offset2 = offset2 >>> 0;
        if (!noAssert) checkOffset(offset2, 1, this.length);
        return this[offset2];
      };
      Buffer5.prototype.readUint16LE = Buffer5.prototype.readUInt16LE = function readUInt16LE(offset2, noAssert) {
        offset2 = offset2 >>> 0;
        if (!noAssert) checkOffset(offset2, 2, this.length);
        return this[offset2] | this[offset2 + 1] << 8;
      };
      Buffer5.prototype.readUint16BE = Buffer5.prototype.readUInt16BE = function readUInt16BE(offset2, noAssert) {
        offset2 = offset2 >>> 0;
        if (!noAssert) checkOffset(offset2, 2, this.length);
        return this[offset2] << 8 | this[offset2 + 1];
      };
      Buffer5.prototype.readUint32LE = Buffer5.prototype.readUInt32LE = function readUInt32LE(offset2, noAssert) {
        offset2 = offset2 >>> 0;
        if (!noAssert) checkOffset(offset2, 4, this.length);
        return (this[offset2] | this[offset2 + 1] << 8 | this[offset2 + 2] << 16) + this[offset2 + 3] * 16777216;
      };
      Buffer5.prototype.readUint32BE = Buffer5.prototype.readUInt32BE = function readUInt32BE(offset2, noAssert) {
        offset2 = offset2 >>> 0;
        if (!noAssert) checkOffset(offset2, 4, this.length);
        return this[offset2] * 16777216 + (this[offset2 + 1] << 16 | this[offset2 + 2] << 8 | this[offset2 + 3]);
      };
      Buffer5.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset2) {
        offset2 = offset2 >>> 0;
        validateNumber(offset2, "offset");
        const first = this[offset2];
        const last = this[offset2 + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset2, this.length - 8);
        }
        const lo = first + this[++offset2] * 2 ** 8 + this[++offset2] * 2 ** 16 + this[++offset2] * 2 ** 24;
        const hi = this[++offset2] + this[++offset2] * 2 ** 8 + this[++offset2] * 2 ** 16 + last * 2 ** 24;
        return BigInt(lo) + (BigInt(hi) << BigInt(32));
      });
      Buffer5.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset2) {
        offset2 = offset2 >>> 0;
        validateNumber(offset2, "offset");
        const first = this[offset2];
        const last = this[offset2 + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset2, this.length - 8);
        }
        const hi = first * 2 ** 24 + this[++offset2] * 2 ** 16 + this[++offset2] * 2 ** 8 + this[++offset2];
        const lo = this[++offset2] * 2 ** 24 + this[++offset2] * 2 ** 16 + this[++offset2] * 2 ** 8 + last;
        return (BigInt(hi) << BigInt(32)) + BigInt(lo);
      });
      Buffer5.prototype.readIntLE = function readIntLE(offset2, byteLength2, noAssert) {
        offset2 = offset2 >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) checkOffset(offset2, byteLength2, this.length);
        let val = this[offset2];
        let mul = 1;
        let i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset2 + i] * mul;
        }
        mul *= 128;
        if (val >= mul) val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer5.prototype.readIntBE = function readIntBE(offset2, byteLength2, noAssert) {
        offset2 = offset2 >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) checkOffset(offset2, byteLength2, this.length);
        let i = byteLength2;
        let mul = 1;
        let val = this[offset2 + --i];
        while (i > 0 && (mul *= 256)) {
          val += this[offset2 + --i] * mul;
        }
        mul *= 128;
        if (val >= mul) val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer5.prototype.readInt8 = function readInt8(offset2, noAssert) {
        offset2 = offset2 >>> 0;
        if (!noAssert) checkOffset(offset2, 1, this.length);
        if (!(this[offset2] & 128)) return this[offset2];
        return (255 - this[offset2] + 1) * -1;
      };
      Buffer5.prototype.readInt16LE = function readInt16LE(offset2, noAssert) {
        offset2 = offset2 >>> 0;
        if (!noAssert) checkOffset(offset2, 2, this.length);
        const val = this[offset2] | this[offset2 + 1] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer5.prototype.readInt16BE = function readInt16BE(offset2, noAssert) {
        offset2 = offset2 >>> 0;
        if (!noAssert) checkOffset(offset2, 2, this.length);
        const val = this[offset2 + 1] | this[offset2] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer5.prototype.readInt32LE = function readInt32LE(offset2, noAssert) {
        offset2 = offset2 >>> 0;
        if (!noAssert) checkOffset(offset2, 4, this.length);
        return this[offset2] | this[offset2 + 1] << 8 | this[offset2 + 2] << 16 | this[offset2 + 3] << 24;
      };
      Buffer5.prototype.readInt32BE = function readInt32BE(offset2, noAssert) {
        offset2 = offset2 >>> 0;
        if (!noAssert) checkOffset(offset2, 4, this.length);
        return this[offset2] << 24 | this[offset2 + 1] << 16 | this[offset2 + 2] << 8 | this[offset2 + 3];
      };
      Buffer5.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset2) {
        offset2 = offset2 >>> 0;
        validateNumber(offset2, "offset");
        const first = this[offset2];
        const last = this[offset2 + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset2, this.length - 8);
        }
        const val = this[offset2 + 4] + this[offset2 + 5] * 2 ** 8 + this[offset2 + 6] * 2 ** 16 + (last << 24);
        return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset2] * 2 ** 8 + this[++offset2] * 2 ** 16 + this[++offset2] * 2 ** 24);
      });
      Buffer5.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset2) {
        offset2 = offset2 >>> 0;
        validateNumber(offset2, "offset");
        const first = this[offset2];
        const last = this[offset2 + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset2, this.length - 8);
        }
        const val = (first << 24) + // Overflow
        this[++offset2] * 2 ** 16 + this[++offset2] * 2 ** 8 + this[++offset2];
        return (BigInt(val) << BigInt(32)) + BigInt(this[++offset2] * 2 ** 24 + this[++offset2] * 2 ** 16 + this[++offset2] * 2 ** 8 + last);
      });
      Buffer5.prototype.readFloatLE = function readFloatLE(offset2, noAssert) {
        offset2 = offset2 >>> 0;
        if (!noAssert) checkOffset(offset2, 4, this.length);
        return ieee754.read(this, offset2, true, 23, 4);
      };
      Buffer5.prototype.readFloatBE = function readFloatBE(offset2, noAssert) {
        offset2 = offset2 >>> 0;
        if (!noAssert) checkOffset(offset2, 4, this.length);
        return ieee754.read(this, offset2, false, 23, 4);
      };
      Buffer5.prototype.readDoubleLE = function readDoubleLE(offset2, noAssert) {
        offset2 = offset2 >>> 0;
        if (!noAssert) checkOffset(offset2, 8, this.length);
        return ieee754.read(this, offset2, true, 52, 8);
      };
      Buffer5.prototype.readDoubleBE = function readDoubleBE(offset2, noAssert) {
        offset2 = offset2 >>> 0;
        if (!noAssert) checkOffset(offset2, 8, this.length);
        return ieee754.read(this, offset2, false, 52, 8);
      };
      function checkInt(buf, value, offset2, ext, max, min) {
        if (!Buffer5.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
        if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
        if (offset2 + ext > buf.length) throw new RangeError("Index out of range");
      }
      Buffer5.prototype.writeUintLE = Buffer5.prototype.writeUIntLE = function writeUIntLE(value, offset2, byteLength2, noAssert) {
        value = +value;
        offset2 = offset2 >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset2, byteLength2, maxBytes, 0);
        }
        let mul = 1;
        let i = 0;
        this[offset2] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          this[offset2 + i] = value / mul & 255;
        }
        return offset2 + byteLength2;
      };
      Buffer5.prototype.writeUintBE = Buffer5.prototype.writeUIntBE = function writeUIntBE(value, offset2, byteLength2, noAssert) {
        value = +value;
        offset2 = offset2 >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset2, byteLength2, maxBytes, 0);
        }
        let i = byteLength2 - 1;
        let mul = 1;
        this[offset2 + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          this[offset2 + i] = value / mul & 255;
        }
        return offset2 + byteLength2;
      };
      Buffer5.prototype.writeUint8 = Buffer5.prototype.writeUInt8 = function writeUInt8(value, offset2, noAssert) {
        value = +value;
        offset2 = offset2 >>> 0;
        if (!noAssert) checkInt(this, value, offset2, 1, 255, 0);
        this[offset2] = value & 255;
        return offset2 + 1;
      };
      Buffer5.prototype.writeUint16LE = Buffer5.prototype.writeUInt16LE = function writeUInt16LE(value, offset2, noAssert) {
        value = +value;
        offset2 = offset2 >>> 0;
        if (!noAssert) checkInt(this, value, offset2, 2, 65535, 0);
        this[offset2] = value & 255;
        this[offset2 + 1] = value >>> 8;
        return offset2 + 2;
      };
      Buffer5.prototype.writeUint16BE = Buffer5.prototype.writeUInt16BE = function writeUInt16BE(value, offset2, noAssert) {
        value = +value;
        offset2 = offset2 >>> 0;
        if (!noAssert) checkInt(this, value, offset2, 2, 65535, 0);
        this[offset2] = value >>> 8;
        this[offset2 + 1] = value & 255;
        return offset2 + 2;
      };
      Buffer5.prototype.writeUint32LE = Buffer5.prototype.writeUInt32LE = function writeUInt32LE(value, offset2, noAssert) {
        value = +value;
        offset2 = offset2 >>> 0;
        if (!noAssert) checkInt(this, value, offset2, 4, 4294967295, 0);
        this[offset2 + 3] = value >>> 24;
        this[offset2 + 2] = value >>> 16;
        this[offset2 + 1] = value >>> 8;
        this[offset2] = value & 255;
        return offset2 + 4;
      };
      Buffer5.prototype.writeUint32BE = Buffer5.prototype.writeUInt32BE = function writeUInt32BE(value, offset2, noAssert) {
        value = +value;
        offset2 = offset2 >>> 0;
        if (!noAssert) checkInt(this, value, offset2, 4, 4294967295, 0);
        this[offset2] = value >>> 24;
        this[offset2 + 1] = value >>> 16;
        this[offset2 + 2] = value >>> 8;
        this[offset2 + 3] = value & 255;
        return offset2 + 4;
      };
      function wrtBigUInt64LE(buf, value, offset2, min, max) {
        checkIntBI(value, min, max, buf, offset2, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset2++] = lo;
        lo = lo >> 8;
        buf[offset2++] = lo;
        lo = lo >> 8;
        buf[offset2++] = lo;
        lo = lo >> 8;
        buf[offset2++] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset2++] = hi;
        hi = hi >> 8;
        buf[offset2++] = hi;
        hi = hi >> 8;
        buf[offset2++] = hi;
        hi = hi >> 8;
        buf[offset2++] = hi;
        return offset2;
      }
      function wrtBigUInt64BE(buf, value, offset2, min, max) {
        checkIntBI(value, min, max, buf, offset2, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset2 + 7] = lo;
        lo = lo >> 8;
        buf[offset2 + 6] = lo;
        lo = lo >> 8;
        buf[offset2 + 5] = lo;
        lo = lo >> 8;
        buf[offset2 + 4] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset2 + 3] = hi;
        hi = hi >> 8;
        buf[offset2 + 2] = hi;
        hi = hi >> 8;
        buf[offset2 + 1] = hi;
        hi = hi >> 8;
        buf[offset2] = hi;
        return offset2 + 8;
      }
      Buffer5.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset2 = 0) {
        return wrtBigUInt64LE(this, value, offset2, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer5.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset2 = 0) {
        return wrtBigUInt64BE(this, value, offset2, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer5.prototype.writeIntLE = function writeIntLE(value, offset2, byteLength2, noAssert) {
        value = +value;
        offset2 = offset2 >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset2, byteLength2, limit - 1, -limit);
        }
        let i = 0;
        let mul = 1;
        let sub = 0;
        this[offset2] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset2 + i - 1] !== 0) {
            sub = 1;
          }
          this[offset2 + i] = (value / mul >> 0) - sub & 255;
        }
        return offset2 + byteLength2;
      };
      Buffer5.prototype.writeIntBE = function writeIntBE(value, offset2, byteLength2, noAssert) {
        value = +value;
        offset2 = offset2 >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset2, byteLength2, limit - 1, -limit);
        }
        let i = byteLength2 - 1;
        let mul = 1;
        let sub = 0;
        this[offset2 + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset2 + i + 1] !== 0) {
            sub = 1;
          }
          this[offset2 + i] = (value / mul >> 0) - sub & 255;
        }
        return offset2 + byteLength2;
      };
      Buffer5.prototype.writeInt8 = function writeInt8(value, offset2, noAssert) {
        value = +value;
        offset2 = offset2 >>> 0;
        if (!noAssert) checkInt(this, value, offset2, 1, 127, -128);
        if (value < 0) value = 255 + value + 1;
        this[offset2] = value & 255;
        return offset2 + 1;
      };
      Buffer5.prototype.writeInt16LE = function writeInt16LE(value, offset2, noAssert) {
        value = +value;
        offset2 = offset2 >>> 0;
        if (!noAssert) checkInt(this, value, offset2, 2, 32767, -32768);
        this[offset2] = value & 255;
        this[offset2 + 1] = value >>> 8;
        return offset2 + 2;
      };
      Buffer5.prototype.writeInt16BE = function writeInt16BE(value, offset2, noAssert) {
        value = +value;
        offset2 = offset2 >>> 0;
        if (!noAssert) checkInt(this, value, offset2, 2, 32767, -32768);
        this[offset2] = value >>> 8;
        this[offset2 + 1] = value & 255;
        return offset2 + 2;
      };
      Buffer5.prototype.writeInt32LE = function writeInt32LE(value, offset2, noAssert) {
        value = +value;
        offset2 = offset2 >>> 0;
        if (!noAssert) checkInt(this, value, offset2, 4, 2147483647, -2147483648);
        this[offset2] = value & 255;
        this[offset2 + 1] = value >>> 8;
        this[offset2 + 2] = value >>> 16;
        this[offset2 + 3] = value >>> 24;
        return offset2 + 4;
      };
      Buffer5.prototype.writeInt32BE = function writeInt32BE(value, offset2, noAssert) {
        value = +value;
        offset2 = offset2 >>> 0;
        if (!noAssert) checkInt(this, value, offset2, 4, 2147483647, -2147483648);
        if (value < 0) value = 4294967295 + value + 1;
        this[offset2] = value >>> 24;
        this[offset2 + 1] = value >>> 16;
        this[offset2 + 2] = value >>> 8;
        this[offset2 + 3] = value & 255;
        return offset2 + 4;
      };
      Buffer5.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset2 = 0) {
        return wrtBigUInt64LE(this, value, offset2, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      Buffer5.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset2 = 0) {
        return wrtBigUInt64BE(this, value, offset2, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      function checkIEEE754(buf, value, offset2, ext, max, min) {
        if (offset2 + ext > buf.length) throw new RangeError("Index out of range");
        if (offset2 < 0) throw new RangeError("Index out of range");
      }
      function writeFloat(buf, value, offset2, littleEndian, noAssert) {
        value = +value;
        offset2 = offset2 >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset2, 4, 34028234663852886e22, -34028234663852886e22);
        }
        ieee754.write(buf, value, offset2, littleEndian, 23, 4);
        return offset2 + 4;
      }
      Buffer5.prototype.writeFloatLE = function writeFloatLE(value, offset2, noAssert) {
        return writeFloat(this, value, offset2, true, noAssert);
      };
      Buffer5.prototype.writeFloatBE = function writeFloatBE(value, offset2, noAssert) {
        return writeFloat(this, value, offset2, false, noAssert);
      };
      function writeDouble(buf, value, offset2, littleEndian, noAssert) {
        value = +value;
        offset2 = offset2 >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset2, 8, 17976931348623157e292, -17976931348623157e292);
        }
        ieee754.write(buf, value, offset2, littleEndian, 52, 8);
        return offset2 + 8;
      }
      Buffer5.prototype.writeDoubleLE = function writeDoubleLE(value, offset2, noAssert) {
        return writeDouble(this, value, offset2, true, noAssert);
      };
      Buffer5.prototype.writeDoubleBE = function writeDoubleBE(value, offset2, noAssert) {
        return writeDouble(this, value, offset2, false, noAssert);
      };
      Buffer5.prototype.copy = function copy4(target, targetStart, start, end) {
        if (!Buffer5.isBuffer(target)) throw new TypeError("argument should be a Buffer");
        if (!start) start = 0;
        if (!end && end !== 0) end = this.length;
        if (targetStart >= target.length) targetStart = target.length;
        if (!targetStart) targetStart = 0;
        if (end > 0 && end < start) end = start;
        if (end === start) return 0;
        if (target.length === 0 || this.length === 0) return 0;
        if (targetStart < 0) {
          throw new RangeError("targetStart out of bounds");
        }
        if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
        if (end < 0) throw new RangeError("sourceEnd out of bounds");
        if (end > this.length) end = this.length;
        if (target.length - targetStart < end - start) {
          end = target.length - targetStart + start;
        }
        const len = end - start;
        if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
          this.copyWithin(targetStart, start, end);
        } else {
          Uint8Array.prototype.set.call(
            target,
            this.subarray(start, end),
            targetStart
          );
        }
        return len;
      };
      Buffer5.prototype.fill = function fill(val, start, end, encoding) {
        if (typeof val === "string") {
          if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
          } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
          }
          if (encoding !== void 0 && typeof encoding !== "string") {
            throw new TypeError("encoding must be a string");
          }
          if (typeof encoding === "string" && !Buffer5.isEncoding(encoding)) {
            throw new TypeError("Unknown encoding: " + encoding);
          }
          if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") {
              val = code;
            }
          }
        } else if (typeof val === "number") {
          val = val & 255;
        } else if (typeof val === "boolean") {
          val = Number(val);
        }
        if (start < 0 || this.length < start || this.length < end) {
          throw new RangeError("Out of range index");
        }
        if (end <= start) {
          return this;
        }
        start = start >>> 0;
        end = end === void 0 ? this.length : end >>> 0;
        if (!val) val = 0;
        let i;
        if (typeof val === "number") {
          for (i = start; i < end; ++i) {
            this[i] = val;
          }
        } else {
          const bytes2 = Buffer5.isBuffer(val) ? val : Buffer5.from(val, encoding);
          const len = bytes2.length;
          if (len === 0) {
            throw new TypeError('The value "' + val + '" is invalid for argument "value"');
          }
          for (i = 0; i < end - start; ++i) {
            this[i + start] = bytes2[i % len];
          }
        }
        return this;
      };
      var errors = {};
      function E(sym, getMessage, Base) {
        errors[sym] = class NodeError extends Base {
          constructor() {
            super();
            Object.defineProperty(this, "message", {
              value: getMessage.apply(this, arguments),
              writable: true,
              configurable: true
            });
            this.name = `${this.name} [${sym}]`;
            this.stack;
            delete this.name;
          }
          get code() {
            return sym;
          }
          set code(value) {
            Object.defineProperty(this, "code", {
              configurable: true,
              enumerable: true,
              value,
              writable: true
            });
          }
          toString() {
            return `${this.name} [${sym}]: ${this.message}`;
          }
        };
      }
      E(
        "ERR_BUFFER_OUT_OF_BOUNDS",
        function(name) {
          if (name) {
            return `${name} is outside of buffer bounds`;
          }
          return "Attempt to access memory outside buffer bounds";
        },
        RangeError
      );
      E(
        "ERR_INVALID_ARG_TYPE",
        function(name, actual) {
          return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
        },
        TypeError
      );
      E(
        "ERR_OUT_OF_RANGE",
        function(str, range, input) {
          let msg = `The value of "${str}" is out of range.`;
          let received = input;
          if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
            received = addNumericalSeparator(String(input));
          } else if (typeof input === "bigint") {
            received = String(input);
            if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
              received = addNumericalSeparator(received);
            }
            received += "n";
          }
          msg += ` It must be ${range}. Received ${received}`;
          return msg;
        },
        RangeError
      );
      function addNumericalSeparator(val) {
        let res = "";
        let i = val.length;
        const start = val[0] === "-" ? 1 : 0;
        for (; i >= start + 4; i -= 3) {
          res = `_${val.slice(i - 3, i)}${res}`;
        }
        return `${val.slice(0, i)}${res}`;
      }
      function checkBounds(buf, offset2, byteLength2) {
        validateNumber(offset2, "offset");
        if (buf[offset2] === void 0 || buf[offset2 + byteLength2] === void 0) {
          boundsError(offset2, buf.length - (byteLength2 + 1));
        }
      }
      function checkIntBI(value, min, max, buf, offset2, byteLength2) {
        if (value > max || value < min) {
          const n2 = typeof min === "bigint" ? "n" : "";
          let range;
          if (byteLength2 > 3) {
            if (min === 0 || min === BigInt(0)) {
              range = `>= 0${n2} and < 2${n2} ** ${(byteLength2 + 1) * 8}${n2}`;
            } else {
              range = `>= -(2${n2} ** ${(byteLength2 + 1) * 8 - 1}${n2}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n2}`;
            }
          } else {
            range = `>= ${min}${n2} and <= ${max}${n2}`;
          }
          throw new errors.ERR_OUT_OF_RANGE("value", range, value);
        }
        checkBounds(buf, offset2, byteLength2);
      }
      function validateNumber(value, name) {
        if (typeof value !== "number") {
          throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
        }
      }
      function boundsError(value, length, type2) {
        if (Math.floor(value) !== value) {
          validateNumber(value, type2);
          throw new errors.ERR_OUT_OF_RANGE(type2 || "offset", "an integer", value);
        }
        if (length < 0) {
          throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
        }
        throw new errors.ERR_OUT_OF_RANGE(
          type2 || "offset",
          `>= ${type2 ? 1 : 0} and <= ${length}`,
          value
        );
      }
      var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
      function base64clean(str) {
        str = str.split("=")[0];
        str = str.trim().replace(INVALID_BASE64_RE, "");
        if (str.length < 2) return "";
        while (str.length % 4 !== 0) {
          str = str + "=";
        }
        return str;
      }
      function utf8ToBytes4(string2, units) {
        units = units || Infinity;
        let codePoint;
        const length = string2.length;
        let leadSurrogate = null;
        const bytes2 = [];
        for (let i = 0; i < length; ++i) {
          codePoint = string2.charCodeAt(i);
          if (codePoint > 55295 && codePoint < 57344) {
            if (!leadSurrogate) {
              if (codePoint > 56319) {
                if ((units -= 3) > -1) bytes2.push(239, 191, 189);
                continue;
              } else if (i + 1 === length) {
                if ((units -= 3) > -1) bytes2.push(239, 191, 189);
                continue;
              }
              leadSurrogate = codePoint;
              continue;
            }
            if (codePoint < 56320) {
              if ((units -= 3) > -1) bytes2.push(239, 191, 189);
              leadSurrogate = codePoint;
              continue;
            }
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
          } else if (leadSurrogate) {
            if ((units -= 3) > -1) bytes2.push(239, 191, 189);
          }
          leadSurrogate = null;
          if (codePoint < 128) {
            if ((units -= 1) < 0) break;
            bytes2.push(codePoint);
          } else if (codePoint < 2048) {
            if ((units -= 2) < 0) break;
            bytes2.push(
              codePoint >> 6 | 192,
              codePoint & 63 | 128
            );
          } else if (codePoint < 65536) {
            if ((units -= 3) < 0) break;
            bytes2.push(
              codePoint >> 12 | 224,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else if (codePoint < 1114112) {
            if ((units -= 4) < 0) break;
            bytes2.push(
              codePoint >> 18 | 240,
              codePoint >> 12 & 63 | 128,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else {
            throw new Error("Invalid code point");
          }
        }
        return bytes2;
      }
      function asciiToBytes(str) {
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          byteArray.push(str.charCodeAt(i) & 255);
        }
        return byteArray;
      }
      function utf16leToBytes(str, units) {
        let c, hi, lo;
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          if ((units -= 2) < 0) break;
          c = str.charCodeAt(i);
          hi = c >> 8;
          lo = c % 256;
          byteArray.push(lo);
          byteArray.push(hi);
        }
        return byteArray;
      }
      function base64ToBytes(str) {
        return base64.toByteArray(base64clean(str));
      }
      function blitBuffer(src, dst, offset2, length) {
        let i;
        for (i = 0; i < length; ++i) {
          if (i + offset2 >= dst.length || i >= src.length) break;
          dst[i + offset2] = src[i];
        }
        return i;
      }
      function isInstance(obj, type2) {
        return obj instanceof type2 || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type2.name;
      }
      function numberIsNaN(obj) {
        return obj !== obj;
      }
      var hexSliceLookupTable = function() {
        const alphabet = "0123456789abcdef";
        const table = new Array(256);
        for (let i = 0; i < 16; ++i) {
          const i16 = i * 16;
          for (let j = 0; j < 16; ++j) {
            table[i16 + j] = alphabet[i] + alphabet[j];
          }
        }
        return table;
      }();
      function defineBigIntMethod(fn) {
        return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
      }
      function BufferBigIntNotDefined() {
        throw new Error("BigInt not supported");
      }
    }
  });

  // node_modules/@meshconnect/web-link-sdk/utils/connectors/solana/connection.js
  var import_buffer, __awaiter6, __generator6, connectToSolanaWallet, disconnectFromSolanaWallet;
  var init_connection = __esm({
    "node_modules/@meshconnect/web-link-sdk/utils/connectors/solana/connection.js"() {
      init_providerDiscovery();
      import_buffer = __toESM(require_buffer());
      __awaiter6 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator6 = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1) throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f3, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
        return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n2) {
          return function(v) {
            return step([n2, v]);
          };
        }
        function step(op) {
          if (f3) throw new TypeError("Generator is already executing.");
          while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f3 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2]) _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f3 = t = 0;
          }
          if (op[0] & 5) throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      if (typeof window !== "undefined") {
        window.Buffer = window.Buffer || import_buffer.Buffer;
      }
      connectToSolanaWallet = function(walletName) {
        return __awaiter6(void 0, void 0, void 0, function() {
          var provider_1, response, error_1;
          return __generator6(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                _a2.trys.push([0, 2, , 3]);
                provider_1 = getSolanaProvider(walletName);
                return [
                  4,
                  provider_1.connect({ onlyIfTrusted: true }).catch(function() {
                    return provider_1.connect();
                  })
                  // Handle Phantom wallet which returns response.publicKey
                ];
              case 1:
                response = _a2.sent();
                if (response === null || response === void 0 ? void 0 : response.publicKey) {
                  return [2, {
                    accounts: [response.publicKey.toString()],
                    chainId: "101",
                    isConnected: true
                  }];
                }
                if (provider_1.publicKey) {
                  return [2, {
                    accounts: [provider_1.publicKey.toString()],
                    chainId: "101",
                    isConnected: true
                  }];
                }
                throw new Error("".concat(walletName, " connection failed - no public key returned"));
              case 2:
                error_1 = _a2.sent();
                return [2, error_1 instanceof Error ? error_1 : new Error("Failed to connect to ".concat(walletName, " wallet"))];
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      disconnectFromSolanaWallet = function(walletName) {
        return __awaiter6(void 0, void 0, void 0, function() {
          var provider, error_2;
          return __generator6(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                _a2.trys.push([0, 2, , 3]);
                provider = getSolanaProvider(walletName);
                return [4, provider.disconnect()];
              case 1:
                _a2.sent();
                return [3, 3];
              case 2:
                error_2 = _a2.sent();
                return [2, error_2 instanceof Error ? error_2 : new Error("Failed to disconnect from ".concat(walletName, " wallet"))];
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
    }
  });

  // node_modules/@noble/hashes/esm/crypto.js
  var crypto4;
  var init_crypto3 = __esm({
    "node_modules/@noble/hashes/esm/crypto.js"() {
      crypto4 = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
    }
  });

  // node_modules/@noble/hashes/esm/utils.js
  function isBytes(a) {
    return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === "Uint8Array";
  }
  function anumber(n2) {
    if (!Number.isSafeInteger(n2) || n2 < 0)
      throw new Error("positive integer expected, got " + n2);
  }
  function abytes(b2, ...lengths) {
    if (!isBytes(b2))
      throw new Error("Uint8Array expected");
    if (lengths.length > 0 && !lengths.includes(b2.length))
      throw new Error("Uint8Array expected of length " + lengths + ", got length=" + b2.length);
  }
  function ahash(h) {
    if (typeof h !== "function" || typeof h.create !== "function")
      throw new Error("Hash should be wrapped by utils.createHasher");
    anumber(h.outputLen);
    anumber(h.blockLen);
  }
  function aexists(instance2, checkFinished = true) {
    if (instance2.destroyed)
      throw new Error("Hash instance has been destroyed");
    if (checkFinished && instance2.finished)
      throw new Error("Hash#digest() has already been called");
  }
  function aoutput(out, instance2) {
    abytes(out);
    const min = instance2.outputLen;
    if (out.length < min) {
      throw new Error("digestInto() expects output buffer of length at least " + min);
    }
  }
  function u322(arr) {
    return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
  }
  function clean(...arrays) {
    for (let i = 0; i < arrays.length; i++) {
      arrays[i].fill(0);
    }
  }
  function createView2(arr) {
    return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
  }
  function rotr2(word, shift) {
    return word << 32 - shift | word >>> shift;
  }
  function byteSwap(word) {
    return word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
  }
  function byteSwap32(arr) {
    for (let i = 0; i < arr.length; i++) {
      arr[i] = byteSwap(arr[i]);
    }
    return arr;
  }
  function utf8ToBytes3(str) {
    if (typeof str !== "string")
      throw new Error("string expected");
    return new Uint8Array(new TextEncoder().encode(str));
  }
  function toBytes2(data) {
    if (typeof data === "string")
      data = utf8ToBytes3(data);
    abytes(data);
    return data;
  }
  function concatBytes3(...arrays) {
    let sum = 0;
    for (let i = 0; i < arrays.length; i++) {
      const a = arrays[i];
      abytes(a);
      sum += a.length;
    }
    const res = new Uint8Array(sum);
    for (let i = 0, pad = 0; i < arrays.length; i++) {
      const a = arrays[i];
      res.set(a, pad);
      pad += a.length;
    }
    return res;
  }
  function createHasher(hashCons) {
    const hashC = (msg) => hashCons().update(toBytes2(msg)).digest();
    const tmp = hashCons();
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = () => hashCons();
    return hashC;
  }
  function randomBytes4(bytesLength = 32) {
    if (crypto4 && typeof crypto4.getRandomValues === "function") {
      return crypto4.getRandomValues(new Uint8Array(bytesLength));
    }
    if (crypto4 && typeof crypto4.randomBytes === "function") {
      return Uint8Array.from(crypto4.randomBytes(bytesLength));
    }
    throw new Error("crypto.getRandomValues must be defined");
  }
  var isLE2, swap32IfBE, Hash2;
  var init_utils5 = __esm({
    "node_modules/@noble/hashes/esm/utils.js"() {
      init_crypto3();
      isLE2 = /* @__PURE__ */ (() => new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68)();
      swap32IfBE = isLE2 ? (u) => u : byteSwap32;
      Hash2 = class {
      };
    }
  });

  // node_modules/@noble/hashes/esm/_md.js
  function setBigUint642(view, byteOffset, value, isLE3) {
    if (typeof view.setBigUint64 === "function")
      return view.setBigUint64(byteOffset, value, isLE3);
    const _32n3 = BigInt(32);
    const _u32_max = BigInt(4294967295);
    const wh = Number(value >> _32n3 & _u32_max);
    const wl = Number(value & _u32_max);
    const h = isLE3 ? 4 : 0;
    const l = isLE3 ? 0 : 4;
    view.setUint32(byteOffset + h, wh, isLE3);
    view.setUint32(byteOffset + l, wl, isLE3);
  }
  function Chi2(a, b2, c) {
    return a & b2 ^ ~a & c;
  }
  function Maj2(a, b2, c) {
    return a & b2 ^ a & c ^ b2 & c;
  }
  var HashMD, SHA256_IV, SHA512_IV;
  var init_md = __esm({
    "node_modules/@noble/hashes/esm/_md.js"() {
      init_utils5();
      HashMD = class extends Hash2 {
        constructor(blockLen, outputLen, padOffset, isLE3) {
          super();
          this.finished = false;
          this.length = 0;
          this.pos = 0;
          this.destroyed = false;
          this.blockLen = blockLen;
          this.outputLen = outputLen;
          this.padOffset = padOffset;
          this.isLE = isLE3;
          this.buffer = new Uint8Array(blockLen);
          this.view = createView2(this.buffer);
        }
        update(data) {
          aexists(this);
          data = toBytes2(data);
          abytes(data);
          const { view, buffer, blockLen } = this;
          const len = data.length;
          for (let pos = 0; pos < len; ) {
            const take = Math.min(blockLen - this.pos, len - pos);
            if (take === blockLen) {
              const dataView = createView2(data);
              for (; blockLen <= len - pos; pos += blockLen)
                this.process(dataView, pos);
              continue;
            }
            buffer.set(data.subarray(pos, pos + take), this.pos);
            this.pos += take;
            pos += take;
            if (this.pos === blockLen) {
              this.process(view, 0);
              this.pos = 0;
            }
          }
          this.length += data.length;
          this.roundClean();
          return this;
        }
        digestInto(out) {
          aexists(this);
          aoutput(out, this);
          this.finished = true;
          const { buffer, view, blockLen, isLE: isLE3 } = this;
          let { pos } = this;
          buffer[pos++] = 128;
          clean(this.buffer.subarray(pos));
          if (this.padOffset > blockLen - pos) {
            this.process(view, 0);
            pos = 0;
          }
          for (let i = pos; i < blockLen; i++)
            buffer[i] = 0;
          setBigUint642(view, blockLen - 8, BigInt(this.length * 8), isLE3);
          this.process(view, 0);
          const oview = createView2(out);
          const len = this.outputLen;
          if (len % 4)
            throw new Error("_sha2: outputLen should be aligned to 32bit");
          const outLen = len / 4;
          const state = this.get();
          if (outLen > state.length)
            throw new Error("_sha2: outputLen bigger than state");
          for (let i = 0; i < outLen; i++)
            oview.setUint32(4 * i, state[i], isLE3);
        }
        digest() {
          const { buffer, outputLen } = this;
          this.digestInto(buffer);
          const res = buffer.slice(0, outputLen);
          this.destroy();
          return res;
        }
        _cloneInto(to) {
          to || (to = new this.constructor());
          to.set(...this.get());
          const { blockLen, buffer, length, finished, destroyed, pos } = this;
          to.destroyed = destroyed;
          to.finished = finished;
          to.length = length;
          to.pos = pos;
          if (length % blockLen)
            to.buffer.set(buffer);
          return to;
        }
        clone() {
          return this._cloneInto();
        }
      };
      SHA256_IV = /* @__PURE__ */ Uint32Array.from([
        1779033703,
        3144134277,
        1013904242,
        2773480762,
        1359893119,
        2600822924,
        528734635,
        1541459225
      ]);
      SHA512_IV = /* @__PURE__ */ Uint32Array.from([
        1779033703,
        4089235720,
        3144134277,
        2227873595,
        1013904242,
        4271175723,
        2773480762,
        1595750129,
        1359893119,
        2917565137,
        2600822924,
        725511199,
        528734635,
        4215389547,
        1541459225,
        327033209
      ]);
    }
  });

  // node_modules/@noble/hashes/esm/_u64.js
  function fromBig2(n2, le = false) {
    if (le)
      return { h: Number(n2 & U32_MASK642), l: Number(n2 >> _32n2 & U32_MASK642) };
    return { h: Number(n2 >> _32n2 & U32_MASK642) | 0, l: Number(n2 & U32_MASK642) | 0 };
  }
  function split3(lst, le = false) {
    const len = lst.length;
    let Ah = new Uint32Array(len);
    let Al = new Uint32Array(len);
    for (let i = 0; i < len; i++) {
      const { h, l } = fromBig2(lst[i], le);
      [Ah[i], Al[i]] = [h, l];
    }
    return [Ah, Al];
  }
  function add2(Ah, Al, Bh, Bl) {
    const l = (Al >>> 0) + (Bl >>> 0);
    return { h: Ah + Bh + (l / 2 ** 32 | 0) | 0, l: l | 0 };
  }
  var U32_MASK642, _32n2, shrSH2, shrSL2, rotrSH2, rotrSL2, rotrBH2, rotrBL2, rotlSH2, rotlSL2, rotlBH2, rotlBL2, add3L2, add3H2, add4L2, add4H2, add5L2, add5H2;
  var init_u642 = __esm({
    "node_modules/@noble/hashes/esm/_u64.js"() {
      U32_MASK642 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
      _32n2 = /* @__PURE__ */ BigInt(32);
      shrSH2 = (h, _l, s) => h >>> s;
      shrSL2 = (h, l, s) => h << 32 - s | l >>> s;
      rotrSH2 = (h, l, s) => h >>> s | l << 32 - s;
      rotrSL2 = (h, l, s) => h << 32 - s | l >>> s;
      rotrBH2 = (h, l, s) => h << 64 - s | l >>> s - 32;
      rotrBL2 = (h, l, s) => h >>> s - 32 | l << 64 - s;
      rotlSH2 = (h, l, s) => h << s | l >>> 32 - s;
      rotlSL2 = (h, l, s) => l << s | h >>> 32 - s;
      rotlBH2 = (h, l, s) => l << s - 32 | h >>> 64 - s;
      rotlBL2 = (h, l, s) => h << s - 32 | l >>> 64 - s;
      add3L2 = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
      add3H2 = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
      add4L2 = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
      add4H2 = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
      add5L2 = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
      add5H2 = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
    }
  });

  // node_modules/@noble/hashes/esm/sha2.js
  var SHA256_K2, SHA256_W2, SHA2562, K512, SHA512_Kh2, SHA512_Kl2, SHA512_W_H2, SHA512_W_L2, SHA5122, sha2563, sha5123;
  var init_sha23 = __esm({
    "node_modules/@noble/hashes/esm/sha2.js"() {
      init_md();
      init_u642();
      init_utils5();
      SHA256_K2 = /* @__PURE__ */ Uint32Array.from([
        1116352408,
        1899447441,
        3049323471,
        3921009573,
        961987163,
        1508970993,
        2453635748,
        2870763221,
        3624381080,
        310598401,
        607225278,
        1426881987,
        1925078388,
        2162078206,
        2614888103,
        3248222580,
        3835390401,
        4022224774,
        264347078,
        604807628,
        770255983,
        1249150122,
        1555081692,
        1996064986,
        2554220882,
        2821834349,
        2952996808,
        3210313671,
        3336571891,
        3584528711,
        113926993,
        338241895,
        666307205,
        773529912,
        1294757372,
        1396182291,
        1695183700,
        1986661051,
        2177026350,
        2456956037,
        2730485921,
        2820302411,
        3259730800,
        3345764771,
        3516065817,
        3600352804,
        4094571909,
        275423344,
        430227734,
        506948616,
        659060556,
        883997877,
        958139571,
        1322822218,
        1537002063,
        1747873779,
        1955562222,
        2024104815,
        2227730452,
        2361852424,
        2428436474,
        2756734187,
        3204031479,
        3329325298
      ]);
      SHA256_W2 = /* @__PURE__ */ new Uint32Array(64);
      SHA2562 = class extends HashMD {
        constructor(outputLen = 32) {
          super(64, outputLen, 8, false);
          this.A = SHA256_IV[0] | 0;
          this.B = SHA256_IV[1] | 0;
          this.C = SHA256_IV[2] | 0;
          this.D = SHA256_IV[3] | 0;
          this.E = SHA256_IV[4] | 0;
          this.F = SHA256_IV[5] | 0;
          this.G = SHA256_IV[6] | 0;
          this.H = SHA256_IV[7] | 0;
        }
        get() {
          const { A, B, C, D, E, F, G, H } = this;
          return [A, B, C, D, E, F, G, H];
        }
        // prettier-ignore
        set(A, B, C, D, E, F, G, H) {
          this.A = A | 0;
          this.B = B | 0;
          this.C = C | 0;
          this.D = D | 0;
          this.E = E | 0;
          this.F = F | 0;
          this.G = G | 0;
          this.H = H | 0;
        }
        process(view, offset2) {
          for (let i = 0; i < 16; i++, offset2 += 4)
            SHA256_W2[i] = view.getUint32(offset2, false);
          for (let i = 16; i < 64; i++) {
            const W15 = SHA256_W2[i - 15];
            const W2 = SHA256_W2[i - 2];
            const s0 = rotr2(W15, 7) ^ rotr2(W15, 18) ^ W15 >>> 3;
            const s1 = rotr2(W2, 17) ^ rotr2(W2, 19) ^ W2 >>> 10;
            SHA256_W2[i] = s1 + SHA256_W2[i - 7] + s0 + SHA256_W2[i - 16] | 0;
          }
          let { A, B, C, D, E, F, G, H } = this;
          for (let i = 0; i < 64; i++) {
            const sigma1 = rotr2(E, 6) ^ rotr2(E, 11) ^ rotr2(E, 25);
            const T13 = H + sigma1 + Chi2(E, F, G) + SHA256_K2[i] + SHA256_W2[i] | 0;
            const sigma0 = rotr2(A, 2) ^ rotr2(A, 13) ^ rotr2(A, 22);
            const T22 = sigma0 + Maj2(A, B, C) | 0;
            H = G;
            G = F;
            F = E;
            E = D + T13 | 0;
            D = C;
            C = B;
            B = A;
            A = T13 + T22 | 0;
          }
          A = A + this.A | 0;
          B = B + this.B | 0;
          C = C + this.C | 0;
          D = D + this.D | 0;
          E = E + this.E | 0;
          F = F + this.F | 0;
          G = G + this.G | 0;
          H = H + this.H | 0;
          this.set(A, B, C, D, E, F, G, H);
        }
        roundClean() {
          clean(SHA256_W2);
        }
        destroy() {
          this.set(0, 0, 0, 0, 0, 0, 0, 0);
          clean(this.buffer);
        }
      };
      K512 = /* @__PURE__ */ (() => split3([
        "0x428a2f98d728ae22",
        "0x7137449123ef65cd",
        "0xb5c0fbcfec4d3b2f",
        "0xe9b5dba58189dbbc",
        "0x3956c25bf348b538",
        "0x59f111f1b605d019",
        "0x923f82a4af194f9b",
        "0xab1c5ed5da6d8118",
        "0xd807aa98a3030242",
        "0x12835b0145706fbe",
        "0x243185be4ee4b28c",
        "0x550c7dc3d5ffb4e2",
        "0x72be5d74f27b896f",
        "0x80deb1fe3b1696b1",
        "0x9bdc06a725c71235",
        "0xc19bf174cf692694",
        "0xe49b69c19ef14ad2",
        "0xefbe4786384f25e3",
        "0x0fc19dc68b8cd5b5",
        "0x240ca1cc77ac9c65",
        "0x2de92c6f592b0275",
        "0x4a7484aa6ea6e483",
        "0x5cb0a9dcbd41fbd4",
        "0x76f988da831153b5",
        "0x983e5152ee66dfab",
        "0xa831c66d2db43210",
        "0xb00327c898fb213f",
        "0xbf597fc7beef0ee4",
        "0xc6e00bf33da88fc2",
        "0xd5a79147930aa725",
        "0x06ca6351e003826f",
        "0x142929670a0e6e70",
        "0x27b70a8546d22ffc",
        "0x2e1b21385c26c926",
        "0x4d2c6dfc5ac42aed",
        "0x53380d139d95b3df",
        "0x650a73548baf63de",
        "0x766a0abb3c77b2a8",
        "0x81c2c92e47edaee6",
        "0x92722c851482353b",
        "0xa2bfe8a14cf10364",
        "0xa81a664bbc423001",
        "0xc24b8b70d0f89791",
        "0xc76c51a30654be30",
        "0xd192e819d6ef5218",
        "0xd69906245565a910",
        "0xf40e35855771202a",
        "0x106aa07032bbd1b8",
        "0x19a4c116b8d2d0c8",
        "0x1e376c085141ab53",
        "0x2748774cdf8eeb99",
        "0x34b0bcb5e19b48a8",
        "0x391c0cb3c5c95a63",
        "0x4ed8aa4ae3418acb",
        "0x5b9cca4f7763e373",
        "0x682e6ff3d6b2b8a3",
        "0x748f82ee5defb2fc",
        "0x78a5636f43172f60",
        "0x84c87814a1f0ab72",
        "0x8cc702081a6439ec",
        "0x90befffa23631e28",
        "0xa4506cebde82bde9",
        "0xbef9a3f7b2c67915",
        "0xc67178f2e372532b",
        "0xca273eceea26619c",
        "0xd186b8c721c0c207",
        "0xeada7dd6cde0eb1e",
        "0xf57d4f7fee6ed178",
        "0x06f067aa72176fba",
        "0x0a637dc5a2c898a6",
        "0x113f9804bef90dae",
        "0x1b710b35131c471b",
        "0x28db77f523047d84",
        "0x32caab7b40c72493",
        "0x3c9ebe0a15c9bebc",
        "0x431d67c49c100d4c",
        "0x4cc5d4becb3e42b6",
        "0x597f299cfc657e2a",
        "0x5fcb6fab3ad6faec",
        "0x6c44198c4a475817"
      ].map((n2) => BigInt(n2))))();
      SHA512_Kh2 = /* @__PURE__ */ (() => K512[0])();
      SHA512_Kl2 = /* @__PURE__ */ (() => K512[1])();
      SHA512_W_H2 = /* @__PURE__ */ new Uint32Array(80);
      SHA512_W_L2 = /* @__PURE__ */ new Uint32Array(80);
      SHA5122 = class extends HashMD {
        constructor(outputLen = 64) {
          super(128, outputLen, 16, false);
          this.Ah = SHA512_IV[0] | 0;
          this.Al = SHA512_IV[1] | 0;
          this.Bh = SHA512_IV[2] | 0;
          this.Bl = SHA512_IV[3] | 0;
          this.Ch = SHA512_IV[4] | 0;
          this.Cl = SHA512_IV[5] | 0;
          this.Dh = SHA512_IV[6] | 0;
          this.Dl = SHA512_IV[7] | 0;
          this.Eh = SHA512_IV[8] | 0;
          this.El = SHA512_IV[9] | 0;
          this.Fh = SHA512_IV[10] | 0;
          this.Fl = SHA512_IV[11] | 0;
          this.Gh = SHA512_IV[12] | 0;
          this.Gl = SHA512_IV[13] | 0;
          this.Hh = SHA512_IV[14] | 0;
          this.Hl = SHA512_IV[15] | 0;
        }
        // prettier-ignore
        get() {
          const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
          return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
        }
        // prettier-ignore
        set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
          this.Ah = Ah | 0;
          this.Al = Al | 0;
          this.Bh = Bh | 0;
          this.Bl = Bl | 0;
          this.Ch = Ch | 0;
          this.Cl = Cl | 0;
          this.Dh = Dh | 0;
          this.Dl = Dl | 0;
          this.Eh = Eh | 0;
          this.El = El | 0;
          this.Fh = Fh | 0;
          this.Fl = Fl | 0;
          this.Gh = Gh | 0;
          this.Gl = Gl | 0;
          this.Hh = Hh | 0;
          this.Hl = Hl | 0;
        }
        process(view, offset2) {
          for (let i = 0; i < 16; i++, offset2 += 4) {
            SHA512_W_H2[i] = view.getUint32(offset2);
            SHA512_W_L2[i] = view.getUint32(offset2 += 4);
          }
          for (let i = 16; i < 80; i++) {
            const W15h = SHA512_W_H2[i - 15] | 0;
            const W15l = SHA512_W_L2[i - 15] | 0;
            const s0h = rotrSH2(W15h, W15l, 1) ^ rotrSH2(W15h, W15l, 8) ^ shrSH2(W15h, W15l, 7);
            const s0l = rotrSL2(W15h, W15l, 1) ^ rotrSL2(W15h, W15l, 8) ^ shrSL2(W15h, W15l, 7);
            const W2h = SHA512_W_H2[i - 2] | 0;
            const W2l = SHA512_W_L2[i - 2] | 0;
            const s1h = rotrSH2(W2h, W2l, 19) ^ rotrBH2(W2h, W2l, 61) ^ shrSH2(W2h, W2l, 6);
            const s1l = rotrSL2(W2h, W2l, 19) ^ rotrBL2(W2h, W2l, 61) ^ shrSL2(W2h, W2l, 6);
            const SUMl = add4L2(s0l, s1l, SHA512_W_L2[i - 7], SHA512_W_L2[i - 16]);
            const SUMh = add4H2(SUMl, s0h, s1h, SHA512_W_H2[i - 7], SHA512_W_H2[i - 16]);
            SHA512_W_H2[i] = SUMh | 0;
            SHA512_W_L2[i] = SUMl | 0;
          }
          let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
          for (let i = 0; i < 80; i++) {
            const sigma1h = rotrSH2(Eh, El, 14) ^ rotrSH2(Eh, El, 18) ^ rotrBH2(Eh, El, 41);
            const sigma1l = rotrSL2(Eh, El, 14) ^ rotrSL2(Eh, El, 18) ^ rotrBL2(Eh, El, 41);
            const CHIh = Eh & Fh ^ ~Eh & Gh;
            const CHIl = El & Fl ^ ~El & Gl;
            const T1ll = add5L2(Hl, sigma1l, CHIl, SHA512_Kl2[i], SHA512_W_L2[i]);
            const T1h = add5H2(T1ll, Hh, sigma1h, CHIh, SHA512_Kh2[i], SHA512_W_H2[i]);
            const T1l = T1ll | 0;
            const sigma0h = rotrSH2(Ah, Al, 28) ^ rotrBH2(Ah, Al, 34) ^ rotrBH2(Ah, Al, 39);
            const sigma0l = rotrSL2(Ah, Al, 28) ^ rotrBL2(Ah, Al, 34) ^ rotrBL2(Ah, Al, 39);
            const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
            const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
            Hh = Gh | 0;
            Hl = Gl | 0;
            Gh = Fh | 0;
            Gl = Fl | 0;
            Fh = Eh | 0;
            Fl = El | 0;
            ({ h: Eh, l: El } = add2(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
            Dh = Ch | 0;
            Dl = Cl | 0;
            Ch = Bh | 0;
            Cl = Bl | 0;
            Bh = Ah | 0;
            Bl = Al | 0;
            const All = add3L2(T1l, sigma0l, MAJl);
            Ah = add3H2(All, T1h, sigma0h, MAJh);
            Al = All | 0;
          }
          ({ h: Ah, l: Al } = add2(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
          ({ h: Bh, l: Bl } = add2(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
          ({ h: Ch, l: Cl } = add2(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
          ({ h: Dh, l: Dl } = add2(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
          ({ h: Eh, l: El } = add2(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
          ({ h: Fh, l: Fl } = add2(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
          ({ h: Gh, l: Gl } = add2(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
          ({ h: Hh, l: Hl } = add2(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
          this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
        }
        roundClean() {
          clean(SHA512_W_H2, SHA512_W_L2);
        }
        destroy() {
          clean(this.buffer);
          this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
      };
      sha2563 = /* @__PURE__ */ createHasher(() => new SHA2562());
      sha5123 = /* @__PURE__ */ createHasher(() => new SHA5122());
    }
  });

  // node_modules/@noble/curves/esm/abstract/utils.js
  function isBytes2(a) {
    return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === "Uint8Array";
  }
  function abytes2(item) {
    if (!isBytes2(item))
      throw new Error("Uint8Array expected");
  }
  function abool(title, value) {
    if (typeof value !== "boolean")
      throw new Error(title + " boolean expected, got " + value);
  }
  function numberToHexUnpadded2(num) {
    const hex = num.toString(16);
    return hex.length & 1 ? "0" + hex : hex;
  }
  function hexToNumber2(hex) {
    if (typeof hex !== "string")
      throw new Error("hex string expected, got " + typeof hex);
    return hex === "" ? _0n7 : BigInt("0x" + hex);
  }
  function bytesToHex2(bytes2) {
    abytes2(bytes2);
    if (hasHexBuiltin)
      return bytes2.toHex();
    let hex = "";
    for (let i = 0; i < bytes2.length; i++) {
      hex += hexes2[bytes2[i]];
    }
    return hex;
  }
  function asciiToBase16(ch) {
    if (ch >= asciis._0 && ch <= asciis._9)
      return ch - asciis._0;
    if (ch >= asciis.A && ch <= asciis.F)
      return ch - (asciis.A - 10);
    if (ch >= asciis.a && ch <= asciis.f)
      return ch - (asciis.a - 10);
    return;
  }
  function hexToBytes2(hex) {
    if (typeof hex !== "string")
      throw new Error("hex string expected, got " + typeof hex);
    if (hasHexBuiltin)
      return Uint8Array.fromHex(hex);
    const hl = hex.length;
    const al = hl / 2;
    if (hl % 2)
      throw new Error("hex string expected, got unpadded hex of length " + hl);
    const array2 = new Uint8Array(al);
    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
      const n1 = asciiToBase16(hex.charCodeAt(hi));
      const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
      if (n1 === void 0 || n2 === void 0) {
        const char = hex[hi] + hex[hi + 1];
        throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
      }
      array2[ai] = n1 * 16 + n2;
    }
    return array2;
  }
  function bytesToNumberBE2(bytes2) {
    return hexToNumber2(bytesToHex2(bytes2));
  }
  function bytesToNumberLE2(bytes2) {
    abytes2(bytes2);
    return hexToNumber2(bytesToHex2(Uint8Array.from(bytes2).reverse()));
  }
  function numberToBytesBE2(n2, len) {
    return hexToBytes2(n2.toString(16).padStart(len * 2, "0"));
  }
  function numberToBytesLE2(n2, len) {
    return numberToBytesBE2(n2, len).reverse();
  }
  function ensureBytes2(title, hex, expectedLength) {
    let res;
    if (typeof hex === "string") {
      try {
        res = hexToBytes2(hex);
      } catch (e) {
        throw new Error(title + " must be hex string or Uint8Array, cause: " + e);
      }
    } else if (isBytes2(hex)) {
      res = Uint8Array.from(hex);
    } else {
      throw new Error(title + " must be hex string or Uint8Array");
    }
    const len = res.length;
    if (typeof expectedLength === "number" && len !== expectedLength)
      throw new Error(title + " of length " + expectedLength + " expected, got " + len);
    return res;
  }
  function concatBytes4(...arrays) {
    let sum = 0;
    for (let i = 0; i < arrays.length; i++) {
      const a = arrays[i];
      abytes2(a);
      sum += a.length;
    }
    const res = new Uint8Array(sum);
    for (let i = 0, pad = 0; i < arrays.length; i++) {
      const a = arrays[i];
      res.set(a, pad);
      pad += a.length;
    }
    return res;
  }
  function inRange(n2, min, max) {
    return isPosBig(n2) && isPosBig(min) && isPosBig(max) && min <= n2 && n2 < max;
  }
  function aInRange(title, n2, min, max) {
    if (!inRange(n2, min, max))
      throw new Error("expected valid " + title + ": " + min + " <= n < " + max + ", got " + n2);
  }
  function bitLen2(n2) {
    let len;
    for (len = 0; n2 > _0n7; n2 >>= _1n7, len += 1)
      ;
    return len;
  }
  function createHmacDrbg2(hashLen, qByteLen, hmacFn) {
    if (typeof hashLen !== "number" || hashLen < 2)
      throw new Error("hashLen must be a number");
    if (typeof qByteLen !== "number" || qByteLen < 2)
      throw new Error("qByteLen must be a number");
    if (typeof hmacFn !== "function")
      throw new Error("hmacFn must be a function");
    let v = u8n2(hashLen);
    let k = u8n2(hashLen);
    let i = 0;
    const reset = () => {
      v.fill(1);
      k.fill(0);
      i = 0;
    };
    const h = (...b2) => hmacFn(k, v, ...b2);
    const reseed = (seed = u8n2(0)) => {
      k = h(u8fr2([0]), seed);
      v = h();
      if (seed.length === 0)
        return;
      k = h(u8fr2([1]), seed);
      v = h();
    };
    const gen3 = () => {
      if (i++ >= 1e3)
        throw new Error("drbg: tried 1000 values");
      let len = 0;
      const out = [];
      while (len < qByteLen) {
        v = h();
        const sl = v.slice();
        out.push(sl);
        len += v.length;
      }
      return concatBytes4(...out);
    };
    const genUntil = (seed, pred) => {
      reset();
      reseed(seed);
      let res = void 0;
      while (!(res = pred(gen3())))
        reseed();
      reset();
      return res;
    };
    return genUntil;
  }
  function validateObject2(object2, validators, optValidators = {}) {
    const checkField = (fieldName, type2, isOptional) => {
      const checkVal = validatorFns2[type2];
      if (typeof checkVal !== "function")
        throw new Error("invalid validator function");
      const val = object2[fieldName];
      if (isOptional && val === void 0)
        return;
      if (!checkVal(val, object2)) {
        throw new Error("param " + String(fieldName) + " is invalid. Expected " + type2 + ", got " + val);
      }
    };
    for (const [fieldName, type2] of Object.entries(validators))
      checkField(fieldName, type2, false);
    for (const [fieldName, type2] of Object.entries(optValidators))
      checkField(fieldName, type2, true);
    return object2;
  }
  function memoized(fn) {
    const map = /* @__PURE__ */ new WeakMap();
    return (arg, ...args) => {
      const val = map.get(arg);
      if (val !== void 0)
        return val;
      const computed = fn(arg, ...args);
      map.set(arg, computed);
      return computed;
    };
  }
  var _0n7, _1n7, hasHexBuiltin, hexes2, asciis, isPosBig, bitMask2, u8n2, u8fr2, validatorFns2;
  var init_utils6 = __esm({
    "node_modules/@noble/curves/esm/abstract/utils.js"() {
      _0n7 = /* @__PURE__ */ BigInt(0);
      _1n7 = /* @__PURE__ */ BigInt(1);
      hasHexBuiltin = // @ts-ignore
      typeof Uint8Array.from([]).toHex === "function" && typeof Uint8Array.fromHex === "function";
      hexes2 = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
      asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
      isPosBig = (n2) => typeof n2 === "bigint" && _0n7 <= n2;
      bitMask2 = (n2) => (_1n7 << BigInt(n2)) - _1n7;
      u8n2 = (len) => new Uint8Array(len);
      u8fr2 = (arr) => Uint8Array.from(arr);
      validatorFns2 = {
        bigint: (val) => typeof val === "bigint",
        function: (val) => typeof val === "function",
        boolean: (val) => typeof val === "boolean",
        string: (val) => typeof val === "string",
        stringOrUint8Array: (val) => typeof val === "string" || isBytes2(val),
        isSafeInteger: (val) => Number.isSafeInteger(val),
        array: (val) => Array.isArray(val),
        field: (val, object2) => object2.Fp.isValid(val),
        hash: (val) => typeof val === "function" && Number.isSafeInteger(val.outputLen)
      };
    }
  });

  // node_modules/@noble/curves/esm/abstract/modular.js
  function mod2(a, b2) {
    const result = a % b2;
    return result >= _0n8 ? result : b2 + result;
  }
  function pow22(x, power, modulo) {
    let res = x;
    while (power-- > _0n8) {
      res *= res;
      res %= modulo;
    }
    return res;
  }
  function invert2(number3, modulo) {
    if (number3 === _0n8)
      throw new Error("invert: expected non-zero number");
    if (modulo <= _0n8)
      throw new Error("invert: expected positive modulus, got " + modulo);
    let a = mod2(number3, modulo);
    let b2 = modulo;
    let x = _0n8, y = _1n8, u = _1n8, v = _0n8;
    while (a !== _0n8) {
      const q = b2 / a;
      const r = b2 % a;
      const m = x - u * q;
      const n2 = y - v * q;
      b2 = a, a = r, x = u, y = v, u = m, v = n2;
    }
    const gcd = b2;
    if (gcd !== _1n8)
      throw new Error("invert: does not exist");
    return mod2(x, modulo);
  }
  function tonelliShanks2(P) {
    let Q = P - _1n8;
    let S2 = 0;
    while (Q % _2n6 === _0n8) {
      Q /= _2n6;
      S2++;
    }
    let Z = _2n6;
    const _Fp = Field2(P);
    while (Z < P && FpIsSquare(_Fp, Z)) {
      if (Z++ > 1e3)
        throw new Error("Cannot find square root: probably non-prime P");
    }
    if (S2 === 1) {
      const p1div4 = (P + _1n8) / _4n3;
      return function tonelliFast(Fp3, n2) {
        const root = Fp3.pow(n2, p1div4);
        if (!Fp3.eql(Fp3.sqr(root), n2))
          throw new Error("Cannot find square root");
        return root;
      };
    }
    const Q1div2 = (Q + _1n8) / _2n6;
    return function tonelliSlow(Fp3, n2) {
      if (!FpIsSquare(Fp3, n2))
        throw new Error("Cannot find square root");
      let r = S2;
      let g = Fp3.pow(Fp3.mul(Fp3.ONE, Z), Q);
      let x = Fp3.pow(n2, Q1div2);
      let b2 = Fp3.pow(n2, Q);
      while (!Fp3.eql(b2, Fp3.ONE)) {
        if (Fp3.eql(b2, Fp3.ZERO))
          return Fp3.ZERO;
        let m = 1;
        for (let t2 = Fp3.sqr(b2); m < r; m++) {
          if (Fp3.eql(t2, Fp3.ONE))
            break;
          t2 = Fp3.sqr(t2);
        }
        const ge = Fp3.pow(g, _1n8 << BigInt(r - m - 1));
        g = Fp3.sqr(ge);
        x = Fp3.mul(x, ge);
        b2 = Fp3.mul(b2, g);
        r = m;
      }
      return x;
    };
  }
  function FpSqrt2(P) {
    if (P % _4n3 === _3n3) {
      return function sqrt3mod4(Fp3, n2) {
        const p1div4 = (P + _1n8) / _4n3;
        const root = Fp3.pow(n2, p1div4);
        if (!Fp3.eql(Fp3.sqr(root), n2))
          throw new Error("Cannot find square root");
        return root;
      };
    }
    if (P % _8n2 === _5n2) {
      return function sqrt5mod8(Fp3, n2) {
        const n22 = Fp3.mul(n2, _2n6);
        const c1 = (P - _5n2) / _8n2;
        const v = Fp3.pow(n22, c1);
        const nv = Fp3.mul(n2, v);
        const i = Fp3.mul(Fp3.mul(nv, _2n6), v);
        const root = Fp3.mul(nv, Fp3.sub(i, Fp3.ONE));
        if (!Fp3.eql(Fp3.sqr(root), n2))
          throw new Error("Cannot find square root");
        return root;
      };
    }
    if (P % _16n2 === _9n2) {
    }
    return tonelliShanks2(P);
  }
  function validateField2(field) {
    const initial = {
      ORDER: "bigint",
      MASK: "bigint",
      BYTES: "isSafeInteger",
      BITS: "isSafeInteger"
    };
    const opts = FIELD_FIELDS2.reduce((map, val) => {
      map[val] = "function";
      return map;
    }, initial);
    return validateObject2(field, opts);
  }
  function FpPow2(Fp3, num, power) {
    if (power < _0n8)
      throw new Error("invalid exponent, negatives unsupported");
    if (power === _0n8)
      return Fp3.ONE;
    if (power === _1n8)
      return num;
    let p = Fp3.ONE;
    let d = num;
    while (power > _0n8) {
      if (power & _1n8)
        p = Fp3.mul(p, d);
      d = Fp3.sqr(d);
      power >>= _1n8;
    }
    return p;
  }
  function FpInvertBatch2(Fp3, nums, passZero = false) {
    const inverted = new Array(nums.length).fill(passZero ? Fp3.ZERO : void 0);
    const multipliedAcc = nums.reduce((acc, num, i) => {
      if (Fp3.is0(num))
        return acc;
      inverted[i] = acc;
      return Fp3.mul(acc, num);
    }, Fp3.ONE);
    const invertedAcc = Fp3.inv(multipliedAcc);
    nums.reduceRight((acc, num, i) => {
      if (Fp3.is0(num))
        return acc;
      inverted[i] = Fp3.mul(acc, inverted[i]);
      return Fp3.mul(acc, num);
    }, invertedAcc);
    return inverted;
  }
  function FpLegendre(Fp3, n2) {
    const legc = (Fp3.ORDER - _1n8) / _2n6;
    const powered = Fp3.pow(n2, legc);
    const yes = Fp3.eql(powered, Fp3.ONE);
    const zero = Fp3.eql(powered, Fp3.ZERO);
    const no = Fp3.eql(powered, Fp3.neg(Fp3.ONE));
    if (!yes && !zero && !no)
      throw new Error("Cannot find square root: probably non-prime P");
    return yes ? 1 : zero ? 0 : -1;
  }
  function FpIsSquare(Fp3, n2) {
    const l = FpLegendre(Fp3, n2);
    return l === 0 || l === 1;
  }
  function nLength2(n2, nBitLength) {
    if (nBitLength !== void 0)
      anumber(nBitLength);
    const _nBitLength = nBitLength !== void 0 ? nBitLength : n2.toString(2).length;
    const nByteLength = Math.ceil(_nBitLength / 8);
    return { nBitLength: _nBitLength, nByteLength };
  }
  function Field2(ORDER, bitLen3, isLE3 = false, redef = {}) {
    if (ORDER <= _0n8)
      throw new Error("invalid field: expected ORDER > 0, got " + ORDER);
    const { nBitLength: BITS, nByteLength: BYTES } = nLength2(ORDER, bitLen3);
    if (BYTES > 2048)
      throw new Error("invalid field: expected ORDER of <= 2048 bytes");
    let sqrtP;
    const f3 = Object.freeze({
      ORDER,
      isLE: isLE3,
      BITS,
      BYTES,
      MASK: bitMask2(BITS),
      ZERO: _0n8,
      ONE: _1n8,
      create: (num) => mod2(num, ORDER),
      isValid: (num) => {
        if (typeof num !== "bigint")
          throw new Error("invalid field element: expected bigint, got " + typeof num);
        return _0n8 <= num && num < ORDER;
      },
      is0: (num) => num === _0n8,
      isOdd: (num) => (num & _1n8) === _1n8,
      neg: (num) => mod2(-num, ORDER),
      eql: (lhs, rhs) => lhs === rhs,
      sqr: (num) => mod2(num * num, ORDER),
      add: (lhs, rhs) => mod2(lhs + rhs, ORDER),
      sub: (lhs, rhs) => mod2(lhs - rhs, ORDER),
      mul: (lhs, rhs) => mod2(lhs * rhs, ORDER),
      pow: (num, power) => FpPow2(f3, num, power),
      div: (lhs, rhs) => mod2(lhs * invert2(rhs, ORDER), ORDER),
      // Same as above, but doesn't normalize
      sqrN: (num) => num * num,
      addN: (lhs, rhs) => lhs + rhs,
      subN: (lhs, rhs) => lhs - rhs,
      mulN: (lhs, rhs) => lhs * rhs,
      inv: (num) => invert2(num, ORDER),
      sqrt: redef.sqrt || ((n2) => {
        if (!sqrtP)
          sqrtP = FpSqrt2(ORDER);
        return sqrtP(f3, n2);
      }),
      toBytes: (num) => isLE3 ? numberToBytesLE2(num, BYTES) : numberToBytesBE2(num, BYTES),
      fromBytes: (bytes2) => {
        if (bytes2.length !== BYTES)
          throw new Error("Field.fromBytes: expected " + BYTES + " bytes, got " + bytes2.length);
        return isLE3 ? bytesToNumberLE2(bytes2) : bytesToNumberBE2(bytes2);
      },
      // TODO: we don't need it here, move out to separate fn
      invertBatch: (lst) => FpInvertBatch2(f3, lst),
      // We can't move this out because Fp6, Fp12 implement it
      // and it's unclear what to return in there.
      cmov: (a, b2, c) => c ? b2 : a
    });
    return Object.freeze(f3);
  }
  function getFieldBytesLength2(fieldOrder) {
    if (typeof fieldOrder !== "bigint")
      throw new Error("field order must be bigint");
    const bitLength = fieldOrder.toString(2).length;
    return Math.ceil(bitLength / 8);
  }
  function getMinHashLength2(fieldOrder) {
    const length = getFieldBytesLength2(fieldOrder);
    return length + Math.ceil(length / 2);
  }
  function mapHashToField2(key, fieldOrder, isLE3 = false) {
    const len = key.length;
    const fieldLen = getFieldBytesLength2(fieldOrder);
    const minLen = getMinHashLength2(fieldOrder);
    if (len < 16 || len < minLen || len > 1024)
      throw new Error("expected " + minLen + "-1024 bytes of input, got " + len);
    const num = isLE3 ? bytesToNumberLE2(key) : bytesToNumberBE2(key);
    const reduced = mod2(num, fieldOrder - _1n8) + _1n8;
    return isLE3 ? numberToBytesLE2(reduced, fieldLen) : numberToBytesBE2(reduced, fieldLen);
  }
  var _0n8, _1n8, _2n6, _3n3, _4n3, _5n2, _8n2, _9n2, _16n2, isNegativeLE, FIELD_FIELDS2;
  var init_modular2 = __esm({
    "node_modules/@noble/curves/esm/abstract/modular.js"() {
      init_utils5();
      init_utils6();
      _0n8 = BigInt(0);
      _1n8 = BigInt(1);
      _2n6 = /* @__PURE__ */ BigInt(2);
      _3n3 = /* @__PURE__ */ BigInt(3);
      _4n3 = /* @__PURE__ */ BigInt(4);
      _5n2 = /* @__PURE__ */ BigInt(5);
      _8n2 = /* @__PURE__ */ BigInt(8);
      _9n2 = /* @__PURE__ */ BigInt(9);
      _16n2 = /* @__PURE__ */ BigInt(16);
      isNegativeLE = (num, modulo) => (mod2(num, modulo) & _1n8) === _1n8;
      FIELD_FIELDS2 = [
        "create",
        "isValid",
        "is0",
        "neg",
        "inv",
        "sqrt",
        "sqr",
        "eql",
        "add",
        "sub",
        "mul",
        "pow",
        "div",
        "addN",
        "subN",
        "mulN",
        "sqrN"
      ];
    }
  });

  // node_modules/@noble/curves/esm/abstract/curve.js
  function constTimeNegate(condition, item) {
    const neg = item.negate();
    return condition ? neg : item;
  }
  function validateW(W, bits) {
    if (!Number.isSafeInteger(W) || W <= 0 || W > bits)
      throw new Error("invalid window size, expected [1.." + bits + "], got W=" + W);
  }
  function calcWOpts(W, scalarBits) {
    validateW(W, scalarBits);
    const windows = Math.ceil(scalarBits / W) + 1;
    const windowSize = 2 ** (W - 1);
    const maxNumber = 2 ** W;
    const mask3 = bitMask2(W);
    const shiftBy = BigInt(W);
    return { windows, windowSize, mask: mask3, maxNumber, shiftBy };
  }
  function calcOffsets(n2, window2, wOpts) {
    const { windowSize, mask: mask3, maxNumber, shiftBy } = wOpts;
    let wbits = Number(n2 & mask3);
    let nextN = n2 >> shiftBy;
    if (wbits > windowSize) {
      wbits -= maxNumber;
      nextN += _1n9;
    }
    const offsetStart = window2 * windowSize;
    const offset2 = offsetStart + Math.abs(wbits) - 1;
    const isZero = wbits === 0;
    const isNeg = wbits < 0;
    const isNegF = window2 % 2 !== 0;
    const offsetF = offsetStart;
    return { nextN, offset: offset2, isZero, isNeg, isNegF, offsetF };
  }
  function validateMSMPoints(points, c) {
    if (!Array.isArray(points))
      throw new Error("array expected");
    points.forEach((p, i) => {
      if (!(p instanceof c))
        throw new Error("invalid point at index " + i);
    });
  }
  function validateMSMScalars(scalars, field) {
    if (!Array.isArray(scalars))
      throw new Error("array of scalars expected");
    scalars.forEach((s, i) => {
      if (!field.isValid(s))
        throw new Error("invalid scalar at index " + i);
    });
  }
  function getW(P) {
    return pointWindowSizes.get(P) || 1;
  }
  function wNAF2(c, bits) {
    return {
      constTimeNegate,
      hasPrecomputes(elm) {
        return getW(elm) !== 1;
      },
      // non-const time multiplication ladder
      unsafeLadder(elm, n2, p = c.ZERO) {
        let d = elm;
        while (n2 > _0n9) {
          if (n2 & _1n9)
            p = p.add(d);
          d = d.double();
          n2 >>= _1n9;
        }
        return p;
      },
      /**
       * Creates a wNAF precomputation window. Used for caching.
       * Default window size is set by `utils.precompute()` and is equal to 8.
       * Number of precomputed points depends on the curve size:
       * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
       * - 𝑊 is the window size
       * - 𝑛 is the bitlength of the curve order.
       * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
       * @param elm Point instance
       * @param W window size
       * @returns precomputed point tables flattened to a single array
       */
      precomputeWindow(elm, W) {
        const { windows, windowSize } = calcWOpts(W, bits);
        const points = [];
        let p = elm;
        let base = p;
        for (let window2 = 0; window2 < windows; window2++) {
          base = p;
          points.push(base);
          for (let i = 1; i < windowSize; i++) {
            base = base.add(p);
            points.push(base);
          }
          p = base.double();
        }
        return points;
      },
      /**
       * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
       * @param W window size
       * @param precomputes precomputed tables
       * @param n scalar (we don't check here, but should be less than curve order)
       * @returns real and fake (for const-time) points
       */
      wNAF(W, precomputes, n2) {
        let p = c.ZERO;
        let f3 = c.BASE;
        const wo = calcWOpts(W, bits);
        for (let window2 = 0; window2 < wo.windows; window2++) {
          const { nextN, offset: offset2, isZero, isNeg, isNegF, offsetF } = calcOffsets(n2, window2, wo);
          n2 = nextN;
          if (isZero) {
            f3 = f3.add(constTimeNegate(isNegF, precomputes[offsetF]));
          } else {
            p = p.add(constTimeNegate(isNeg, precomputes[offset2]));
          }
        }
        return { p, f: f3 };
      },
      /**
       * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.
       * @param W window size
       * @param precomputes precomputed tables
       * @param n scalar (we don't check here, but should be less than curve order)
       * @param acc accumulator point to add result of multiplication
       * @returns point
       */
      wNAFUnsafe(W, precomputes, n2, acc = c.ZERO) {
        const wo = calcWOpts(W, bits);
        for (let window2 = 0; window2 < wo.windows; window2++) {
          if (n2 === _0n9)
            break;
          const { nextN, offset: offset2, isZero, isNeg } = calcOffsets(n2, window2, wo);
          n2 = nextN;
          if (isZero) {
            continue;
          } else {
            const item = precomputes[offset2];
            acc = acc.add(isNeg ? item.negate() : item);
          }
        }
        return acc;
      },
      getPrecomputes(W, P, transform) {
        let comp = pointPrecomputes.get(P);
        if (!comp) {
          comp = this.precomputeWindow(P, W);
          if (W !== 1)
            pointPrecomputes.set(P, transform(comp));
        }
        return comp;
      },
      wNAFCached(P, n2, transform) {
        const W = getW(P);
        return this.wNAF(W, this.getPrecomputes(W, P, transform), n2);
      },
      wNAFCachedUnsafe(P, n2, transform, prev) {
        const W = getW(P);
        if (W === 1)
          return this.unsafeLadder(P, n2, prev);
        return this.wNAFUnsafe(W, this.getPrecomputes(W, P, transform), n2, prev);
      },
      // We calculate precomputes for elliptic curve point multiplication
      // using windowed method. This specifies window size and
      // stores precomputed values. Usually only base point would be precomputed.
      setWindowSize(P, W) {
        validateW(W, bits);
        pointWindowSizes.set(P, W);
        pointPrecomputes.delete(P);
      }
    };
  }
  function pippenger(c, fieldN, points, scalars) {
    validateMSMPoints(points, c);
    validateMSMScalars(scalars, fieldN);
    if (points.length !== scalars.length)
      throw new Error("arrays of points and scalars must have equal length");
    const zero = c.ZERO;
    const wbits = bitLen2(BigInt(points.length));
    const windowSize = wbits > 12 ? wbits - 3 : wbits > 4 ? wbits - 2 : wbits ? 2 : 1;
    const MASK = bitMask2(windowSize);
    const buckets = new Array(Number(MASK) + 1).fill(zero);
    const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;
    let sum = zero;
    for (let i = lastBits; i >= 0; i -= windowSize) {
      buckets.fill(zero);
      for (let j = 0; j < scalars.length; j++) {
        const scalar = scalars[j];
        const wbits2 = Number(scalar >> BigInt(i) & MASK);
        buckets[wbits2] = buckets[wbits2].add(points[j]);
      }
      let resI = zero;
      for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {
        sumI = sumI.add(buckets[j]);
        resI = resI.add(sumI);
      }
      sum = sum.add(resI);
      if (i !== 0)
        for (let j = 0; j < windowSize; j++)
          sum = sum.double();
    }
    return sum;
  }
  function validateBasic2(curve) {
    validateField2(curve.Fp);
    validateObject2(curve, {
      n: "bigint",
      h: "bigint",
      Gx: "field",
      Gy: "field"
    }, {
      nBitLength: "isSafeInteger",
      nByteLength: "isSafeInteger"
    });
    return Object.freeze({
      ...nLength2(curve.n, curve.nBitLength),
      ...curve,
      ...{ p: curve.Fp.ORDER }
    });
  }
  var _0n9, _1n9, pointPrecomputes, pointWindowSizes;
  var init_curve2 = __esm({
    "node_modules/@noble/curves/esm/abstract/curve.js"() {
      init_modular2();
      init_utils6();
      _0n9 = BigInt(0);
      _1n9 = BigInt(1);
      pointPrecomputes = /* @__PURE__ */ new WeakMap();
      pointWindowSizes = /* @__PURE__ */ new WeakMap();
    }
  });

  // node_modules/@noble/curves/esm/abstract/edwards.js
  function validateOpts2(curve) {
    const opts = validateBasic2(curve);
    validateObject2(curve, {
      hash: "function",
      a: "bigint",
      d: "bigint",
      randomBytes: "function"
    }, {
      adjustScalarBytes: "function",
      domain: "function",
      uvRatio: "function",
      mapToCurve: "function"
    });
    return Object.freeze({ ...opts });
  }
  function twistedEdwards(curveDef) {
    const CURVE = validateOpts2(curveDef);
    const { Fp: Fp3, n: CURVE_ORDER, prehash, hash: cHash, randomBytes: randomBytes5, nByteLength, h: cofactor } = CURVE;
    const MASK = _2n7 << BigInt(nByteLength * 8) - _1n10;
    const modP = Fp3.create;
    const Fn = Field2(CURVE.n, CURVE.nBitLength);
    const uvRatio2 = CURVE.uvRatio || ((u, v) => {
      try {
        return { isValid: true, value: Fp3.sqrt(u * Fp3.inv(v)) };
      } catch (e) {
        return { isValid: false, value: _0n10 };
      }
    });
    const adjustScalarBytes2 = CURVE.adjustScalarBytes || ((bytes2) => bytes2);
    const domain = CURVE.domain || ((data, ctx, phflag) => {
      abool("phflag", phflag);
      if (ctx.length || phflag)
        throw new Error("Contexts/pre-hash are not supported");
      return data;
    });
    function aCoordinate(title, n2, banZero = false) {
      const min = banZero ? _1n10 : _0n10;
      aInRange("coordinate " + title, n2, min, MASK);
    }
    function aextpoint(other) {
      if (!(other instanceof Point3))
        throw new Error("ExtendedPoint expected");
    }
    const toAffineMemo = memoized((p, iz) => {
      const { ex: x, ey: y, ez: z } = p;
      const is0 = p.is0();
      if (iz == null)
        iz = is0 ? _8n3 : Fp3.inv(z);
      const ax = modP(x * iz);
      const ay = modP(y * iz);
      const zz = modP(z * iz);
      if (is0)
        return { x: _0n10, y: _1n10 };
      if (zz !== _1n10)
        throw new Error("invZ was invalid");
      return { x: ax, y: ay };
    });
    const assertValidMemo = memoized((p) => {
      const { a, d } = CURVE;
      if (p.is0())
        throw new Error("bad point: ZERO");
      const { ex: X, ey: Y, ez: Z, et: T } = p;
      const X2 = modP(X * X);
      const Y2 = modP(Y * Y);
      const Z2 = modP(Z * Z);
      const Z4 = modP(Z2 * Z2);
      const aX2 = modP(X2 * a);
      const left = modP(Z2 * modP(aX2 + Y2));
      const right = modP(Z4 + modP(d * modP(X2 * Y2)));
      if (left !== right)
        throw new Error("bad point: equation left != right (1)");
      const XY = modP(X * Y);
      const ZT = modP(Z * T);
      if (XY !== ZT)
        throw new Error("bad point: equation left != right (2)");
      return true;
    });
    class Point3 {
      constructor(ex, ey, ez, et) {
        aCoordinate("x", ex);
        aCoordinate("y", ey);
        aCoordinate("z", ez, true);
        aCoordinate("t", et);
        this.ex = ex;
        this.ey = ey;
        this.ez = ez;
        this.et = et;
        Object.freeze(this);
      }
      get x() {
        return this.toAffine().x;
      }
      get y() {
        return this.toAffine().y;
      }
      static fromAffine(p) {
        if (p instanceof Point3)
          throw new Error("extended point not allowed");
        const { x, y } = p || {};
        aCoordinate("x", x);
        aCoordinate("y", y);
        return new Point3(x, y, _1n10, modP(x * y));
      }
      static normalizeZ(points) {
        const toInv = FpInvertBatch2(Fp3, points.map((p) => p.ez));
        return points.map((p, i) => p.toAffine(toInv[i])).map(Point3.fromAffine);
      }
      // Multiscalar Multiplication
      static msm(points, scalars) {
        return pippenger(Point3, Fn, points, scalars);
      }
      // "Private method", don't use it directly
      _setWindowSize(windowSize) {
        wnaf.setWindowSize(this, windowSize);
      }
      // Not required for fromHex(), which always creates valid points.
      // Could be useful for fromAffine().
      assertValidity() {
        assertValidMemo(this);
      }
      // Compare one point to another.
      equals(other) {
        aextpoint(other);
        const { ex: X1, ey: Y1, ez: Z1 } = this;
        const { ex: X2, ey: Y2, ez: Z2 } = other;
        const X1Z2 = modP(X1 * Z2);
        const X2Z1 = modP(X2 * Z1);
        const Y1Z2 = modP(Y1 * Z2);
        const Y2Z1 = modP(Y2 * Z1);
        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;
      }
      is0() {
        return this.equals(Point3.ZERO);
      }
      negate() {
        return new Point3(modP(-this.ex), this.ey, this.ez, modP(-this.et));
      }
      // Fast algo for doubling Extended Point.
      // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd
      // Cost: 4M + 4S + 1*a + 6add + 1*2.
      double() {
        const { a } = CURVE;
        const { ex: X1, ey: Y1, ez: Z1 } = this;
        const A = modP(X1 * X1);
        const B = modP(Y1 * Y1);
        const C = modP(_2n7 * modP(Z1 * Z1));
        const D = modP(a * A);
        const x1y1 = X1 + Y1;
        const E = modP(modP(x1y1 * x1y1) - A - B);
        const G2 = D + B;
        const F = G2 - C;
        const H = D - B;
        const X3 = modP(E * F);
        const Y3 = modP(G2 * H);
        const T32 = modP(E * H);
        const Z3 = modP(F * G2);
        return new Point3(X3, Y3, Z3, T32);
      }
      // Fast algo for adding 2 Extended Points.
      // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd
      // Cost: 9M + 1*a + 1*d + 7add.
      add(other) {
        aextpoint(other);
        const { a, d } = CURVE;
        const { ex: X1, ey: Y1, ez: Z1, et: T13 } = this;
        const { ex: X2, ey: Y2, ez: Z2, et: T22 } = other;
        const A = modP(X1 * X2);
        const B = modP(Y1 * Y2);
        const C = modP(T13 * d * T22);
        const D = modP(Z1 * Z2);
        const E = modP((X1 + Y1) * (X2 + Y2) - A - B);
        const F = D - C;
        const G2 = D + C;
        const H = modP(B - a * A);
        const X3 = modP(E * F);
        const Y3 = modP(G2 * H);
        const T32 = modP(E * H);
        const Z3 = modP(F * G2);
        return new Point3(X3, Y3, Z3, T32);
      }
      subtract(other) {
        return this.add(other.negate());
      }
      wNAF(n2) {
        return wnaf.wNAFCached(this, n2, Point3.normalizeZ);
      }
      // Constant-time multiplication.
      multiply(scalar) {
        const n2 = scalar;
        aInRange("scalar", n2, _1n10, CURVE_ORDER);
        const { p, f: f3 } = this.wNAF(n2);
        return Point3.normalizeZ([p, f3])[0];
      }
      // Non-constant-time multiplication. Uses double-and-add algorithm.
      // It's faster, but should only be used when you don't care about
      // an exposed private key e.g. sig verification.
      // Does NOT allow scalars higher than CURVE.n.
      // Accepts optional accumulator to merge with multiply (important for sparse scalars)
      multiplyUnsafe(scalar, acc = Point3.ZERO) {
        const n2 = scalar;
        aInRange("scalar", n2, _0n10, CURVE_ORDER);
        if (n2 === _0n10)
          return I;
        if (this.is0() || n2 === _1n10)
          return this;
        return wnaf.wNAFCachedUnsafe(this, n2, Point3.normalizeZ, acc);
      }
      // Checks if point is of small order.
      // If you add something to small order point, you will have "dirty"
      // point with torsion component.
      // Multiplies point by cofactor and checks if the result is 0.
      isSmallOrder() {
        return this.multiplyUnsafe(cofactor).is0();
      }
      // Multiplies point by curve order and checks if the result is 0.
      // Returns `false` is the point is dirty.
      isTorsionFree() {
        return wnaf.unsafeLadder(this, CURVE_ORDER).is0();
      }
      // Converts Extended point to default (x, y) coordinates.
      // Can accept precomputed Z^-1 - for example, from invertBatch.
      toAffine(iz) {
        return toAffineMemo(this, iz);
      }
      clearCofactor() {
        const { h: cofactor2 } = CURVE;
        if (cofactor2 === _1n10)
          return this;
        return this.multiplyUnsafe(cofactor2);
      }
      // Converts hash string or Uint8Array to Point.
      // Uses algo from RFC8032 5.1.3.
      static fromHex(hex, zip215 = false) {
        const { d, a } = CURVE;
        const len = Fp3.BYTES;
        hex = ensureBytes2("pointHex", hex, len);
        abool("zip215", zip215);
        const normed = hex.slice();
        const lastByte = hex[len - 1];
        normed[len - 1] = lastByte & ~128;
        const y = bytesToNumberLE2(normed);
        const max = zip215 ? MASK : Fp3.ORDER;
        aInRange("pointHex.y", y, _0n10, max);
        const y2 = modP(y * y);
        const u = modP(y2 - _1n10);
        const v = modP(d * y2 - a);
        let { isValid, value: x } = uvRatio2(u, v);
        if (!isValid)
          throw new Error("Point.fromHex: invalid y coordinate");
        const isXOdd = (x & _1n10) === _1n10;
        const isLastByteOdd = (lastByte & 128) !== 0;
        if (!zip215 && x === _0n10 && isLastByteOdd)
          throw new Error("Point.fromHex: x=0 and x_0=1");
        if (isLastByteOdd !== isXOdd)
          x = modP(-x);
        return Point3.fromAffine({ x, y });
      }
      static fromPrivateKey(privKey) {
        const { scalar } = getPrivateScalar(privKey);
        return G.multiply(scalar);
      }
      toRawBytes() {
        const { x, y } = this.toAffine();
        const bytes2 = numberToBytesLE2(y, Fp3.BYTES);
        bytes2[bytes2.length - 1] |= x & _1n10 ? 128 : 0;
        return bytes2;
      }
      toHex() {
        return bytesToHex2(this.toRawBytes());
      }
    }
    Point3.BASE = new Point3(CURVE.Gx, CURVE.Gy, _1n10, modP(CURVE.Gx * CURVE.Gy));
    Point3.ZERO = new Point3(_0n10, _1n10, _1n10, _0n10);
    const { BASE: G, ZERO: I } = Point3;
    const wnaf = wNAF2(Point3, nByteLength * 8);
    function modN(a) {
      return mod2(a, CURVE_ORDER);
    }
    function modN_LE(hash2) {
      return modN(bytesToNumberLE2(hash2));
    }
    function getPrivateScalar(key) {
      const len = Fp3.BYTES;
      key = ensureBytes2("private key", key, len);
      const hashed = ensureBytes2("hashed private key", cHash(key), 2 * len);
      const head = adjustScalarBytes2(hashed.slice(0, len));
      const prefix = hashed.slice(len, 2 * len);
      const scalar = modN_LE(head);
      return { head, prefix, scalar };
    }
    function getExtendedPublicKey(key) {
      const { head, prefix, scalar } = getPrivateScalar(key);
      const point = G.multiply(scalar);
      const pointBytes = point.toRawBytes();
      return { head, prefix, scalar, point, pointBytes };
    }
    function getPublicKey2(privKey) {
      return getExtendedPublicKey(privKey).pointBytes;
    }
    function hashDomainToScalar(context = Uint8Array.of(), ...msgs) {
      const msg = concatBytes4(...msgs);
      return modN_LE(cHash(domain(msg, ensureBytes2("context", context), !!prehash)));
    }
    function sign2(msg, privKey, options = {}) {
      msg = ensureBytes2("message", msg);
      if (prehash)
        msg = prehash(msg);
      const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);
      const r = hashDomainToScalar(options.context, prefix, msg);
      const R = G.multiply(r).toRawBytes();
      const k = hashDomainToScalar(options.context, R, pointBytes, msg);
      const s = modN(r + k * scalar);
      aInRange("signature.s", s, _0n10, CURVE_ORDER);
      const res = concatBytes4(R, numberToBytesLE2(s, Fp3.BYTES));
      return ensureBytes2("result", res, Fp3.BYTES * 2);
    }
    const verifyOpts = VERIFY_DEFAULT;
    function verify2(sig, msg, publicKey2, options = verifyOpts) {
      const { context, zip215 } = options;
      const len = Fp3.BYTES;
      sig = ensureBytes2("signature", sig, 2 * len);
      msg = ensureBytes2("message", msg);
      publicKey2 = ensureBytes2("publicKey", publicKey2, len);
      if (zip215 !== void 0)
        abool("zip215", zip215);
      if (prehash)
        msg = prehash(msg);
      const s = bytesToNumberLE2(sig.slice(len, 2 * len));
      let A, R, SB;
      try {
        A = Point3.fromHex(publicKey2, zip215);
        R = Point3.fromHex(sig.slice(0, len), zip215);
        SB = G.multiplyUnsafe(s);
      } catch (error) {
        return false;
      }
      if (!zip215 && A.isSmallOrder())
        return false;
      const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);
      const RkA = R.add(A.multiplyUnsafe(k));
      return RkA.subtract(SB).clearCofactor().equals(Point3.ZERO);
    }
    G._setWindowSize(8);
    const utils = {
      getExtendedPublicKey,
      /** ed25519 priv keys are uniform 32b. No need to check for modulo bias, like in secp256k1. */
      randomPrivateKey: () => randomBytes5(Fp3.BYTES),
      /**
       * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT
       * values. This slows down first getPublicKey() by milliseconds (see Speed section),
       * but allows to speed-up subsequent getPublicKey() calls up to 20x.
       * @param windowSize 2, 4, 8, 16
       */
      precompute(windowSize = 8, point = Point3.BASE) {
        point._setWindowSize(windowSize);
        point.multiply(BigInt(3));
        return point;
      }
    };
    return {
      CURVE,
      getPublicKey: getPublicKey2,
      sign: sign2,
      verify: verify2,
      ExtendedPoint: Point3,
      utils
    };
  }
  var _0n10, _1n10, _2n7, _8n3, VERIFY_DEFAULT;
  var init_edwards = __esm({
    "node_modules/@noble/curves/esm/abstract/edwards.js"() {
      init_curve2();
      init_modular2();
      init_utils6();
      _0n10 = BigInt(0);
      _1n10 = BigInt(1);
      _2n7 = BigInt(2);
      _8n3 = BigInt(8);
      VERIFY_DEFAULT = { zip215: true };
    }
  });

  // node_modules/@noble/curves/esm/ed25519.js
  function ed25519_pow_2_252_3(x) {
    const _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);
    const P = ED25519_P;
    const x2 = x * x % P;
    const b2 = x2 * x % P;
    const b4 = pow22(b2, _2n8, P) * b2 % P;
    const b5 = pow22(b4, _1n11, P) * x % P;
    const b10 = pow22(b5, _5n3, P) * b5 % P;
    const b20 = pow22(b10, _10n, P) * b10 % P;
    const b40 = pow22(b20, _20n, P) * b20 % P;
    const b80 = pow22(b40, _40n, P) * b40 % P;
    const b160 = pow22(b80, _80n, P) * b80 % P;
    const b240 = pow22(b160, _80n, P) * b80 % P;
    const b250 = pow22(b240, _10n, P) * b10 % P;
    const pow_p_5_8 = pow22(b250, _2n8, P) * x % P;
    return { pow_p_5_8, b2 };
  }
  function adjustScalarBytes(bytes2) {
    bytes2[0] &= 248;
    bytes2[31] &= 127;
    bytes2[31] |= 64;
    return bytes2;
  }
  function uvRatio(u, v) {
    const P = ED25519_P;
    const v32 = mod2(v * v * v, P);
    const v7 = mod2(v32 * v32 * v, P);
    const pow3 = ed25519_pow_2_252_3(u * v7).pow_p_5_8;
    let x = mod2(u * v32 * pow3, P);
    const vx2 = mod2(v * x * x, P);
    const root1 = x;
    const root2 = mod2(x * ED25519_SQRT_M1, P);
    const useRoot1 = vx2 === u;
    const useRoot2 = vx2 === mod2(-u, P);
    const noRoot = vx2 === mod2(-u * ED25519_SQRT_M1, P);
    if (useRoot1)
      x = root1;
    if (useRoot2 || noRoot)
      x = root2;
    if (isNegativeLE(x, P))
      x = mod2(-x, P);
    return { isValid: useRoot1 || useRoot2, value: x };
  }
  var ED25519_P, ED25519_SQRT_M1, _0n11, _1n11, _2n8, _3n4, _5n3, _8n4, Fp2, ed25519Defaults, ed25519;
  var init_ed25519 = __esm({
    "node_modules/@noble/curves/esm/ed25519.js"() {
      init_sha23();
      init_utils5();
      init_edwards();
      init_modular2();
      ED25519_P = BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949");
      ED25519_SQRT_M1 = /* @__PURE__ */ BigInt("19681161376707505956807079304988542015446066515923890162744021073123829784752");
      _0n11 = BigInt(0);
      _1n11 = BigInt(1);
      _2n8 = BigInt(2);
      _3n4 = BigInt(3);
      _5n3 = BigInt(5);
      _8n4 = BigInt(8);
      Fp2 = /* @__PURE__ */ (() => Field2(ED25519_P, void 0, true))();
      ed25519Defaults = /* @__PURE__ */ (() => ({
        // Removing Fp.create() will still work, and is 10% faster on sign
        a: Fp2.create(BigInt(-1)),
        // d is -121665/121666 a.k.a. Fp.neg(121665 * Fp.inv(121666))
        d: BigInt("37095705934669439343138083508754565189542113879843219016388785533085940283555"),
        // Finite field 2n**255n - 19n
        Fp: Fp2,
        // Subgroup order 2n**252n + 27742317777372353535851937790883648493n;
        n: BigInt("7237005577332262213973186563042994240857116359379907606001950938285454250989"),
        h: _8n4,
        Gx: BigInt("15112221349535400772501151409588531511454012693041857206046113283949847762202"),
        Gy: BigInt("46316835694926478169428394003475163141307993866256225615783033603165251855960"),
        hash: sha5123,
        randomBytes: randomBytes4,
        adjustScalarBytes,
        // dom2
        // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.
        // Constant-time, u/√v
        uvRatio
      }))();
      ed25519 = /* @__PURE__ */ (() => twistedEdwards(ed25519Defaults))();
    }
  });

  // (disabled):node_modules/buffer/index.js
  var require_buffer2 = __commonJS({
    "(disabled):node_modules/buffer/index.js"() {
    }
  });

  // node_modules/bn.js/lib/bn.js
  var require_bn = __commonJS({
    "node_modules/bn.js/lib/bn.js"(exports, module) {
      (function(module2, exports2) {
        "use strict";
        function assert4(val, msg) {
          if (!val) throw new Error(msg || "Assertion failed");
        }
        function inherits(ctor, superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
        function BN2(number3, base, endian) {
          if (BN2.isBN(number3)) {
            return number3;
          }
          this.negative = 0;
          this.words = null;
          this.length = 0;
          this.red = null;
          if (number3 !== null) {
            if (base === "le" || base === "be") {
              endian = base;
              base = 10;
            }
            this._init(number3 || 0, base || 10, endian || "be");
          }
        }
        if (typeof module2 === "object") {
          module2.exports = BN2;
        } else {
          exports2.BN = BN2;
        }
        BN2.BN = BN2;
        BN2.wordSize = 26;
        var Buffer5;
        try {
          if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
            Buffer5 = window.Buffer;
          } else {
            Buffer5 = require_buffer2().Buffer;
          }
        } catch (e) {
        }
        BN2.isBN = function isBN(num) {
          if (num instanceof BN2) {
            return true;
          }
          return num !== null && typeof num === "object" && num.constructor.wordSize === BN2.wordSize && Array.isArray(num.words);
        };
        BN2.max = function max(left, right) {
          if (left.cmp(right) > 0) return left;
          return right;
        };
        BN2.min = function min(left, right) {
          if (left.cmp(right) < 0) return left;
          return right;
        };
        BN2.prototype._init = function init2(number3, base, endian) {
          if (typeof number3 === "number") {
            return this._initNumber(number3, base, endian);
          }
          if (typeof number3 === "object") {
            return this._initArray(number3, base, endian);
          }
          if (base === "hex") {
            base = 16;
          }
          assert4(base === (base | 0) && base >= 2 && base <= 36);
          number3 = number3.toString().replace(/\s+/g, "");
          var start = 0;
          if (number3[0] === "-") {
            start++;
            this.negative = 1;
          }
          if (start < number3.length) {
            if (base === 16) {
              this._parseHex(number3, start, endian);
            } else {
              this._parseBase(number3, base, start);
              if (endian === "le") {
                this._initArray(this.toArray(), base, endian);
              }
            }
          }
        };
        BN2.prototype._initNumber = function _initNumber(number3, base, endian) {
          if (number3 < 0) {
            this.negative = 1;
            number3 = -number3;
          }
          if (number3 < 67108864) {
            this.words = [number3 & 67108863];
            this.length = 1;
          } else if (number3 < 4503599627370496) {
            this.words = [
              number3 & 67108863,
              number3 / 67108864 & 67108863
            ];
            this.length = 2;
          } else {
            assert4(number3 < 9007199254740992);
            this.words = [
              number3 & 67108863,
              number3 / 67108864 & 67108863,
              1
            ];
            this.length = 3;
          }
          if (endian !== "le") return;
          this._initArray(this.toArray(), base, endian);
        };
        BN2.prototype._initArray = function _initArray(number3, base, endian) {
          assert4(typeof number3.length === "number");
          if (number3.length <= 0) {
            this.words = [0];
            this.length = 1;
            return this;
          }
          this.length = Math.ceil(number3.length / 3);
          this.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
          }
          var j, w;
          var off = 0;
          if (endian === "be") {
            for (i = number3.length - 1, j = 0; i >= 0; i -= 3) {
              w = number3[i] | number3[i - 1] << 8 | number3[i - 2] << 16;
              this.words[j] |= w << off & 67108863;
              this.words[j + 1] = w >>> 26 - off & 67108863;
              off += 24;
              if (off >= 26) {
                off -= 26;
                j++;
              }
            }
          } else if (endian === "le") {
            for (i = 0, j = 0; i < number3.length; i += 3) {
              w = number3[i] | number3[i + 1] << 8 | number3[i + 2] << 16;
              this.words[j] |= w << off & 67108863;
              this.words[j + 1] = w >>> 26 - off & 67108863;
              off += 24;
              if (off >= 26) {
                off -= 26;
                j++;
              }
            }
          }
          return this._strip();
        };
        function parseHex4Bits(string2, index) {
          var c = string2.charCodeAt(index);
          if (c >= 48 && c <= 57) {
            return c - 48;
          } else if (c >= 65 && c <= 70) {
            return c - 55;
          } else if (c >= 97 && c <= 102) {
            return c - 87;
          } else {
            assert4(false, "Invalid character in " + string2);
          }
        }
        function parseHexByte(string2, lowerBound, index) {
          var r = parseHex4Bits(string2, index);
          if (index - 1 >= lowerBound) {
            r |= parseHex4Bits(string2, index - 1) << 4;
          }
          return r;
        }
        BN2.prototype._parseHex = function _parseHex(number3, start, endian) {
          this.length = Math.ceil((number3.length - start) / 6);
          this.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
          }
          var off = 0;
          var j = 0;
          var w;
          if (endian === "be") {
            for (i = number3.length - 1; i >= start; i -= 2) {
              w = parseHexByte(number3, start, i) << off;
              this.words[j] |= w & 67108863;
              if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
              } else {
                off += 8;
              }
            }
          } else {
            var parseLength = number3.length - start;
            for (i = parseLength % 2 === 0 ? start + 1 : start; i < number3.length; i += 2) {
              w = parseHexByte(number3, start, i) << off;
              this.words[j] |= w & 67108863;
              if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
              } else {
                off += 8;
              }
            }
          }
          this._strip();
        };
        function parseBase(str, start, end, mul) {
          var r = 0;
          var b2 = 0;
          var len = Math.min(str.length, end);
          for (var i = start; i < len; i++) {
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            if (c >= 49) {
              b2 = c - 49 + 10;
            } else if (c >= 17) {
              b2 = c - 17 + 10;
            } else {
              b2 = c;
            }
            assert4(c >= 0 && b2 < mul, "Invalid character");
            r += b2;
          }
          return r;
        }
        BN2.prototype._parseBase = function _parseBase(number3, base, start) {
          this.words = [0];
          this.length = 1;
          for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
            limbLen++;
          }
          limbLen--;
          limbPow = limbPow / base | 0;
          var total = number3.length - start;
          var mod3 = total % limbLen;
          var end = Math.min(total, total - mod3) + start;
          var word = 0;
          for (var i = start; i < end; i += limbLen) {
            word = parseBase(number3, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          if (mod3 !== 0) {
            var pow3 = 1;
            word = parseBase(number3, i, number3.length, base);
            for (i = 0; i < mod3; i++) {
              pow3 *= base;
            }
            this.imuln(pow3);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          this._strip();
        };
        BN2.prototype.copy = function copy4(dest) {
          dest.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            dest.words[i] = this.words[i];
          }
          dest.length = this.length;
          dest.negative = this.negative;
          dest.red = this.red;
        };
        function move(dest, src) {
          dest.words = src.words;
          dest.length = src.length;
          dest.negative = src.negative;
          dest.red = src.red;
        }
        BN2.prototype._move = function _move(dest) {
          move(dest, this);
        };
        BN2.prototype.clone = function clone() {
          var r = new BN2(null);
          this.copy(r);
          return r;
        };
        BN2.prototype._expand = function _expand(size) {
          while (this.length < size) {
            this.words[this.length++] = 0;
          }
          return this;
        };
        BN2.prototype._strip = function strip() {
          while (this.length > 1 && this.words[this.length - 1] === 0) {
            this.length--;
          }
          return this._normSign();
        };
        BN2.prototype._normSign = function _normSign() {
          if (this.length === 1 && this.words[0] === 0) {
            this.negative = 0;
          }
          return this;
        };
        if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
          try {
            BN2.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
          } catch (e) {
            BN2.prototype.inspect = inspect;
          }
        } else {
          BN2.prototype.inspect = inspect;
        }
        function inspect() {
          return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
        }
        var zeros2 = [
          "",
          "0",
          "00",
          "000",
          "0000",
          "00000",
          "000000",
          "0000000",
          "00000000",
          "000000000",
          "0000000000",
          "00000000000",
          "000000000000",
          "0000000000000",
          "00000000000000",
          "000000000000000",
          "0000000000000000",
          "00000000000000000",
          "000000000000000000",
          "0000000000000000000",
          "00000000000000000000",
          "000000000000000000000",
          "0000000000000000000000",
          "00000000000000000000000",
          "000000000000000000000000",
          "0000000000000000000000000"
        ];
        var groupSizes = [
          0,
          0,
          25,
          16,
          12,
          11,
          10,
          9,
          8,
          8,
          7,
          7,
          7,
          7,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ];
        var groupBases = [
          0,
          0,
          33554432,
          43046721,
          16777216,
          48828125,
          60466176,
          40353607,
          16777216,
          43046721,
          1e7,
          19487171,
          35831808,
          62748517,
          7529536,
          11390625,
          16777216,
          24137569,
          34012224,
          47045881,
          64e6,
          4084101,
          5153632,
          6436343,
          7962624,
          9765625,
          11881376,
          14348907,
          17210368,
          20511149,
          243e5,
          28629151,
          33554432,
          39135393,
          45435424,
          52521875,
          60466176
        ];
        BN2.prototype.toString = function toString2(base, padding2) {
          base = base || 10;
          padding2 = padding2 | 0 || 1;
          var out;
          if (base === 16 || base === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for (var i = 0; i < this.length; i++) {
              var w = this.words[i];
              var word = ((w << off | carry) & 16777215).toString(16);
              carry = w >>> 24 - off & 16777215;
              off += 2;
              if (off >= 26) {
                off -= 26;
                i--;
              }
              if (carry !== 0 || i !== this.length - 1) {
                out = zeros2[6 - word.length] + word + out;
              } else {
                out = word + out;
              }
            }
            if (carry !== 0) {
              out = carry.toString(16) + out;
            }
            while (out.length % padding2 !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          if (base === (base | 0) && base >= 2 && base <= 36) {
            var groupSize = groupSizes[base];
            var groupBase = groupBases[base];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while (!c.isZero()) {
              var r = c.modrn(groupBase).toString(base);
              c = c.idivn(groupBase);
              if (!c.isZero()) {
                out = zeros2[groupSize - r.length] + r + out;
              } else {
                out = r + out;
              }
            }
            if (this.isZero()) {
              out = "0" + out;
            }
            while (out.length % padding2 !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          assert4(false, "Base should be between 2 and 36");
        };
        BN2.prototype.toNumber = function toNumber2() {
          var ret = this.words[0];
          if (this.length === 2) {
            ret += this.words[1] * 67108864;
          } else if (this.length === 3 && this.words[2] === 1) {
            ret += 4503599627370496 + this.words[1] * 67108864;
          } else if (this.length > 2) {
            assert4(false, "Number can only safely store up to 53 bits");
          }
          return this.negative !== 0 ? -ret : ret;
        };
        BN2.prototype.toJSON = function toJSON() {
          return this.toString(16, 2);
        };
        if (Buffer5) {
          BN2.prototype.toBuffer = function toBuffer2(endian, length) {
            return this.toArrayLike(Buffer5, endian, length);
          };
        }
        BN2.prototype.toArray = function toArray(endian, length) {
          return this.toArrayLike(Array, endian, length);
        };
        var allocate = function allocate2(ArrayType, size) {
          if (ArrayType.allocUnsafe) {
            return ArrayType.allocUnsafe(size);
          }
          return new ArrayType(size);
        };
        BN2.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
          this._strip();
          var byteLength = this.byteLength();
          var reqLength = length || Math.max(1, byteLength);
          assert4(byteLength <= reqLength, "byte array longer than desired length");
          assert4(reqLength > 0, "Requested array length <= 0");
          var res = allocate(ArrayType, reqLength);
          var postfix = endian === "le" ? "LE" : "BE";
          this["_toArrayLike" + postfix](res, byteLength);
          return res;
        };
        BN2.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
          var position = 0;
          var carry = 0;
          for (var i = 0, shift = 0; i < this.length; i++) {
            var word = this.words[i] << shift | carry;
            res[position++] = word & 255;
            if (position < res.length) {
              res[position++] = word >> 8 & 255;
            }
            if (position < res.length) {
              res[position++] = word >> 16 & 255;
            }
            if (shift === 6) {
              if (position < res.length) {
                res[position++] = word >> 24 & 255;
              }
              carry = 0;
              shift = 0;
            } else {
              carry = word >>> 24;
              shift += 2;
            }
          }
          if (position < res.length) {
            res[position++] = carry;
            while (position < res.length) {
              res[position++] = 0;
            }
          }
        };
        BN2.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
          var position = res.length - 1;
          var carry = 0;
          for (var i = 0, shift = 0; i < this.length; i++) {
            var word = this.words[i] << shift | carry;
            res[position--] = word & 255;
            if (position >= 0) {
              res[position--] = word >> 8 & 255;
            }
            if (position >= 0) {
              res[position--] = word >> 16 & 255;
            }
            if (shift === 6) {
              if (position >= 0) {
                res[position--] = word >> 24 & 255;
              }
              carry = 0;
              shift = 0;
            } else {
              carry = word >>> 24;
              shift += 2;
            }
          }
          if (position >= 0) {
            res[position--] = carry;
            while (position >= 0) {
              res[position--] = 0;
            }
          }
        };
        if (Math.clz32) {
          BN2.prototype._countBits = function _countBits(w) {
            return 32 - Math.clz32(w);
          };
        } else {
          BN2.prototype._countBits = function _countBits(w) {
            var t = w;
            var r = 0;
            if (t >= 4096) {
              r += 13;
              t >>>= 13;
            }
            if (t >= 64) {
              r += 7;
              t >>>= 7;
            }
            if (t >= 8) {
              r += 4;
              t >>>= 4;
            }
            if (t >= 2) {
              r += 2;
              t >>>= 2;
            }
            return r + t;
          };
        }
        BN2.prototype._zeroBits = function _zeroBits(w) {
          if (w === 0) return 26;
          var t = w;
          var r = 0;
          if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
          }
          if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
          }
          if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
          }
          if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
          }
          if ((t & 1) === 0) {
            r++;
          }
          return r;
        };
        BN2.prototype.bitLength = function bitLength() {
          var w = this.words[this.length - 1];
          var hi = this._countBits(w);
          return (this.length - 1) * 26 + hi;
        };
        function toBitArray(num) {
          var w = new Array(num.bitLength());
          for (var bit = 0; bit < w.length; bit++) {
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = num.words[off] >>> wbit & 1;
          }
          return w;
        }
        BN2.prototype.zeroBits = function zeroBits() {
          if (this.isZero()) return 0;
          var r = 0;
          for (var i = 0; i < this.length; i++) {
            var b2 = this._zeroBits(this.words[i]);
            r += b2;
            if (b2 !== 26) break;
          }
          return r;
        };
        BN2.prototype.byteLength = function byteLength() {
          return Math.ceil(this.bitLength() / 8);
        };
        BN2.prototype.toTwos = function toTwos2(width) {
          if (this.negative !== 0) {
            return this.abs().inotn(width).iaddn(1);
          }
          return this.clone();
        };
        BN2.prototype.fromTwos = function fromTwos2(width) {
          if (this.testn(width - 1)) {
            return this.notn(width).iaddn(1).ineg();
          }
          return this.clone();
        };
        BN2.prototype.isNeg = function isNeg() {
          return this.negative !== 0;
        };
        BN2.prototype.neg = function neg() {
          return this.clone().ineg();
        };
        BN2.prototype.ineg = function ineg() {
          if (!this.isZero()) {
            this.negative ^= 1;
          }
          return this;
        };
        BN2.prototype.iuor = function iuor(num) {
          while (this.length < num.length) {
            this.words[this.length++] = 0;
          }
          for (var i = 0; i < num.length; i++) {
            this.words[i] = this.words[i] | num.words[i];
          }
          return this._strip();
        };
        BN2.prototype.ior = function ior(num) {
          assert4((this.negative | num.negative) === 0);
          return this.iuor(num);
        };
        BN2.prototype.or = function or(num) {
          if (this.length > num.length) return this.clone().ior(num);
          return num.clone().ior(this);
        };
        BN2.prototype.uor = function uor(num) {
          if (this.length > num.length) return this.clone().iuor(num);
          return num.clone().iuor(this);
        };
        BN2.prototype.iuand = function iuand(num) {
          var b2;
          if (this.length > num.length) {
            b2 = num;
          } else {
            b2 = this;
          }
          for (var i = 0; i < b2.length; i++) {
            this.words[i] = this.words[i] & num.words[i];
          }
          this.length = b2.length;
          return this._strip();
        };
        BN2.prototype.iand = function iand(num) {
          assert4((this.negative | num.negative) === 0);
          return this.iuand(num);
        };
        BN2.prototype.and = function and(num) {
          if (this.length > num.length) return this.clone().iand(num);
          return num.clone().iand(this);
        };
        BN2.prototype.uand = function uand(num) {
          if (this.length > num.length) return this.clone().iuand(num);
          return num.clone().iuand(this);
        };
        BN2.prototype.iuxor = function iuxor(num) {
          var a;
          var b2;
          if (this.length > num.length) {
            a = this;
            b2 = num;
          } else {
            a = num;
            b2 = this;
          }
          for (var i = 0; i < b2.length; i++) {
            this.words[i] = a.words[i] ^ b2.words[i];
          }
          if (this !== a) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          this.length = a.length;
          return this._strip();
        };
        BN2.prototype.ixor = function ixor(num) {
          assert4((this.negative | num.negative) === 0);
          return this.iuxor(num);
        };
        BN2.prototype.xor = function xor(num) {
          if (this.length > num.length) return this.clone().ixor(num);
          return num.clone().ixor(this);
        };
        BN2.prototype.uxor = function uxor(num) {
          if (this.length > num.length) return this.clone().iuxor(num);
          return num.clone().iuxor(this);
        };
        BN2.prototype.inotn = function inotn(width) {
          assert4(typeof width === "number" && width >= 0);
          var bytesNeeded = Math.ceil(width / 26) | 0;
          var bitsLeft = width % 26;
          this._expand(bytesNeeded);
          if (bitsLeft > 0) {
            bytesNeeded--;
          }
          for (var i = 0; i < bytesNeeded; i++) {
            this.words[i] = ~this.words[i] & 67108863;
          }
          if (bitsLeft > 0) {
            this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
          }
          return this._strip();
        };
        BN2.prototype.notn = function notn(width) {
          return this.clone().inotn(width);
        };
        BN2.prototype.setn = function setn(bit, val) {
          assert4(typeof bit === "number" && bit >= 0);
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          this._expand(off + 1);
          if (val) {
            this.words[off] = this.words[off] | 1 << wbit;
          } else {
            this.words[off] = this.words[off] & ~(1 << wbit);
          }
          return this._strip();
        };
        BN2.prototype.iadd = function iadd(num) {
          var r;
          if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
          } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
          }
          var a, b2;
          if (this.length > num.length) {
            a = this;
            b2 = num;
          } else {
            a = num;
            b2 = this;
          }
          var carry = 0;
          for (var i = 0; i < b2.length; i++) {
            r = (a.words[i] | 0) + (b2.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
          }
          for (; carry !== 0 && i < a.length; i++) {
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
          }
          this.length = a.length;
          if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
          } else if (a !== this) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          return this;
        };
        BN2.prototype.add = function add3(num) {
          var res;
          if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
          } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
          }
          if (this.length > num.length) return this.clone().iadd(num);
          return num.clone().iadd(this);
        };
        BN2.prototype.isub = function isub(num) {
          if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
          } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
          }
          var cmp = this.cmp(num);
          if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
          }
          var a, b2;
          if (cmp > 0) {
            a = this;
            b2 = num;
          } else {
            a = num;
            b2 = this;
          }
          var carry = 0;
          for (var i = 0; i < b2.length; i++) {
            r = (a.words[i] | 0) - (b2.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
          }
          for (; carry !== 0 && i < a.length; i++) {
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
          }
          if (carry === 0 && i < a.length && a !== this) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          this.length = Math.max(this.length, i);
          if (a !== this) {
            this.negative = 1;
          }
          return this._strip();
        };
        BN2.prototype.sub = function sub(num) {
          return this.clone().isub(num);
        };
        function smallMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          var len = self2.length + num.length | 0;
          out.length = len;
          len = len - 1 | 0;
          var a = self2.words[0] | 0;
          var b2 = num.words[0] | 0;
          var r = a * b2;
          var lo = r & 67108863;
          var carry = r / 67108864 | 0;
          out.words[0] = lo;
          for (var k = 1; k < len; k++) {
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i = k - j | 0;
              a = self2.words[i] | 0;
              b2 = num.words[j] | 0;
              r = a * b2 + rword;
              ncarry += r / 67108864 | 0;
              rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
          }
          if (carry !== 0) {
            out.words[k] = carry | 0;
          } else {
            out.length--;
          }
          return out._strip();
        }
        var comb10MulTo = function comb10MulTo2(self2, num, out) {
          var a = self2.words;
          var b2 = num.words;
          var o = out.words;
          var c = 0;
          var lo;
          var mid;
          var hi;
          var a0 = a[0] | 0;
          var al0 = a0 & 8191;
          var ah0 = a0 >>> 13;
          var a1 = a[1] | 0;
          var al1 = a1 & 8191;
          var ah1 = a1 >>> 13;
          var a2 = a[2] | 0;
          var al2 = a2 & 8191;
          var ah2 = a2 >>> 13;
          var a3 = a[3] | 0;
          var al3 = a3 & 8191;
          var ah3 = a3 >>> 13;
          var a4 = a[4] | 0;
          var al4 = a4 & 8191;
          var ah4 = a4 >>> 13;
          var a5 = a[5] | 0;
          var al5 = a5 & 8191;
          var ah5 = a5 >>> 13;
          var a6 = a[6] | 0;
          var al6 = a6 & 8191;
          var ah6 = a6 >>> 13;
          var a7 = a[7] | 0;
          var al7 = a7 & 8191;
          var ah7 = a7 >>> 13;
          var a8 = a[8] | 0;
          var al8 = a8 & 8191;
          var ah8 = a8 >>> 13;
          var a9 = a[9] | 0;
          var al9 = a9 & 8191;
          var ah9 = a9 >>> 13;
          var b0 = b2[0] | 0;
          var bl0 = b0 & 8191;
          var bh0 = b0 >>> 13;
          var b1 = b2[1] | 0;
          var bl1 = b1 & 8191;
          var bh1 = b1 >>> 13;
          var b22 = b2[2] | 0;
          var bl2 = b22 & 8191;
          var bh2 = b22 >>> 13;
          var b3 = b2[3] | 0;
          var bl3 = b3 & 8191;
          var bh3 = b3 >>> 13;
          var b4 = b2[4] | 0;
          var bl4 = b4 & 8191;
          var bh4 = b4 >>> 13;
          var b5 = b2[5] | 0;
          var bl5 = b5 & 8191;
          var bh5 = b5 >>> 13;
          var b6 = b2[6] | 0;
          var bl6 = b6 & 8191;
          var bh6 = b6 >>> 13;
          var b7 = b2[7] | 0;
          var bl7 = b7 & 8191;
          var bh7 = b7 >>> 13;
          var b8 = b2[8] | 0;
          var bl8 = b8 & 8191;
          var bh8 = b8 >>> 13;
          var b9 = b2[9] | 0;
          var bl9 = b9 & 8191;
          var bh9 = b9 >>> 13;
          out.negative = self2.negative ^ num.negative;
          out.length = 19;
          lo = Math.imul(al0, bl0);
          mid = Math.imul(al0, bh0);
          mid = mid + Math.imul(ah0, bl0) | 0;
          hi = Math.imul(ah0, bh0);
          var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
          w0 &= 67108863;
          lo = Math.imul(al1, bl0);
          mid = Math.imul(al1, bh0);
          mid = mid + Math.imul(ah1, bl0) | 0;
          hi = Math.imul(ah1, bh0);
          lo = lo + Math.imul(al0, bl1) | 0;
          mid = mid + Math.imul(al0, bh1) | 0;
          mid = mid + Math.imul(ah0, bl1) | 0;
          hi = hi + Math.imul(ah0, bh1) | 0;
          var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
          w1 &= 67108863;
          lo = Math.imul(al2, bl0);
          mid = Math.imul(al2, bh0);
          mid = mid + Math.imul(ah2, bl0) | 0;
          hi = Math.imul(ah2, bh0);
          lo = lo + Math.imul(al1, bl1) | 0;
          mid = mid + Math.imul(al1, bh1) | 0;
          mid = mid + Math.imul(ah1, bl1) | 0;
          hi = hi + Math.imul(ah1, bh1) | 0;
          lo = lo + Math.imul(al0, bl2) | 0;
          mid = mid + Math.imul(al0, bh2) | 0;
          mid = mid + Math.imul(ah0, bl2) | 0;
          hi = hi + Math.imul(ah0, bh2) | 0;
          var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
          w2 &= 67108863;
          lo = Math.imul(al3, bl0);
          mid = Math.imul(al3, bh0);
          mid = mid + Math.imul(ah3, bl0) | 0;
          hi = Math.imul(ah3, bh0);
          lo = lo + Math.imul(al2, bl1) | 0;
          mid = mid + Math.imul(al2, bh1) | 0;
          mid = mid + Math.imul(ah2, bl1) | 0;
          hi = hi + Math.imul(ah2, bh1) | 0;
          lo = lo + Math.imul(al1, bl2) | 0;
          mid = mid + Math.imul(al1, bh2) | 0;
          mid = mid + Math.imul(ah1, bl2) | 0;
          hi = hi + Math.imul(ah1, bh2) | 0;
          lo = lo + Math.imul(al0, bl3) | 0;
          mid = mid + Math.imul(al0, bh3) | 0;
          mid = mid + Math.imul(ah0, bl3) | 0;
          hi = hi + Math.imul(ah0, bh3) | 0;
          var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
          w3 &= 67108863;
          lo = Math.imul(al4, bl0);
          mid = Math.imul(al4, bh0);
          mid = mid + Math.imul(ah4, bl0) | 0;
          hi = Math.imul(ah4, bh0);
          lo = lo + Math.imul(al3, bl1) | 0;
          mid = mid + Math.imul(al3, bh1) | 0;
          mid = mid + Math.imul(ah3, bl1) | 0;
          hi = hi + Math.imul(ah3, bh1) | 0;
          lo = lo + Math.imul(al2, bl2) | 0;
          mid = mid + Math.imul(al2, bh2) | 0;
          mid = mid + Math.imul(ah2, bl2) | 0;
          hi = hi + Math.imul(ah2, bh2) | 0;
          lo = lo + Math.imul(al1, bl3) | 0;
          mid = mid + Math.imul(al1, bh3) | 0;
          mid = mid + Math.imul(ah1, bl3) | 0;
          hi = hi + Math.imul(ah1, bh3) | 0;
          lo = lo + Math.imul(al0, bl4) | 0;
          mid = mid + Math.imul(al0, bh4) | 0;
          mid = mid + Math.imul(ah0, bl4) | 0;
          hi = hi + Math.imul(ah0, bh4) | 0;
          var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
          w4 &= 67108863;
          lo = Math.imul(al5, bl0);
          mid = Math.imul(al5, bh0);
          mid = mid + Math.imul(ah5, bl0) | 0;
          hi = Math.imul(ah5, bh0);
          lo = lo + Math.imul(al4, bl1) | 0;
          mid = mid + Math.imul(al4, bh1) | 0;
          mid = mid + Math.imul(ah4, bl1) | 0;
          hi = hi + Math.imul(ah4, bh1) | 0;
          lo = lo + Math.imul(al3, bl2) | 0;
          mid = mid + Math.imul(al3, bh2) | 0;
          mid = mid + Math.imul(ah3, bl2) | 0;
          hi = hi + Math.imul(ah3, bh2) | 0;
          lo = lo + Math.imul(al2, bl3) | 0;
          mid = mid + Math.imul(al2, bh3) | 0;
          mid = mid + Math.imul(ah2, bl3) | 0;
          hi = hi + Math.imul(ah2, bh3) | 0;
          lo = lo + Math.imul(al1, bl4) | 0;
          mid = mid + Math.imul(al1, bh4) | 0;
          mid = mid + Math.imul(ah1, bl4) | 0;
          hi = hi + Math.imul(ah1, bh4) | 0;
          lo = lo + Math.imul(al0, bl5) | 0;
          mid = mid + Math.imul(al0, bh5) | 0;
          mid = mid + Math.imul(ah0, bl5) | 0;
          hi = hi + Math.imul(ah0, bh5) | 0;
          var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
          w5 &= 67108863;
          lo = Math.imul(al6, bl0);
          mid = Math.imul(al6, bh0);
          mid = mid + Math.imul(ah6, bl0) | 0;
          hi = Math.imul(ah6, bh0);
          lo = lo + Math.imul(al5, bl1) | 0;
          mid = mid + Math.imul(al5, bh1) | 0;
          mid = mid + Math.imul(ah5, bl1) | 0;
          hi = hi + Math.imul(ah5, bh1) | 0;
          lo = lo + Math.imul(al4, bl2) | 0;
          mid = mid + Math.imul(al4, bh2) | 0;
          mid = mid + Math.imul(ah4, bl2) | 0;
          hi = hi + Math.imul(ah4, bh2) | 0;
          lo = lo + Math.imul(al3, bl3) | 0;
          mid = mid + Math.imul(al3, bh3) | 0;
          mid = mid + Math.imul(ah3, bl3) | 0;
          hi = hi + Math.imul(ah3, bh3) | 0;
          lo = lo + Math.imul(al2, bl4) | 0;
          mid = mid + Math.imul(al2, bh4) | 0;
          mid = mid + Math.imul(ah2, bl4) | 0;
          hi = hi + Math.imul(ah2, bh4) | 0;
          lo = lo + Math.imul(al1, bl5) | 0;
          mid = mid + Math.imul(al1, bh5) | 0;
          mid = mid + Math.imul(ah1, bl5) | 0;
          hi = hi + Math.imul(ah1, bh5) | 0;
          lo = lo + Math.imul(al0, bl6) | 0;
          mid = mid + Math.imul(al0, bh6) | 0;
          mid = mid + Math.imul(ah0, bl6) | 0;
          hi = hi + Math.imul(ah0, bh6) | 0;
          var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
          w6 &= 67108863;
          lo = Math.imul(al7, bl0);
          mid = Math.imul(al7, bh0);
          mid = mid + Math.imul(ah7, bl0) | 0;
          hi = Math.imul(ah7, bh0);
          lo = lo + Math.imul(al6, bl1) | 0;
          mid = mid + Math.imul(al6, bh1) | 0;
          mid = mid + Math.imul(ah6, bl1) | 0;
          hi = hi + Math.imul(ah6, bh1) | 0;
          lo = lo + Math.imul(al5, bl2) | 0;
          mid = mid + Math.imul(al5, bh2) | 0;
          mid = mid + Math.imul(ah5, bl2) | 0;
          hi = hi + Math.imul(ah5, bh2) | 0;
          lo = lo + Math.imul(al4, bl3) | 0;
          mid = mid + Math.imul(al4, bh3) | 0;
          mid = mid + Math.imul(ah4, bl3) | 0;
          hi = hi + Math.imul(ah4, bh3) | 0;
          lo = lo + Math.imul(al3, bl4) | 0;
          mid = mid + Math.imul(al3, bh4) | 0;
          mid = mid + Math.imul(ah3, bl4) | 0;
          hi = hi + Math.imul(ah3, bh4) | 0;
          lo = lo + Math.imul(al2, bl5) | 0;
          mid = mid + Math.imul(al2, bh5) | 0;
          mid = mid + Math.imul(ah2, bl5) | 0;
          hi = hi + Math.imul(ah2, bh5) | 0;
          lo = lo + Math.imul(al1, bl6) | 0;
          mid = mid + Math.imul(al1, bh6) | 0;
          mid = mid + Math.imul(ah1, bl6) | 0;
          hi = hi + Math.imul(ah1, bh6) | 0;
          lo = lo + Math.imul(al0, bl7) | 0;
          mid = mid + Math.imul(al0, bh7) | 0;
          mid = mid + Math.imul(ah0, bl7) | 0;
          hi = hi + Math.imul(ah0, bh7) | 0;
          var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
          w7 &= 67108863;
          lo = Math.imul(al8, bl0);
          mid = Math.imul(al8, bh0);
          mid = mid + Math.imul(ah8, bl0) | 0;
          hi = Math.imul(ah8, bh0);
          lo = lo + Math.imul(al7, bl1) | 0;
          mid = mid + Math.imul(al7, bh1) | 0;
          mid = mid + Math.imul(ah7, bl1) | 0;
          hi = hi + Math.imul(ah7, bh1) | 0;
          lo = lo + Math.imul(al6, bl2) | 0;
          mid = mid + Math.imul(al6, bh2) | 0;
          mid = mid + Math.imul(ah6, bl2) | 0;
          hi = hi + Math.imul(ah6, bh2) | 0;
          lo = lo + Math.imul(al5, bl3) | 0;
          mid = mid + Math.imul(al5, bh3) | 0;
          mid = mid + Math.imul(ah5, bl3) | 0;
          hi = hi + Math.imul(ah5, bh3) | 0;
          lo = lo + Math.imul(al4, bl4) | 0;
          mid = mid + Math.imul(al4, bh4) | 0;
          mid = mid + Math.imul(ah4, bl4) | 0;
          hi = hi + Math.imul(ah4, bh4) | 0;
          lo = lo + Math.imul(al3, bl5) | 0;
          mid = mid + Math.imul(al3, bh5) | 0;
          mid = mid + Math.imul(ah3, bl5) | 0;
          hi = hi + Math.imul(ah3, bh5) | 0;
          lo = lo + Math.imul(al2, bl6) | 0;
          mid = mid + Math.imul(al2, bh6) | 0;
          mid = mid + Math.imul(ah2, bl6) | 0;
          hi = hi + Math.imul(ah2, bh6) | 0;
          lo = lo + Math.imul(al1, bl7) | 0;
          mid = mid + Math.imul(al1, bh7) | 0;
          mid = mid + Math.imul(ah1, bl7) | 0;
          hi = hi + Math.imul(ah1, bh7) | 0;
          lo = lo + Math.imul(al0, bl8) | 0;
          mid = mid + Math.imul(al0, bh8) | 0;
          mid = mid + Math.imul(ah0, bl8) | 0;
          hi = hi + Math.imul(ah0, bh8) | 0;
          var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
          w8 &= 67108863;
          lo = Math.imul(al9, bl0);
          mid = Math.imul(al9, bh0);
          mid = mid + Math.imul(ah9, bl0) | 0;
          hi = Math.imul(ah9, bh0);
          lo = lo + Math.imul(al8, bl1) | 0;
          mid = mid + Math.imul(al8, bh1) | 0;
          mid = mid + Math.imul(ah8, bl1) | 0;
          hi = hi + Math.imul(ah8, bh1) | 0;
          lo = lo + Math.imul(al7, bl2) | 0;
          mid = mid + Math.imul(al7, bh2) | 0;
          mid = mid + Math.imul(ah7, bl2) | 0;
          hi = hi + Math.imul(ah7, bh2) | 0;
          lo = lo + Math.imul(al6, bl3) | 0;
          mid = mid + Math.imul(al6, bh3) | 0;
          mid = mid + Math.imul(ah6, bl3) | 0;
          hi = hi + Math.imul(ah6, bh3) | 0;
          lo = lo + Math.imul(al5, bl4) | 0;
          mid = mid + Math.imul(al5, bh4) | 0;
          mid = mid + Math.imul(ah5, bl4) | 0;
          hi = hi + Math.imul(ah5, bh4) | 0;
          lo = lo + Math.imul(al4, bl5) | 0;
          mid = mid + Math.imul(al4, bh5) | 0;
          mid = mid + Math.imul(ah4, bl5) | 0;
          hi = hi + Math.imul(ah4, bh5) | 0;
          lo = lo + Math.imul(al3, bl6) | 0;
          mid = mid + Math.imul(al3, bh6) | 0;
          mid = mid + Math.imul(ah3, bl6) | 0;
          hi = hi + Math.imul(ah3, bh6) | 0;
          lo = lo + Math.imul(al2, bl7) | 0;
          mid = mid + Math.imul(al2, bh7) | 0;
          mid = mid + Math.imul(ah2, bl7) | 0;
          hi = hi + Math.imul(ah2, bh7) | 0;
          lo = lo + Math.imul(al1, bl8) | 0;
          mid = mid + Math.imul(al1, bh8) | 0;
          mid = mid + Math.imul(ah1, bl8) | 0;
          hi = hi + Math.imul(ah1, bh8) | 0;
          lo = lo + Math.imul(al0, bl9) | 0;
          mid = mid + Math.imul(al0, bh9) | 0;
          mid = mid + Math.imul(ah0, bl9) | 0;
          hi = hi + Math.imul(ah0, bh9) | 0;
          var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
          w9 &= 67108863;
          lo = Math.imul(al9, bl1);
          mid = Math.imul(al9, bh1);
          mid = mid + Math.imul(ah9, bl1) | 0;
          hi = Math.imul(ah9, bh1);
          lo = lo + Math.imul(al8, bl2) | 0;
          mid = mid + Math.imul(al8, bh2) | 0;
          mid = mid + Math.imul(ah8, bl2) | 0;
          hi = hi + Math.imul(ah8, bh2) | 0;
          lo = lo + Math.imul(al7, bl3) | 0;
          mid = mid + Math.imul(al7, bh3) | 0;
          mid = mid + Math.imul(ah7, bl3) | 0;
          hi = hi + Math.imul(ah7, bh3) | 0;
          lo = lo + Math.imul(al6, bl4) | 0;
          mid = mid + Math.imul(al6, bh4) | 0;
          mid = mid + Math.imul(ah6, bl4) | 0;
          hi = hi + Math.imul(ah6, bh4) | 0;
          lo = lo + Math.imul(al5, bl5) | 0;
          mid = mid + Math.imul(al5, bh5) | 0;
          mid = mid + Math.imul(ah5, bl5) | 0;
          hi = hi + Math.imul(ah5, bh5) | 0;
          lo = lo + Math.imul(al4, bl6) | 0;
          mid = mid + Math.imul(al4, bh6) | 0;
          mid = mid + Math.imul(ah4, bl6) | 0;
          hi = hi + Math.imul(ah4, bh6) | 0;
          lo = lo + Math.imul(al3, bl7) | 0;
          mid = mid + Math.imul(al3, bh7) | 0;
          mid = mid + Math.imul(ah3, bl7) | 0;
          hi = hi + Math.imul(ah3, bh7) | 0;
          lo = lo + Math.imul(al2, bl8) | 0;
          mid = mid + Math.imul(al2, bh8) | 0;
          mid = mid + Math.imul(ah2, bl8) | 0;
          hi = hi + Math.imul(ah2, bh8) | 0;
          lo = lo + Math.imul(al1, bl9) | 0;
          mid = mid + Math.imul(al1, bh9) | 0;
          mid = mid + Math.imul(ah1, bl9) | 0;
          hi = hi + Math.imul(ah1, bh9) | 0;
          var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
          w10 &= 67108863;
          lo = Math.imul(al9, bl2);
          mid = Math.imul(al9, bh2);
          mid = mid + Math.imul(ah9, bl2) | 0;
          hi = Math.imul(ah9, bh2);
          lo = lo + Math.imul(al8, bl3) | 0;
          mid = mid + Math.imul(al8, bh3) | 0;
          mid = mid + Math.imul(ah8, bl3) | 0;
          hi = hi + Math.imul(ah8, bh3) | 0;
          lo = lo + Math.imul(al7, bl4) | 0;
          mid = mid + Math.imul(al7, bh4) | 0;
          mid = mid + Math.imul(ah7, bl4) | 0;
          hi = hi + Math.imul(ah7, bh4) | 0;
          lo = lo + Math.imul(al6, bl5) | 0;
          mid = mid + Math.imul(al6, bh5) | 0;
          mid = mid + Math.imul(ah6, bl5) | 0;
          hi = hi + Math.imul(ah6, bh5) | 0;
          lo = lo + Math.imul(al5, bl6) | 0;
          mid = mid + Math.imul(al5, bh6) | 0;
          mid = mid + Math.imul(ah5, bl6) | 0;
          hi = hi + Math.imul(ah5, bh6) | 0;
          lo = lo + Math.imul(al4, bl7) | 0;
          mid = mid + Math.imul(al4, bh7) | 0;
          mid = mid + Math.imul(ah4, bl7) | 0;
          hi = hi + Math.imul(ah4, bh7) | 0;
          lo = lo + Math.imul(al3, bl8) | 0;
          mid = mid + Math.imul(al3, bh8) | 0;
          mid = mid + Math.imul(ah3, bl8) | 0;
          hi = hi + Math.imul(ah3, bh8) | 0;
          lo = lo + Math.imul(al2, bl9) | 0;
          mid = mid + Math.imul(al2, bh9) | 0;
          mid = mid + Math.imul(ah2, bl9) | 0;
          hi = hi + Math.imul(ah2, bh9) | 0;
          var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
          w11 &= 67108863;
          lo = Math.imul(al9, bl3);
          mid = Math.imul(al9, bh3);
          mid = mid + Math.imul(ah9, bl3) | 0;
          hi = Math.imul(ah9, bh3);
          lo = lo + Math.imul(al8, bl4) | 0;
          mid = mid + Math.imul(al8, bh4) | 0;
          mid = mid + Math.imul(ah8, bl4) | 0;
          hi = hi + Math.imul(ah8, bh4) | 0;
          lo = lo + Math.imul(al7, bl5) | 0;
          mid = mid + Math.imul(al7, bh5) | 0;
          mid = mid + Math.imul(ah7, bl5) | 0;
          hi = hi + Math.imul(ah7, bh5) | 0;
          lo = lo + Math.imul(al6, bl6) | 0;
          mid = mid + Math.imul(al6, bh6) | 0;
          mid = mid + Math.imul(ah6, bl6) | 0;
          hi = hi + Math.imul(ah6, bh6) | 0;
          lo = lo + Math.imul(al5, bl7) | 0;
          mid = mid + Math.imul(al5, bh7) | 0;
          mid = mid + Math.imul(ah5, bl7) | 0;
          hi = hi + Math.imul(ah5, bh7) | 0;
          lo = lo + Math.imul(al4, bl8) | 0;
          mid = mid + Math.imul(al4, bh8) | 0;
          mid = mid + Math.imul(ah4, bl8) | 0;
          hi = hi + Math.imul(ah4, bh8) | 0;
          lo = lo + Math.imul(al3, bl9) | 0;
          mid = mid + Math.imul(al3, bh9) | 0;
          mid = mid + Math.imul(ah3, bl9) | 0;
          hi = hi + Math.imul(ah3, bh9) | 0;
          var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
          w12 &= 67108863;
          lo = Math.imul(al9, bl4);
          mid = Math.imul(al9, bh4);
          mid = mid + Math.imul(ah9, bl4) | 0;
          hi = Math.imul(ah9, bh4);
          lo = lo + Math.imul(al8, bl5) | 0;
          mid = mid + Math.imul(al8, bh5) | 0;
          mid = mid + Math.imul(ah8, bl5) | 0;
          hi = hi + Math.imul(ah8, bh5) | 0;
          lo = lo + Math.imul(al7, bl6) | 0;
          mid = mid + Math.imul(al7, bh6) | 0;
          mid = mid + Math.imul(ah7, bl6) | 0;
          hi = hi + Math.imul(ah7, bh6) | 0;
          lo = lo + Math.imul(al6, bl7) | 0;
          mid = mid + Math.imul(al6, bh7) | 0;
          mid = mid + Math.imul(ah6, bl7) | 0;
          hi = hi + Math.imul(ah6, bh7) | 0;
          lo = lo + Math.imul(al5, bl8) | 0;
          mid = mid + Math.imul(al5, bh8) | 0;
          mid = mid + Math.imul(ah5, bl8) | 0;
          hi = hi + Math.imul(ah5, bh8) | 0;
          lo = lo + Math.imul(al4, bl9) | 0;
          mid = mid + Math.imul(al4, bh9) | 0;
          mid = mid + Math.imul(ah4, bl9) | 0;
          hi = hi + Math.imul(ah4, bh9) | 0;
          var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
          w13 &= 67108863;
          lo = Math.imul(al9, bl5);
          mid = Math.imul(al9, bh5);
          mid = mid + Math.imul(ah9, bl5) | 0;
          hi = Math.imul(ah9, bh5);
          lo = lo + Math.imul(al8, bl6) | 0;
          mid = mid + Math.imul(al8, bh6) | 0;
          mid = mid + Math.imul(ah8, bl6) | 0;
          hi = hi + Math.imul(ah8, bh6) | 0;
          lo = lo + Math.imul(al7, bl7) | 0;
          mid = mid + Math.imul(al7, bh7) | 0;
          mid = mid + Math.imul(ah7, bl7) | 0;
          hi = hi + Math.imul(ah7, bh7) | 0;
          lo = lo + Math.imul(al6, bl8) | 0;
          mid = mid + Math.imul(al6, bh8) | 0;
          mid = mid + Math.imul(ah6, bl8) | 0;
          hi = hi + Math.imul(ah6, bh8) | 0;
          lo = lo + Math.imul(al5, bl9) | 0;
          mid = mid + Math.imul(al5, bh9) | 0;
          mid = mid + Math.imul(ah5, bl9) | 0;
          hi = hi + Math.imul(ah5, bh9) | 0;
          var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
          w14 &= 67108863;
          lo = Math.imul(al9, bl6);
          mid = Math.imul(al9, bh6);
          mid = mid + Math.imul(ah9, bl6) | 0;
          hi = Math.imul(ah9, bh6);
          lo = lo + Math.imul(al8, bl7) | 0;
          mid = mid + Math.imul(al8, bh7) | 0;
          mid = mid + Math.imul(ah8, bl7) | 0;
          hi = hi + Math.imul(ah8, bh7) | 0;
          lo = lo + Math.imul(al7, bl8) | 0;
          mid = mid + Math.imul(al7, bh8) | 0;
          mid = mid + Math.imul(ah7, bl8) | 0;
          hi = hi + Math.imul(ah7, bh8) | 0;
          lo = lo + Math.imul(al6, bl9) | 0;
          mid = mid + Math.imul(al6, bh9) | 0;
          mid = mid + Math.imul(ah6, bl9) | 0;
          hi = hi + Math.imul(ah6, bh9) | 0;
          var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
          w15 &= 67108863;
          lo = Math.imul(al9, bl7);
          mid = Math.imul(al9, bh7);
          mid = mid + Math.imul(ah9, bl7) | 0;
          hi = Math.imul(ah9, bh7);
          lo = lo + Math.imul(al8, bl8) | 0;
          mid = mid + Math.imul(al8, bh8) | 0;
          mid = mid + Math.imul(ah8, bl8) | 0;
          hi = hi + Math.imul(ah8, bh8) | 0;
          lo = lo + Math.imul(al7, bl9) | 0;
          mid = mid + Math.imul(al7, bh9) | 0;
          mid = mid + Math.imul(ah7, bl9) | 0;
          hi = hi + Math.imul(ah7, bh9) | 0;
          var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
          w16 &= 67108863;
          lo = Math.imul(al9, bl8);
          mid = Math.imul(al9, bh8);
          mid = mid + Math.imul(ah9, bl8) | 0;
          hi = Math.imul(ah9, bh8);
          lo = lo + Math.imul(al8, bl9) | 0;
          mid = mid + Math.imul(al8, bh9) | 0;
          mid = mid + Math.imul(ah8, bl9) | 0;
          hi = hi + Math.imul(ah8, bh9) | 0;
          var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
          w17 &= 67108863;
          lo = Math.imul(al9, bl9);
          mid = Math.imul(al9, bh9);
          mid = mid + Math.imul(ah9, bl9) | 0;
          hi = Math.imul(ah9, bh9);
          var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
          w18 &= 67108863;
          o[0] = w0;
          o[1] = w1;
          o[2] = w2;
          o[3] = w3;
          o[4] = w4;
          o[5] = w5;
          o[6] = w6;
          o[7] = w7;
          o[8] = w8;
          o[9] = w9;
          o[10] = w10;
          o[11] = w11;
          o[12] = w12;
          o[13] = w13;
          o[14] = w14;
          o[15] = w15;
          o[16] = w16;
          o[17] = w17;
          o[18] = w18;
          if (c !== 0) {
            o[19] = c;
            out.length++;
          }
          return out;
        };
        if (!Math.imul) {
          comb10MulTo = smallMulTo;
        }
        function bigMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          out.length = self2.length + num.length;
          var carry = 0;
          var hncarry = 0;
          for (var k = 0; k < out.length - 1; k++) {
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i = k - j;
              var a = self2.words[i] | 0;
              var b2 = num.words[j] | 0;
              var r = a * b2;
              var lo = r & 67108863;
              ncarry = ncarry + (r / 67108864 | 0) | 0;
              lo = lo + rword | 0;
              rword = lo & 67108863;
              ncarry = ncarry + (lo >>> 26) | 0;
              hncarry += ncarry >>> 26;
              ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
          }
          if (carry !== 0) {
            out.words[k] = carry;
          } else {
            out.length--;
          }
          return out._strip();
        }
        function jumboMulTo(self2, num, out) {
          return bigMulTo(self2, num, out);
        }
        BN2.prototype.mulTo = function mulTo(num, out) {
          var res;
          var len = this.length + num.length;
          if (this.length === 10 && num.length === 10) {
            res = comb10MulTo(this, num, out);
          } else if (len < 63) {
            res = smallMulTo(this, num, out);
          } else if (len < 1024) {
            res = bigMulTo(this, num, out);
          } else {
            res = jumboMulTo(this, num, out);
          }
          return res;
        };
        function FFTM(x, y) {
          this.x = x;
          this.y = y;
        }
        FFTM.prototype.makeRBT = function makeRBT(N3) {
          var t = new Array(N3);
          var l = BN2.prototype._countBits(N3) - 1;
          for (var i = 0; i < N3; i++) {
            t[i] = this.revBin(i, l, N3);
          }
          return t;
        };
        FFTM.prototype.revBin = function revBin(x, l, N3) {
          if (x === 0 || x === N3 - 1) return x;
          var rb = 0;
          for (var i = 0; i < l; i++) {
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
          }
          return rb;
        };
        FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N3) {
          for (var i = 0; i < N3; i++) {
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
          }
        };
        FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N3, rbt) {
          this.permute(rbt, rws, iws, rtws, itws, N3);
          for (var s = 1; s < N3; s <<= 1) {
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for (var p = 0; p < N3; p += l) {
              var rtwdf_ = rtwdf;
              var itwdf_ = itwdf;
              for (var j = 0; j < s; j++) {
                var re = rtws[p + j];
                var ie = itws[p + j];
                var ro = rtws[p + j + s];
                var io = itws[p + j + s];
                var rx = rtwdf_ * ro - itwdf_ * io;
                io = rtwdf_ * io + itwdf_ * ro;
                ro = rx;
                rtws[p + j] = re + ro;
                itws[p + j] = ie + io;
                rtws[p + j + s] = re - ro;
                itws[p + j + s] = ie - io;
                if (j !== l) {
                  rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                  itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                  rtwdf_ = rx;
                }
              }
            }
          }
        };
        FFTM.prototype.guessLen13b = function guessLen13b(n2, m) {
          var N3 = Math.max(m, n2) | 1;
          var odd = N3 & 1;
          var i = 0;
          for (N3 = N3 / 2 | 0; N3; N3 = N3 >>> 1) {
            i++;
          }
          return 1 << i + 1 + odd;
        };
        FFTM.prototype.conjugate = function conjugate(rws, iws, N3) {
          if (N3 <= 1) return;
          for (var i = 0; i < N3 / 2; i++) {
            var t = rws[i];
            rws[i] = rws[N3 - i - 1];
            rws[N3 - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N3 - i - 1];
            iws[N3 - i - 1] = -t;
          }
        };
        FFTM.prototype.normalize13b = function normalize13b(ws, N3) {
          var carry = 0;
          for (var i = 0; i < N3 / 2; i++) {
            var w = Math.round(ws[2 * i + 1] / N3) * 8192 + Math.round(ws[2 * i] / N3) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) {
              carry = 0;
            } else {
              carry = w / 67108864 | 0;
            }
          }
          return ws;
        };
        FFTM.prototype.convert13b = function convert13b(ws, len, rws, N3) {
          var carry = 0;
          for (var i = 0; i < len; i++) {
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
          }
          for (i = 2 * len; i < N3; ++i) {
            rws[i] = 0;
          }
          assert4(carry === 0);
          assert4((carry & ~8191) === 0);
        };
        FFTM.prototype.stub = function stub(N3) {
          var ph = new Array(N3);
          for (var i = 0; i < N3; i++) {
            ph[i] = 0;
          }
          return ph;
        };
        FFTM.prototype.mulp = function mulp(x, y, out) {
          var N3 = 2 * this.guessLen13b(x.length, y.length);
          var rbt = this.makeRBT(N3);
          var _ = this.stub(N3);
          var rws = new Array(N3);
          var rwst = new Array(N3);
          var iwst = new Array(N3);
          var nrws = new Array(N3);
          var nrwst = new Array(N3);
          var niwst = new Array(N3);
          var rmws = out.words;
          rmws.length = N3;
          this.convert13b(x.words, x.length, rws, N3);
          this.convert13b(y.words, y.length, nrws, N3);
          this.transform(rws, _, rwst, iwst, N3, rbt);
          this.transform(nrws, _, nrwst, niwst, N3, rbt);
          for (var i = 0; i < N3; i++) {
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
          }
          this.conjugate(rwst, iwst, N3);
          this.transform(rwst, iwst, rmws, _, N3, rbt);
          this.conjugate(rmws, _, N3);
          this.normalize13b(rmws, N3);
          out.negative = x.negative ^ y.negative;
          out.length = x.length + y.length;
          return out._strip();
        };
        BN2.prototype.mul = function mul(num) {
          var out = new BN2(null);
          out.words = new Array(this.length + num.length);
          return this.mulTo(num, out);
        };
        BN2.prototype.mulf = function mulf(num) {
          var out = new BN2(null);
          out.words = new Array(this.length + num.length);
          return jumboMulTo(this, num, out);
        };
        BN2.prototype.imul = function imul(num) {
          return this.clone().mulTo(num, this);
        };
        BN2.prototype.imuln = function imuln(num) {
          var isNegNum = num < 0;
          if (isNegNum) num = -num;
          assert4(typeof num === "number");
          assert4(num < 67108864);
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
          }
          if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
          }
          this.length = num === 0 ? 1 : this.length;
          return isNegNum ? this.ineg() : this;
        };
        BN2.prototype.muln = function muln(num) {
          return this.clone().imuln(num);
        };
        BN2.prototype.sqr = function sqr() {
          return this.mul(this);
        };
        BN2.prototype.isqr = function isqr() {
          return this.imul(this.clone());
        };
        BN2.prototype.pow = function pow3(num) {
          var w = toBitArray(num);
          if (w.length === 0) return new BN2(1);
          var res = this;
          for (var i = 0; i < w.length; i++, res = res.sqr()) {
            if (w[i] !== 0) break;
          }
          if (++i < w.length) {
            for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
              if (w[i] === 0) continue;
              res = res.mul(q);
            }
          }
          return res;
        };
        BN2.prototype.iushln = function iushln(bits) {
          assert4(typeof bits === "number" && bits >= 0);
          var r = bits % 26;
          var s = (bits - r) / 26;
          var carryMask = 67108863 >>> 26 - r << 26 - r;
          var i;
          if (r !== 0) {
            var carry = 0;
            for (i = 0; i < this.length; i++) {
              var newCarry = this.words[i] & carryMask;
              var c = (this.words[i] | 0) - newCarry << r;
              this.words[i] = c | carry;
              carry = newCarry >>> 26 - r;
            }
            if (carry) {
              this.words[i] = carry;
              this.length++;
            }
          }
          if (s !== 0) {
            for (i = this.length - 1; i >= 0; i--) {
              this.words[i + s] = this.words[i];
            }
            for (i = 0; i < s; i++) {
              this.words[i] = 0;
            }
            this.length += s;
          }
          return this._strip();
        };
        BN2.prototype.ishln = function ishln(bits) {
          assert4(this.negative === 0);
          return this.iushln(bits);
        };
        BN2.prototype.iushrn = function iushrn(bits, hint, extended) {
          assert4(typeof bits === "number" && bits >= 0);
          var h;
          if (hint) {
            h = (hint - hint % 26) / 26;
          } else {
            h = 0;
          }
          var r = bits % 26;
          var s = Math.min((bits - r) / 26, this.length);
          var mask3 = 67108863 ^ 67108863 >>> r << r;
          var maskedWords = extended;
          h -= s;
          h = Math.max(0, h);
          if (maskedWords) {
            for (var i = 0; i < s; i++) {
              maskedWords.words[i] = this.words[i];
            }
            maskedWords.length = s;
          }
          if (s === 0) {
          } else if (this.length > s) {
            this.length -= s;
            for (i = 0; i < this.length; i++) {
              this.words[i] = this.words[i + s];
            }
          } else {
            this.words[0] = 0;
            this.length = 1;
          }
          var carry = 0;
          for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask3;
          }
          if (maskedWords && carry !== 0) {
            maskedWords.words[maskedWords.length++] = carry;
          }
          if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
          }
          return this._strip();
        };
        BN2.prototype.ishrn = function ishrn(bits, hint, extended) {
          assert4(this.negative === 0);
          return this.iushrn(bits, hint, extended);
        };
        BN2.prototype.shln = function shln(bits) {
          return this.clone().ishln(bits);
        };
        BN2.prototype.ushln = function ushln(bits) {
          return this.clone().iushln(bits);
        };
        BN2.prototype.shrn = function shrn(bits) {
          return this.clone().ishrn(bits);
        };
        BN2.prototype.ushrn = function ushrn(bits) {
          return this.clone().iushrn(bits);
        };
        BN2.prototype.testn = function testn(bit) {
          assert4(typeof bit === "number" && bit >= 0);
          var r = bit % 26;
          var s = (bit - r) / 26;
          var q = 1 << r;
          if (this.length <= s) return false;
          var w = this.words[s];
          return !!(w & q);
        };
        BN2.prototype.imaskn = function imaskn(bits) {
          assert4(typeof bits === "number" && bits >= 0);
          var r = bits % 26;
          var s = (bits - r) / 26;
          assert4(this.negative === 0, "imaskn works only with positive numbers");
          if (this.length <= s) {
            return this;
          }
          if (r !== 0) {
            s++;
          }
          this.length = Math.min(s, this.length);
          if (r !== 0) {
            var mask3 = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask3;
          }
          return this._strip();
        };
        BN2.prototype.maskn = function maskn(bits) {
          return this.clone().imaskn(bits);
        };
        BN2.prototype.iaddn = function iaddn(num) {
          assert4(typeof num === "number");
          assert4(num < 67108864);
          if (num < 0) return this.isubn(-num);
          if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) <= num) {
              this.words[0] = num - (this.words[0] | 0);
              this.negative = 0;
              return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
          }
          return this._iaddn(num);
        };
        BN2.prototype._iaddn = function _iaddn(num) {
          this.words[0] += num;
          for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
            this.words[i] -= 67108864;
            if (i === this.length - 1) {
              this.words[i + 1] = 1;
            } else {
              this.words[i + 1]++;
            }
          }
          this.length = Math.max(this.length, i + 1);
          return this;
        };
        BN2.prototype.isubn = function isubn(num) {
          assert4(typeof num === "number");
          assert4(num < 67108864);
          if (num < 0) return this.iaddn(-num);
          if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
          }
          this.words[0] -= num;
          if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
          } else {
            for (var i = 0; i < this.length && this.words[i] < 0; i++) {
              this.words[i] += 67108864;
              this.words[i + 1] -= 1;
            }
          }
          return this._strip();
        };
        BN2.prototype.addn = function addn(num) {
          return this.clone().iaddn(num);
        };
        BN2.prototype.subn = function subn(num) {
          return this.clone().isubn(num);
        };
        BN2.prototype.iabs = function iabs() {
          this.negative = 0;
          return this;
        };
        BN2.prototype.abs = function abs() {
          return this.clone().iabs();
        };
        BN2.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
          var len = num.length + shift;
          var i;
          this._expand(len);
          var w;
          var carry = 0;
          for (i = 0; i < num.length; i++) {
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
          }
          for (; i < this.length - shift; i++) {
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
          }
          if (carry === 0) return this._strip();
          assert4(carry === -1);
          carry = 0;
          for (i = 0; i < this.length; i++) {
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
          }
          this.negative = 1;
          return this._strip();
        };
        BN2.prototype._wordDiv = function _wordDiv(num, mode) {
          var shift = this.length - num.length;
          var a = this.clone();
          var b2 = num;
          var bhi = b2.words[b2.length - 1] | 0;
          var bhiBits = this._countBits(bhi);
          shift = 26 - bhiBits;
          if (shift !== 0) {
            b2 = b2.ushln(shift);
            a.iushln(shift);
            bhi = b2.words[b2.length - 1] | 0;
          }
          var m = a.length - b2.length;
          var q;
          if (mode !== "mod") {
            q = new BN2(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for (var i = 0; i < q.length; i++) {
              q.words[i] = 0;
            }
          }
          var diff = a.clone()._ishlnsubmul(b2, 1, m);
          if (diff.negative === 0) {
            a = diff;
            if (q) {
              q.words[m] = 1;
            }
          }
          for (var j = m - 1; j >= 0; j--) {
            var qj = (a.words[b2.length + j] | 0) * 67108864 + (a.words[b2.length + j - 1] | 0);
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b2, qj, j);
            while (a.negative !== 0) {
              qj--;
              a.negative = 0;
              a._ishlnsubmul(b2, 1, j);
              if (!a.isZero()) {
                a.negative ^= 1;
              }
            }
            if (q) {
              q.words[j] = qj;
            }
          }
          if (q) {
            q._strip();
          }
          a._strip();
          if (mode !== "div" && shift !== 0) {
            a.iushrn(shift);
          }
          return {
            div: q || null,
            mod: a
          };
        };
        BN2.prototype.divmod = function divmod(num, mode, positive) {
          assert4(!num.isZero());
          if (this.isZero()) {
            return {
              div: new BN2(0),
              mod: new BN2(0)
            };
          }
          var div, mod3, res;
          if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            if (mode !== "div") {
              mod3 = res.mod.neg();
              if (positive && mod3.negative !== 0) {
                mod3.iadd(num);
              }
            }
            return {
              div,
              mod: mod3
            };
          }
          if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            return {
              div,
              mod: res.mod
            };
          }
          if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
              mod3 = res.mod.neg();
              if (positive && mod3.negative !== 0) {
                mod3.isub(num);
              }
            }
            return {
              div: res.div,
              mod: mod3
            };
          }
          if (num.length > this.length || this.cmp(num) < 0) {
            return {
              div: new BN2(0),
              mod: this
            };
          }
          if (num.length === 1) {
            if (mode === "div") {
              return {
                div: this.divn(num.words[0]),
                mod: null
              };
            }
            if (mode === "mod") {
              return {
                div: null,
                mod: new BN2(this.modrn(num.words[0]))
              };
            }
            return {
              div: this.divn(num.words[0]),
              mod: new BN2(this.modrn(num.words[0]))
            };
          }
          return this._wordDiv(num, mode);
        };
        BN2.prototype.div = function div(num) {
          return this.divmod(num, "div", false).div;
        };
        BN2.prototype.mod = function mod3(num) {
          return this.divmod(num, "mod", false).mod;
        };
        BN2.prototype.umod = function umod(num) {
          return this.divmod(num, "mod", true).mod;
        };
        BN2.prototype.divRound = function divRound(num) {
          var dm = this.divmod(num);
          if (dm.mod.isZero()) return dm.div;
          var mod3 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
          var half = num.ushrn(1);
          var r2 = num.andln(1);
          var cmp = mod3.cmp(half);
          if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
          return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
        };
        BN2.prototype.modrn = function modrn(num) {
          var isNegNum = num < 0;
          if (isNegNum) num = -num;
          assert4(num <= 67108863);
          var p = (1 << 26) % num;
          var acc = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            acc = (p * acc + (this.words[i] | 0)) % num;
          }
          return isNegNum ? -acc : acc;
        };
        BN2.prototype.modn = function modn(num) {
          return this.modrn(num);
        };
        BN2.prototype.idivn = function idivn(num) {
          var isNegNum = num < 0;
          if (isNegNum) num = -num;
          assert4(num <= 67108863);
          var carry = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
          }
          this._strip();
          return isNegNum ? this.ineg() : this;
        };
        BN2.prototype.divn = function divn(num) {
          return this.clone().idivn(num);
        };
        BN2.prototype.egcd = function egcd(p) {
          assert4(p.negative === 0);
          assert4(!p.isZero());
          var x = this;
          var y = p.clone();
          if (x.negative !== 0) {
            x = x.umod(p);
          } else {
            x = x.clone();
          }
          var A = new BN2(1);
          var B = new BN2(0);
          var C = new BN2(0);
          var D = new BN2(1);
          var g = 0;
          while (x.isEven() && y.isEven()) {
            x.iushrn(1);
            y.iushrn(1);
            ++g;
          }
          var yp = y.clone();
          var xp = x.clone();
          while (!x.isZero()) {
            for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
            if (i > 0) {
              x.iushrn(i);
              while (i-- > 0) {
                if (A.isOdd() || B.isOdd()) {
                  A.iadd(yp);
                  B.isub(xp);
                }
                A.iushrn(1);
                B.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
            if (j > 0) {
              y.iushrn(j);
              while (j-- > 0) {
                if (C.isOdd() || D.isOdd()) {
                  C.iadd(yp);
                  D.isub(xp);
                }
                C.iushrn(1);
                D.iushrn(1);
              }
            }
            if (x.cmp(y) >= 0) {
              x.isub(y);
              A.isub(C);
              B.isub(D);
            } else {
              y.isub(x);
              C.isub(A);
              D.isub(B);
            }
          }
          return {
            a: C,
            b: D,
            gcd: y.iushln(g)
          };
        };
        BN2.prototype._invmp = function _invmp(p) {
          assert4(p.negative === 0);
          assert4(!p.isZero());
          var a = this;
          var b2 = p.clone();
          if (a.negative !== 0) {
            a = a.umod(p);
          } else {
            a = a.clone();
          }
          var x1 = new BN2(1);
          var x2 = new BN2(0);
          var delta = b2.clone();
          while (a.cmpn(1) > 0 && b2.cmpn(1) > 0) {
            for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
            if (i > 0) {
              a.iushrn(i);
              while (i-- > 0) {
                if (x1.isOdd()) {
                  x1.iadd(delta);
                }
                x1.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (b2.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
            if (j > 0) {
              b2.iushrn(j);
              while (j-- > 0) {
                if (x2.isOdd()) {
                  x2.iadd(delta);
                }
                x2.iushrn(1);
              }
            }
            if (a.cmp(b2) >= 0) {
              a.isub(b2);
              x1.isub(x2);
            } else {
              b2.isub(a);
              x2.isub(x1);
            }
          }
          var res;
          if (a.cmpn(1) === 0) {
            res = x1;
          } else {
            res = x2;
          }
          if (res.cmpn(0) < 0) {
            res.iadd(p);
          }
          return res;
        };
        BN2.prototype.gcd = function gcd(num) {
          if (this.isZero()) return num.abs();
          if (num.isZero()) return this.abs();
          var a = this.clone();
          var b2 = num.clone();
          a.negative = 0;
          b2.negative = 0;
          for (var shift = 0; a.isEven() && b2.isEven(); shift++) {
            a.iushrn(1);
            b2.iushrn(1);
          }
          do {
            while (a.isEven()) {
              a.iushrn(1);
            }
            while (b2.isEven()) {
              b2.iushrn(1);
            }
            var r = a.cmp(b2);
            if (r < 0) {
              var t = a;
              a = b2;
              b2 = t;
            } else if (r === 0 || b2.cmpn(1) === 0) {
              break;
            }
            a.isub(b2);
          } while (true);
          return b2.iushln(shift);
        };
        BN2.prototype.invm = function invm(num) {
          return this.egcd(num).a.umod(num);
        };
        BN2.prototype.isEven = function isEven() {
          return (this.words[0] & 1) === 0;
        };
        BN2.prototype.isOdd = function isOdd() {
          return (this.words[0] & 1) === 1;
        };
        BN2.prototype.andln = function andln(num) {
          return this.words[0] & num;
        };
        BN2.prototype.bincn = function bincn(bit) {
          assert4(typeof bit === "number");
          var r = bit % 26;
          var s = (bit - r) / 26;
          var q = 1 << r;
          if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
          }
          var carry = q;
          for (var i = s; carry !== 0 && i < this.length; i++) {
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
          }
          if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
          }
          return this;
        };
        BN2.prototype.isZero = function isZero() {
          return this.length === 1 && this.words[0] === 0;
        };
        BN2.prototype.cmpn = function cmpn(num) {
          var negative = num < 0;
          if (this.negative !== 0 && !negative) return -1;
          if (this.negative === 0 && negative) return 1;
          this._strip();
          var res;
          if (this.length > 1) {
            res = 1;
          } else {
            if (negative) {
              num = -num;
            }
            assert4(num <= 67108863, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
          }
          if (this.negative !== 0) return -res | 0;
          return res;
        };
        BN2.prototype.cmp = function cmp(num) {
          if (this.negative !== 0 && num.negative === 0) return -1;
          if (this.negative === 0 && num.negative !== 0) return 1;
          var res = this.ucmp(num);
          if (this.negative !== 0) return -res | 0;
          return res;
        };
        BN2.prototype.ucmp = function ucmp(num) {
          if (this.length > num.length) return 1;
          if (this.length < num.length) return -1;
          var res = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            var a = this.words[i] | 0;
            var b2 = num.words[i] | 0;
            if (a === b2) continue;
            if (a < b2) {
              res = -1;
            } else if (a > b2) {
              res = 1;
            }
            break;
          }
          return res;
        };
        BN2.prototype.gtn = function gtn(num) {
          return this.cmpn(num) === 1;
        };
        BN2.prototype.gt = function gt(num) {
          return this.cmp(num) === 1;
        };
        BN2.prototype.gten = function gten(num) {
          return this.cmpn(num) >= 0;
        };
        BN2.prototype.gte = function gte(num) {
          return this.cmp(num) >= 0;
        };
        BN2.prototype.ltn = function ltn(num) {
          return this.cmpn(num) === -1;
        };
        BN2.prototype.lt = function lt(num) {
          return this.cmp(num) === -1;
        };
        BN2.prototype.lten = function lten(num) {
          return this.cmpn(num) <= 0;
        };
        BN2.prototype.lte = function lte(num) {
          return this.cmp(num) <= 0;
        };
        BN2.prototype.eqn = function eqn(num) {
          return this.cmpn(num) === 0;
        };
        BN2.prototype.eq = function eq(num) {
          return this.cmp(num) === 0;
        };
        BN2.red = function red(num) {
          return new Red(num);
        };
        BN2.prototype.toRed = function toRed(ctx) {
          assert4(!this.red, "Already a number in reduction context");
          assert4(this.negative === 0, "red works only with positives");
          return ctx.convertTo(this)._forceRed(ctx);
        };
        BN2.prototype.fromRed = function fromRed() {
          assert4(this.red, "fromRed works only with numbers in reduction context");
          return this.red.convertFrom(this);
        };
        BN2.prototype._forceRed = function _forceRed(ctx) {
          this.red = ctx;
          return this;
        };
        BN2.prototype.forceRed = function forceRed(ctx) {
          assert4(!this.red, "Already a number in reduction context");
          return this._forceRed(ctx);
        };
        BN2.prototype.redAdd = function redAdd(num) {
          assert4(this.red, "redAdd works only with red numbers");
          return this.red.add(this, num);
        };
        BN2.prototype.redIAdd = function redIAdd(num) {
          assert4(this.red, "redIAdd works only with red numbers");
          return this.red.iadd(this, num);
        };
        BN2.prototype.redSub = function redSub(num) {
          assert4(this.red, "redSub works only with red numbers");
          return this.red.sub(this, num);
        };
        BN2.prototype.redISub = function redISub(num) {
          assert4(this.red, "redISub works only with red numbers");
          return this.red.isub(this, num);
        };
        BN2.prototype.redShl = function redShl(num) {
          assert4(this.red, "redShl works only with red numbers");
          return this.red.shl(this, num);
        };
        BN2.prototype.redMul = function redMul(num) {
          assert4(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.mul(this, num);
        };
        BN2.prototype.redIMul = function redIMul(num) {
          assert4(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.imul(this, num);
        };
        BN2.prototype.redSqr = function redSqr() {
          assert4(this.red, "redSqr works only with red numbers");
          this.red._verify1(this);
          return this.red.sqr(this);
        };
        BN2.prototype.redISqr = function redISqr() {
          assert4(this.red, "redISqr works only with red numbers");
          this.red._verify1(this);
          return this.red.isqr(this);
        };
        BN2.prototype.redSqrt = function redSqrt() {
          assert4(this.red, "redSqrt works only with red numbers");
          this.red._verify1(this);
          return this.red.sqrt(this);
        };
        BN2.prototype.redInvm = function redInvm() {
          assert4(this.red, "redInvm works only with red numbers");
          this.red._verify1(this);
          return this.red.invm(this);
        };
        BN2.prototype.redNeg = function redNeg() {
          assert4(this.red, "redNeg works only with red numbers");
          this.red._verify1(this);
          return this.red.neg(this);
        };
        BN2.prototype.redPow = function redPow(num) {
          assert4(this.red && !num.red, "redPow(normalNum)");
          this.red._verify1(this);
          return this.red.pow(this, num);
        };
        var primes = {
          k256: null,
          p224: null,
          p192: null,
          p25519: null
        };
        function MPrime(name, p) {
          this.name = name;
          this.p = new BN2(p, 16);
          this.n = this.p.bitLength();
          this.k = new BN2(1).iushln(this.n).isub(this.p);
          this.tmp = this._tmp();
        }
        MPrime.prototype._tmp = function _tmp() {
          var tmp = new BN2(null);
          tmp.words = new Array(Math.ceil(this.n / 13));
          return tmp;
        };
        MPrime.prototype.ireduce = function ireduce(num) {
          var r = num;
          var rlen;
          do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
          } while (rlen > this.n);
          var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
          if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
          } else if (cmp > 0) {
            r.isub(this.p);
          } else {
            if (r.strip !== void 0) {
              r.strip();
            } else {
              r._strip();
            }
          }
          return r;
        };
        MPrime.prototype.split = function split4(input, out) {
          input.iushrn(this.n, 0, out);
        };
        MPrime.prototype.imulK = function imulK(num) {
          return num.imul(this.k);
        };
        function K256() {
          MPrime.call(
            this,
            "k256",
            "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
          );
        }
        inherits(K256, MPrime);
        K256.prototype.split = function split4(input, output2) {
          var mask3 = 4194303;
          var outLen = Math.min(input.length, 9);
          for (var i = 0; i < outLen; i++) {
            output2.words[i] = input.words[i];
          }
          output2.length = outLen;
          if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
          }
          var prev = input.words[9];
          output2.words[output2.length++] = prev & mask3;
          for (i = 10; i < input.length; i++) {
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask3) << 4 | prev >>> 22;
            prev = next;
          }
          prev >>>= 22;
          input.words[i - 10] = prev;
          if (prev === 0 && input.length > 10) {
            input.length -= 10;
          } else {
            input.length -= 9;
          }
        };
        K256.prototype.imulK = function imulK(num) {
          num.words[num.length] = 0;
          num.words[num.length + 1] = 0;
          num.length += 2;
          var lo = 0;
          for (var i = 0; i < num.length; i++) {
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
          }
          if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) {
              num.length--;
            }
          }
          return num;
        };
        function P224() {
          MPrime.call(
            this,
            "p224",
            "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
          );
        }
        inherits(P224, MPrime);
        function P192() {
          MPrime.call(
            this,
            "p192",
            "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
          );
        }
        inherits(P192, MPrime);
        function P25519() {
          MPrime.call(
            this,
            "25519",
            "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
          );
        }
        inherits(P25519, MPrime);
        P25519.prototype.imulK = function imulK(num) {
          var carry = 0;
          for (var i = 0; i < num.length; i++) {
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
          }
          if (carry !== 0) {
            num.words[num.length++] = carry;
          }
          return num;
        };
        BN2._prime = function prime(name) {
          if (primes[name]) return primes[name];
          var prime2;
          if (name === "k256") {
            prime2 = new K256();
          } else if (name === "p224") {
            prime2 = new P224();
          } else if (name === "p192") {
            prime2 = new P192();
          } else if (name === "p25519") {
            prime2 = new P25519();
          } else {
            throw new Error("Unknown prime " + name);
          }
          primes[name] = prime2;
          return prime2;
        };
        function Red(m) {
          if (typeof m === "string") {
            var prime = BN2._prime(m);
            this.m = prime.p;
            this.prime = prime;
          } else {
            assert4(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
          }
        }
        Red.prototype._verify1 = function _verify1(a) {
          assert4(a.negative === 0, "red works only with positives");
          assert4(a.red, "red works only with red numbers");
        };
        Red.prototype._verify2 = function _verify2(a, b2) {
          assert4((a.negative | b2.negative) === 0, "red works only with positives");
          assert4(
            a.red && a.red === b2.red,
            "red works only with red numbers"
          );
        };
        Red.prototype.imod = function imod(a) {
          if (this.prime) return this.prime.ireduce(a)._forceRed(this);
          move(a, a.umod(this.m)._forceRed(this));
          return a;
        };
        Red.prototype.neg = function neg(a) {
          if (a.isZero()) {
            return a.clone();
          }
          return this.m.sub(a)._forceRed(this);
        };
        Red.prototype.add = function add3(a, b2) {
          this._verify2(a, b2);
          var res = a.add(b2);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.iadd = function iadd(a, b2) {
          this._verify2(a, b2);
          var res = a.iadd(b2);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res;
        };
        Red.prototype.sub = function sub(a, b2) {
          this._verify2(a, b2);
          var res = a.sub(b2);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.isub = function isub(a, b2) {
          this._verify2(a, b2);
          var res = a.isub(b2);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res;
        };
        Red.prototype.shl = function shl(a, num) {
          this._verify1(a);
          return this.imod(a.ushln(num));
        };
        Red.prototype.imul = function imul(a, b2) {
          this._verify2(a, b2);
          return this.imod(a.imul(b2));
        };
        Red.prototype.mul = function mul(a, b2) {
          this._verify2(a, b2);
          return this.imod(a.mul(b2));
        };
        Red.prototype.isqr = function isqr(a) {
          return this.imul(a, a.clone());
        };
        Red.prototype.sqr = function sqr(a) {
          return this.mul(a, a);
        };
        Red.prototype.sqrt = function sqrt(a) {
          if (a.isZero()) return a.clone();
          var mod3 = this.m.andln(3);
          assert4(mod3 % 2 === 1);
          if (mod3 === 3) {
            var pow3 = this.m.add(new BN2(1)).iushrn(2);
            return this.pow(a, pow3);
          }
          var q = this.m.subn(1);
          var s = 0;
          while (!q.isZero() && q.andln(1) === 0) {
            s++;
            q.iushrn(1);
          }
          assert4(!q.isZero());
          var one = new BN2(1).toRed(this);
          var nOne = one.redNeg();
          var lpow = this.m.subn(1).iushrn(1);
          var z = this.m.bitLength();
          z = new BN2(2 * z * z).toRed(this);
          while (this.pow(z, lpow).cmp(nOne) !== 0) {
            z.redIAdd(nOne);
          }
          var c = this.pow(z, q);
          var r = this.pow(a, q.addn(1).iushrn(1));
          var t = this.pow(a, q);
          var m = s;
          while (t.cmp(one) !== 0) {
            var tmp = t;
            for (var i = 0; tmp.cmp(one) !== 0; i++) {
              tmp = tmp.redSqr();
            }
            assert4(i < m);
            var b2 = this.pow(c, new BN2(1).iushln(m - i - 1));
            r = r.redMul(b2);
            c = b2.redSqr();
            t = t.redMul(c);
            m = i;
          }
          return r;
        };
        Red.prototype.invm = function invm(a) {
          var inv = a._invmp(this.m);
          if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
          } else {
            return this.imod(inv);
          }
        };
        Red.prototype.pow = function pow3(a, num) {
          if (num.isZero()) return new BN2(1).toRed(this);
          if (num.cmpn(1) === 0) return a.clone();
          var windowSize = 4;
          var wnd = new Array(1 << windowSize);
          wnd[0] = new BN2(1).toRed(this);
          wnd[1] = a;
          for (var i = 2; i < wnd.length; i++) {
            wnd[i] = this.mul(wnd[i - 1], a);
          }
          var res = wnd[0];
          var current = 0;
          var currentLen = 0;
          var start = num.bitLength() % 26;
          if (start === 0) {
            start = 26;
          }
          for (i = num.length - 1; i >= 0; i--) {
            var word = num.words[i];
            for (var j = start - 1; j >= 0; j--) {
              var bit = word >> j & 1;
              if (res !== wnd[0]) {
                res = this.sqr(res);
              }
              if (bit === 0 && current === 0) {
                currentLen = 0;
                continue;
              }
              current <<= 1;
              current |= bit;
              currentLen++;
              if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
              res = this.mul(res, wnd[current]);
              currentLen = 0;
              current = 0;
            }
            start = 26;
          }
          return res;
        };
        Red.prototype.convertTo = function convertTo(num) {
          var r = num.umod(this.m);
          return r === num ? r.clone() : r;
        };
        Red.prototype.convertFrom = function convertFrom(num) {
          var res = num.clone();
          res.red = null;
          return res;
        };
        BN2.mont = function mont(num) {
          return new Mont(num);
        };
        function Mont(m) {
          Red.call(this, m);
          this.shift = this.m.bitLength();
          if (this.shift % 26 !== 0) {
            this.shift += 26 - this.shift % 26;
          }
          this.r = new BN2(1).iushln(this.shift);
          this.r2 = this.imod(this.r.sqr());
          this.rinv = this.r._invmp(this.m);
          this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
          this.minv = this.minv.umod(this.r);
          this.minv = this.r.sub(this.minv);
        }
        inherits(Mont, Red);
        Mont.prototype.convertTo = function convertTo(num) {
          return this.imod(num.ushln(this.shift));
        };
        Mont.prototype.convertFrom = function convertFrom(num) {
          var r = this.imod(num.mul(this.rinv));
          r.red = null;
          return r;
        };
        Mont.prototype.imul = function imul(a, b2) {
          if (a.isZero() || b2.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
          }
          var t = a.imul(b2);
          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.mul = function mul(a, b2) {
          if (a.isZero() || b2.isZero()) return new BN2(0)._forceRed(this);
          var t = a.mul(b2);
          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.invm = function invm(a) {
          var res = this.imod(a._invmp(this.m).mul(this.r2));
          return res._forceRed(this);
        };
      })(typeof module === "undefined" || module, exports);
    }
  });

  // node_modules/safe-buffer/index.js
  var require_safe_buffer = __commonJS({
    "node_modules/safe-buffer/index.js"(exports, module) {
      var buffer = require_buffer();
      var Buffer5 = buffer.Buffer;
      function copyProps(src, dst) {
        for (var key in src) {
          dst[key] = src[key];
        }
      }
      if (Buffer5.from && Buffer5.alloc && Buffer5.allocUnsafe && Buffer5.allocUnsafeSlow) {
        module.exports = buffer;
      } else {
        copyProps(buffer, exports);
        exports.Buffer = SafeBuffer;
      }
      function SafeBuffer(arg, encodingOrOffset, length) {
        return Buffer5(arg, encodingOrOffset, length);
      }
      SafeBuffer.prototype = Object.create(Buffer5.prototype);
      copyProps(Buffer5, SafeBuffer);
      SafeBuffer.from = function(arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          throw new TypeError("Argument must not be a number");
        }
        return Buffer5(arg, encodingOrOffset, length);
      };
      SafeBuffer.alloc = function(size, fill, encoding) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        var buf = Buffer5(size);
        if (fill !== void 0) {
          if (typeof encoding === "string") {
            buf.fill(fill, encoding);
          } else {
            buf.fill(fill);
          }
        } else {
          buf.fill(0);
        }
        return buf;
      };
      SafeBuffer.allocUnsafe = function(size) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return Buffer5(size);
      };
      SafeBuffer.allocUnsafeSlow = function(size) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return buffer.SlowBuffer(size);
      };
    }
  });

  // node_modules/@meshconnect/solana-web3.js/node_modules/base-x/src/index.js
  var require_src = __commonJS({
    "node_modules/@meshconnect/solana-web3.js/node_modules/base-x/src/index.js"(exports, module) {
      "use strict";
      var _Buffer = require_safe_buffer().Buffer;
      function base(ALPHABET) {
        if (ALPHABET.length >= 255) {
          throw new TypeError("Alphabet too long");
        }
        var BASE_MAP = new Uint8Array(256);
        for (var j = 0; j < BASE_MAP.length; j++) {
          BASE_MAP[j] = 255;
        }
        for (var i = 0; i < ALPHABET.length; i++) {
          var x = ALPHABET.charAt(i);
          var xc = x.charCodeAt(0);
          if (BASE_MAP[xc] !== 255) {
            throw new TypeError(x + " is ambiguous");
          }
          BASE_MAP[xc] = i;
        }
        var BASE = ALPHABET.length;
        var LEADER = ALPHABET.charAt(0);
        var FACTOR = Math.log(BASE) / Math.log(256);
        var iFACTOR = Math.log(256) / Math.log(BASE);
        function encode(source) {
          if (Array.isArray(source) || source instanceof Uint8Array) {
            source = _Buffer.from(source);
          }
          if (!_Buffer.isBuffer(source)) {
            throw new TypeError("Expected Buffer");
          }
          if (source.length === 0) {
            return "";
          }
          var zeroes = 0;
          var length = 0;
          var pbegin = 0;
          var pend = source.length;
          while (pbegin !== pend && source[pbegin] === 0) {
            pbegin++;
            zeroes++;
          }
          var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
          var b58 = new Uint8Array(size);
          while (pbegin !== pend) {
            var carry = source[pbegin];
            var i2 = 0;
            for (var it1 = size - 1; (carry !== 0 || i2 < length) && it1 !== -1; it1--, i2++) {
              carry += 256 * b58[it1] >>> 0;
              b58[it1] = carry % BASE >>> 0;
              carry = carry / BASE >>> 0;
            }
            if (carry !== 0) {
              throw new Error("Non-zero carry");
            }
            length = i2;
            pbegin++;
          }
          var it2 = size - length;
          while (it2 !== size && b58[it2] === 0) {
            it2++;
          }
          var str = LEADER.repeat(zeroes);
          for (; it2 < size; ++it2) {
            str += ALPHABET.charAt(b58[it2]);
          }
          return str;
        }
        function decodeUnsafe(source) {
          if (typeof source !== "string") {
            throw new TypeError("Expected String");
          }
          if (source.length === 0) {
            return _Buffer.alloc(0);
          }
          var psz = 0;
          var zeroes = 0;
          var length = 0;
          while (source[psz] === LEADER) {
            zeroes++;
            psz++;
          }
          var size = (source.length - psz) * FACTOR + 1 >>> 0;
          var b256 = new Uint8Array(size);
          while (psz < source.length) {
            var charCode = source.charCodeAt(psz);
            if (charCode > 255) {
              return;
            }
            var carry = BASE_MAP[charCode];
            if (carry === 255) {
              return;
            }
            var i2 = 0;
            for (var it3 = size - 1; (carry !== 0 || i2 < length) && it3 !== -1; it3--, i2++) {
              carry += BASE * b256[it3] >>> 0;
              b256[it3] = carry % 256 >>> 0;
              carry = carry / 256 >>> 0;
            }
            if (carry !== 0) {
              throw new Error("Non-zero carry");
            }
            length = i2;
            psz++;
          }
          var it4 = size - length;
          while (it4 !== size && b256[it4] === 0) {
            it4++;
          }
          var vch = _Buffer.allocUnsafe(zeroes + (size - it4));
          vch.fill(0, 0, zeroes);
          var j2 = zeroes;
          while (it4 !== size) {
            vch[j2++] = b256[it4++];
          }
          return vch;
        }
        function decode2(string2) {
          var buffer = decodeUnsafe(string2);
          if (buffer) {
            return buffer;
          }
          throw new Error("Non-base" + BASE + " character");
        }
        return {
          encode,
          decodeUnsafe,
          decode: decode2
        };
      }
      module.exports = base;
    }
  });

  // node_modules/@meshconnect/solana-web3.js/node_modules/bs58/index.js
  var require_bs58 = __commonJS({
    "node_modules/@meshconnect/solana-web3.js/node_modules/bs58/index.js"(exports, module) {
      var basex = require_src();
      var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
      module.exports = basex(ALPHABET);
    }
  });

  // node_modules/@noble/hashes/esm/sha256.js
  var sha2564;
  var init_sha2562 = __esm({
    "node_modules/@noble/hashes/esm/sha256.js"() {
      init_sha23();
      sha2564 = sha2563;
    }
  });

  // node_modules/borsh/node_modules/base-x/src/index.js
  var require_src2 = __commonJS({
    "node_modules/borsh/node_modules/base-x/src/index.js"(exports, module) {
      "use strict";
      var _Buffer = require_safe_buffer().Buffer;
      function base(ALPHABET) {
        if (ALPHABET.length >= 255) {
          throw new TypeError("Alphabet too long");
        }
        var BASE_MAP = new Uint8Array(256);
        for (var j = 0; j < BASE_MAP.length; j++) {
          BASE_MAP[j] = 255;
        }
        for (var i = 0; i < ALPHABET.length; i++) {
          var x = ALPHABET.charAt(i);
          var xc = x.charCodeAt(0);
          if (BASE_MAP[xc] !== 255) {
            throw new TypeError(x + " is ambiguous");
          }
          BASE_MAP[xc] = i;
        }
        var BASE = ALPHABET.length;
        var LEADER = ALPHABET.charAt(0);
        var FACTOR = Math.log(BASE) / Math.log(256);
        var iFACTOR = Math.log(256) / Math.log(BASE);
        function encode(source) {
          if (Array.isArray(source) || source instanceof Uint8Array) {
            source = _Buffer.from(source);
          }
          if (!_Buffer.isBuffer(source)) {
            throw new TypeError("Expected Buffer");
          }
          if (source.length === 0) {
            return "";
          }
          var zeroes = 0;
          var length = 0;
          var pbegin = 0;
          var pend = source.length;
          while (pbegin !== pend && source[pbegin] === 0) {
            pbegin++;
            zeroes++;
          }
          var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
          var b58 = new Uint8Array(size);
          while (pbegin !== pend) {
            var carry = source[pbegin];
            var i2 = 0;
            for (var it1 = size - 1; (carry !== 0 || i2 < length) && it1 !== -1; it1--, i2++) {
              carry += 256 * b58[it1] >>> 0;
              b58[it1] = carry % BASE >>> 0;
              carry = carry / BASE >>> 0;
            }
            if (carry !== 0) {
              throw new Error("Non-zero carry");
            }
            length = i2;
            pbegin++;
          }
          var it2 = size - length;
          while (it2 !== size && b58[it2] === 0) {
            it2++;
          }
          var str = LEADER.repeat(zeroes);
          for (; it2 < size; ++it2) {
            str += ALPHABET.charAt(b58[it2]);
          }
          return str;
        }
        function decodeUnsafe(source) {
          if (typeof source !== "string") {
            throw new TypeError("Expected String");
          }
          if (source.length === 0) {
            return _Buffer.alloc(0);
          }
          var psz = 0;
          var zeroes = 0;
          var length = 0;
          while (source[psz] === LEADER) {
            zeroes++;
            psz++;
          }
          var size = (source.length - psz) * FACTOR + 1 >>> 0;
          var b256 = new Uint8Array(size);
          while (psz < source.length) {
            var charCode = source.charCodeAt(psz);
            if (charCode > 255) {
              return;
            }
            var carry = BASE_MAP[charCode];
            if (carry === 255) {
              return;
            }
            var i2 = 0;
            for (var it3 = size - 1; (carry !== 0 || i2 < length) && it3 !== -1; it3--, i2++) {
              carry += BASE * b256[it3] >>> 0;
              b256[it3] = carry % 256 >>> 0;
              carry = carry / 256 >>> 0;
            }
            if (carry !== 0) {
              throw new Error("Non-zero carry");
            }
            length = i2;
            psz++;
          }
          var it4 = size - length;
          while (it4 !== size && b256[it4] === 0) {
            it4++;
          }
          var vch = _Buffer.allocUnsafe(zeroes + (size - it4));
          vch.fill(0, 0, zeroes);
          var j2 = zeroes;
          while (it4 !== size) {
            vch[j2++] = b256[it4++];
          }
          return vch;
        }
        function decode2(string2) {
          var buffer = decodeUnsafe(string2);
          if (buffer) {
            return buffer;
          }
          throw new Error("Non-base" + BASE + " character");
        }
        return {
          encode,
          decodeUnsafe,
          decode: decode2
        };
      }
      module.exports = base;
    }
  });

  // node_modules/borsh/node_modules/bs58/index.js
  var require_bs582 = __commonJS({
    "node_modules/borsh/node_modules/bs58/index.js"(exports, module) {
      var basex = require_src2();
      var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
      module.exports = basex(ALPHABET);
    }
  });

  // node_modules/text-encoding-utf-8/lib/encoding.lib.js
  var require_encoding_lib = __commonJS({
    "node_modules/text-encoding-utf-8/lib/encoding.lib.js"(exports) {
      "use strict";
      function inRange2(a, min, max) {
        return min <= a && a <= max;
      }
      function ToDictionary(o) {
        if (o === void 0) return {};
        if (o === Object(o)) return o;
        throw TypeError("Could not convert argument to dictionary");
      }
      function stringToCodePoints(string2) {
        var s = String(string2);
        var n2 = s.length;
        var i = 0;
        var u = [];
        while (i < n2) {
          var c = s.charCodeAt(i);
          if (c < 55296 || c > 57343) {
            u.push(c);
          } else if (56320 <= c && c <= 57343) {
            u.push(65533);
          } else if (55296 <= c && c <= 56319) {
            if (i === n2 - 1) {
              u.push(65533);
            } else {
              var d = string2.charCodeAt(i + 1);
              if (56320 <= d && d <= 57343) {
                var a = c & 1023;
                var b2 = d & 1023;
                u.push(65536 + (a << 10) + b2);
                i += 1;
              } else {
                u.push(65533);
              }
            }
          }
          i += 1;
        }
        return u;
      }
      function codePointsToString(code_points) {
        var s = "";
        for (var i = 0; i < code_points.length; ++i) {
          var cp = code_points[i];
          if (cp <= 65535) {
            s += String.fromCharCode(cp);
          } else {
            cp -= 65536;
            s += String.fromCharCode(
              (cp >> 10) + 55296,
              (cp & 1023) + 56320
            );
          }
        }
        return s;
      }
      var end_of_stream = -1;
      function Stream(tokens) {
        this.tokens = [].slice.call(tokens);
      }
      Stream.prototype = {
        /**
         * @return {boolean} True if end-of-stream has been hit.
         */
        endOfStream: function() {
          return !this.tokens.length;
        },
        /**
         * When a token is read from a stream, the first token in the
         * stream must be returned and subsequently removed, and
         * end-of-stream must be returned otherwise.
         *
         * @return {number} Get the next token from the stream, or
         * end_of_stream.
         */
        read: function() {
          if (!this.tokens.length)
            return end_of_stream;
          return this.tokens.shift();
        },
        /**
         * When one or more tokens are prepended to a stream, those tokens
         * must be inserted, in given order, before the first token in the
         * stream.
         *
         * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.
         */
        prepend: function(token) {
          if (Array.isArray(token)) {
            var tokens = (
              /**@type {!Array.<number>}*/
              token
            );
            while (tokens.length)
              this.tokens.unshift(tokens.pop());
          } else {
            this.tokens.unshift(token);
          }
        },
        /**
         * When one or more tokens are pushed to a stream, those tokens
         * must be inserted, in given order, after the last token in the
         * stream.
         *
         * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.
         */
        push: function(token) {
          if (Array.isArray(token)) {
            var tokens = (
              /**@type {!Array.<number>}*/
              token
            );
            while (tokens.length)
              this.tokens.push(tokens.shift());
          } else {
            this.tokens.push(token);
          }
        }
      };
      var finished = -1;
      function decoderError(fatal, opt_code_point) {
        if (fatal)
          throw TypeError("Decoder error");
        return opt_code_point || 65533;
      }
      var DEFAULT_ENCODING = "utf-8";
      function TextDecoder2(encoding, options) {
        if (!(this instanceof TextDecoder2)) {
          return new TextDecoder2(encoding, options);
        }
        encoding = encoding !== void 0 ? String(encoding).toLowerCase() : DEFAULT_ENCODING;
        if (encoding !== DEFAULT_ENCODING) {
          throw new Error("Encoding not supported. Only utf-8 is supported");
        }
        options = ToDictionary(options);
        this._streaming = false;
        this._BOMseen = false;
        this._decoder = null;
        this._fatal = Boolean(options["fatal"]);
        this._ignoreBOM = Boolean(options["ignoreBOM"]);
        Object.defineProperty(this, "encoding", { value: "utf-8" });
        Object.defineProperty(this, "fatal", { value: this._fatal });
        Object.defineProperty(this, "ignoreBOM", { value: this._ignoreBOM });
      }
      TextDecoder2.prototype = {
        /**
         * @param {ArrayBufferView=} input The buffer of bytes to decode.
         * @param {Object=} options
         * @return {string} The decoded string.
         */
        decode: function decode2(input, options) {
          var bytes2;
          if (typeof input === "object" && input instanceof ArrayBuffer) {
            bytes2 = new Uint8Array(input);
          } else if (typeof input === "object" && "buffer" in input && input.buffer instanceof ArrayBuffer) {
            bytes2 = new Uint8Array(
              input.buffer,
              input.byteOffset,
              input.byteLength
            );
          } else {
            bytes2 = new Uint8Array(0);
          }
          options = ToDictionary(options);
          if (!this._streaming) {
            this._decoder = new UTF8Decoder({ fatal: this._fatal });
            this._BOMseen = false;
          }
          this._streaming = Boolean(options["stream"]);
          var input_stream = new Stream(bytes2);
          var code_points = [];
          var result;
          while (!input_stream.endOfStream()) {
            result = this._decoder.handler(input_stream, input_stream.read());
            if (result === finished)
              break;
            if (result === null)
              continue;
            if (Array.isArray(result))
              code_points.push.apply(
                code_points,
                /**@type {!Array.<number>}*/
                result
              );
            else
              code_points.push(result);
          }
          if (!this._streaming) {
            do {
              result = this._decoder.handler(input_stream, input_stream.read());
              if (result === finished)
                break;
              if (result === null)
                continue;
              if (Array.isArray(result))
                code_points.push.apply(
                  code_points,
                  /**@type {!Array.<number>}*/
                  result
                );
              else
                code_points.push(result);
            } while (!input_stream.endOfStream());
            this._decoder = null;
          }
          if (code_points.length) {
            if (["utf-8"].indexOf(this.encoding) !== -1 && !this._ignoreBOM && !this._BOMseen) {
              if (code_points[0] === 65279) {
                this._BOMseen = true;
                code_points.shift();
              } else {
                this._BOMseen = true;
              }
            }
          }
          return codePointsToString(code_points);
        }
      };
      function TextEncoder2(encoding, options) {
        if (!(this instanceof TextEncoder2))
          return new TextEncoder2(encoding, options);
        encoding = encoding !== void 0 ? String(encoding).toLowerCase() : DEFAULT_ENCODING;
        if (encoding !== DEFAULT_ENCODING) {
          throw new Error("Encoding not supported. Only utf-8 is supported");
        }
        options = ToDictionary(options);
        this._streaming = false;
        this._encoder = null;
        this._options = { fatal: Boolean(options["fatal"]) };
        Object.defineProperty(this, "encoding", { value: "utf-8" });
      }
      TextEncoder2.prototype = {
        /**
         * @param {string=} opt_string The string to encode.
         * @param {Object=} options
         * @return {Uint8Array} Encoded bytes, as a Uint8Array.
         */
        encode: function encode(opt_string, options) {
          opt_string = opt_string ? String(opt_string) : "";
          options = ToDictionary(options);
          if (!this._streaming)
            this._encoder = new UTF8Encoder(this._options);
          this._streaming = Boolean(options["stream"]);
          var bytes2 = [];
          var input_stream = new Stream(stringToCodePoints(opt_string));
          var result;
          while (!input_stream.endOfStream()) {
            result = this._encoder.handler(input_stream, input_stream.read());
            if (result === finished)
              break;
            if (Array.isArray(result))
              bytes2.push.apply(
                bytes2,
                /**@type {!Array.<number>}*/
                result
              );
            else
              bytes2.push(result);
          }
          if (!this._streaming) {
            while (true) {
              result = this._encoder.handler(input_stream, input_stream.read());
              if (result === finished)
                break;
              if (Array.isArray(result))
                bytes2.push.apply(
                  bytes2,
                  /**@type {!Array.<number>}*/
                  result
                );
              else
                bytes2.push(result);
            }
            this._encoder = null;
          }
          return new Uint8Array(bytes2);
        }
      };
      function UTF8Decoder(options) {
        var fatal = options.fatal;
        var utf8_code_point = 0, utf8_bytes_seen = 0, utf8_bytes_needed = 0, utf8_lower_boundary = 128, utf8_upper_boundary = 191;
        this.handler = function(stream, bite) {
          if (bite === end_of_stream && utf8_bytes_needed !== 0) {
            utf8_bytes_needed = 0;
            return decoderError(fatal);
          }
          if (bite === end_of_stream)
            return finished;
          if (utf8_bytes_needed === 0) {
            if (inRange2(bite, 0, 127)) {
              return bite;
            }
            if (inRange2(bite, 194, 223)) {
              utf8_bytes_needed = 1;
              utf8_code_point = bite - 192;
            } else if (inRange2(bite, 224, 239)) {
              if (bite === 224)
                utf8_lower_boundary = 160;
              if (bite === 237)
                utf8_upper_boundary = 159;
              utf8_bytes_needed = 2;
              utf8_code_point = bite - 224;
            } else if (inRange2(bite, 240, 244)) {
              if (bite === 240)
                utf8_lower_boundary = 144;
              if (bite === 244)
                utf8_upper_boundary = 143;
              utf8_bytes_needed = 3;
              utf8_code_point = bite - 240;
            } else {
              return decoderError(fatal);
            }
            utf8_code_point = utf8_code_point << 6 * utf8_bytes_needed;
            return null;
          }
          if (!inRange2(bite, utf8_lower_boundary, utf8_upper_boundary)) {
            utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;
            utf8_lower_boundary = 128;
            utf8_upper_boundary = 191;
            stream.prepend(bite);
            return decoderError(fatal);
          }
          utf8_lower_boundary = 128;
          utf8_upper_boundary = 191;
          utf8_bytes_seen += 1;
          utf8_code_point += bite - 128 << 6 * (utf8_bytes_needed - utf8_bytes_seen);
          if (utf8_bytes_seen !== utf8_bytes_needed)
            return null;
          var code_point = utf8_code_point;
          utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;
          return code_point;
        };
      }
      function UTF8Encoder(options) {
        var fatal = options.fatal;
        this.handler = function(stream, code_point) {
          if (code_point === end_of_stream)
            return finished;
          if (inRange2(code_point, 0, 127))
            return code_point;
          var count, offset2;
          if (inRange2(code_point, 128, 2047)) {
            count = 1;
            offset2 = 192;
          } else if (inRange2(code_point, 2048, 65535)) {
            count = 2;
            offset2 = 224;
          } else if (inRange2(code_point, 65536, 1114111)) {
            count = 3;
            offset2 = 240;
          }
          var bytes2 = [(code_point >> 6 * count) + offset2];
          while (count > 0) {
            var temp = code_point >> 6 * (count - 1);
            bytes2.push(128 | temp & 63);
            count -= 1;
          }
          return bytes2;
        };
      }
      exports.TextEncoder = TextEncoder2;
      exports.TextDecoder = TextDecoder2;
    }
  });

  // node_modules/borsh/lib/index.js
  var require_lib = __commonJS({
    "node_modules/borsh/lib/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __importStar = exports && exports.__importStar || function(mod3) {
        if (mod3 && mod3.__esModule) return mod3;
        var result = {};
        if (mod3 != null) {
          for (var k in mod3) if (k !== "default" && Object.hasOwnProperty.call(mod3, k)) __createBinding(result, mod3, k);
        }
        __setModuleDefault(result, mod3);
        return result;
      };
      var __importDefault = exports && exports.__importDefault || function(mod3) {
        return mod3 && mod3.__esModule ? mod3 : { "default": mod3 };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;
      var bn_js_1 = __importDefault(require_bn());
      var bs58_1 = __importDefault(require_bs582());
      var encoding = __importStar(require_encoding_lib());
      var ResolvedTextDecoder = typeof TextDecoder !== "function" ? encoding.TextDecoder : TextDecoder;
      var textDecoder = new ResolvedTextDecoder("utf-8", { fatal: true });
      function baseEncode(value) {
        if (typeof value === "string") {
          value = Buffer.from(value, "utf8");
        }
        return bs58_1.default.encode(Buffer.from(value));
      }
      exports.baseEncode = baseEncode;
      function baseDecode(value) {
        return Buffer.from(bs58_1.default.decode(value));
      }
      exports.baseDecode = baseDecode;
      var INITIAL_LENGTH = 1024;
      var BorshError = class extends Error {
        constructor(message) {
          super(message);
          this.fieldPath = [];
          this.originalMessage = message;
        }
        addToFieldPath(fieldName) {
          this.fieldPath.splice(0, 0, fieldName);
          this.message = this.originalMessage + ": " + this.fieldPath.join(".");
        }
      };
      exports.BorshError = BorshError;
      var BinaryWriter = class {
        constructor() {
          this.buf = Buffer.alloc(INITIAL_LENGTH);
          this.length = 0;
        }
        maybeResize() {
          if (this.buf.length < 16 + this.length) {
            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);
          }
        }
        writeU8(value) {
          this.maybeResize();
          this.buf.writeUInt8(value, this.length);
          this.length += 1;
        }
        writeU16(value) {
          this.maybeResize();
          this.buf.writeUInt16LE(value, this.length);
          this.length += 2;
        }
        writeU32(value) {
          this.maybeResize();
          this.buf.writeUInt32LE(value, this.length);
          this.length += 4;
        }
        writeU64(value) {
          this.maybeResize();
          this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray("le", 8)));
        }
        writeU128(value) {
          this.maybeResize();
          this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray("le", 16)));
        }
        writeU256(value) {
          this.maybeResize();
          this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray("le", 32)));
        }
        writeU512(value) {
          this.maybeResize();
          this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray("le", 64)));
        }
        writeBuffer(buffer) {
          this.buf = Buffer.concat([
            Buffer.from(this.buf.subarray(0, this.length)),
            buffer,
            Buffer.alloc(INITIAL_LENGTH)
          ]);
          this.length += buffer.length;
        }
        writeString(str) {
          this.maybeResize();
          const b2 = Buffer.from(str, "utf8");
          this.writeU32(b2.length);
          this.writeBuffer(b2);
        }
        writeFixedArray(array2) {
          this.writeBuffer(Buffer.from(array2));
        }
        writeArray(array2, fn) {
          this.maybeResize();
          this.writeU32(array2.length);
          for (const elem of array2) {
            this.maybeResize();
            fn(elem);
          }
        }
        toArray() {
          return this.buf.subarray(0, this.length);
        }
      };
      exports.BinaryWriter = BinaryWriter;
      function handlingRangeError(target, propertyKey, propertyDescriptor) {
        const originalMethod = propertyDescriptor.value;
        propertyDescriptor.value = function(...args) {
          try {
            return originalMethod.apply(this, args);
          } catch (e) {
            if (e instanceof RangeError) {
              const code = e.code;
              if (["ERR_BUFFER_OUT_OF_BOUNDS", "ERR_OUT_OF_RANGE"].indexOf(code) >= 0) {
                throw new BorshError("Reached the end of buffer when deserializing");
              }
            }
            throw e;
          }
        };
      }
      var BinaryReader = class {
        constructor(buf) {
          this.buf = buf;
          this.offset = 0;
        }
        readU8() {
          const value = this.buf.readUInt8(this.offset);
          this.offset += 1;
          return value;
        }
        readU16() {
          const value = this.buf.readUInt16LE(this.offset);
          this.offset += 2;
          return value;
        }
        readU32() {
          const value = this.buf.readUInt32LE(this.offset);
          this.offset += 4;
          return value;
        }
        readU64() {
          const buf = this.readBuffer(8);
          return new bn_js_1.default(buf, "le");
        }
        readU128() {
          const buf = this.readBuffer(16);
          return new bn_js_1.default(buf, "le");
        }
        readU256() {
          const buf = this.readBuffer(32);
          return new bn_js_1.default(buf, "le");
        }
        readU512() {
          const buf = this.readBuffer(64);
          return new bn_js_1.default(buf, "le");
        }
        readBuffer(len) {
          if (this.offset + len > this.buf.length) {
            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);
          }
          const result = this.buf.slice(this.offset, this.offset + len);
          this.offset += len;
          return result;
        }
        readString() {
          const len = this.readU32();
          const buf = this.readBuffer(len);
          try {
            return textDecoder.decode(buf);
          } catch (e) {
            throw new BorshError(`Error decoding UTF-8 string: ${e}`);
          }
        }
        readFixedArray(len) {
          return new Uint8Array(this.readBuffer(len));
        }
        readArray(fn) {
          const len = this.readU32();
          const result = Array();
          for (let i = 0; i < len; ++i) {
            result.push(fn());
          }
          return result;
        }
      };
      __decorate([
        handlingRangeError
      ], BinaryReader.prototype, "readU8", null);
      __decorate([
        handlingRangeError
      ], BinaryReader.prototype, "readU16", null);
      __decorate([
        handlingRangeError
      ], BinaryReader.prototype, "readU32", null);
      __decorate([
        handlingRangeError
      ], BinaryReader.prototype, "readU64", null);
      __decorate([
        handlingRangeError
      ], BinaryReader.prototype, "readU128", null);
      __decorate([
        handlingRangeError
      ], BinaryReader.prototype, "readU256", null);
      __decorate([
        handlingRangeError
      ], BinaryReader.prototype, "readU512", null);
      __decorate([
        handlingRangeError
      ], BinaryReader.prototype, "readString", null);
      __decorate([
        handlingRangeError
      ], BinaryReader.prototype, "readFixedArray", null);
      __decorate([
        handlingRangeError
      ], BinaryReader.prototype, "readArray", null);
      exports.BinaryReader = BinaryReader;
      function capitalizeFirstLetter(string2) {
        return string2.charAt(0).toUpperCase() + string2.slice(1);
      }
      function serializeField(schema, fieldName, value, fieldType, writer) {
        try {
          if (typeof fieldType === "string") {
            writer[`write${capitalizeFirstLetter(fieldType)}`](value);
          } else if (fieldType instanceof Array) {
            if (typeof fieldType[0] === "number") {
              if (value.length !== fieldType[0]) {
                throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);
              }
              writer.writeFixedArray(value);
            } else if (fieldType.length === 2 && typeof fieldType[1] === "number") {
              if (value.length !== fieldType[1]) {
                throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);
              }
              for (let i = 0; i < fieldType[1]; i++) {
                serializeField(schema, null, value[i], fieldType[0], writer);
              }
            } else {
              writer.writeArray(value, (item) => {
                serializeField(schema, fieldName, item, fieldType[0], writer);
              });
            }
          } else if (fieldType.kind !== void 0) {
            switch (fieldType.kind) {
              case "option": {
                if (value === null || value === void 0) {
                  writer.writeU8(0);
                } else {
                  writer.writeU8(1);
                  serializeField(schema, fieldName, value, fieldType.type, writer);
                }
                break;
              }
              case "map": {
                writer.writeU32(value.size);
                value.forEach((val, key) => {
                  serializeField(schema, fieldName, key, fieldType.key, writer);
                  serializeField(schema, fieldName, val, fieldType.value, writer);
                });
                break;
              }
              default:
                throw new BorshError(`FieldType ${fieldType} unrecognized`);
            }
          } else {
            serializeStruct(schema, value, writer);
          }
        } catch (error) {
          if (error instanceof BorshError) {
            error.addToFieldPath(fieldName);
          }
          throw error;
        }
      }
      function serializeStruct(schema, obj, writer) {
        if (typeof obj.borshSerialize === "function") {
          obj.borshSerialize(writer);
          return;
        }
        const structSchema = schema.get(obj.constructor);
        if (!structSchema) {
          throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);
        }
        if (structSchema.kind === "struct") {
          structSchema.fields.map(([fieldName, fieldType]) => {
            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);
          });
        } else if (structSchema.kind === "enum") {
          const name = obj[structSchema.field];
          for (let idx = 0; idx < structSchema.values.length; ++idx) {
            const [fieldName, fieldType] = structSchema.values[idx];
            if (fieldName === name) {
              writer.writeU8(idx);
              serializeField(schema, fieldName, obj[fieldName], fieldType, writer);
              break;
            }
          }
        } else {
          throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);
        }
      }
      function serialize2(schema, obj, Writer2 = BinaryWriter) {
        const writer = new Writer2();
        serializeStruct(schema, obj, writer);
        return writer.toArray();
      }
      exports.serialize = serialize2;
      function deserializeField(schema, fieldName, fieldType, reader) {
        try {
          if (typeof fieldType === "string") {
            return reader[`read${capitalizeFirstLetter(fieldType)}`]();
          }
          if (fieldType instanceof Array) {
            if (typeof fieldType[0] === "number") {
              return reader.readFixedArray(fieldType[0]);
            } else if (typeof fieldType[1] === "number") {
              const arr = [];
              for (let i = 0; i < fieldType[1]; i++) {
                arr.push(deserializeField(schema, null, fieldType[0], reader));
              }
              return arr;
            } else {
              return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));
            }
          }
          if (fieldType.kind === "option") {
            const option = reader.readU8();
            if (option) {
              return deserializeField(schema, fieldName, fieldType.type, reader);
            }
            return void 0;
          }
          if (fieldType.kind === "map") {
            let map = /* @__PURE__ */ new Map();
            const length = reader.readU32();
            for (let i = 0; i < length; i++) {
              const key = deserializeField(schema, fieldName, fieldType.key, reader);
              const val = deserializeField(schema, fieldName, fieldType.value, reader);
              map.set(key, val);
            }
            return map;
          }
          return deserializeStruct(schema, fieldType, reader);
        } catch (error) {
          if (error instanceof BorshError) {
            error.addToFieldPath(fieldName);
          }
          throw error;
        }
      }
      function deserializeStruct(schema, classType, reader) {
        if (typeof classType.borshDeserialize === "function") {
          return classType.borshDeserialize(reader);
        }
        const structSchema = schema.get(classType);
        if (!structSchema) {
          throw new BorshError(`Class ${classType.name} is missing in schema`);
        }
        if (structSchema.kind === "struct") {
          const result = {};
          for (const [fieldName, fieldType] of schema.get(classType).fields) {
            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);
          }
          return new classType(result);
        }
        if (structSchema.kind === "enum") {
          const idx = reader.readU8();
          if (idx >= structSchema.values.length) {
            throw new BorshError(`Enum index: ${idx} is out of range`);
          }
          const [fieldName, fieldType] = structSchema.values[idx];
          const fieldValue = deserializeField(schema, fieldName, fieldType, reader);
          return new classType({ [fieldName]: fieldValue });
        }
        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);
      }
      function deserialize2(schema, classType, buffer, Reader2 = BinaryReader) {
        const reader = new Reader2(buffer);
        const result = deserializeStruct(schema, classType, reader);
        if (reader.offset < buffer.length) {
          throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);
        }
        return result;
      }
      exports.deserialize = deserialize2;
      function deserializeUnchecked2(schema, classType, buffer, Reader2 = BinaryReader) {
        const reader = new Reader2(buffer);
        return deserializeStruct(schema, classType, reader);
      }
      exports.deserializeUnchecked = deserializeUnchecked2;
    }
  });

  // node_modules/@solana/buffer-layout/lib/Layout.js
  var require_Layout = __commonJS({
    "node_modules/@solana/buffer-layout/lib/Layout.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.s16 = exports.s8 = exports.nu64be = exports.u48be = exports.u40be = exports.u32be = exports.u24be = exports.u16be = exports.nu64 = exports.u48 = exports.u40 = exports.u32 = exports.u24 = exports.u16 = exports.u8 = exports.offset = exports.greedy = exports.Constant = exports.UTF8 = exports.CString = exports.Blob = exports.Boolean = exports.BitField = exports.BitStructure = exports.VariantLayout = exports.Union = exports.UnionLayoutDiscriminator = exports.UnionDiscriminator = exports.Structure = exports.Sequence = exports.DoubleBE = exports.Double = exports.FloatBE = exports.Float = exports.NearInt64BE = exports.NearInt64 = exports.NearUInt64BE = exports.NearUInt64 = exports.IntBE = exports.Int = exports.UIntBE = exports.UInt = exports.OffsetLayout = exports.GreedyCount = exports.ExternalLayout = exports.bindConstructorLayout = exports.nameWithProperty = exports.Layout = exports.uint8ArrayToBuffer = exports.checkUint8Array = void 0;
      exports.constant = exports.utf8 = exports.cstr = exports.blob = exports.unionLayoutDiscriminator = exports.union = exports.seq = exports.bits = exports.struct = exports.f64be = exports.f64 = exports.f32be = exports.f32 = exports.ns64be = exports.s48be = exports.s40be = exports.s32be = exports.s24be = exports.s16be = exports.ns64 = exports.s48 = exports.s40 = exports.s32 = exports.s24 = void 0;
      var buffer_1 = require_buffer();
      function checkUint8Array(b2) {
        if (!(b2 instanceof Uint8Array)) {
          throw new TypeError("b must be a Uint8Array");
        }
      }
      exports.checkUint8Array = checkUint8Array;
      function uint8ArrayToBuffer(b2) {
        checkUint8Array(b2);
        return buffer_1.Buffer.from(b2.buffer, b2.byteOffset, b2.length);
      }
      exports.uint8ArrayToBuffer = uint8ArrayToBuffer;
      var Layout = class {
        constructor(span, property) {
          if (!Number.isInteger(span)) {
            throw new TypeError("span must be an integer");
          }
          this.span = span;
          this.property = property;
        }
        /** Function to create an Object into which decoded properties will
         * be written.
         *
         * Used only for layouts that {@link Layout#decode|decode} to Object
         * instances, which means:
         * * {@link Structure}
         * * {@link Union}
         * * {@link VariantLayout}
         * * {@link BitStructure}
         *
         * If left undefined the JavaScript representation of these layouts
         * will be Object instances.
         *
         * See {@link bindConstructorLayout}.
         */
        makeDestinationObject() {
          return {};
        }
        /**
         * Calculate the span of a specific instance of a layout.
         *
         * @param {Uint8Array} b - the buffer that contains an encoded instance.
         *
         * @param {Number} [offset] - the offset at which the encoded instance
         * starts.  If absent a zero offset is inferred.
         *
         * @return {Number} - the number of bytes covered by the layout
         * instance.  If this method is not overridden in a subclass the
         * definition-time constant {@link Layout#span|span} will be
         * returned.
         *
         * @throws {RangeError} - if the length of the value cannot be
         * determined.
         */
        getSpan(b2, offset2) {
          if (0 > this.span) {
            throw new RangeError("indeterminate span");
          }
          return this.span;
        }
        /**
         * Replicate the layout using a new property.
         *
         * This function must be used to get a structurally-equivalent layout
         * with a different name since all {@link Layout} instances are
         * immutable.
         *
         * **NOTE** This is a shallow copy.  All fields except {@link
         * Layout#property|property} are strictly equal to the origin layout.
         *
         * @param {String} property - the value for {@link
         * Layout#property|property} in the replica.
         *
         * @returns {Layout} - the copy with {@link Layout#property|property}
         * set to `property`.
         */
        replicate(property) {
          const rv = Object.create(this.constructor.prototype);
          Object.assign(rv, this);
          rv.property = property;
          return rv;
        }
        /**
         * Create an object from layout properties and an array of values.
         *
         * **NOTE** This function returns `undefined` if invoked on a layout
         * that does not return its value as an Object.  Objects are
         * returned for things that are a {@link Structure}, which includes
         * {@link VariantLayout|variant layouts} if they are structures, and
         * excludes {@link Union}s.  If you want this feature for a union
         * you must use {@link Union.getVariant|getVariant} to select the
         * desired layout.
         *
         * @param {Array} values - an array of values that correspond to the
         * default order for properties.  As with {@link Layout#decode|decode}
         * layout elements that have no property name are skipped when
         * iterating over the array values.  Only the top-level properties are
         * assigned; arguments are not assigned to properties of contained
         * layouts.  Any unused values are ignored.
         *
         * @return {(Object|undefined)}
         */
        fromArray(values) {
          return void 0;
        }
      };
      exports.Layout = Layout;
      function nameWithProperty(name, lo) {
        if (lo.property) {
          return name + "[" + lo.property + "]";
        }
        return name;
      }
      exports.nameWithProperty = nameWithProperty;
      function bindConstructorLayout(Class, layout) {
        if ("function" !== typeof Class) {
          throw new TypeError("Class must be constructor");
        }
        if (Object.prototype.hasOwnProperty.call(Class, "layout_")) {
          throw new Error("Class is already bound to a layout");
        }
        if (!(layout && layout instanceof Layout)) {
          throw new TypeError("layout must be a Layout");
        }
        if (Object.prototype.hasOwnProperty.call(layout, "boundConstructor_")) {
          throw new Error("layout is already bound to a constructor");
        }
        Class.layout_ = layout;
        layout.boundConstructor_ = Class;
        layout.makeDestinationObject = () => new Class();
        Object.defineProperty(Class.prototype, "encode", {
          value(b2, offset2) {
            return layout.encode(this, b2, offset2);
          },
          writable: true
        });
        Object.defineProperty(Class, "decode", {
          value(b2, offset2) {
            return layout.decode(b2, offset2);
          },
          writable: true
        });
      }
      exports.bindConstructorLayout = bindConstructorLayout;
      var ExternalLayout = class extends Layout {
        /**
         * Return `true` iff the external layout decodes to an unsigned
         * integer layout.
         *
         * In that case it can be used as the source of {@link
         * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},
         * or as {@link UnionLayoutDiscriminator#layout|external union
         * discriminators}.
         *
         * @abstract
         */
        isCount() {
          throw new Error("ExternalLayout is abstract");
        }
      };
      exports.ExternalLayout = ExternalLayout;
      var GreedyCount = class extends ExternalLayout {
        constructor(elementSpan = 1, property) {
          if (!Number.isInteger(elementSpan) || 0 >= elementSpan) {
            throw new TypeError("elementSpan must be a (positive) integer");
          }
          super(-1, property);
          this.elementSpan = elementSpan;
        }
        /** @override */
        isCount() {
          return true;
        }
        /** @override */
        decode(b2, offset2 = 0) {
          checkUint8Array(b2);
          const rem = b2.length - offset2;
          return Math.floor(rem / this.elementSpan);
        }
        /** @override */
        encode(src, b2, offset2) {
          return 0;
        }
      };
      exports.GreedyCount = GreedyCount;
      var OffsetLayout = class extends ExternalLayout {
        constructor(layout, offset2 = 0, property) {
          if (!(layout instanceof Layout)) {
            throw new TypeError("layout must be a Layout");
          }
          if (!Number.isInteger(offset2)) {
            throw new TypeError("offset must be integer or undefined");
          }
          super(layout.span, property || layout.property);
          this.layout = layout;
          this.offset = offset2;
        }
        /** @override */
        isCount() {
          return this.layout instanceof UInt || this.layout instanceof UIntBE;
        }
        /** @override */
        decode(b2, offset2 = 0) {
          return this.layout.decode(b2, offset2 + this.offset);
        }
        /** @override */
        encode(src, b2, offset2 = 0) {
          return this.layout.encode(src, b2, offset2 + this.offset);
        }
      };
      exports.OffsetLayout = OffsetLayout;
      var UInt = class extends Layout {
        constructor(span, property) {
          super(span, property);
          if (6 < this.span) {
            throw new RangeError("span must not exceed 6 bytes");
          }
        }
        /** @override */
        decode(b2, offset2 = 0) {
          return uint8ArrayToBuffer(b2).readUIntLE(offset2, this.span);
        }
        /** @override */
        encode(src, b2, offset2 = 0) {
          uint8ArrayToBuffer(b2).writeUIntLE(src, offset2, this.span);
          return this.span;
        }
      };
      exports.UInt = UInt;
      var UIntBE = class extends Layout {
        constructor(span, property) {
          super(span, property);
          if (6 < this.span) {
            throw new RangeError("span must not exceed 6 bytes");
          }
        }
        /** @override */
        decode(b2, offset2 = 0) {
          return uint8ArrayToBuffer(b2).readUIntBE(offset2, this.span);
        }
        /** @override */
        encode(src, b2, offset2 = 0) {
          uint8ArrayToBuffer(b2).writeUIntBE(src, offset2, this.span);
          return this.span;
        }
      };
      exports.UIntBE = UIntBE;
      var Int = class extends Layout {
        constructor(span, property) {
          super(span, property);
          if (6 < this.span) {
            throw new RangeError("span must not exceed 6 bytes");
          }
        }
        /** @override */
        decode(b2, offset2 = 0) {
          return uint8ArrayToBuffer(b2).readIntLE(offset2, this.span);
        }
        /** @override */
        encode(src, b2, offset2 = 0) {
          uint8ArrayToBuffer(b2).writeIntLE(src, offset2, this.span);
          return this.span;
        }
      };
      exports.Int = Int;
      var IntBE = class extends Layout {
        constructor(span, property) {
          super(span, property);
          if (6 < this.span) {
            throw new RangeError("span must not exceed 6 bytes");
          }
        }
        /** @override */
        decode(b2, offset2 = 0) {
          return uint8ArrayToBuffer(b2).readIntBE(offset2, this.span);
        }
        /** @override */
        encode(src, b2, offset2 = 0) {
          uint8ArrayToBuffer(b2).writeIntBE(src, offset2, this.span);
          return this.span;
        }
      };
      exports.IntBE = IntBE;
      var V2E32 = Math.pow(2, 32);
      function divmodInt64(src) {
        const hi32 = Math.floor(src / V2E32);
        const lo32 = src - hi32 * V2E32;
        return { hi32, lo32 };
      }
      function roundedInt64(hi32, lo32) {
        return hi32 * V2E32 + lo32;
      }
      var NearUInt64 = class extends Layout {
        constructor(property) {
          super(8, property);
        }
        /** @override */
        decode(b2, offset2 = 0) {
          const buffer = uint8ArrayToBuffer(b2);
          const lo32 = buffer.readUInt32LE(offset2);
          const hi32 = buffer.readUInt32LE(offset2 + 4);
          return roundedInt64(hi32, lo32);
        }
        /** @override */
        encode(src, b2, offset2 = 0) {
          const split4 = divmodInt64(src);
          const buffer = uint8ArrayToBuffer(b2);
          buffer.writeUInt32LE(split4.lo32, offset2);
          buffer.writeUInt32LE(split4.hi32, offset2 + 4);
          return 8;
        }
      };
      exports.NearUInt64 = NearUInt64;
      var NearUInt64BE = class extends Layout {
        constructor(property) {
          super(8, property);
        }
        /** @override */
        decode(b2, offset2 = 0) {
          const buffer = uint8ArrayToBuffer(b2);
          const hi32 = buffer.readUInt32BE(offset2);
          const lo32 = buffer.readUInt32BE(offset2 + 4);
          return roundedInt64(hi32, lo32);
        }
        /** @override */
        encode(src, b2, offset2 = 0) {
          const split4 = divmodInt64(src);
          const buffer = uint8ArrayToBuffer(b2);
          buffer.writeUInt32BE(split4.hi32, offset2);
          buffer.writeUInt32BE(split4.lo32, offset2 + 4);
          return 8;
        }
      };
      exports.NearUInt64BE = NearUInt64BE;
      var NearInt64 = class extends Layout {
        constructor(property) {
          super(8, property);
        }
        /** @override */
        decode(b2, offset2 = 0) {
          const buffer = uint8ArrayToBuffer(b2);
          const lo32 = buffer.readUInt32LE(offset2);
          const hi32 = buffer.readInt32LE(offset2 + 4);
          return roundedInt64(hi32, lo32);
        }
        /** @override */
        encode(src, b2, offset2 = 0) {
          const split4 = divmodInt64(src);
          const buffer = uint8ArrayToBuffer(b2);
          buffer.writeUInt32LE(split4.lo32, offset2);
          buffer.writeInt32LE(split4.hi32, offset2 + 4);
          return 8;
        }
      };
      exports.NearInt64 = NearInt64;
      var NearInt64BE = class extends Layout {
        constructor(property) {
          super(8, property);
        }
        /** @override */
        decode(b2, offset2 = 0) {
          const buffer = uint8ArrayToBuffer(b2);
          const hi32 = buffer.readInt32BE(offset2);
          const lo32 = buffer.readUInt32BE(offset2 + 4);
          return roundedInt64(hi32, lo32);
        }
        /** @override */
        encode(src, b2, offset2 = 0) {
          const split4 = divmodInt64(src);
          const buffer = uint8ArrayToBuffer(b2);
          buffer.writeInt32BE(split4.hi32, offset2);
          buffer.writeUInt32BE(split4.lo32, offset2 + 4);
          return 8;
        }
      };
      exports.NearInt64BE = NearInt64BE;
      var Float = class extends Layout {
        constructor(property) {
          super(4, property);
        }
        /** @override */
        decode(b2, offset2 = 0) {
          return uint8ArrayToBuffer(b2).readFloatLE(offset2);
        }
        /** @override */
        encode(src, b2, offset2 = 0) {
          uint8ArrayToBuffer(b2).writeFloatLE(src, offset2);
          return 4;
        }
      };
      exports.Float = Float;
      var FloatBE = class extends Layout {
        constructor(property) {
          super(4, property);
        }
        /** @override */
        decode(b2, offset2 = 0) {
          return uint8ArrayToBuffer(b2).readFloatBE(offset2);
        }
        /** @override */
        encode(src, b2, offset2 = 0) {
          uint8ArrayToBuffer(b2).writeFloatBE(src, offset2);
          return 4;
        }
      };
      exports.FloatBE = FloatBE;
      var Double = class extends Layout {
        constructor(property) {
          super(8, property);
        }
        /** @override */
        decode(b2, offset2 = 0) {
          return uint8ArrayToBuffer(b2).readDoubleLE(offset2);
        }
        /** @override */
        encode(src, b2, offset2 = 0) {
          uint8ArrayToBuffer(b2).writeDoubleLE(src, offset2);
          return 8;
        }
      };
      exports.Double = Double;
      var DoubleBE = class extends Layout {
        constructor(property) {
          super(8, property);
        }
        /** @override */
        decode(b2, offset2 = 0) {
          return uint8ArrayToBuffer(b2).readDoubleBE(offset2);
        }
        /** @override */
        encode(src, b2, offset2 = 0) {
          uint8ArrayToBuffer(b2).writeDoubleBE(src, offset2);
          return 8;
        }
      };
      exports.DoubleBE = DoubleBE;
      var Sequence = class extends Layout {
        constructor(elementLayout, count, property) {
          if (!(elementLayout instanceof Layout)) {
            throw new TypeError("elementLayout must be a Layout");
          }
          if (!(count instanceof ExternalLayout && count.isCount() || Number.isInteger(count) && 0 <= count)) {
            throw new TypeError("count must be non-negative integer or an unsigned integer ExternalLayout");
          }
          let span = -1;
          if (!(count instanceof ExternalLayout) && 0 < elementLayout.span) {
            span = count * elementLayout.span;
          }
          super(span, property);
          this.elementLayout = elementLayout;
          this.count = count;
        }
        /** @override */
        getSpan(b2, offset2 = 0) {
          if (0 <= this.span) {
            return this.span;
          }
          let span = 0;
          let count = this.count;
          if (count instanceof ExternalLayout) {
            count = count.decode(b2, offset2);
          }
          if (0 < this.elementLayout.span) {
            span = count * this.elementLayout.span;
          } else {
            let idx = 0;
            while (idx < count) {
              span += this.elementLayout.getSpan(b2, offset2 + span);
              ++idx;
            }
          }
          return span;
        }
        /** @override */
        decode(b2, offset2 = 0) {
          const rv = [];
          let i = 0;
          let count = this.count;
          if (count instanceof ExternalLayout) {
            count = count.decode(b2, offset2);
          }
          while (i < count) {
            rv.push(this.elementLayout.decode(b2, offset2));
            offset2 += this.elementLayout.getSpan(b2, offset2);
            i += 1;
          }
          return rv;
        }
        /** Implement {@link Layout#encode|encode} for {@link Sequence}.
         *
         * **NOTE** If `src` is shorter than {@link Sequence#count|count} then
         * the unused space in the buffer is left unchanged.  If `src` is
         * longer than {@link Sequence#count|count} the unneeded elements are
         * ignored.
         *
         * **NOTE** If {@link Layout#count|count} is an instance of {@link
         * ExternalLayout} then the length of `src` will be encoded as the
         * count after `src` is encoded. */
        encode(src, b2, offset2 = 0) {
          const elo = this.elementLayout;
          const span = src.reduce((span2, v) => {
            return span2 + elo.encode(v, b2, offset2 + span2);
          }, 0);
          if (this.count instanceof ExternalLayout) {
            this.count.encode(src.length, b2, offset2);
          }
          return span;
        }
      };
      exports.Sequence = Sequence;
      var Structure = class extends Layout {
        constructor(fields, property, decodePrefixes) {
          if (!(Array.isArray(fields) && fields.reduce((acc, v) => acc && v instanceof Layout, true))) {
            throw new TypeError("fields must be array of Layout instances");
          }
          if ("boolean" === typeof property && void 0 === decodePrefixes) {
            decodePrefixes = property;
            property = void 0;
          }
          for (const fd of fields) {
            if (0 > fd.span && void 0 === fd.property) {
              throw new Error("fields cannot contain unnamed variable-length layout");
            }
          }
          let span = -1;
          try {
            span = fields.reduce((span2, fd) => span2 + fd.getSpan(), 0);
          } catch (e) {
          }
          super(span, property);
          this.fields = fields;
          this.decodePrefixes = !!decodePrefixes;
        }
        /** @override */
        getSpan(b2, offset2 = 0) {
          if (0 <= this.span) {
            return this.span;
          }
          let span = 0;
          try {
            span = this.fields.reduce((span2, fd) => {
              const fsp = fd.getSpan(b2, offset2);
              offset2 += fsp;
              return span2 + fsp;
            }, 0);
          } catch (e) {
            throw new RangeError("indeterminate span");
          }
          return span;
        }
        /** @override */
        decode(b2, offset2 = 0) {
          checkUint8Array(b2);
          const dest = this.makeDestinationObject();
          for (const fd of this.fields) {
            if (void 0 !== fd.property) {
              dest[fd.property] = fd.decode(b2, offset2);
            }
            offset2 += fd.getSpan(b2, offset2);
            if (this.decodePrefixes && b2.length === offset2) {
              break;
            }
          }
          return dest;
        }
        /** Implement {@link Layout#encode|encode} for {@link Structure}.
         *
         * If `src` is missing a property for a member with a defined {@link
         * Layout#property|property} the corresponding region of the buffer is
         * left unmodified. */
        encode(src, b2, offset2 = 0) {
          const firstOffset = offset2;
          let lastOffset = 0;
          let lastWrote = 0;
          for (const fd of this.fields) {
            let span = fd.span;
            lastWrote = 0 < span ? span : 0;
            if (void 0 !== fd.property) {
              const fv = src[fd.property];
              if (void 0 !== fv) {
                lastWrote = fd.encode(fv, b2, offset2);
                if (0 > span) {
                  span = fd.getSpan(b2, offset2);
                }
              }
            }
            lastOffset = offset2;
            offset2 += span;
          }
          return lastOffset + lastWrote - firstOffset;
        }
        /** @override */
        fromArray(values) {
          const dest = this.makeDestinationObject();
          for (const fd of this.fields) {
            if (void 0 !== fd.property && 0 < values.length) {
              dest[fd.property] = values.shift();
            }
          }
          return dest;
        }
        /**
         * Get access to the layout of a given property.
         *
         * @param {String} property - the structure member of interest.
         *
         * @return {Layout} - the layout associated with `property`, or
         * undefined if there is no such property.
         */
        layoutFor(property) {
          if ("string" !== typeof property) {
            throw new TypeError("property must be string");
          }
          for (const fd of this.fields) {
            if (fd.property === property) {
              return fd;
            }
          }
          return void 0;
        }
        /**
         * Get the offset of a structure member.
         *
         * @param {String} property - the structure member of interest.
         *
         * @return {Number} - the offset in bytes to the start of `property`
         * within the structure, or undefined if `property` is not a field
         * within the structure.  If the property is a member but follows a
         * variable-length structure member a negative number will be
         * returned.
         */
        offsetOf(property) {
          if ("string" !== typeof property) {
            throw new TypeError("property must be string");
          }
          let offset2 = 0;
          for (const fd of this.fields) {
            if (fd.property === property) {
              return offset2;
            }
            if (0 > fd.span) {
              offset2 = -1;
            } else if (0 <= offset2) {
              offset2 += fd.span;
            }
          }
          return void 0;
        }
      };
      exports.Structure = Structure;
      var UnionDiscriminator = class {
        constructor(property) {
          this.property = property;
        }
        /** Analog to {@link Layout#decode|Layout decode} for union discriminators.
         *
         * The implementation of this method need not reference the buffer if
         * variant information is available through other means. */
        decode(b2, offset2) {
          throw new Error("UnionDiscriminator is abstract");
        }
        /** Analog to {@link Layout#decode|Layout encode} for union discriminators.
         *
         * The implementation of this method need not store the value if
         * variant information is maintained through other means. */
        encode(src, b2, offset2) {
          throw new Error("UnionDiscriminator is abstract");
        }
      };
      exports.UnionDiscriminator = UnionDiscriminator;
      var UnionLayoutDiscriminator = class extends UnionDiscriminator {
        constructor(layout, property) {
          if (!(layout instanceof ExternalLayout && layout.isCount())) {
            throw new TypeError("layout must be an unsigned integer ExternalLayout");
          }
          super(property || layout.property || "variant");
          this.layout = layout;
        }
        /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */
        decode(b2, offset2) {
          return this.layout.decode(b2, offset2);
        }
        /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */
        encode(src, b2, offset2) {
          return this.layout.encode(src, b2, offset2);
        }
      };
      exports.UnionLayoutDiscriminator = UnionLayoutDiscriminator;
      var Union = class extends Layout {
        constructor(discr, defaultLayout, property) {
          let discriminator;
          if (discr instanceof UInt || discr instanceof UIntBE) {
            discriminator = new UnionLayoutDiscriminator(new OffsetLayout(discr));
          } else if (discr instanceof ExternalLayout && discr.isCount()) {
            discriminator = new UnionLayoutDiscriminator(discr);
          } else if (!(discr instanceof UnionDiscriminator)) {
            throw new TypeError("discr must be a UnionDiscriminator or an unsigned integer layout");
          } else {
            discriminator = discr;
          }
          if (void 0 === defaultLayout) {
            defaultLayout = null;
          }
          if (!(null === defaultLayout || defaultLayout instanceof Layout)) {
            throw new TypeError("defaultLayout must be null or a Layout");
          }
          if (null !== defaultLayout) {
            if (0 > defaultLayout.span) {
              throw new Error("defaultLayout must have constant span");
            }
            if (void 0 === defaultLayout.property) {
              defaultLayout = defaultLayout.replicate("content");
            }
          }
          let span = -1;
          if (defaultLayout) {
            span = defaultLayout.span;
            if (0 <= span && (discr instanceof UInt || discr instanceof UIntBE)) {
              span += discriminator.layout.span;
            }
          }
          super(span, property);
          this.discriminator = discriminator;
          this.usesPrefixDiscriminator = discr instanceof UInt || discr instanceof UIntBE;
          this.defaultLayout = defaultLayout;
          this.registry = {};
          let boundGetSourceVariant = this.defaultGetSourceVariant.bind(this);
          this.getSourceVariant = function(src) {
            return boundGetSourceVariant(src);
          };
          this.configGetSourceVariant = function(gsv) {
            boundGetSourceVariant = gsv.bind(this);
          };
        }
        /** @override */
        getSpan(b2, offset2 = 0) {
          if (0 <= this.span) {
            return this.span;
          }
          const vlo = this.getVariant(b2, offset2);
          if (!vlo) {
            throw new Error("unable to determine span for unrecognized variant");
          }
          return vlo.getSpan(b2, offset2);
        }
        /**
         * Method to infer a registered Union variant compatible with `src`.
         *
         * The first satisfied rule in the following sequence defines the
         * return value:
         * * If `src` has properties matching the Union discriminator and
         *   the default layout, `undefined` is returned regardless of the
         *   value of the discriminator property (this ensures the default
         *   layout will be used);
         * * If `src` has a property matching the Union discriminator, the
         *   value of the discriminator identifies a registered variant, and
         *   either (a) the variant has no layout, or (b) `src` has the
         *   variant's property, then the variant is returned (because the
         *   source satisfies the constraints of the variant it identifies);
         * * If `src` does not have a property matching the Union
         *   discriminator, but does have a property matching a registered
         *   variant, then the variant is returned (because the source
         *   matches a variant without an explicit conflict);
         * * An error is thrown (because we either can't identify a variant,
         *   or we were explicitly told the variant but can't satisfy it).
         *
         * @param {Object} src - an object presumed to be compatible with
         * the content of the Union.
         *
         * @return {(undefined|VariantLayout)} - as described above.
         *
         * @throws {Error} - if `src` cannot be associated with a default or
         * registered variant.
         */
        defaultGetSourceVariant(src) {
          if (Object.prototype.hasOwnProperty.call(src, this.discriminator.property)) {
            if (this.defaultLayout && this.defaultLayout.property && Object.prototype.hasOwnProperty.call(src, this.defaultLayout.property)) {
              return void 0;
            }
            const vlo = this.registry[src[this.discriminator.property]];
            if (vlo && (!vlo.layout || vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property))) {
              return vlo;
            }
          } else {
            for (const tag in this.registry) {
              const vlo = this.registry[tag];
              if (vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property)) {
                return vlo;
              }
            }
          }
          throw new Error("unable to infer src variant");
        }
        /** Implement {@link Layout#decode|decode} for {@link Union}.
         *
         * If the variant is {@link Union#addVariant|registered} the return
         * value is an instance of that variant, with no explicit
         * discriminator.  Otherwise the {@link Union#defaultLayout|default
         * layout} is used to decode the content. */
        decode(b2, offset2 = 0) {
          let dest;
          const dlo = this.discriminator;
          const discr = dlo.decode(b2, offset2);
          const clo = this.registry[discr];
          if (void 0 === clo) {
            const defaultLayout = this.defaultLayout;
            let contentOffset = 0;
            if (this.usesPrefixDiscriminator) {
              contentOffset = dlo.layout.span;
            }
            dest = this.makeDestinationObject();
            dest[dlo.property] = discr;
            dest[defaultLayout.property] = defaultLayout.decode(b2, offset2 + contentOffset);
          } else {
            dest = clo.decode(b2, offset2);
          }
          return dest;
        }
        /** Implement {@link Layout#encode|encode} for {@link Union}.
         *
         * This API assumes the `src` object is consistent with the union's
         * {@link Union#defaultLayout|default layout}.  To encode variants
         * use the appropriate variant-specific {@link VariantLayout#encode}
         * method. */
        encode(src, b2, offset2 = 0) {
          const vlo = this.getSourceVariant(src);
          if (void 0 === vlo) {
            const dlo = this.discriminator;
            const clo = this.defaultLayout;
            let contentOffset = 0;
            if (this.usesPrefixDiscriminator) {
              contentOffset = dlo.layout.span;
            }
            dlo.encode(src[dlo.property], b2, offset2);
            return contentOffset + clo.encode(src[clo.property], b2, offset2 + contentOffset);
          }
          return vlo.encode(src, b2, offset2);
        }
        /** Register a new variant structure within a union.  The newly
         * created variant is returned.
         *
         * @param {Number} variant - initializer for {@link
         * VariantLayout#variant|variant}.
         *
         * @param {Layout} layout - initializer for {@link
         * VariantLayout#layout|layout}.
         *
         * @param {String} property - initializer for {@link
         * Layout#property|property}.
         *
         * @return {VariantLayout} */
        addVariant(variant, layout, property) {
          const rv = new VariantLayout(this, variant, layout, property);
          this.registry[variant] = rv;
          return rv;
        }
        /**
         * Get the layout associated with a registered variant.
         *
         * If `vb` does not produce a registered variant the function returns
         * `undefined`.
         *
         * @param {(Number|Uint8Array)} vb - either the variant number, or a
         * buffer from which the discriminator is to be read.
         *
         * @param {Number} offset - offset into `vb` for the start of the
         * union.  Used only when `vb` is an instance of {Uint8Array}.
         *
         * @return {({VariantLayout}|undefined)}
         */
        getVariant(vb, offset2 = 0) {
          let variant;
          if (vb instanceof Uint8Array) {
            variant = this.discriminator.decode(vb, offset2);
          } else {
            variant = vb;
          }
          return this.registry[variant];
        }
      };
      exports.Union = Union;
      var VariantLayout = class extends Layout {
        constructor(union2, variant, layout, property) {
          if (!(union2 instanceof Union)) {
            throw new TypeError("union must be a Union");
          }
          if (!Number.isInteger(variant) || 0 > variant) {
            throw new TypeError("variant must be a (non-negative) integer");
          }
          if ("string" === typeof layout && void 0 === property) {
            property = layout;
            layout = null;
          }
          if (layout) {
            if (!(layout instanceof Layout)) {
              throw new TypeError("layout must be a Layout");
            }
            if (null !== union2.defaultLayout && 0 <= layout.span && layout.span > union2.defaultLayout.span) {
              throw new Error("variant span exceeds span of containing union");
            }
            if ("string" !== typeof property) {
              throw new TypeError("variant must have a String property");
            }
          }
          let span = union2.span;
          if (0 > union2.span) {
            span = layout ? layout.span : 0;
            if (0 <= span && union2.usesPrefixDiscriminator) {
              span += union2.discriminator.layout.span;
            }
          }
          super(span, property);
          this.union = union2;
          this.variant = variant;
          this.layout = layout || null;
        }
        /** @override */
        getSpan(b2, offset2 = 0) {
          if (0 <= this.span) {
            return this.span;
          }
          let contentOffset = 0;
          if (this.union.usesPrefixDiscriminator) {
            contentOffset = this.union.discriminator.layout.span;
          }
          let span = 0;
          if (this.layout) {
            span = this.layout.getSpan(b2, offset2 + contentOffset);
          }
          return contentOffset + span;
        }
        /** @override */
        decode(b2, offset2 = 0) {
          const dest = this.makeDestinationObject();
          if (this !== this.union.getVariant(b2, offset2)) {
            throw new Error("variant mismatch");
          }
          let contentOffset = 0;
          if (this.union.usesPrefixDiscriminator) {
            contentOffset = this.union.discriminator.layout.span;
          }
          if (this.layout) {
            dest[this.property] = this.layout.decode(b2, offset2 + contentOffset);
          } else if (this.property) {
            dest[this.property] = true;
          } else if (this.union.usesPrefixDiscriminator) {
            dest[this.union.discriminator.property] = this.variant;
          }
          return dest;
        }
        /** @override */
        encode(src, b2, offset2 = 0) {
          let contentOffset = 0;
          if (this.union.usesPrefixDiscriminator) {
            contentOffset = this.union.discriminator.layout.span;
          }
          if (this.layout && !Object.prototype.hasOwnProperty.call(src, this.property)) {
            throw new TypeError("variant lacks property " + this.property);
          }
          this.union.discriminator.encode(this.variant, b2, offset2);
          let span = contentOffset;
          if (this.layout) {
            this.layout.encode(src[this.property], b2, offset2 + contentOffset);
            span += this.layout.getSpan(b2, offset2 + contentOffset);
            if (0 <= this.union.span && span > this.union.span) {
              throw new Error("encoded variant overruns containing union");
            }
          }
          return span;
        }
        /** Delegate {@link Layout#fromArray|fromArray} to {@link
         * VariantLayout#layout|layout}. */
        fromArray(values) {
          if (this.layout) {
            return this.layout.fromArray(values);
          }
          return void 0;
        }
      };
      exports.VariantLayout = VariantLayout;
      function fixBitwiseResult(v) {
        if (0 > v) {
          v += 4294967296;
        }
        return v;
      }
      var BitStructure = class extends Layout {
        constructor(word, msb, property) {
          if (!(word instanceof UInt || word instanceof UIntBE)) {
            throw new TypeError("word must be a UInt or UIntBE layout");
          }
          if ("string" === typeof msb && void 0 === property) {
            property = msb;
            msb = false;
          }
          if (4 < word.span) {
            throw new RangeError("word cannot exceed 32 bits");
          }
          super(word.span, property);
          this.word = word;
          this.msb = !!msb;
          this.fields = [];
          let value = 0;
          this._packedSetValue = function(v) {
            value = fixBitwiseResult(v);
            return this;
          };
          this._packedGetValue = function() {
            return value;
          };
        }
        /** @override */
        decode(b2, offset2 = 0) {
          const dest = this.makeDestinationObject();
          const value = this.word.decode(b2, offset2);
          this._packedSetValue(value);
          for (const fd of this.fields) {
            if (void 0 !== fd.property) {
              dest[fd.property] = fd.decode(b2);
            }
          }
          return dest;
        }
        /** Implement {@link Layout#encode|encode} for {@link BitStructure}.
         *
         * If `src` is missing a property for a member with a defined {@link
         * Layout#property|property} the corresponding region of the packed
         * value is left unmodified.  Unused bits are also left unmodified. */
        encode(src, b2, offset2 = 0) {
          const value = this.word.decode(b2, offset2);
          this._packedSetValue(value);
          for (const fd of this.fields) {
            if (void 0 !== fd.property) {
              const fv = src[fd.property];
              if (void 0 !== fv) {
                fd.encode(fv);
              }
            }
          }
          return this.word.encode(this._packedGetValue(), b2, offset2);
        }
        /** Register a new bitfield with a containing bit structure.  The
         * resulting bitfield is returned.
         *
         * @param {Number} bits - initializer for {@link BitField#bits|bits}.
         *
         * @param {string} property - initializer for {@link
         * Layout#property|property}.
         *
         * @return {BitField} */
        addField(bits, property) {
          const bf = new BitField(this, bits, property);
          this.fields.push(bf);
          return bf;
        }
        /** As with {@link BitStructure#addField|addField} for single-bit
         * fields with `boolean` value representation.
         *
         * @param {string} property - initializer for {@link
         * Layout#property|property}.
         *
         * @return {Boolean} */
        // `Boolean` conflicts with the native primitive type
        // eslint-disable-next-line @typescript-eslint/ban-types
        addBoolean(property) {
          const bf = new Boolean2(this, property);
          this.fields.push(bf);
          return bf;
        }
        /**
         * Get access to the bit field for a given property.
         *
         * @param {String} property - the bit field of interest.
         *
         * @return {BitField} - the field associated with `property`, or
         * undefined if there is no such property.
         */
        fieldFor(property) {
          if ("string" !== typeof property) {
            throw new TypeError("property must be string");
          }
          for (const fd of this.fields) {
            if (fd.property === property) {
              return fd;
            }
          }
          return void 0;
        }
      };
      exports.BitStructure = BitStructure;
      var BitField = class {
        constructor(container, bits, property) {
          if (!(container instanceof BitStructure)) {
            throw new TypeError("container must be a BitStructure");
          }
          if (!Number.isInteger(bits) || 0 >= bits) {
            throw new TypeError("bits must be positive integer");
          }
          const totalBits = 8 * container.span;
          const usedBits = container.fields.reduce((sum, fd) => sum + fd.bits, 0);
          if (bits + usedBits > totalBits) {
            throw new Error("bits too long for span remainder (" + (totalBits - usedBits) + " of " + totalBits + " remain)");
          }
          this.container = container;
          this.bits = bits;
          this.valueMask = (1 << bits) - 1;
          if (32 === bits) {
            this.valueMask = 4294967295;
          }
          this.start = usedBits;
          if (this.container.msb) {
            this.start = totalBits - usedBits - bits;
          }
          this.wordMask = fixBitwiseResult(this.valueMask << this.start);
          this.property = property;
        }
        /** Store a value into the corresponding subsequence of the containing
         * bit field. */
        decode(b2, offset2) {
          const word = this.container._packedGetValue();
          const wordValue = fixBitwiseResult(word & this.wordMask);
          const value = wordValue >>> this.start;
          return value;
        }
        /** Store a value into the corresponding subsequence of the containing
         * bit field.
         *
         * **NOTE** This is not a specialization of {@link
         * Layout#encode|Layout.encode} and there is no return value. */
        encode(value) {
          if ("number" !== typeof value || !Number.isInteger(value) || value !== fixBitwiseResult(value & this.valueMask)) {
            throw new TypeError(nameWithProperty("BitField.encode", this) + " value must be integer not exceeding " + this.valueMask);
          }
          const word = this.container._packedGetValue();
          const wordValue = fixBitwiseResult(value << this.start);
          this.container._packedSetValue(fixBitwiseResult(word & ~this.wordMask) | wordValue);
        }
      };
      exports.BitField = BitField;
      var Boolean2 = class extends BitField {
        constructor(container, property) {
          super(container, 1, property);
        }
        /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.
         *
         * @returns {boolean} */
        decode(b2, offset2) {
          return !!super.decode(b2, offset2);
        }
        /** @override */
        encode(value) {
          if ("boolean" === typeof value) {
            value = +value;
          }
          super.encode(value);
        }
      };
      exports.Boolean = Boolean2;
      var Blob = class extends Layout {
        constructor(length, property) {
          if (!(length instanceof ExternalLayout && length.isCount() || Number.isInteger(length) && 0 <= length)) {
            throw new TypeError("length must be positive integer or an unsigned integer ExternalLayout");
          }
          let span = -1;
          if (!(length instanceof ExternalLayout)) {
            span = length;
          }
          super(span, property);
          this.length = length;
        }
        /** @override */
        getSpan(b2, offset2) {
          let span = this.span;
          if (0 > span) {
            span = this.length.decode(b2, offset2);
          }
          return span;
        }
        /** @override */
        decode(b2, offset2 = 0) {
          let span = this.span;
          if (0 > span) {
            span = this.length.decode(b2, offset2);
          }
          return uint8ArrayToBuffer(b2).slice(offset2, offset2 + span);
        }
        /** Implement {@link Layout#encode|encode} for {@link Blob}.
         *
         * **NOTE** If {@link Layout#count|count} is an instance of {@link
         * ExternalLayout} then the length of `src` will be encoded as the
         * count after `src` is encoded. */
        encode(src, b2, offset2) {
          let span = this.length;
          if (this.length instanceof ExternalLayout) {
            span = src.length;
          }
          if (!(src instanceof Uint8Array && span === src.length)) {
            throw new TypeError(nameWithProperty("Blob.encode", this) + " requires (length " + span + ") Uint8Array as src");
          }
          if (offset2 + span > b2.length) {
            throw new RangeError("encoding overruns Uint8Array");
          }
          const srcBuffer = uint8ArrayToBuffer(src);
          uint8ArrayToBuffer(b2).write(srcBuffer.toString("hex"), offset2, span, "hex");
          if (this.length instanceof ExternalLayout) {
            this.length.encode(span, b2, offset2);
          }
          return span;
        }
      };
      exports.Blob = Blob;
      var CString = class extends Layout {
        constructor(property) {
          super(-1, property);
        }
        /** @override */
        getSpan(b2, offset2 = 0) {
          checkUint8Array(b2);
          let idx = offset2;
          while (idx < b2.length && 0 !== b2[idx]) {
            idx += 1;
          }
          return 1 + idx - offset2;
        }
        /** @override */
        decode(b2, offset2 = 0) {
          const span = this.getSpan(b2, offset2);
          return uint8ArrayToBuffer(b2).slice(offset2, offset2 + span - 1).toString("utf-8");
        }
        /** @override */
        encode(src, b2, offset2 = 0) {
          if ("string" !== typeof src) {
            src = String(src);
          }
          const srcb = buffer_1.Buffer.from(src, "utf8");
          const span = srcb.length;
          if (offset2 + span > b2.length) {
            throw new RangeError("encoding overruns Buffer");
          }
          const buffer = uint8ArrayToBuffer(b2);
          srcb.copy(buffer, offset2);
          buffer[offset2 + span] = 0;
          return span + 1;
        }
      };
      exports.CString = CString;
      var UTF8 = class extends Layout {
        constructor(maxSpan, property) {
          if ("string" === typeof maxSpan && void 0 === property) {
            property = maxSpan;
            maxSpan = void 0;
          }
          if (void 0 === maxSpan) {
            maxSpan = -1;
          } else if (!Number.isInteger(maxSpan)) {
            throw new TypeError("maxSpan must be an integer");
          }
          super(-1, property);
          this.maxSpan = maxSpan;
        }
        /** @override */
        getSpan(b2, offset2 = 0) {
          checkUint8Array(b2);
          return b2.length - offset2;
        }
        /** @override */
        decode(b2, offset2 = 0) {
          const span = this.getSpan(b2, offset2);
          if (0 <= this.maxSpan && this.maxSpan < span) {
            throw new RangeError("text length exceeds maxSpan");
          }
          return uint8ArrayToBuffer(b2).slice(offset2, offset2 + span).toString("utf-8");
        }
        /** @override */
        encode(src, b2, offset2 = 0) {
          if ("string" !== typeof src) {
            src = String(src);
          }
          const srcb = buffer_1.Buffer.from(src, "utf8");
          const span = srcb.length;
          if (0 <= this.maxSpan && this.maxSpan < span) {
            throw new RangeError("text length exceeds maxSpan");
          }
          if (offset2 + span > b2.length) {
            throw new RangeError("encoding overruns Buffer");
          }
          srcb.copy(uint8ArrayToBuffer(b2), offset2);
          return span;
        }
      };
      exports.UTF8 = UTF8;
      var Constant = class extends Layout {
        constructor(value, property) {
          super(0, property);
          this.value = value;
        }
        /** @override */
        decode(b2, offset2) {
          return this.value;
        }
        /** @override */
        encode(src, b2, offset2) {
          return 0;
        }
      };
      exports.Constant = Constant;
      exports.greedy = (elementSpan, property) => new GreedyCount(elementSpan, property);
      exports.offset = (layout, offset2, property) => new OffsetLayout(layout, offset2, property);
      exports.u8 = (property) => new UInt(1, property);
      exports.u16 = (property) => new UInt(2, property);
      exports.u24 = (property) => new UInt(3, property);
      exports.u32 = (property) => new UInt(4, property);
      exports.u40 = (property) => new UInt(5, property);
      exports.u48 = (property) => new UInt(6, property);
      exports.nu64 = (property) => new NearUInt64(property);
      exports.u16be = (property) => new UIntBE(2, property);
      exports.u24be = (property) => new UIntBE(3, property);
      exports.u32be = (property) => new UIntBE(4, property);
      exports.u40be = (property) => new UIntBE(5, property);
      exports.u48be = (property) => new UIntBE(6, property);
      exports.nu64be = (property) => new NearUInt64BE(property);
      exports.s8 = (property) => new Int(1, property);
      exports.s16 = (property) => new Int(2, property);
      exports.s24 = (property) => new Int(3, property);
      exports.s32 = (property) => new Int(4, property);
      exports.s40 = (property) => new Int(5, property);
      exports.s48 = (property) => new Int(6, property);
      exports.ns64 = (property) => new NearInt64(property);
      exports.s16be = (property) => new IntBE(2, property);
      exports.s24be = (property) => new IntBE(3, property);
      exports.s32be = (property) => new IntBE(4, property);
      exports.s40be = (property) => new IntBE(5, property);
      exports.s48be = (property) => new IntBE(6, property);
      exports.ns64be = (property) => new NearInt64BE(property);
      exports.f32 = (property) => new Float(property);
      exports.f32be = (property) => new FloatBE(property);
      exports.f64 = (property) => new Double(property);
      exports.f64be = (property) => new DoubleBE(property);
      exports.struct = (fields, property, decodePrefixes) => new Structure(fields, property, decodePrefixes);
      exports.bits = (word, msb, property) => new BitStructure(word, msb, property);
      exports.seq = (elementLayout, count, property) => new Sequence(elementLayout, count, property);
      exports.union = (discr, defaultLayout, property) => new Union(discr, defaultLayout, property);
      exports.unionLayoutDiscriminator = (layout, property) => new UnionLayoutDiscriminator(layout, property);
      exports.blob = (length, property) => new Blob(length, property);
      exports.cstr = (property) => new CString(property);
      exports.utf8 = (maxSpan, property) => new UTF8(maxSpan, property);
      exports.constant = (value, property) => new Constant(value, property);
    }
  });

  // node_modules/superstruct/dist/index.mjs
  function isIterable(x) {
    return isObject(x) && typeof x[Symbol.iterator] === "function";
  }
  function isObject(x) {
    return typeof x === "object" && x != null;
  }
  function isNonArrayObject(x) {
    return isObject(x) && !Array.isArray(x);
  }
  function print(value) {
    if (typeof value === "symbol") {
      return value.toString();
    }
    return typeof value === "string" ? JSON.stringify(value) : `${value}`;
  }
  function shiftIterator(input) {
    const { done, value } = input.next();
    return done ? void 0 : value;
  }
  function toFailure(result, context, struct2, value) {
    if (result === true) {
      return;
    } else if (result === false) {
      result = {};
    } else if (typeof result === "string") {
      result = { message: result };
    }
    const { path, branch } = context;
    const { type: type2 } = struct2;
    const { refinement, message = `Expected a value of type \`${type2}\`${refinement ? ` with refinement \`${refinement}\`` : ""}, but received: \`${print(value)}\`` } = result;
    return {
      value,
      type: type2,
      refinement,
      key: path[path.length - 1],
      path,
      branch,
      ...result,
      message
    };
  }
  function* toFailures(result, context, struct2, value) {
    if (!isIterable(result)) {
      result = [result];
    }
    for (const r of result) {
      const failure = toFailure(r, context, struct2, value);
      if (failure) {
        yield failure;
      }
    }
  }
  function* run(value, struct2, options = {}) {
    const { path = [], branch = [value], coerce: coerce2 = false, mask: mask3 = false } = options;
    const ctx = { path, branch, mask: mask3 };
    if (coerce2) {
      value = struct2.coercer(value, ctx);
    }
    let status = "valid";
    for (const failure of struct2.validator(value, ctx)) {
      failure.explanation = options.message;
      status = "not_valid";
      yield [failure, void 0];
    }
    for (let [k, v, s] of struct2.entries(value, ctx)) {
      const ts = run(v, s, {
        path: k === void 0 ? path : [...path, k],
        branch: k === void 0 ? branch : [...branch, v],
        coerce: coerce2,
        mask: mask3,
        message: options.message
      });
      for (const t of ts) {
        if (t[0]) {
          status = t[0].refinement != null ? "not_refined" : "not_valid";
          yield [t[0], void 0];
        } else if (coerce2) {
          v = t[1];
          if (k === void 0) {
            value = v;
          } else if (value instanceof Map) {
            value.set(k, v);
          } else if (value instanceof Set) {
            value.add(v);
          } else if (isObject(value)) {
            if (v !== void 0 || k in value)
              value[k] = v;
          }
        }
      }
    }
    if (status !== "not_valid") {
      for (const failure of struct2.refiner(value, ctx)) {
        failure.explanation = options.message;
        status = "not_refined";
        yield [failure, void 0];
      }
    }
    if (status === "valid") {
      yield [void 0, value];
    }
  }
  function assert2(value, struct2, message) {
    const result = validate(value, struct2, { message });
    if (result[0]) {
      throw result[0];
    }
  }
  function create(value, struct2, message) {
    const result = validate(value, struct2, { coerce: true, message });
    if (result[0]) {
      throw result[0];
    } else {
      return result[1];
    }
  }
  function mask2(value, struct2, message) {
    const result = validate(value, struct2, { coerce: true, mask: true, message });
    if (result[0]) {
      throw result[0];
    } else {
      return result[1];
    }
  }
  function is(value, struct2) {
    const result = validate(value, struct2);
    return !result[0];
  }
  function validate(value, struct2, options = {}) {
    const tuples = run(value, struct2, options);
    const tuple2 = shiftIterator(tuples);
    if (tuple2[0]) {
      const error = new StructError(tuple2[0], function* () {
        for (const t of tuples) {
          if (t[0]) {
            yield t[0];
          }
        }
      });
      return [error, void 0];
    } else {
      const v = tuple2[1];
      return [void 0, v];
    }
  }
  function define(name, validator) {
    return new Struct({ type: name, schema: null, validator });
  }
  function any() {
    return define("any", () => true);
  }
  function array(Element) {
    return new Struct({
      type: "array",
      schema: Element,
      *entries(value) {
        if (Element && Array.isArray(value)) {
          for (const [i, v] of value.entries()) {
            yield [i, v, Element];
          }
        }
      },
      coercer(value) {
        return Array.isArray(value) ? value.slice() : value;
      },
      validator(value) {
        return Array.isArray(value) || `Expected an array value, but received: ${print(value)}`;
      }
    });
  }
  function boolean() {
    return define("boolean", (value) => {
      return typeof value === "boolean";
    });
  }
  function instance(Class) {
    return define("instance", (value) => {
      return value instanceof Class || `Expected a \`${Class.name}\` instance, but received: ${print(value)}`;
    });
  }
  function literal(constant) {
    const description = print(constant);
    const t = typeof constant;
    return new Struct({
      type: "literal",
      schema: t === "string" || t === "number" || t === "boolean" ? constant : null,
      validator(value) {
        return value === constant || `Expected the literal \`${description}\`, but received: ${print(value)}`;
      }
    });
  }
  function never() {
    return define("never", () => false);
  }
  function nullable(struct2) {
    return new Struct({
      ...struct2,
      validator: (value, ctx) => value === null || struct2.validator(value, ctx),
      refiner: (value, ctx) => value === null || struct2.refiner(value, ctx)
    });
  }
  function number2() {
    return define("number", (value) => {
      return typeof value === "number" && !isNaN(value) || `Expected a number, but received: ${print(value)}`;
    });
  }
  function optional(struct2) {
    return new Struct({
      ...struct2,
      validator: (value, ctx) => value === void 0 || struct2.validator(value, ctx),
      refiner: (value, ctx) => value === void 0 || struct2.refiner(value, ctx)
    });
  }
  function record(Key, Value) {
    return new Struct({
      type: "record",
      schema: null,
      *entries(value) {
        if (isObject(value)) {
          for (const k in value) {
            const v = value[k];
            yield [k, k, Key];
            yield [k, v, Value];
          }
        }
      },
      validator(value) {
        return isNonArrayObject(value) || `Expected an object, but received: ${print(value)}`;
      },
      coercer(value) {
        return isNonArrayObject(value) ? { ...value } : value;
      }
    });
  }
  function string() {
    return define("string", (value) => {
      return typeof value === "string" || `Expected a string, but received: ${print(value)}`;
    });
  }
  function tuple(Structs) {
    const Never = never();
    return new Struct({
      type: "tuple",
      schema: null,
      *entries(value) {
        if (Array.isArray(value)) {
          const length = Math.max(Structs.length, value.length);
          for (let i = 0; i < length; i++) {
            yield [i, value[i], Structs[i] || Never];
          }
        }
      },
      validator(value) {
        return Array.isArray(value) || `Expected an array, but received: ${print(value)}`;
      },
      coercer(value) {
        return Array.isArray(value) ? value.slice() : value;
      }
    });
  }
  function type(schema) {
    const keys = Object.keys(schema);
    return new Struct({
      type: "type",
      schema,
      *entries(value) {
        if (isObject(value)) {
          for (const k of keys) {
            yield [k, value[k], schema[k]];
          }
        }
      },
      validator(value) {
        return isNonArrayObject(value) || `Expected an object, but received: ${print(value)}`;
      },
      coercer(value) {
        return isNonArrayObject(value) ? { ...value } : value;
      }
    });
  }
  function union(Structs) {
    const description = Structs.map((s) => s.type).join(" | ");
    return new Struct({
      type: "union",
      schema: null,
      coercer(value, ctx) {
        for (const S2 of Structs) {
          const [error, coerced] = S2.validate(value, {
            coerce: true,
            mask: ctx.mask
          });
          if (!error) {
            return coerced;
          }
        }
        return value;
      },
      validator(value, ctx) {
        const failures = [];
        for (const S2 of Structs) {
          const [...tuples] = run(value, S2, ctx);
          const [first] = tuples;
          if (!first[0]) {
            return [];
          } else {
            for (const [failure] of tuples) {
              if (failure) {
                failures.push(failure);
              }
            }
          }
        }
        return [
          `Expected the value to satisfy a union of \`${description}\`, but received: ${print(value)}`,
          ...failures
        ];
      }
    });
  }
  function unknown() {
    return define("unknown", () => true);
  }
  function coerce(struct2, condition, coercer) {
    return new Struct({
      ...struct2,
      coercer: (value, ctx) => {
        return is(value, condition) ? struct2.coercer(coercer(value, ctx), ctx) : struct2.coercer(value, ctx);
      }
    });
  }
  var StructError, Struct;
  var init_dist2 = __esm({
    "node_modules/superstruct/dist/index.mjs"() {
      StructError = class extends TypeError {
        constructor(failure, failures) {
          let cached;
          const { message, explanation, ...rest } = failure;
          const { path } = failure;
          const msg = path.length === 0 ? message : `At path: ${path.join(".")} -- ${message}`;
          super(explanation != null ? explanation : msg);
          if (explanation != null)
            this.cause = msg;
          Object.assign(this, rest);
          this.name = this.constructor.name;
          this.failures = () => {
            return cached != null ? cached : cached = [failure, ...failures()];
          };
        }
      };
      Struct = class {
        constructor(props) {
          const { type: type2, schema, validator, refiner, coercer = (value) => value, entries = function* () {
          } } = props;
          this.type = type2;
          this.schema = schema;
          this.entries = entries;
          this.coercer = coercer;
          if (validator) {
            this.validator = (value, context) => {
              const result = validator(value, context);
              return toFailures(result, context, this, value);
            };
          } else {
            this.validator = () => [];
          }
          if (refiner) {
            this.refiner = (value, context) => {
              const result = refiner(value, context);
              return toFailures(result, context, this, value);
            };
          } else {
            this.refiner = () => [];
          }
        }
        /**
         * Assert that a value passes the struct's validation, throwing if it doesn't.
         */
        assert(value, message) {
          return assert2(value, this, message);
        }
        /**
         * Create a value with the struct's coercion logic, then validate it.
         */
        create(value, message) {
          return create(value, this, message);
        }
        /**
         * Check if a value passes the struct's validation.
         */
        is(value) {
          return is(value, this);
        }
        /**
         * Mask a value, coercing and validating it, but returning only the subset of
         * properties defined by the struct's schema. Masking applies recursively to
         * props of `object` structs only.
         */
        mask(value, message) {
          return mask2(value, this, message);
        }
        /**
         * Validate a value with the struct's validation logic, returning a tuple
         * representing the result.
         *
         * You may optionally pass `true` for the `coerce` argument to coerce
         * the value before attempting to validate it. If you do, the result will
         * contain the coerced result when successful. Also, `mask` will turn on
         * masking of the unknown `object` props recursively if passed.
         */
        validate(value, options = {}) {
          return validate(value, this, options);
        }
      };
    }
  });

  // node_modules/jayson/node_modules/uuid/dist/esm-browser/rng.js
  function rng() {
    if (!getRandomValues) {
      getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== "undefined" && typeof msCrypto.getRandomValues === "function" && msCrypto.getRandomValues.bind(msCrypto);
      if (!getRandomValues) {
        throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
      }
    }
    return getRandomValues(rnds8);
  }
  var getRandomValues, rnds8;
  var init_rng = __esm({
    "node_modules/jayson/node_modules/uuid/dist/esm-browser/rng.js"() {
      rnds8 = new Uint8Array(16);
    }
  });

  // node_modules/jayson/node_modules/uuid/dist/esm-browser/regex.js
  var regex_default;
  var init_regex = __esm({
    "node_modules/jayson/node_modules/uuid/dist/esm-browser/regex.js"() {
      regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
    }
  });

  // node_modules/jayson/node_modules/uuid/dist/esm-browser/validate.js
  function validate2(uuid) {
    return typeof uuid === "string" && regex_default.test(uuid);
  }
  var validate_default;
  var init_validate = __esm({
    "node_modules/jayson/node_modules/uuid/dist/esm-browser/validate.js"() {
      init_regex();
      validate_default = validate2;
    }
  });

  // node_modules/jayson/node_modules/uuid/dist/esm-browser/stringify.js
  function stringify3(arr) {
    var offset2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    var uuid = (byteToHex[arr[offset2 + 0]] + byteToHex[arr[offset2 + 1]] + byteToHex[arr[offset2 + 2]] + byteToHex[arr[offset2 + 3]] + "-" + byteToHex[arr[offset2 + 4]] + byteToHex[arr[offset2 + 5]] + "-" + byteToHex[arr[offset2 + 6]] + byteToHex[arr[offset2 + 7]] + "-" + byteToHex[arr[offset2 + 8]] + byteToHex[arr[offset2 + 9]] + "-" + byteToHex[arr[offset2 + 10]] + byteToHex[arr[offset2 + 11]] + byteToHex[arr[offset2 + 12]] + byteToHex[arr[offset2 + 13]] + byteToHex[arr[offset2 + 14]] + byteToHex[arr[offset2 + 15]]).toLowerCase();
    if (!validate_default(uuid)) {
      throw TypeError("Stringified UUID is invalid");
    }
    return uuid;
  }
  var byteToHex, i, stringify_default;
  var init_stringify = __esm({
    "node_modules/jayson/node_modules/uuid/dist/esm-browser/stringify.js"() {
      init_validate();
      byteToHex = [];
      for (i = 0; i < 256; ++i) {
        byteToHex.push((i + 256).toString(16).substr(1));
      }
      stringify_default = stringify3;
    }
  });

  // node_modules/jayson/node_modules/uuid/dist/esm-browser/v1.js
  function v1(options, buf, offset2) {
    var i = buf && offset2 || 0;
    var b2 = buf || new Array(16);
    options = options || {};
    var node = options.node || _nodeId;
    var clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
    if (node == null || clockseq == null) {
      var seedBytes = options.random || (options.rng || rng)();
      if (node == null) {
        node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
      }
      if (clockseq == null) {
        clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
      }
    }
    var msecs = options.msecs !== void 0 ? options.msecs : Date.now();
    var nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
    var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
    if (dt < 0 && options.clockseq === void 0) {
      clockseq = clockseq + 1 & 16383;
    }
    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
      nsecs = 0;
    }
    if (nsecs >= 1e4) {
      throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
    }
    _lastMSecs = msecs;
    _lastNSecs = nsecs;
    _clockseq = clockseq;
    msecs += 122192928e5;
    var tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
    b2[i++] = tl >>> 24 & 255;
    b2[i++] = tl >>> 16 & 255;
    b2[i++] = tl >>> 8 & 255;
    b2[i++] = tl & 255;
    var tmh = msecs / 4294967296 * 1e4 & 268435455;
    b2[i++] = tmh >>> 8 & 255;
    b2[i++] = tmh & 255;
    b2[i++] = tmh >>> 24 & 15 | 16;
    b2[i++] = tmh >>> 16 & 255;
    b2[i++] = clockseq >>> 8 | 128;
    b2[i++] = clockseq & 255;
    for (var n2 = 0; n2 < 6; ++n2) {
      b2[i + n2] = node[n2];
    }
    return buf || stringify_default(b2);
  }
  var _nodeId, _clockseq, _lastMSecs, _lastNSecs, v1_default;
  var init_v1 = __esm({
    "node_modules/jayson/node_modules/uuid/dist/esm-browser/v1.js"() {
      init_rng();
      init_stringify();
      _lastMSecs = 0;
      _lastNSecs = 0;
      v1_default = v1;
    }
  });

  // node_modules/jayson/node_modules/uuid/dist/esm-browser/parse.js
  function parse(uuid) {
    if (!validate_default(uuid)) {
      throw TypeError("Invalid UUID");
    }
    var v;
    var arr = new Uint8Array(16);
    arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
    arr[1] = v >>> 16 & 255;
    arr[2] = v >>> 8 & 255;
    arr[3] = v & 255;
    arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
    arr[5] = v & 255;
    arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
    arr[7] = v & 255;
    arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
    arr[9] = v & 255;
    arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
    arr[11] = v / 4294967296 & 255;
    arr[12] = v >>> 24 & 255;
    arr[13] = v >>> 16 & 255;
    arr[14] = v >>> 8 & 255;
    arr[15] = v & 255;
    return arr;
  }
  var parse_default;
  var init_parse = __esm({
    "node_modules/jayson/node_modules/uuid/dist/esm-browser/parse.js"() {
      init_validate();
      parse_default = parse;
    }
  });

  // node_modules/jayson/node_modules/uuid/dist/esm-browser/v35.js
  function stringToBytes(str) {
    str = unescape(encodeURIComponent(str));
    var bytes2 = [];
    for (var i = 0; i < str.length; ++i) {
      bytes2.push(str.charCodeAt(i));
    }
    return bytes2;
  }
  function v35_default(name, version3, hashfunc) {
    function generateUUID(value, namespace, buf, offset2) {
      if (typeof value === "string") {
        value = stringToBytes(value);
      }
      if (typeof namespace === "string") {
        namespace = parse_default(namespace);
      }
      if (namespace.length !== 16) {
        throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
      }
      var bytes2 = new Uint8Array(16 + value.length);
      bytes2.set(namespace);
      bytes2.set(value, namespace.length);
      bytes2 = hashfunc(bytes2);
      bytes2[6] = bytes2[6] & 15 | version3;
      bytes2[8] = bytes2[8] & 63 | 128;
      if (buf) {
        offset2 = offset2 || 0;
        for (var i = 0; i < 16; ++i) {
          buf[offset2 + i] = bytes2[i];
        }
        return buf;
      }
      return stringify_default(bytes2);
    }
    try {
      generateUUID.name = name;
    } catch (err) {
    }
    generateUUID.DNS = DNS;
    generateUUID.URL = URL2;
    return generateUUID;
  }
  var DNS, URL2;
  var init_v35 = __esm({
    "node_modules/jayson/node_modules/uuid/dist/esm-browser/v35.js"() {
      init_stringify();
      init_parse();
      DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
      URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
    }
  });

  // node_modules/jayson/node_modules/uuid/dist/esm-browser/md5.js
  function md5(bytes2) {
    if (typeof bytes2 === "string") {
      var msg = unescape(encodeURIComponent(bytes2));
      bytes2 = new Uint8Array(msg.length);
      for (var i = 0; i < msg.length; ++i) {
        bytes2[i] = msg.charCodeAt(i);
      }
    }
    return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes2), bytes2.length * 8));
  }
  function md5ToHexEncodedArray(input) {
    var output2 = [];
    var length32 = input.length * 32;
    var hexTab = "0123456789abcdef";
    for (var i = 0; i < length32; i += 8) {
      var x = input[i >> 5] >>> i % 32 & 255;
      var hex = parseInt(hexTab.charAt(x >>> 4 & 15) + hexTab.charAt(x & 15), 16);
      output2.push(hex);
    }
    return output2;
  }
  function getOutputLength(inputLength8) {
    return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
  }
  function wordsToMd5(x, len) {
    x[len >> 5] |= 128 << len % 32;
    x[getOutputLength(len) - 1] = len;
    var a = 1732584193;
    var b2 = -271733879;
    var c = -1732584194;
    var d = 271733878;
    for (var i = 0; i < x.length; i += 16) {
      var olda = a;
      var oldb = b2;
      var oldc = c;
      var oldd = d;
      a = md5ff(a, b2, c, d, x[i], 7, -680876936);
      d = md5ff(d, a, b2, c, x[i + 1], 12, -389564586);
      c = md5ff(c, d, a, b2, x[i + 2], 17, 606105819);
      b2 = md5ff(b2, c, d, a, x[i + 3], 22, -1044525330);
      a = md5ff(a, b2, c, d, x[i + 4], 7, -176418897);
      d = md5ff(d, a, b2, c, x[i + 5], 12, 1200080426);
      c = md5ff(c, d, a, b2, x[i + 6], 17, -1473231341);
      b2 = md5ff(b2, c, d, a, x[i + 7], 22, -45705983);
      a = md5ff(a, b2, c, d, x[i + 8], 7, 1770035416);
      d = md5ff(d, a, b2, c, x[i + 9], 12, -1958414417);
      c = md5ff(c, d, a, b2, x[i + 10], 17, -42063);
      b2 = md5ff(b2, c, d, a, x[i + 11], 22, -1990404162);
      a = md5ff(a, b2, c, d, x[i + 12], 7, 1804603682);
      d = md5ff(d, a, b2, c, x[i + 13], 12, -40341101);
      c = md5ff(c, d, a, b2, x[i + 14], 17, -1502002290);
      b2 = md5ff(b2, c, d, a, x[i + 15], 22, 1236535329);
      a = md5gg(a, b2, c, d, x[i + 1], 5, -165796510);
      d = md5gg(d, a, b2, c, x[i + 6], 9, -1069501632);
      c = md5gg(c, d, a, b2, x[i + 11], 14, 643717713);
      b2 = md5gg(b2, c, d, a, x[i], 20, -373897302);
      a = md5gg(a, b2, c, d, x[i + 5], 5, -701558691);
      d = md5gg(d, a, b2, c, x[i + 10], 9, 38016083);
      c = md5gg(c, d, a, b2, x[i + 15], 14, -660478335);
      b2 = md5gg(b2, c, d, a, x[i + 4], 20, -405537848);
      a = md5gg(a, b2, c, d, x[i + 9], 5, 568446438);
      d = md5gg(d, a, b2, c, x[i + 14], 9, -1019803690);
      c = md5gg(c, d, a, b2, x[i + 3], 14, -187363961);
      b2 = md5gg(b2, c, d, a, x[i + 8], 20, 1163531501);
      a = md5gg(a, b2, c, d, x[i + 13], 5, -1444681467);
      d = md5gg(d, a, b2, c, x[i + 2], 9, -51403784);
      c = md5gg(c, d, a, b2, x[i + 7], 14, 1735328473);
      b2 = md5gg(b2, c, d, a, x[i + 12], 20, -1926607734);
      a = md5hh(a, b2, c, d, x[i + 5], 4, -378558);
      d = md5hh(d, a, b2, c, x[i + 8], 11, -2022574463);
      c = md5hh(c, d, a, b2, x[i + 11], 16, 1839030562);
      b2 = md5hh(b2, c, d, a, x[i + 14], 23, -35309556);
      a = md5hh(a, b2, c, d, x[i + 1], 4, -1530992060);
      d = md5hh(d, a, b2, c, x[i + 4], 11, 1272893353);
      c = md5hh(c, d, a, b2, x[i + 7], 16, -155497632);
      b2 = md5hh(b2, c, d, a, x[i + 10], 23, -1094730640);
      a = md5hh(a, b2, c, d, x[i + 13], 4, 681279174);
      d = md5hh(d, a, b2, c, x[i], 11, -358537222);
      c = md5hh(c, d, a, b2, x[i + 3], 16, -722521979);
      b2 = md5hh(b2, c, d, a, x[i + 6], 23, 76029189);
      a = md5hh(a, b2, c, d, x[i + 9], 4, -640364487);
      d = md5hh(d, a, b2, c, x[i + 12], 11, -421815835);
      c = md5hh(c, d, a, b2, x[i + 15], 16, 530742520);
      b2 = md5hh(b2, c, d, a, x[i + 2], 23, -995338651);
      a = md5ii(a, b2, c, d, x[i], 6, -198630844);
      d = md5ii(d, a, b2, c, x[i + 7], 10, 1126891415);
      c = md5ii(c, d, a, b2, x[i + 14], 15, -1416354905);
      b2 = md5ii(b2, c, d, a, x[i + 5], 21, -57434055);
      a = md5ii(a, b2, c, d, x[i + 12], 6, 1700485571);
      d = md5ii(d, a, b2, c, x[i + 3], 10, -1894986606);
      c = md5ii(c, d, a, b2, x[i + 10], 15, -1051523);
      b2 = md5ii(b2, c, d, a, x[i + 1], 21, -2054922799);
      a = md5ii(a, b2, c, d, x[i + 8], 6, 1873313359);
      d = md5ii(d, a, b2, c, x[i + 15], 10, -30611744);
      c = md5ii(c, d, a, b2, x[i + 6], 15, -1560198380);
      b2 = md5ii(b2, c, d, a, x[i + 13], 21, 1309151649);
      a = md5ii(a, b2, c, d, x[i + 4], 6, -145523070);
      d = md5ii(d, a, b2, c, x[i + 11], 10, -1120210379);
      c = md5ii(c, d, a, b2, x[i + 2], 15, 718787259);
      b2 = md5ii(b2, c, d, a, x[i + 9], 21, -343485551);
      a = safeAdd(a, olda);
      b2 = safeAdd(b2, oldb);
      c = safeAdd(c, oldc);
      d = safeAdd(d, oldd);
    }
    return [a, b2, c, d];
  }
  function bytesToWords(input) {
    if (input.length === 0) {
      return [];
    }
    var length8 = input.length * 8;
    var output2 = new Uint32Array(getOutputLength(length8));
    for (var i = 0; i < length8; i += 8) {
      output2[i >> 5] |= (input[i / 8] & 255) << i % 32;
    }
    return output2;
  }
  function safeAdd(x, y) {
    var lsw = (x & 65535) + (y & 65535);
    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    return msw << 16 | lsw & 65535;
  }
  function bitRotateLeft(num, cnt) {
    return num << cnt | num >>> 32 - cnt;
  }
  function md5cmn(q, a, b2, x, s, t) {
    return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b2);
  }
  function md5ff(a, b2, c, d, x, s, t) {
    return md5cmn(b2 & c | ~b2 & d, a, b2, x, s, t);
  }
  function md5gg(a, b2, c, d, x, s, t) {
    return md5cmn(b2 & d | c & ~d, a, b2, x, s, t);
  }
  function md5hh(a, b2, c, d, x, s, t) {
    return md5cmn(b2 ^ c ^ d, a, b2, x, s, t);
  }
  function md5ii(a, b2, c, d, x, s, t) {
    return md5cmn(c ^ (b2 | ~d), a, b2, x, s, t);
  }
  var md5_default;
  var init_md5 = __esm({
    "node_modules/jayson/node_modules/uuid/dist/esm-browser/md5.js"() {
      md5_default = md5;
    }
  });

  // node_modules/jayson/node_modules/uuid/dist/esm-browser/v3.js
  var v3, v3_default;
  var init_v3 = __esm({
    "node_modules/jayson/node_modules/uuid/dist/esm-browser/v3.js"() {
      init_v35();
      init_md5();
      v3 = v35_default("v3", 48, md5_default);
      v3_default = v3;
    }
  });

  // node_modules/jayson/node_modules/uuid/dist/esm-browser/v4.js
  function v4(options, buf, offset2) {
    options = options || {};
    var rnds = options.random || (options.rng || rng)();
    rnds[6] = rnds[6] & 15 | 64;
    rnds[8] = rnds[8] & 63 | 128;
    if (buf) {
      offset2 = offset2 || 0;
      for (var i = 0; i < 16; ++i) {
        buf[offset2 + i] = rnds[i];
      }
      return buf;
    }
    return stringify_default(rnds);
  }
  var v4_default;
  var init_v4 = __esm({
    "node_modules/jayson/node_modules/uuid/dist/esm-browser/v4.js"() {
      init_rng();
      init_stringify();
      v4_default = v4;
    }
  });

  // node_modules/jayson/node_modules/uuid/dist/esm-browser/sha1.js
  function f2(s, x, y, z) {
    switch (s) {
      case 0:
        return x & y ^ ~x & z;
      case 1:
        return x ^ y ^ z;
      case 2:
        return x & y ^ x & z ^ y & z;
      case 3:
        return x ^ y ^ z;
    }
  }
  function ROTL(x, n2) {
    return x << n2 | x >>> 32 - n2;
  }
  function sha1(bytes2) {
    var K = [1518500249, 1859775393, 2400959708, 3395469782];
    var H = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
    if (typeof bytes2 === "string") {
      var msg = unescape(encodeURIComponent(bytes2));
      bytes2 = [];
      for (var i = 0; i < msg.length; ++i) {
        bytes2.push(msg.charCodeAt(i));
      }
    } else if (!Array.isArray(bytes2)) {
      bytes2 = Array.prototype.slice.call(bytes2);
    }
    bytes2.push(128);
    var l = bytes2.length / 4 + 2;
    var N3 = Math.ceil(l / 16);
    var M = new Array(N3);
    for (var _i = 0; _i < N3; ++_i) {
      var arr = new Uint32Array(16);
      for (var j = 0; j < 16; ++j) {
        arr[j] = bytes2[_i * 64 + j * 4] << 24 | bytes2[_i * 64 + j * 4 + 1] << 16 | bytes2[_i * 64 + j * 4 + 2] << 8 | bytes2[_i * 64 + j * 4 + 3];
      }
      M[_i] = arr;
    }
    M[N3 - 1][14] = (bytes2.length - 1) * 8 / Math.pow(2, 32);
    M[N3 - 1][14] = Math.floor(M[N3 - 1][14]);
    M[N3 - 1][15] = (bytes2.length - 1) * 8 & 4294967295;
    for (var _i2 = 0; _i2 < N3; ++_i2) {
      var W = new Uint32Array(80);
      for (var t = 0; t < 16; ++t) {
        W[t] = M[_i2][t];
      }
      for (var _t = 16; _t < 80; ++_t) {
        W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
      }
      var a = H[0];
      var b2 = H[1];
      var c = H[2];
      var d = H[3];
      var e = H[4];
      for (var _t2 = 0; _t2 < 80; ++_t2) {
        var s = Math.floor(_t2 / 20);
        var T = ROTL(a, 5) + f2(s, b2, c, d) + e + K[s] + W[_t2] >>> 0;
        e = d;
        d = c;
        c = ROTL(b2, 30) >>> 0;
        b2 = a;
        a = T;
      }
      H[0] = H[0] + a >>> 0;
      H[1] = H[1] + b2 >>> 0;
      H[2] = H[2] + c >>> 0;
      H[3] = H[3] + d >>> 0;
      H[4] = H[4] + e >>> 0;
    }
    return [H[0] >> 24 & 255, H[0] >> 16 & 255, H[0] >> 8 & 255, H[0] & 255, H[1] >> 24 & 255, H[1] >> 16 & 255, H[1] >> 8 & 255, H[1] & 255, H[2] >> 24 & 255, H[2] >> 16 & 255, H[2] >> 8 & 255, H[2] & 255, H[3] >> 24 & 255, H[3] >> 16 & 255, H[3] >> 8 & 255, H[3] & 255, H[4] >> 24 & 255, H[4] >> 16 & 255, H[4] >> 8 & 255, H[4] & 255];
  }
  var sha1_default;
  var init_sha1 = __esm({
    "node_modules/jayson/node_modules/uuid/dist/esm-browser/sha1.js"() {
      sha1_default = sha1;
    }
  });

  // node_modules/jayson/node_modules/uuid/dist/esm-browser/v5.js
  var v5, v5_default;
  var init_v5 = __esm({
    "node_modules/jayson/node_modules/uuid/dist/esm-browser/v5.js"() {
      init_v35();
      init_sha1();
      v5 = v35_default("v5", 80, sha1_default);
      v5_default = v5;
    }
  });

  // node_modules/jayson/node_modules/uuid/dist/esm-browser/nil.js
  var nil_default;
  var init_nil = __esm({
    "node_modules/jayson/node_modules/uuid/dist/esm-browser/nil.js"() {
      nil_default = "00000000-0000-0000-0000-000000000000";
    }
  });

  // node_modules/jayson/node_modules/uuid/dist/esm-browser/version.js
  function version2(uuid) {
    if (!validate_default(uuid)) {
      throw TypeError("Invalid UUID");
    }
    return parseInt(uuid.substr(14, 1), 16);
  }
  var version_default;
  var init_version3 = __esm({
    "node_modules/jayson/node_modules/uuid/dist/esm-browser/version.js"() {
      init_validate();
      version_default = version2;
    }
  });

  // node_modules/jayson/node_modules/uuid/dist/esm-browser/index.js
  var esm_browser_exports = {};
  __export(esm_browser_exports, {
    NIL: () => nil_default,
    parse: () => parse_default,
    stringify: () => stringify_default,
    v1: () => v1_default,
    v3: () => v3_default,
    v4: () => v4_default,
    v5: () => v5_default,
    validate: () => validate_default,
    version: () => version_default
  });
  var init_esm_browser = __esm({
    "node_modules/jayson/node_modules/uuid/dist/esm-browser/index.js"() {
      init_v1();
      init_v3();
      init_v4();
      init_v5();
      init_nil();
      init_version3();
      init_validate();
      init_stringify();
      init_parse();
    }
  });

  // node_modules/jayson/lib/generateRequest.js
  var require_generateRequest = __commonJS({
    "node_modules/jayson/lib/generateRequest.js"(exports, module) {
      "use strict";
      var uuid = (init_esm_browser(), __toCommonJS(esm_browser_exports)).v4;
      var generateRequest = function(method, params, id2, options) {
        if (typeof method !== "string") {
          throw new TypeError(method + " must be a string");
        }
        options = options || {};
        const version3 = typeof options.version === "number" ? options.version : 2;
        if (version3 !== 1 && version3 !== 2) {
          throw new TypeError(version3 + " must be 1 or 2");
        }
        const request = {
          method
        };
        if (version3 === 2) {
          request.jsonrpc = "2.0";
        }
        if (params) {
          if (typeof params !== "object" && !Array.isArray(params)) {
            throw new TypeError(params + " must be an object, array or omitted");
          }
          request.params = params;
        }
        if (typeof id2 === "undefined") {
          const generator = typeof options.generator === "function" ? options.generator : function() {
            return uuid();
          };
          request.id = generator(request, options);
        } else if (version3 === 2 && id2 === null) {
          if (options.notificationIdNull) {
            request.id = null;
          }
        } else {
          request.id = id2;
        }
        return request;
      };
      module.exports = generateRequest;
    }
  });

  // node_modules/jayson/lib/client/browser/index.js
  var require_browser = __commonJS({
    "node_modules/jayson/lib/client/browser/index.js"(exports, module) {
      "use strict";
      var uuid = (init_esm_browser(), __toCommonJS(esm_browser_exports)).v4;
      var generateRequest = require_generateRequest();
      var ClientBrowser = function(callServer, options) {
        if (!(this instanceof ClientBrowser)) {
          return new ClientBrowser(callServer, options);
        }
        if (!options) {
          options = {};
        }
        this.options = {
          reviver: typeof options.reviver !== "undefined" ? options.reviver : null,
          replacer: typeof options.replacer !== "undefined" ? options.replacer : null,
          generator: typeof options.generator !== "undefined" ? options.generator : function() {
            return uuid();
          },
          version: typeof options.version !== "undefined" ? options.version : 2,
          notificationIdNull: typeof options.notificationIdNull === "boolean" ? options.notificationIdNull : false
        };
        this.callServer = callServer;
      };
      module.exports = ClientBrowser;
      ClientBrowser.prototype.request = function(method, params, id2, callback) {
        const self2 = this;
        let request = null;
        const isBatch = Array.isArray(method) && typeof params === "function";
        if (this.options.version === 1 && isBatch) {
          throw new TypeError("JSON-RPC 1.0 does not support batching");
        }
        const isRaw = !isBatch && method && typeof method === "object" && typeof params === "function";
        if (isBatch || isRaw) {
          callback = params;
          request = method;
        } else {
          if (typeof id2 === "function") {
            callback = id2;
            id2 = void 0;
          }
          const hasCallback = typeof callback === "function";
          try {
            request = generateRequest(method, params, id2, {
              generator: this.options.generator,
              version: this.options.version,
              notificationIdNull: this.options.notificationIdNull
            });
          } catch (err) {
            if (hasCallback) {
              return callback(err);
            }
            throw err;
          }
          if (!hasCallback) {
            return request;
          }
        }
        let message;
        try {
          message = JSON.stringify(request, this.options.replacer);
        } catch (err) {
          return callback(err);
        }
        this.callServer(message, function(err, response) {
          self2._parseResponse(err, response, callback);
        });
        return request;
      };
      ClientBrowser.prototype._parseResponse = function(err, responseText, callback) {
        if (err) {
          callback(err);
          return;
        }
        if (!responseText) {
          return callback();
        }
        let response;
        try {
          response = JSON.parse(responseText, this.options.reviver);
        } catch (err2) {
          return callback(err2);
        }
        if (callback.length === 3) {
          if (Array.isArray(response)) {
            const isError2 = function(res) {
              return typeof res.error !== "undefined";
            };
            const isNotError = function(res) {
              return !isError2(res);
            };
            return callback(null, response.filter(isError2), response.filter(isNotError));
          } else {
            return callback(null, response.error, response.result);
          }
        }
        callback(null, response);
      };
    }
  });

  // node_modules/eventemitter3/index.js
  var require_eventemitter3 = __commonJS({
    "node_modules/eventemitter3/index.js"(exports, module) {
      "use strict";
      var has = Object.prototype.hasOwnProperty;
      var prefix = "~";
      function Events() {
      }
      if (Object.create) {
        Events.prototype = /* @__PURE__ */ Object.create(null);
        if (!new Events().__proto__) prefix = false;
      }
      function EE(fn, context, once) {
        this.fn = fn;
        this.context = context;
        this.once = once || false;
      }
      function addListener(emitter, event, fn, context, once) {
        if (typeof fn !== "function") {
          throw new TypeError("The listener must be a function");
        }
        var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;
        if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
        else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
        else emitter._events[evt] = [emitter._events[evt], listener];
        return emitter;
      }
      function clearEvent(emitter, evt) {
        if (--emitter._eventsCount === 0) emitter._events = new Events();
        else delete emitter._events[evt];
      }
      function EventEmitter2() {
        this._events = new Events();
        this._eventsCount = 0;
      }
      EventEmitter2.prototype.eventNames = function eventNames() {
        var names2 = [], events, name;
        if (this._eventsCount === 0) return names2;
        for (name in events = this._events) {
          if (has.call(events, name)) names2.push(prefix ? name.slice(1) : name);
        }
        if (Object.getOwnPropertySymbols) {
          return names2.concat(Object.getOwnPropertySymbols(events));
        }
        return names2;
      };
      EventEmitter2.prototype.listeners = function listeners(event) {
        var evt = prefix ? prefix + event : event, handlers = this._events[evt];
        if (!handlers) return [];
        if (handlers.fn) return [handlers.fn];
        for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
          ee[i] = handlers[i].fn;
        }
        return ee;
      };
      EventEmitter2.prototype.listenerCount = function listenerCount(event) {
        var evt = prefix ? prefix + event : event, listeners = this._events[evt];
        if (!listeners) return 0;
        if (listeners.fn) return 1;
        return listeners.length;
      };
      EventEmitter2.prototype.emit = function emit2(event, a1, a2, a3, a4, a5) {
        var evt = prefix ? prefix + event : event;
        if (!this._events[evt]) return false;
        var listeners = this._events[evt], len = arguments.length, args, i;
        if (listeners.fn) {
          if (listeners.once) this.removeListener(event, listeners.fn, void 0, true);
          switch (len) {
            case 1:
              return listeners.fn.call(listeners.context), true;
            case 2:
              return listeners.fn.call(listeners.context, a1), true;
            case 3:
              return listeners.fn.call(listeners.context, a1, a2), true;
            case 4:
              return listeners.fn.call(listeners.context, a1, a2, a3), true;
            case 5:
              return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
            case 6:
              return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
          }
          for (i = 1, args = new Array(len - 1); i < len; i++) {
            args[i - 1] = arguments[i];
          }
          listeners.fn.apply(listeners.context, args);
        } else {
          var length = listeners.length, j;
          for (i = 0; i < length; i++) {
            if (listeners[i].once) this.removeListener(event, listeners[i].fn, void 0, true);
            switch (len) {
              case 1:
                listeners[i].fn.call(listeners[i].context);
                break;
              case 2:
                listeners[i].fn.call(listeners[i].context, a1);
                break;
              case 3:
                listeners[i].fn.call(listeners[i].context, a1, a2);
                break;
              case 4:
                listeners[i].fn.call(listeners[i].context, a1, a2, a3);
                break;
              default:
                if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
                  args[j - 1] = arguments[j];
                }
                listeners[i].fn.apply(listeners[i].context, args);
            }
          }
        }
        return true;
      };
      EventEmitter2.prototype.on = function on(event, fn, context) {
        return addListener(this, event, fn, context, false);
      };
      EventEmitter2.prototype.once = function once(event, fn, context) {
        return addListener(this, event, fn, context, true);
      };
      EventEmitter2.prototype.removeListener = function removeListener(event, fn, context, once) {
        var evt = prefix ? prefix + event : event;
        if (!this._events[evt]) return this;
        if (!fn) {
          clearEvent(this, evt);
          return this;
        }
        var listeners = this._events[evt];
        if (listeners.fn) {
          if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
            clearEvent(this, evt);
          }
        } else {
          for (var i = 0, events = [], length = listeners.length; i < length; i++) {
            if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
              events.push(listeners[i]);
            }
          }
          if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
          else clearEvent(this, evt);
        }
        return this;
      };
      EventEmitter2.prototype.removeAllListeners = function removeAllListeners(event) {
        var evt;
        if (event) {
          evt = prefix ? prefix + event : event;
          if (this._events[evt]) clearEvent(this, evt);
        } else {
          this._events = new Events();
          this._eventsCount = 0;
        }
        return this;
      };
      EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener;
      EventEmitter2.prototype.addListener = EventEmitter2.prototype.on;
      EventEmitter2.prefixed = prefix;
      EventEmitter2.EventEmitter = EventEmitter2;
      if ("undefined" !== typeof module) {
        module.exports = EventEmitter2;
      }
    }
  });

  // node_modules/eventemitter3/index.mjs
  var import_index;
  var init_eventemitter3 = __esm({
    "node_modules/eventemitter3/index.mjs"() {
      import_index = __toESM(require_eventemitter3(), 1);
    }
  });

  // node_modules/rpc-websockets/dist/index.browser.mjs
  var import_buffer2;
  var init_index_browser = __esm({
    "node_modules/rpc-websockets/dist/index.browser.mjs"() {
      import_buffer2 = __toESM(require_buffer(), 1);
      init_eventemitter3();
    }
  });

  // node_modules/@noble/hashes/esm/sha3.js
  function keccakP2(s, rounds = 24) {
    const B = new Uint32Array(5 * 2);
    for (let round = 24 - rounds; round < 24; round++) {
      for (let x = 0; x < 10; x++)
        B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
      for (let x = 0; x < 10; x += 2) {
        const idx1 = (x + 8) % 10;
        const idx0 = (x + 2) % 10;
        const B0 = B[idx0];
        const B1 = B[idx0 + 1];
        const Th = rotlH2(B0, B1, 1) ^ B[idx1];
        const Tl = rotlL2(B0, B1, 1) ^ B[idx1 + 1];
        for (let y = 0; y < 50; y += 10) {
          s[x + y] ^= Th;
          s[x + y + 1] ^= Tl;
        }
      }
      let curH = s[2];
      let curL = s[3];
      for (let t = 0; t < 24; t++) {
        const shift = SHA3_ROTL2[t];
        const Th = rotlH2(curH, curL, shift);
        const Tl = rotlL2(curH, curL, shift);
        const PI = SHA3_PI2[t];
        curH = s[PI];
        curL = s[PI + 1];
        s[PI] = Th;
        s[PI + 1] = Tl;
      }
      for (let y = 0; y < 50; y += 10) {
        for (let x = 0; x < 10; x++)
          B[x] = s[y + x];
        for (let x = 0; x < 10; x++)
          s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
      }
      s[0] ^= SHA3_IOTA_H2[round];
      s[1] ^= SHA3_IOTA_L2[round];
    }
    clean(B);
  }
  var _0n12, _1n12, _2n9, _7n2, _256n2, _0x71n2, SHA3_PI2, SHA3_ROTL2, _SHA3_IOTA2, IOTAS, SHA3_IOTA_H2, SHA3_IOTA_L2, rotlH2, rotlL2, Keccak2, gen2, keccak_2562;
  var init_sha32 = __esm({
    "node_modules/@noble/hashes/esm/sha3.js"() {
      init_u642();
      init_utils5();
      _0n12 = BigInt(0);
      _1n12 = BigInt(1);
      _2n9 = BigInt(2);
      _7n2 = BigInt(7);
      _256n2 = BigInt(256);
      _0x71n2 = BigInt(113);
      SHA3_PI2 = [];
      SHA3_ROTL2 = [];
      _SHA3_IOTA2 = [];
      for (let round = 0, R = _1n12, x = 1, y = 0; round < 24; round++) {
        [x, y] = [y, (2 * x + 3 * y) % 5];
        SHA3_PI2.push(2 * (5 * y + x));
        SHA3_ROTL2.push((round + 1) * (round + 2) / 2 % 64);
        let t = _0n12;
        for (let j = 0; j < 7; j++) {
          R = (R << _1n12 ^ (R >> _7n2) * _0x71n2) % _256n2;
          if (R & _2n9)
            t ^= _1n12 << (_1n12 << /* @__PURE__ */ BigInt(j)) - _1n12;
        }
        _SHA3_IOTA2.push(t);
      }
      IOTAS = split3(_SHA3_IOTA2, true);
      SHA3_IOTA_H2 = IOTAS[0];
      SHA3_IOTA_L2 = IOTAS[1];
      rotlH2 = (h, l, s) => s > 32 ? rotlBH2(h, l, s) : rotlSH2(h, l, s);
      rotlL2 = (h, l, s) => s > 32 ? rotlBL2(h, l, s) : rotlSL2(h, l, s);
      Keccak2 = class _Keccak extends Hash2 {
        // NOTE: we accept arguments in bytes instead of bits here.
        constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
          super();
          this.pos = 0;
          this.posOut = 0;
          this.finished = false;
          this.destroyed = false;
          this.enableXOF = false;
          this.blockLen = blockLen;
          this.suffix = suffix;
          this.outputLen = outputLen;
          this.enableXOF = enableXOF;
          this.rounds = rounds;
          anumber(outputLen);
          if (!(0 < blockLen && blockLen < 200))
            throw new Error("only keccak-f1600 function is supported");
          this.state = new Uint8Array(200);
          this.state32 = u322(this.state);
        }
        clone() {
          return this._cloneInto();
        }
        keccak() {
          swap32IfBE(this.state32);
          keccakP2(this.state32, this.rounds);
          swap32IfBE(this.state32);
          this.posOut = 0;
          this.pos = 0;
        }
        update(data) {
          aexists(this);
          data = toBytes2(data);
          abytes(data);
          const { blockLen, state } = this;
          const len = data.length;
          for (let pos = 0; pos < len; ) {
            const take = Math.min(blockLen - this.pos, len - pos);
            for (let i = 0; i < take; i++)
              state[this.pos++] ^= data[pos++];
            if (this.pos === blockLen)
              this.keccak();
          }
          return this;
        }
        finish() {
          if (this.finished)
            return;
          this.finished = true;
          const { state, suffix, pos, blockLen } = this;
          state[pos] ^= suffix;
          if ((suffix & 128) !== 0 && pos === blockLen - 1)
            this.keccak();
          state[blockLen - 1] ^= 128;
          this.keccak();
        }
        writeInto(out) {
          aexists(this, false);
          abytes(out);
          this.finish();
          const bufferOut = this.state;
          const { blockLen } = this;
          for (let pos = 0, len = out.length; pos < len; ) {
            if (this.posOut >= blockLen)
              this.keccak();
            const take = Math.min(blockLen - this.posOut, len - pos);
            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
            this.posOut += take;
            pos += take;
          }
          return out;
        }
        xofInto(out) {
          if (!this.enableXOF)
            throw new Error("XOF is not possible for this instance");
          return this.writeInto(out);
        }
        xof(bytes2) {
          anumber(bytes2);
          return this.xofInto(new Uint8Array(bytes2));
        }
        digestInto(out) {
          aoutput(out, this);
          if (this.finished)
            throw new Error("digest() was already called");
          this.writeInto(out);
          this.destroy();
          return out;
        }
        digest() {
          return this.digestInto(new Uint8Array(this.outputLen));
        }
        destroy() {
          this.destroyed = true;
          clean(this.state);
        }
        _cloneInto(to) {
          const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
          to || (to = new _Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
          to.state32.set(this.state32);
          to.pos = this.pos;
          to.posOut = this.posOut;
          to.finished = this.finished;
          to.rounds = rounds;
          to.suffix = suffix;
          to.outputLen = outputLen;
          to.enableXOF = enableXOF;
          to.destroyed = this.destroyed;
          return to;
        }
      };
      gen2 = (suffix, blockLen, outputLen) => createHasher(() => new Keccak2(blockLen, suffix, outputLen));
      keccak_2562 = /* @__PURE__ */ (() => gen2(1, 136, 256 / 8))();
    }
  });

  // node_modules/@noble/hashes/esm/hmac.js
  var HMAC2, hmac2;
  var init_hmac3 = __esm({
    "node_modules/@noble/hashes/esm/hmac.js"() {
      init_utils5();
      HMAC2 = class extends Hash2 {
        constructor(hash2, _key) {
          super();
          this.finished = false;
          this.destroyed = false;
          ahash(hash2);
          const key = toBytes2(_key);
          this.iHash = hash2.create();
          if (typeof this.iHash.update !== "function")
            throw new Error("Expected instance of class which extends utils.Hash");
          this.blockLen = this.iHash.blockLen;
          this.outputLen = this.iHash.outputLen;
          const blockLen = this.blockLen;
          const pad = new Uint8Array(blockLen);
          pad.set(key.length > blockLen ? hash2.create().update(key).digest() : key);
          for (let i = 0; i < pad.length; i++)
            pad[i] ^= 54;
          this.iHash.update(pad);
          this.oHash = hash2.create();
          for (let i = 0; i < pad.length; i++)
            pad[i] ^= 54 ^ 92;
          this.oHash.update(pad);
          clean(pad);
        }
        update(buf) {
          aexists(this);
          this.iHash.update(buf);
          return this;
        }
        digestInto(out) {
          aexists(this);
          abytes(out, this.outputLen);
          this.finished = true;
          this.iHash.digestInto(out);
          this.oHash.update(out);
          this.oHash.digestInto(out);
          this.destroy();
        }
        digest() {
          const out = new Uint8Array(this.oHash.outputLen);
          this.digestInto(out);
          return out;
        }
        _cloneInto(to) {
          to || (to = Object.create(Object.getPrototypeOf(this), {}));
          const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
          to = to;
          to.finished = finished;
          to.destroyed = destroyed;
          to.blockLen = blockLen;
          to.outputLen = outputLen;
          to.oHash = oHash._cloneInto(to.oHash);
          to.iHash = iHash._cloneInto(to.iHash);
          return to;
        }
        clone() {
          return this._cloneInto();
        }
        destroy() {
          this.destroyed = true;
          this.oHash.destroy();
          this.iHash.destroy();
        }
      };
      hmac2 = (hash2, key, message) => new HMAC2(hash2, key).update(message).digest();
      hmac2.create = (hash2, key) => new HMAC2(hash2, key);
    }
  });

  // node_modules/@noble/curves/esm/abstract/weierstrass.js
  function validateSigVerOpts(opts) {
    if (opts.lowS !== void 0)
      abool("lowS", opts.lowS);
    if (opts.prehash !== void 0)
      abool("prehash", opts.prehash);
  }
  function validatePointOpts2(curve) {
    const opts = validateBasic2(curve);
    validateObject2(opts, {
      a: "field",
      b: "field"
    }, {
      allowedPrivateKeyLengths: "array",
      wrapPrivateKey: "boolean",
      isTorsionFree: "function",
      clearCofactor: "function",
      allowInfinityPoint: "boolean",
      fromBytes: "function",
      toBytes: "function"
    });
    const { endo, Fp: Fp3, a } = opts;
    if (endo) {
      if (!Fp3.eql(a, Fp3.ZERO)) {
        throw new Error("invalid endomorphism, can only be defined for Koblitz curves that have a=0");
      }
      if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") {
        throw new Error("invalid endomorphism, expected beta: bigint and splitScalar: function");
      }
    }
    return Object.freeze({ ...opts });
  }
  function weierstrassPoints2(opts) {
    const CURVE = validatePointOpts2(opts);
    const { Fp: Fp3 } = CURVE;
    const Fn = Field2(CURVE.n, CURVE.nBitLength);
    const toBytes3 = CURVE.toBytes || ((_c, point, _isCompressed) => {
      const a = point.toAffine();
      return concatBytes4(Uint8Array.from([4]), Fp3.toBytes(a.x), Fp3.toBytes(a.y));
    });
    const fromBytes = CURVE.fromBytes || ((bytes2) => {
      const tail = bytes2.subarray(1);
      const x = Fp3.fromBytes(tail.subarray(0, Fp3.BYTES));
      const y = Fp3.fromBytes(tail.subarray(Fp3.BYTES, 2 * Fp3.BYTES));
      return { x, y };
    });
    function weierstrassEquation(x) {
      const { a, b: b2 } = CURVE;
      const x2 = Fp3.sqr(x);
      const x3 = Fp3.mul(x2, x);
      return Fp3.add(Fp3.add(x3, Fp3.mul(x, a)), b2);
    }
    if (!Fp3.eql(Fp3.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
      throw new Error("bad generator point: equation left != right");
    function isWithinCurveOrder(num) {
      return inRange(num, _1n13, CURVE.n);
    }
    function normPrivateKeyToScalar(key) {
      const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N3 } = CURVE;
      if (lengths && typeof key !== "bigint") {
        if (isBytes2(key))
          key = bytesToHex2(key);
        if (typeof key !== "string" || !lengths.includes(key.length))
          throw new Error("invalid private key");
        key = key.padStart(nByteLength * 2, "0");
      }
      let num;
      try {
        num = typeof key === "bigint" ? key : bytesToNumberBE2(ensureBytes2("private key", key, nByteLength));
      } catch (error) {
        throw new Error("invalid private key, expected hex or " + nByteLength + " bytes, got " + typeof key);
      }
      if (wrapPrivateKey)
        num = mod2(num, N3);
      aInRange("private key", num, _1n13, N3);
      return num;
    }
    function aprjpoint(other) {
      if (!(other instanceof Point3))
        throw new Error("ProjectivePoint expected");
    }
    const toAffineMemo = memoized((p, iz) => {
      const { px: x, py: y, pz: z } = p;
      if (Fp3.eql(z, Fp3.ONE))
        return { x, y };
      const is0 = p.is0();
      if (iz == null)
        iz = is0 ? Fp3.ONE : Fp3.inv(z);
      const ax = Fp3.mul(x, iz);
      const ay = Fp3.mul(y, iz);
      const zz = Fp3.mul(z, iz);
      if (is0)
        return { x: Fp3.ZERO, y: Fp3.ZERO };
      if (!Fp3.eql(zz, Fp3.ONE))
        throw new Error("invZ was invalid");
      return { x: ax, y: ay };
    });
    const assertValidMemo = memoized((p) => {
      if (p.is0()) {
        if (CURVE.allowInfinityPoint && !Fp3.is0(p.py))
          return;
        throw new Error("bad point: ZERO");
      }
      const { x, y } = p.toAffine();
      if (!Fp3.isValid(x) || !Fp3.isValid(y))
        throw new Error("bad point: x or y not FE");
      const left = Fp3.sqr(y);
      const right = weierstrassEquation(x);
      if (!Fp3.eql(left, right))
        throw new Error("bad point: equation left != right");
      if (!p.isTorsionFree())
        throw new Error("bad point: not in prime-order subgroup");
      return true;
    });
    class Point3 {
      constructor(px, py, pz) {
        if (px == null || !Fp3.isValid(px))
          throw new Error("x required");
        if (py == null || !Fp3.isValid(py) || Fp3.is0(py))
          throw new Error("y required");
        if (pz == null || !Fp3.isValid(pz))
          throw new Error("z required");
        this.px = px;
        this.py = py;
        this.pz = pz;
        Object.freeze(this);
      }
      // Does not validate if the point is on-curve.
      // Use fromHex instead, or call assertValidity() later.
      static fromAffine(p) {
        const { x, y } = p || {};
        if (!p || !Fp3.isValid(x) || !Fp3.isValid(y))
          throw new Error("invalid affine point");
        if (p instanceof Point3)
          throw new Error("projective point not allowed");
        const is0 = (i) => Fp3.eql(i, Fp3.ZERO);
        if (is0(x) && is0(y))
          return Point3.ZERO;
        return new Point3(x, y, Fp3.ONE);
      }
      get x() {
        return this.toAffine().x;
      }
      get y() {
        return this.toAffine().y;
      }
      /**
       * Takes a bunch of Projective Points but executes only one
       * inversion on all of them. Inversion is very slow operation,
       * so this improves performance massively.
       * Optimization: converts a list of projective points to a list of identical points with Z=1.
       */
      static normalizeZ(points) {
        const toInv = FpInvertBatch2(Fp3, points.map((p) => p.pz));
        return points.map((p, i) => p.toAffine(toInv[i])).map(Point3.fromAffine);
      }
      /**
       * Converts hash string or Uint8Array to Point.
       * @param hex short/long ECDSA hex
       */
      static fromHex(hex) {
        const P = Point3.fromAffine(fromBytes(ensureBytes2("pointHex", hex)));
        P.assertValidity();
        return P;
      }
      // Multiplies generator point by privateKey.
      static fromPrivateKey(privateKey) {
        return Point3.BASE.multiply(normPrivateKeyToScalar(privateKey));
      }
      // Multiscalar Multiplication
      static msm(points, scalars) {
        return pippenger(Point3, Fn, points, scalars);
      }
      // "Private method", don't use it directly
      _setWindowSize(windowSize) {
        wnaf.setWindowSize(this, windowSize);
      }
      // A point on curve is valid if it conforms to equation.
      assertValidity() {
        assertValidMemo(this);
      }
      hasEvenY() {
        const { y } = this.toAffine();
        if (Fp3.isOdd)
          return !Fp3.isOdd(y);
        throw new Error("Field doesn't support isOdd");
      }
      /**
       * Compare one point to another.
       */
      equals(other) {
        aprjpoint(other);
        const { px: X1, py: Y1, pz: Z1 } = this;
        const { px: X2, py: Y2, pz: Z2 } = other;
        const U12 = Fp3.eql(Fp3.mul(X1, Z2), Fp3.mul(X2, Z1));
        const U22 = Fp3.eql(Fp3.mul(Y1, Z2), Fp3.mul(Y2, Z1));
        return U12 && U22;
      }
      /**
       * Flips point to one corresponding to (x, -y) in Affine coordinates.
       */
      negate() {
        return new Point3(this.px, Fp3.neg(this.py), this.pz);
      }
      // Renes-Costello-Batina exception-free doubling formula.
      // There is 30% faster Jacobian formula, but it is not complete.
      // https://eprint.iacr.org/2015/1060, algorithm 3
      // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
      double() {
        const { a, b: b2 } = CURVE;
        const b3 = Fp3.mul(b2, _3n5);
        const { px: X1, py: Y1, pz: Z1 } = this;
        let X3 = Fp3.ZERO, Y3 = Fp3.ZERO, Z3 = Fp3.ZERO;
        let t0 = Fp3.mul(X1, X1);
        let t1 = Fp3.mul(Y1, Y1);
        let t2 = Fp3.mul(Z1, Z1);
        let t3 = Fp3.mul(X1, Y1);
        t3 = Fp3.add(t3, t3);
        Z3 = Fp3.mul(X1, Z1);
        Z3 = Fp3.add(Z3, Z3);
        X3 = Fp3.mul(a, Z3);
        Y3 = Fp3.mul(b3, t2);
        Y3 = Fp3.add(X3, Y3);
        X3 = Fp3.sub(t1, Y3);
        Y3 = Fp3.add(t1, Y3);
        Y3 = Fp3.mul(X3, Y3);
        X3 = Fp3.mul(t3, X3);
        Z3 = Fp3.mul(b3, Z3);
        t2 = Fp3.mul(a, t2);
        t3 = Fp3.sub(t0, t2);
        t3 = Fp3.mul(a, t3);
        t3 = Fp3.add(t3, Z3);
        Z3 = Fp3.add(t0, t0);
        t0 = Fp3.add(Z3, t0);
        t0 = Fp3.add(t0, t2);
        t0 = Fp3.mul(t0, t3);
        Y3 = Fp3.add(Y3, t0);
        t2 = Fp3.mul(Y1, Z1);
        t2 = Fp3.add(t2, t2);
        t0 = Fp3.mul(t2, t3);
        X3 = Fp3.sub(X3, t0);
        Z3 = Fp3.mul(t2, t1);
        Z3 = Fp3.add(Z3, Z3);
        Z3 = Fp3.add(Z3, Z3);
        return new Point3(X3, Y3, Z3);
      }
      // Renes-Costello-Batina exception-free addition formula.
      // There is 30% faster Jacobian formula, but it is not complete.
      // https://eprint.iacr.org/2015/1060, algorithm 1
      // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
      add(other) {
        aprjpoint(other);
        const { px: X1, py: Y1, pz: Z1 } = this;
        const { px: X2, py: Y2, pz: Z2 } = other;
        let X3 = Fp3.ZERO, Y3 = Fp3.ZERO, Z3 = Fp3.ZERO;
        const a = CURVE.a;
        const b3 = Fp3.mul(CURVE.b, _3n5);
        let t0 = Fp3.mul(X1, X2);
        let t1 = Fp3.mul(Y1, Y2);
        let t2 = Fp3.mul(Z1, Z2);
        let t3 = Fp3.add(X1, Y1);
        let t4 = Fp3.add(X2, Y2);
        t3 = Fp3.mul(t3, t4);
        t4 = Fp3.add(t0, t1);
        t3 = Fp3.sub(t3, t4);
        t4 = Fp3.add(X1, Z1);
        let t5 = Fp3.add(X2, Z2);
        t4 = Fp3.mul(t4, t5);
        t5 = Fp3.add(t0, t2);
        t4 = Fp3.sub(t4, t5);
        t5 = Fp3.add(Y1, Z1);
        X3 = Fp3.add(Y2, Z2);
        t5 = Fp3.mul(t5, X3);
        X3 = Fp3.add(t1, t2);
        t5 = Fp3.sub(t5, X3);
        Z3 = Fp3.mul(a, t4);
        X3 = Fp3.mul(b3, t2);
        Z3 = Fp3.add(X3, Z3);
        X3 = Fp3.sub(t1, Z3);
        Z3 = Fp3.add(t1, Z3);
        Y3 = Fp3.mul(X3, Z3);
        t1 = Fp3.add(t0, t0);
        t1 = Fp3.add(t1, t0);
        t2 = Fp3.mul(a, t2);
        t4 = Fp3.mul(b3, t4);
        t1 = Fp3.add(t1, t2);
        t2 = Fp3.sub(t0, t2);
        t2 = Fp3.mul(a, t2);
        t4 = Fp3.add(t4, t2);
        t0 = Fp3.mul(t1, t4);
        Y3 = Fp3.add(Y3, t0);
        t0 = Fp3.mul(t5, t4);
        X3 = Fp3.mul(t3, X3);
        X3 = Fp3.sub(X3, t0);
        t0 = Fp3.mul(t3, t1);
        Z3 = Fp3.mul(t5, Z3);
        Z3 = Fp3.add(Z3, t0);
        return new Point3(X3, Y3, Z3);
      }
      subtract(other) {
        return this.add(other.negate());
      }
      is0() {
        return this.equals(Point3.ZERO);
      }
      wNAF(n2) {
        return wnaf.wNAFCached(this, n2, Point3.normalizeZ);
      }
      /**
       * Non-constant-time multiplication. Uses double-and-add algorithm.
       * It's faster, but should only be used when you don't care about
       * an exposed private key e.g. sig verification, which works over *public* keys.
       */
      multiplyUnsafe(sc) {
        const { endo, n: N3 } = CURVE;
        aInRange("scalar", sc, _0n13, N3);
        const I = Point3.ZERO;
        if (sc === _0n13)
          return I;
        if (this.is0() || sc === _1n13)
          return this;
        if (!endo || wnaf.hasPrecomputes(this))
          return wnaf.wNAFCachedUnsafe(this, sc, Point3.normalizeZ);
        let { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);
        let k1p = I;
        let k2p = I;
        let d = this;
        while (k1 > _0n13 || k2 > _0n13) {
          if (k1 & _1n13)
            k1p = k1p.add(d);
          if (k2 & _1n13)
            k2p = k2p.add(d);
          d = d.double();
          k1 >>= _1n13;
          k2 >>= _1n13;
        }
        if (k1neg)
          k1p = k1p.negate();
        if (k2neg)
          k2p = k2p.negate();
        k2p = new Point3(Fp3.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
        return k1p.add(k2p);
      }
      /**
       * Constant time multiplication.
       * Uses wNAF method. Windowed method may be 10% faster,
       * but takes 2x longer to generate and consumes 2x memory.
       * Uses precomputes when available.
       * Uses endomorphism for Koblitz curves.
       * @param scalar by which the point would be multiplied
       * @returns New point
       */
      multiply(scalar) {
        const { endo, n: N3 } = CURVE;
        aInRange("scalar", scalar, _1n13, N3);
        let point, fake;
        if (endo) {
          const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);
          let { p: k1p, f: f1p } = this.wNAF(k1);
          let { p: k2p, f: f2p } = this.wNAF(k2);
          k1p = wnaf.constTimeNegate(k1neg, k1p);
          k2p = wnaf.constTimeNegate(k2neg, k2p);
          k2p = new Point3(Fp3.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
          point = k1p.add(k2p);
          fake = f1p.add(f2p);
        } else {
          const { p, f: f3 } = this.wNAF(scalar);
          point = p;
          fake = f3;
        }
        return Point3.normalizeZ([point, fake])[0];
      }
      /**
       * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
       * Not using Strauss-Shamir trick: precomputation tables are faster.
       * The trick could be useful if both P and Q are not G (not in our case).
       * @returns non-zero affine point
       */
      multiplyAndAddUnsafe(Q, a, b2) {
        const G = Point3.BASE;
        const mul = (P, a2) => a2 === _0n13 || a2 === _1n13 || !P.equals(G) ? P.multiplyUnsafe(a2) : P.multiply(a2);
        const sum = mul(this, a).add(mul(Q, b2));
        return sum.is0() ? void 0 : sum;
      }
      // Converts Projective point to affine (x, y) coordinates.
      // Can accept precomputed Z^-1 - for example, from invertBatch.
      // (x, y, z) ∋ (x=x/z, y=y/z)
      toAffine(iz) {
        return toAffineMemo(this, iz);
      }
      isTorsionFree() {
        const { h: cofactor, isTorsionFree } = CURVE;
        if (cofactor === _1n13)
          return true;
        if (isTorsionFree)
          return isTorsionFree(Point3, this);
        throw new Error("isTorsionFree() has not been declared for the elliptic curve");
      }
      clearCofactor() {
        const { h: cofactor, clearCofactor } = CURVE;
        if (cofactor === _1n13)
          return this;
        if (clearCofactor)
          return clearCofactor(Point3, this);
        return this.multiplyUnsafe(CURVE.h);
      }
      toRawBytes(isCompressed = true) {
        abool("isCompressed", isCompressed);
        this.assertValidity();
        return toBytes3(Point3, this, isCompressed);
      }
      toHex(isCompressed = true) {
        abool("isCompressed", isCompressed);
        return bytesToHex2(this.toRawBytes(isCompressed));
      }
    }
    Point3.BASE = new Point3(CURVE.Gx, CURVE.Gy, Fp3.ONE);
    Point3.ZERO = new Point3(Fp3.ZERO, Fp3.ONE, Fp3.ZERO);
    const _bits = CURVE.nBitLength;
    const wnaf = wNAF2(Point3, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
    return {
      CURVE,
      ProjectivePoint: Point3,
      normPrivateKeyToScalar,
      weierstrassEquation,
      isWithinCurveOrder
    };
  }
  function validateOpts3(curve) {
    const opts = validateBasic2(curve);
    validateObject2(opts, {
      hash: "hash",
      hmac: "function",
      randomBytes: "function"
    }, {
      bits2int: "function",
      bits2int_modN: "function",
      lowS: "boolean"
    });
    return Object.freeze({ lowS: true, ...opts });
  }
  function weierstrass2(curveDef) {
    const CURVE = validateOpts3(curveDef);
    const { Fp: Fp3, n: CURVE_ORDER } = CURVE;
    const compressedLen = Fp3.BYTES + 1;
    const uncompressedLen = 2 * Fp3.BYTES + 1;
    function modN(a) {
      return mod2(a, CURVE_ORDER);
    }
    function invN(a) {
      return invert2(a, CURVE_ORDER);
    }
    const { ProjectivePoint: Point3, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints2({
      ...CURVE,
      toBytes(_c, point, isCompressed) {
        const a = point.toAffine();
        const x = Fp3.toBytes(a.x);
        const cat = concatBytes4;
        abool("isCompressed", isCompressed);
        if (isCompressed) {
          return cat(Uint8Array.from([point.hasEvenY() ? 2 : 3]), x);
        } else {
          return cat(Uint8Array.from([4]), x, Fp3.toBytes(a.y));
        }
      },
      fromBytes(bytes2) {
        const len = bytes2.length;
        const head = bytes2[0];
        const tail = bytes2.subarray(1);
        if (len === compressedLen && (head === 2 || head === 3)) {
          const x = bytesToNumberBE2(tail);
          if (!inRange(x, _1n13, Fp3.ORDER))
            throw new Error("Point is not on curve");
          const y2 = weierstrassEquation(x);
          let y;
          try {
            y = Fp3.sqrt(y2);
          } catch (sqrtError) {
            const suffix = sqrtError instanceof Error ? ": " + sqrtError.message : "";
            throw new Error("Point is not on curve" + suffix);
          }
          const isYOdd = (y & _1n13) === _1n13;
          const isHeadOdd = (head & 1) === 1;
          if (isHeadOdd !== isYOdd)
            y = Fp3.neg(y);
          return { x, y };
        } else if (len === uncompressedLen && head === 4) {
          const x = Fp3.fromBytes(tail.subarray(0, Fp3.BYTES));
          const y = Fp3.fromBytes(tail.subarray(Fp3.BYTES, 2 * Fp3.BYTES));
          return { x, y };
        } else {
          const cl = compressedLen;
          const ul = uncompressedLen;
          throw new Error("invalid Point, expected length of " + cl + ", or uncompressed " + ul + ", got " + len);
        }
      }
    });
    const numToNByteHex = (num) => bytesToHex2(numberToBytesBE2(num, CURVE.nByteLength));
    function isBiggerThanHalfOrder(number3) {
      const HALF = CURVE_ORDER >> _1n13;
      return number3 > HALF;
    }
    function normalizeS(s) {
      return isBiggerThanHalfOrder(s) ? modN(-s) : s;
    }
    const slcNum = (b2, from, to) => bytesToNumberBE2(b2.slice(from, to));
    class Signature2 {
      constructor(r, s, recovery) {
        aInRange("r", r, _1n13, CURVE_ORDER);
        aInRange("s", s, _1n13, CURVE_ORDER);
        this.r = r;
        this.s = s;
        if (recovery != null)
          this.recovery = recovery;
        Object.freeze(this);
      }
      // pair (bytes of r, bytes of s)
      static fromCompact(hex) {
        const l = CURVE.nByteLength;
        hex = ensureBytes2("compactSignature", hex, l * 2);
        return new Signature2(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));
      }
      // DER encoded ECDSA signature
      // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
      static fromDER(hex) {
        const { r, s } = DER2.toSig(ensureBytes2("DER", hex));
        return new Signature2(r, s);
      }
      /**
       * @todo remove
       * @deprecated
       */
      assertValidity() {
      }
      addRecoveryBit(recovery) {
        return new Signature2(this.r, this.s, recovery);
      }
      recoverPublicKey(msgHash) {
        const { r, s, recovery: rec } = this;
        const h = bits2int_modN(ensureBytes2("msgHash", msgHash));
        if (rec == null || ![0, 1, 2, 3].includes(rec))
          throw new Error("recovery id invalid");
        const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
        if (radj >= Fp3.ORDER)
          throw new Error("recovery id 2 or 3 invalid");
        const prefix = (rec & 1) === 0 ? "02" : "03";
        const R = Point3.fromHex(prefix + numToNByteHex(radj));
        const ir = invN(radj);
        const u1 = modN(-h * ir);
        const u2 = modN(s * ir);
        const Q = Point3.BASE.multiplyAndAddUnsafe(R, u1, u2);
        if (!Q)
          throw new Error("point at infinify");
        Q.assertValidity();
        return Q;
      }
      // Signatures should be low-s, to prevent malleability.
      hasHighS() {
        return isBiggerThanHalfOrder(this.s);
      }
      normalizeS() {
        return this.hasHighS() ? new Signature2(this.r, modN(-this.s), this.recovery) : this;
      }
      // DER-encoded
      toDERRawBytes() {
        return hexToBytes2(this.toDERHex());
      }
      toDERHex() {
        return DER2.hexFromSig(this);
      }
      // padded bytes of r, then padded bytes of s
      toCompactRawBytes() {
        return hexToBytes2(this.toCompactHex());
      }
      toCompactHex() {
        return numToNByteHex(this.r) + numToNByteHex(this.s);
      }
    }
    const utils = {
      isValidPrivateKey(privateKey) {
        try {
          normPrivateKeyToScalar(privateKey);
          return true;
        } catch (error) {
          return false;
        }
      },
      normPrivateKeyToScalar,
      /**
       * Produces cryptographically secure private key from random of size
       * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
       */
      randomPrivateKey: () => {
        const length = getMinHashLength2(CURVE.n);
        return mapHashToField2(CURVE.randomBytes(length), CURVE.n);
      },
      /**
       * Creates precompute table for an arbitrary EC point. Makes point "cached".
       * Allows to massively speed-up `point.multiply(scalar)`.
       * @returns cached point
       * @example
       * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
       * fast.multiply(privKey); // much faster ECDH now
       */
      precompute(windowSize = 8, point = Point3.BASE) {
        point._setWindowSize(windowSize);
        point.multiply(BigInt(3));
        return point;
      }
    };
    function getPublicKey2(privateKey, isCompressed = true) {
      return Point3.fromPrivateKey(privateKey).toRawBytes(isCompressed);
    }
    function isProbPub(item) {
      const arr = isBytes2(item);
      const str = typeof item === "string";
      const len = (arr || str) && item.length;
      if (arr)
        return len === compressedLen || len === uncompressedLen;
      if (str)
        return len === 2 * compressedLen || len === 2 * uncompressedLen;
      if (item instanceof Point3)
        return true;
      return false;
    }
    function getSharedSecret(privateA, publicB, isCompressed = true) {
      if (isProbPub(privateA))
        throw new Error("first arg must be private key");
      if (!isProbPub(publicB))
        throw new Error("second arg must be public key");
      const b2 = Point3.fromHex(publicB);
      return b2.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
    }
    const bits2int = CURVE.bits2int || function(bytes2) {
      if (bytes2.length > 8192)
        throw new Error("input is too large");
      const num = bytesToNumberBE2(bytes2);
      const delta = bytes2.length * 8 - CURVE.nBitLength;
      return delta > 0 ? num >> BigInt(delta) : num;
    };
    const bits2int_modN = CURVE.bits2int_modN || function(bytes2) {
      return modN(bits2int(bytes2));
    };
    const ORDER_MASK = bitMask2(CURVE.nBitLength);
    function int2octets(num) {
      aInRange("num < 2^" + CURVE.nBitLength, num, _0n13, ORDER_MASK);
      return numberToBytesBE2(num, CURVE.nByteLength);
    }
    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
      if (["recovered", "canonical"].some((k) => k in opts))
        throw new Error("sign() legacy options not supported");
      const { hash: hash2, randomBytes: randomBytes5 } = CURVE;
      let { lowS, prehash, extraEntropy: ent } = opts;
      if (lowS == null)
        lowS = true;
      msgHash = ensureBytes2("msgHash", msgHash);
      validateSigVerOpts(opts);
      if (prehash)
        msgHash = ensureBytes2("prehashed msgHash", hash2(msgHash));
      const h1int = bits2int_modN(msgHash);
      const d = normPrivateKeyToScalar(privateKey);
      const seedArgs = [int2octets(d), int2octets(h1int)];
      if (ent != null && ent !== false) {
        const e = ent === true ? randomBytes5(Fp3.BYTES) : ent;
        seedArgs.push(ensureBytes2("extraEntropy", e));
      }
      const seed = concatBytes4(...seedArgs);
      const m = h1int;
      function k2sig(kBytes) {
        const k = bits2int(kBytes);
        if (!isWithinCurveOrder(k))
          return;
        const ik = invN(k);
        const q = Point3.BASE.multiply(k).toAffine();
        const r = modN(q.x);
        if (r === _0n13)
          return;
        const s = modN(ik * modN(m + r * d));
        if (s === _0n13)
          return;
        let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n13);
        let normS = s;
        if (lowS && isBiggerThanHalfOrder(s)) {
          normS = normalizeS(s);
          recovery ^= 1;
        }
        return new Signature2(r, normS, recovery);
      }
      return { seed, k2sig };
    }
    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
    function sign2(msgHash, privKey, opts = defaultSigOpts) {
      const { seed, k2sig } = prepSig(msgHash, privKey, opts);
      const C = CURVE;
      const drbg = createHmacDrbg2(C.hash.outputLen, C.nByteLength, C.hmac);
      return drbg(seed, k2sig);
    }
    Point3.BASE._setWindowSize(8);
    function verify2(signature2, msgHash, publicKey2, opts = defaultVerOpts) {
      var _a2;
      const sg = signature2;
      msgHash = ensureBytes2("msgHash", msgHash);
      publicKey2 = ensureBytes2("publicKey", publicKey2);
      const { lowS, prehash, format } = opts;
      validateSigVerOpts(opts);
      if ("strict" in opts)
        throw new Error("options.strict was renamed to lowS");
      if (format !== void 0 && format !== "compact" && format !== "der")
        throw new Error("format must be compact or der");
      const isHex = typeof sg === "string" || isBytes2(sg);
      const isObj = !isHex && !format && typeof sg === "object" && sg !== null && typeof sg.r === "bigint" && typeof sg.s === "bigint";
      if (!isHex && !isObj)
        throw new Error("invalid signature, expected Uint8Array, hex string or Signature instance");
      let _sig2 = void 0;
      let P;
      try {
        if (isObj)
          _sig2 = new Signature2(sg.r, sg.s);
        if (isHex) {
          try {
            if (format !== "compact")
              _sig2 = Signature2.fromDER(sg);
          } catch (derError) {
            if (!(derError instanceof DER2.Err))
              throw derError;
          }
          if (!_sig2 && format !== "der")
            _sig2 = Signature2.fromCompact(sg);
        }
        P = Point3.fromHex(publicKey2);
      } catch (error) {
        return false;
      }
      if (!_sig2)
        return false;
      if (lowS && _sig2.hasHighS())
        return false;
      if (prehash)
        msgHash = CURVE.hash(msgHash);
      const { r, s } = _sig2;
      const h = bits2int_modN(msgHash);
      const is2 = invN(s);
      const u1 = modN(h * is2);
      const u2 = modN(r * is2);
      const R = (_a2 = Point3.BASE.multiplyAndAddUnsafe(P, u1, u2)) == null ? void 0 : _a2.toAffine();
      if (!R)
        return false;
      const v = modN(R.x);
      return v === r;
    }
    return {
      CURVE,
      getPublicKey: getPublicKey2,
      getSharedSecret,
      sign: sign2,
      verify: verify2,
      ProjectivePoint: Point3,
      Signature: Signature2,
      utils
    };
  }
  var DERErr2, DER2, _0n13, _1n13, _2n10, _3n5, _4n4;
  var init_weierstrass2 = __esm({
    "node_modules/@noble/curves/esm/abstract/weierstrass.js"() {
      init_curve2();
      init_modular2();
      init_utils6();
      DERErr2 = class extends Error {
        constructor(m = "") {
          super(m);
        }
      };
      DER2 = {
        // asn.1 DER encoding utils
        Err: DERErr2,
        // Basic building block is TLV (Tag-Length-Value)
        _tlv: {
          encode: (tag, data) => {
            const { Err: E } = DER2;
            if (tag < 0 || tag > 256)
              throw new E("tlv.encode: wrong tag");
            if (data.length & 1)
              throw new E("tlv.encode: unpadded data");
            const dataLen = data.length / 2;
            const len = numberToHexUnpadded2(dataLen);
            if (len.length / 2 & 128)
              throw new E("tlv.encode: long form length too big");
            const lenLen = dataLen > 127 ? numberToHexUnpadded2(len.length / 2 | 128) : "";
            const t = numberToHexUnpadded2(tag);
            return t + lenLen + len + data;
          },
          // v - value, l - left bytes (unparsed)
          decode(tag, data) {
            const { Err: E } = DER2;
            let pos = 0;
            if (tag < 0 || tag > 256)
              throw new E("tlv.encode: wrong tag");
            if (data.length < 2 || data[pos++] !== tag)
              throw new E("tlv.decode: wrong tlv");
            const first = data[pos++];
            const isLong = !!(first & 128);
            let length = 0;
            if (!isLong)
              length = first;
            else {
              const lenLen = first & 127;
              if (!lenLen)
                throw new E("tlv.decode(long): indefinite length not supported");
              if (lenLen > 4)
                throw new E("tlv.decode(long): byte length is too big");
              const lengthBytes = data.subarray(pos, pos + lenLen);
              if (lengthBytes.length !== lenLen)
                throw new E("tlv.decode: length bytes not complete");
              if (lengthBytes[0] === 0)
                throw new E("tlv.decode(long): zero leftmost byte");
              for (const b2 of lengthBytes)
                length = length << 8 | b2;
              pos += lenLen;
              if (length < 128)
                throw new E("tlv.decode(long): not minimal encoding");
            }
            const v = data.subarray(pos, pos + length);
            if (v.length !== length)
              throw new E("tlv.decode: wrong value length");
            return { v, l: data.subarray(pos + length) };
          }
        },
        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,
        // since we always use positive integers here. It must always be empty:
        // - add zero byte if exists
        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)
        _int: {
          encode(num) {
            const { Err: E } = DER2;
            if (num < _0n13)
              throw new E("integer: negative integers are not allowed");
            let hex = numberToHexUnpadded2(num);
            if (Number.parseInt(hex[0], 16) & 8)
              hex = "00" + hex;
            if (hex.length & 1)
              throw new E("unexpected DER parsing assertion: unpadded hex");
            return hex;
          },
          decode(data) {
            const { Err: E } = DER2;
            if (data[0] & 128)
              throw new E("invalid signature integer: negative");
            if (data[0] === 0 && !(data[1] & 128))
              throw new E("invalid signature integer: unnecessary leading zero");
            return bytesToNumberBE2(data);
          }
        },
        toSig(hex) {
          const { Err: E, _int: int, _tlv: tlv } = DER2;
          const data = ensureBytes2("signature", hex);
          const { v: seqBytes, l: seqLeftBytes } = tlv.decode(48, data);
          if (seqLeftBytes.length)
            throw new E("invalid signature: left bytes after parsing");
          const { v: rBytes, l: rLeftBytes } = tlv.decode(2, seqBytes);
          const { v: sBytes, l: sLeftBytes } = tlv.decode(2, rLeftBytes);
          if (sLeftBytes.length)
            throw new E("invalid signature: left bytes after parsing");
          return { r: int.decode(rBytes), s: int.decode(sBytes) };
        },
        hexFromSig(sig) {
          const { _tlv: tlv, _int: int } = DER2;
          const rs = tlv.encode(2, int.encode(sig.r));
          const ss = tlv.encode(2, int.encode(sig.s));
          const seq2 = rs + ss;
          return tlv.encode(48, seq2);
        }
      };
      _0n13 = BigInt(0);
      _1n13 = BigInt(1);
      _2n10 = BigInt(2);
      _3n5 = BigInt(3);
      _4n4 = BigInt(4);
    }
  });

  // node_modules/@noble/curves/esm/_shortw_utils.js
  function getHash2(hash2) {
    return {
      hash: hash2,
      hmac: (key, ...msgs) => hmac2(hash2, key, concatBytes3(...msgs)),
      randomBytes: randomBytes4
    };
  }
  function createCurve2(curveDef, defHash) {
    const create2 = (hash2) => weierstrass2({ ...curveDef, ...getHash2(hash2) });
    return { ...create2(defHash), create: create2 };
  }
  var init_shortw_utils2 = __esm({
    "node_modules/@noble/curves/esm/_shortw_utils.js"() {
      init_hmac3();
      init_utils5();
      init_weierstrass2();
    }
  });

  // node_modules/@noble/curves/esm/secp256k1.js
  function sqrtMod2(y) {
    const P = secp256k1P2;
    const _3n6 = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
    const b2 = y * y * y % P;
    const b3 = b2 * b2 * y % P;
    const b6 = pow22(b3, _3n6, P) * b3 % P;
    const b9 = pow22(b6, _3n6, P) * b3 % P;
    const b11 = pow22(b9, _2n11, P) * b2 % P;
    const b22 = pow22(b11, _11n, P) * b11 % P;
    const b44 = pow22(b22, _22n, P) * b22 % P;
    const b88 = pow22(b44, _44n, P) * b44 % P;
    const b176 = pow22(b88, _88n, P) * b88 % P;
    const b220 = pow22(b176, _44n, P) * b44 % P;
    const b223 = pow22(b220, _3n6, P) * b3 % P;
    const t1 = pow22(b223, _23n, P) * b22 % P;
    const t2 = pow22(t1, _6n, P) * b2 % P;
    const root = pow22(t2, _2n11, P);
    if (!Fpk1.eql(Fpk1.sqr(root), y))
      throw new Error("Cannot find square root");
    return root;
  }
  var secp256k1P2, secp256k1N2, _1n14, _2n11, divNearest2, Fpk1, secp256k12, _0n14, Point2;
  var init_secp256k12 = __esm({
    "node_modules/@noble/curves/esm/secp256k1.js"() {
      init_sha23();
      init_shortw_utils2();
      init_modular2();
      secp256k1P2 = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
      secp256k1N2 = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
      _1n14 = BigInt(1);
      _2n11 = BigInt(2);
      divNearest2 = (a, b2) => (a + b2 / _2n11) / b2;
      Fpk1 = Field2(secp256k1P2, void 0, void 0, { sqrt: sqrtMod2 });
      secp256k12 = createCurve2({
        a: BigInt(0),
        b: BigInt(7),
        Fp: Fpk1,
        n: secp256k1N2,
        Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
        Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
        h: BigInt(1),
        lowS: true,
        // Allow only low-S signatures by default in sign() and verify()
        endo: {
          // Endomorphism, see above
          beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
          splitScalar: (k) => {
            const n2 = secp256k1N2;
            const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
            const b1 = -_1n14 * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
            const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
            const b2 = a1;
            const POW_2_128 = BigInt("0x100000000000000000000000000000000");
            const c1 = divNearest2(b2 * k, n2);
            const c2 = divNearest2(-b1 * k, n2);
            let k1 = mod2(k - c1 * a1 - c2 * a2, n2);
            let k2 = mod2(-c1 * b1 - c2 * b2, n2);
            const k1neg = k1 > POW_2_128;
            const k2neg = k2 > POW_2_128;
            if (k1neg)
              k1 = n2 - k1;
            if (k2neg)
              k2 = n2 - k2;
            if (k1 > POW_2_128 || k2 > POW_2_128) {
              throw new Error("splitScalar: Endomorphism failed, k=" + k);
            }
            return { k1neg, k1, k2neg, k2 };
          }
        }
      }, sha2563);
      _0n14 = BigInt(0);
      Point2 = secp256k12.ProjectivePoint;
    }
  });

  // node_modules/@meshconnect/solana-web3.js/lib/index.browser.esm.js
  function isOnCurve(publicKey2) {
    try {
      ed25519.ExtendedPoint.fromHex(publicKey2);
      return true;
    } catch (e) {
      return false;
    }
  }
  function isPublicKeyData(value) {
    return value._bn !== void 0;
  }
  function getAlloc(type2, fields) {
    const getItemAlloc = (item) => {
      if (item.span >= 0) {
        return item.span;
      } else if (typeof item.alloc === "function") {
        return item.alloc(fields[item.property]);
      } else if ("count" in item && "elementLayout" in item) {
        const field = fields[item.property];
        if (Array.isArray(field)) {
          return field.length * getItemAlloc(item.elementLayout);
        }
      } else if ("fields" in item) {
        return getAlloc({
          layout: item
        }, fields[item.property]);
      }
      return 0;
    };
    let alloc = 0;
    type2.layout.fields.forEach((item) => {
      alloc += getItemAlloc(item);
    });
    return alloc;
  }
  function decodeLength(bytes2) {
    let len = 0;
    let size = 0;
    for (; ; ) {
      let elem = bytes2.shift();
      len |= (elem & 127) << size * 7;
      size += 1;
      if ((elem & 128) === 0) {
        break;
      }
    }
    return len;
  }
  function encodeLength(bytes2, len) {
    let rem_len = len;
    for (; ; ) {
      let elem = rem_len & 127;
      rem_len >>= 7;
      if (rem_len == 0) {
        bytes2.push(elem);
        break;
      } else {
        elem |= 128;
        bytes2.push(elem);
      }
    }
  }
  function assert3(condition, message) {
    if (!condition) {
      throw new Error(message || "Assertion failed");
    }
  }
  function guardedShift(byteArray) {
    if (byteArray.length === 0) {
      throw new Error(END_OF_BUFFER_ERROR_MESSAGE);
    }
    return byteArray.shift();
  }
  function guardedSplice(byteArray, ...args) {
    var _a2;
    const [start] = args;
    if (args.length === 2 ? start + ((_a2 = args[1]) != null ? _a2 : 0) > byteArray.length : start >= byteArray.length) {
      throw new Error(END_OF_BUFFER_ERROR_MESSAGE);
    }
    return byteArray.splice(...args);
  }
  async function sendAndConfirmTransaction(connection, transaction, signers, options) {
    const sendOptions = options && {
      skipPreflight: options.skipPreflight,
      preflightCommitment: options.preflightCommitment || options.commitment,
      maxRetries: options.maxRetries,
      minContextSlot: options.minContextSlot
    };
    const signature2 = await connection.sendTransaction(transaction, signers, sendOptions);
    let status;
    if (transaction.recentBlockhash != null && transaction.lastValidBlockHeight != null) {
      status = (await connection.confirmTransaction({
        abortSignal: options == null ? void 0 : options.abortSignal,
        signature: signature2,
        blockhash: transaction.recentBlockhash,
        lastValidBlockHeight: transaction.lastValidBlockHeight
      }, options && options.commitment)).value;
    } else if (transaction.minNonceContextSlot != null && transaction.nonceInfo != null) {
      const {
        nonceInstruction
      } = transaction.nonceInfo;
      const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;
      status = (await connection.confirmTransaction({
        abortSignal: options == null ? void 0 : options.abortSignal,
        minContextSlot: transaction.minNonceContextSlot,
        nonceAccountPubkey,
        nonceValue: transaction.nonceInfo.nonce,
        signature: signature2
      }, options && options.commitment)).value;
    } else {
      if ((options == null ? void 0 : options.abortSignal) != null) {
        console.warn("sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.");
      }
      status = (await connection.confirmTransaction(signature2, options && options.commitment)).value;
    }
    if (status.err) {
      if (signature2 != null) {
        throw new SendTransactionError({
          action: "send",
          signature: signature2,
          transactionMessage: `Status: (${JSON.stringify(status)})`
        });
      }
      throw new Error(`Transaction ${signature2} failed (${JSON.stringify(status)})`);
    }
    return signature2;
  }
  function sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }
  function encodeData(type2, fields) {
    const allocLength = type2.layout.span >= 0 ? type2.layout.span : getAlloc(type2, fields);
    const data = import_buffer3.Buffer.alloc(allocLength);
    const layoutFields = Object.assign({
      instruction: type2.index
    }, fields);
    type2.layout.encode(layoutFields, data);
    return data;
  }
  function toBufferLE(n2, width) {
    const result = import_buffer3.Buffer.alloc(width);
    let temp = n2;
    for (let i = 0; i < width; i++) {
      result[i] = Number(temp & /* @__PURE__ */ BigInt("0xff"));
      temp >>= /* @__PURE__ */ BigInt("8");
    }
    return result;
  }
  function toBigIntLE(buf) {
    return buf.reduceRight((acc, byte) => (acc << /* @__PURE__ */ BigInt("8")) + BigInt(byte), /* @__PURE__ */ BigInt("0"));
  }
  function createRpcResult(result) {
    return union([type({
      jsonrpc: literal("2.0"),
      id: string(),
      result
    }), type({
      jsonrpc: literal("2.0"),
      id: string(),
      error: type({
        code: unknown(),
        message: string(),
        data: optional(any())
      })
    })]);
  }
  function jsonRpcResult(schema) {
    return coerce(createRpcResult(schema), UnknownRpcResult, (value) => {
      if ("error" in value) {
        return value;
      } else {
        return {
          ...value,
          result: create(value.result, schema)
        };
      }
    });
  }
  function jsonRpcResultAndContext(value) {
    return jsonRpcResult(type({
      context: type({
        slot: number2()
      }),
      value
    }));
  }
  function notificationResultAndContext(value) {
    return type({
      context: type({
        slot: number2()
      }),
      value
    });
  }
  var import_buffer3, import_bn, import_bs58, import_borsh, BufferLayout, import_buffer_layout, import_browser, generatePrivateKey, generateKeypair, getPublicKey, sign, verify, toBuffer, Struct2, SOLANA_SCHEMA, _PublicKey, MAX_SEED_LENGTH, PUBLIC_KEY_LENGTH, uniquePublicKeyCounter, PublicKey, BPF_LOADER_DEPRECATED_PROGRAM_ID, PACKET_DATA_SIZE, VERSION_PREFIX_MASK, SIGNATURE_LENGTH_IN_BYTES, TransactionExpiredBlockheightExceededError, TransactionExpiredTimeoutError, TransactionExpiredNonceInvalidError, MessageAccountKeys, publicKey, signature, rustString, authorized, lockup, voteInit, voteAuthorizeWithSeedArgs, CompiledKeys, END_OF_BUFFER_ERROR_MESSAGE, Message, MessageV0, VersionedMessage, DEFAULT_SIGNATURE, TransactionInstruction, Transaction2, TransactionMessage, VersionedTransaction, NUM_TICKS_PER_SECOND, DEFAULT_TICKS_PER_SLOT, NUM_SLOTS_PER_SECOND, MS_PER_SLOT, SYSVAR_CLOCK_PUBKEY, SYSVAR_EPOCH_SCHEDULE_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_SLOT_HASHES_PUBKEY, SYSVAR_SLOT_HISTORY_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, SendTransactionError, FeeCalculatorLayout, NonceAccountLayout, NONCE_ACCOUNT_LENGTH, encodeDecode, bigInt, u642, SYSTEM_INSTRUCTION_LAYOUTS, SystemProgram, CHUNK_SIZE, Loader, BPF_LOADER_PROGRAM_ID, fetchImpl, LookupTableMetaLayout, PublicKeyFromString, RawAccountDataResult, BufferFromRawAccountData, BLOCKHASH_CACHE_TIMEOUT_MS, UnknownRpcResult, GetInflationGovernorResult, GetInflationRewardResult, GetRecentPrioritizationFeesResult, GetInflationRateResult, GetEpochInfoResult, GetEpochScheduleResult, GetLeaderScheduleResult, TransactionErrorResult, SignatureStatusResult, SignatureReceivedResult, VersionResult, ParsedInstructionStruct, PartiallyDecodedInstructionStruct, SimulatedTransactionResponseStruct, BlockProductionResponseStruct, GetInflationGovernorRpcResult, GetInflationRateRpcResult, GetRecentPrioritizationFeesRpcResult, GetEpochInfoRpcResult, GetEpochScheduleRpcResult, GetLeaderScheduleRpcResult, SlotRpcResult, GetSupplyRpcResult, TokenAmountResult, GetTokenLargestAccountsResult, GetTokenAccountsByOwner, ParsedAccountDataResult, GetParsedTokenAccountsByOwner, GetLargestAccountsRpcResult, AccountInfoResult, KeyedAccountInfoResult, ParsedOrRawAccountData, ParsedAccountInfoResult, KeyedParsedAccountInfoResult, StakeActivationResult, GetConfirmedSignaturesForAddress2RpcResult, GetSignaturesForAddressRpcResult, AccountNotificationResult, ProgramAccountInfoResult, ProgramAccountNotificationResult, SlotInfoResult, SlotNotificationResult, SlotUpdateResult, SlotUpdateNotificationResult, SignatureNotificationResult, RootNotificationResult, ContactInfoResult, VoteAccountInfoResult, GetVoteAccounts, ConfirmationStatus, SignatureStatusResponse, GetSignatureStatusesRpcResult, GetMinimumBalanceForRentExemptionRpcResult, AddressTableLookupStruct, ConfirmedTransactionResult, AnnotatedAccountKey, ConfirmedTransactionAccountsModeResult, ParsedInstructionResult, RawInstructionResult, InstructionResult, UnknownInstructionResult, ParsedOrRawInstruction, ParsedConfirmedTransactionResult, TokenBalanceResult, LoadedAddressesResult, ConfirmedTransactionMetaResult, ParsedConfirmedTransactionMetaResult, TransactionVersionStruct, RewardsResult, GetBlockRpcResult, GetNoneModeBlockRpcResult, GetAccountsModeBlockRpcResult, GetParsedBlockRpcResult, GetParsedAccountsModeBlockRpcResult, GetParsedNoneModeBlockRpcResult, GetConfirmedBlockRpcResult, GetBlockSignaturesRpcResult, GetTransactionRpcResult, GetParsedTransactionRpcResult, GetLatestBlockhashRpcResult, IsBlockhashValidRpcResult, PerfSampleResult, GetRecentPerformanceSamplesRpcResult, GetFeeCalculatorRpcResult, RequestAirdropRpcResult, SendTransactionRpcResult, LogsResult, LogsNotificationResult, Keypair, LOOKUP_TABLE_INSTRUCTION_LAYOUTS, AddressLookupTableProgram, COMPUTE_BUDGET_INSTRUCTION_LAYOUTS, ComputeBudgetProgram, PRIVATE_KEY_BYTES$1, PUBLIC_KEY_BYTES$1, SIGNATURE_BYTES, ED25519_INSTRUCTION_LAYOUT, Ed25519Program, ecdsaSign, publicKeyCreate, PRIVATE_KEY_BYTES, ETHEREUM_ADDRESS_BYTES, PUBLIC_KEY_BYTES, SIGNATURE_OFFSETS_SERIALIZED_SIZE, SECP256K1_INSTRUCTION_LAYOUT, Secp256k1Program, _Lockup, STAKE_CONFIG_ID, Lockup, STAKE_INSTRUCTION_LAYOUTS, StakeAuthorizationLayout, StakeProgram, VOTE_INSTRUCTION_LAYOUTS, VoteAuthorizationLayout, VoteProgram, VALIDATOR_INFO_KEY, InfoString, VOTE_PROGRAM_ID, VoteAccountLayout;
  var init_index_browser_esm = __esm({
    "node_modules/@meshconnect/solana-web3.js/lib/index.browser.esm.js"() {
      import_buffer3 = __toESM(require_buffer());
      init_ed25519();
      import_bn = __toESM(require_bn());
      import_bs58 = __toESM(require_bs58());
      init_sha2562();
      import_borsh = __toESM(require_lib());
      BufferLayout = __toESM(require_Layout());
      import_buffer_layout = __toESM(require_Layout());
      init_dist2();
      import_browser = __toESM(require_browser());
      init_index_browser();
      init_sha32();
      init_secp256k12();
      generatePrivateKey = ed25519.utils.randomPrivateKey;
      generateKeypair = () => {
        const privateScalar = ed25519.utils.randomPrivateKey();
        const publicKey2 = getPublicKey(privateScalar);
        const secretKey = new Uint8Array(64);
        secretKey.set(privateScalar);
        secretKey.set(publicKey2, 32);
        return {
          publicKey: publicKey2,
          secretKey
        };
      };
      getPublicKey = ed25519.getPublicKey;
      sign = (message, secretKey) => ed25519.sign(message, secretKey.slice(0, 32));
      verify = ed25519.verify;
      toBuffer = (arr) => {
        if (import_buffer3.Buffer.isBuffer(arr)) {
          return arr;
        } else if (arr instanceof Uint8Array) {
          return import_buffer3.Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);
        } else {
          return import_buffer3.Buffer.from(arr);
        }
      };
      Struct2 = class {
        constructor(properties) {
          Object.assign(this, properties);
        }
        encode() {
          return import_buffer3.Buffer.from((0, import_borsh.serialize)(SOLANA_SCHEMA, this));
        }
        static decode(data) {
          return (0, import_borsh.deserialize)(SOLANA_SCHEMA, this, data);
        }
        static decodeUnchecked(data) {
          return (0, import_borsh.deserializeUnchecked)(SOLANA_SCHEMA, this, data);
        }
      };
      SOLANA_SCHEMA = /* @__PURE__ */ new Map();
      MAX_SEED_LENGTH = 32;
      PUBLIC_KEY_LENGTH = 32;
      uniquePublicKeyCounter = 1;
      PublicKey = class _PublicKey2 extends Struct2 {
        /**
         * Create a new PublicKey object
         * @param value ed25519 public key as buffer or base-58 encoded string
         */
        constructor(value) {
          super({});
          this._bn = void 0;
          if (isPublicKeyData(value)) {
            this._bn = value._bn;
          } else {
            if (typeof value === "string") {
              const decoded = import_bs58.default.decode(value);
              if (decoded.length != PUBLIC_KEY_LENGTH) {
                throw new Error(`Invalid public key input`);
              }
              this._bn = new import_bn.default(decoded);
            } else {
              this._bn = new import_bn.default(value);
            }
            if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {
              throw new Error(`Invalid public key input`);
            }
          }
        }
        /**
         * Returns a unique PublicKey for tests and benchmarks using a counter
         */
        static unique() {
          const key = new _PublicKey2(uniquePublicKeyCounter);
          uniquePublicKeyCounter += 1;
          return new _PublicKey2(key.toBuffer());
        }
        /**
         * Default public key value. The base58-encoded string representation is all ones (as seen below)
         * The underlying BN number is 32 bytes that are all zeros
         */
        /**
         * Checks if two publicKeys are equal
         */
        equals(publicKey2) {
          return this._bn.eq(publicKey2._bn);
        }
        /**
         * Return the base-58 representation of the public key
         */
        toBase58() {
          return import_bs58.default.encode(this.toBytes());
        }
        toJSON() {
          return this.toBase58();
        }
        /**
         * Return the byte array representation of the public key in big endian
         */
        toBytes() {
          const buf = this.toBuffer();
          return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
        }
        /**
         * Return the Buffer representation of the public key in big endian
         */
        toBuffer() {
          const b2 = this._bn.toArrayLike(import_buffer3.Buffer);
          if (b2.length === PUBLIC_KEY_LENGTH) {
            return b2;
          }
          const zeroPad2 = import_buffer3.Buffer.alloc(32);
          b2.copy(zeroPad2, 32 - b2.length);
          return zeroPad2;
        }
        get [Symbol.toStringTag]() {
          return `PublicKey(${this.toString()})`;
        }
        /**
         * Return the base-58 representation of the public key
         */
        toString() {
          return this.toBase58();
        }
        /**
         * Derive a public key from another key, a seed, and a program ID.
         * The program ID will also serve as the owner of the public key, giving
         * it permission to write data to the account.
         */
        /* eslint-disable require-await */
        static async createWithSeed(fromPublicKey, seed, programId) {
          const buffer = import_buffer3.Buffer.concat([fromPublicKey.toBuffer(), import_buffer3.Buffer.from(seed), programId.toBuffer()]);
          const publicKeyBytes = sha2564(buffer);
          return new _PublicKey2(publicKeyBytes);
        }
        /**
         * Derive a program address from seeds and a program ID.
         */
        /* eslint-disable require-await */
        static createProgramAddressSync(seeds, programId) {
          let buffer = import_buffer3.Buffer.alloc(0);
          seeds.forEach(function(seed) {
            if (seed.length > MAX_SEED_LENGTH) {
              throw new TypeError(`Max seed length exceeded`);
            }
            buffer = import_buffer3.Buffer.concat([buffer, toBuffer(seed)]);
          });
          buffer = import_buffer3.Buffer.concat([buffer, programId.toBuffer(), import_buffer3.Buffer.from("ProgramDerivedAddress")]);
          const publicKeyBytes = sha2564(buffer);
          if (isOnCurve(publicKeyBytes)) {
            throw new Error(`Invalid seeds, address must fall off the curve`);
          }
          return new _PublicKey2(publicKeyBytes);
        }
        /**
         * Async version of createProgramAddressSync
         * For backwards compatibility
         *
         * @deprecated Use {@link createProgramAddressSync} instead
         */
        /* eslint-disable require-await */
        static async createProgramAddress(seeds, programId) {
          return this.createProgramAddressSync(seeds, programId);
        }
        /**
         * Find a valid program address
         *
         * Valid program addresses must fall off the ed25519 curve.  This function
         * iterates a nonce until it finds one that when combined with the seeds
         * results in a valid program address.
         */
        static findProgramAddressSync(seeds, programId) {
          let nonce = 255;
          let address;
          while (nonce != 0) {
            try {
              const seedsWithNonce = seeds.concat(import_buffer3.Buffer.from([nonce]));
              address = this.createProgramAddressSync(seedsWithNonce, programId);
            } catch (err) {
              if (err instanceof TypeError) {
                throw err;
              }
              nonce--;
              continue;
            }
            return [address, nonce];
          }
          throw new Error(`Unable to find a viable program address nonce`);
        }
        /**
         * Async version of findProgramAddressSync
         * For backwards compatibility
         *
         * @deprecated Use {@link findProgramAddressSync} instead
         */
        static async findProgramAddress(seeds, programId) {
          return this.findProgramAddressSync(seeds, programId);
        }
        /**
         * Check that a pubkey is on the ed25519 curve.
         */
        static isOnCurve(pubkeyData) {
          const pubkey = new _PublicKey2(pubkeyData);
          return isOnCurve(pubkey.toBytes());
        }
      };
      _PublicKey = PublicKey;
      PublicKey.default = new _PublicKey("11111111111111111111111111111111");
      SOLANA_SCHEMA.set(PublicKey, {
        kind: "struct",
        fields: [["_bn", "u256"]]
      });
      BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey("BPFLoader1111111111111111111111111111111111");
      PACKET_DATA_SIZE = 1280 - 40 - 8;
      VERSION_PREFIX_MASK = 127;
      SIGNATURE_LENGTH_IN_BYTES = 64;
      TransactionExpiredBlockheightExceededError = class extends Error {
        constructor(signature2) {
          super(`Signature ${signature2} has expired: block height exceeded.`);
          this.signature = void 0;
          this.signature = signature2;
        }
      };
      Object.defineProperty(TransactionExpiredBlockheightExceededError.prototype, "name", {
        value: "TransactionExpiredBlockheightExceededError"
      });
      TransactionExpiredTimeoutError = class extends Error {
        constructor(signature2, timeoutSeconds) {
          super(`Transaction was not confirmed in ${timeoutSeconds.toFixed(2)} seconds. It is unknown if it succeeded or failed. Check signature ${signature2} using the Solana Explorer or CLI tools.`);
          this.signature = void 0;
          this.signature = signature2;
        }
      };
      Object.defineProperty(TransactionExpiredTimeoutError.prototype, "name", {
        value: "TransactionExpiredTimeoutError"
      });
      TransactionExpiredNonceInvalidError = class extends Error {
        constructor(signature2) {
          super(`Signature ${signature2} has expired: the nonce is no longer valid.`);
          this.signature = void 0;
          this.signature = signature2;
        }
      };
      Object.defineProperty(TransactionExpiredNonceInvalidError.prototype, "name", {
        value: "TransactionExpiredNonceInvalidError"
      });
      MessageAccountKeys = class {
        constructor(staticAccountKeys, accountKeysFromLookups) {
          this.staticAccountKeys = void 0;
          this.accountKeysFromLookups = void 0;
          this.staticAccountKeys = staticAccountKeys;
          this.accountKeysFromLookups = accountKeysFromLookups;
        }
        keySegments() {
          const keySegments = [this.staticAccountKeys];
          if (this.accountKeysFromLookups) {
            keySegments.push(this.accountKeysFromLookups.writable);
            keySegments.push(this.accountKeysFromLookups.readonly);
          }
          return keySegments;
        }
        get(index) {
          for (const keySegment of this.keySegments()) {
            if (index < keySegment.length) {
              return keySegment[index];
            } else {
              index -= keySegment.length;
            }
          }
          return;
        }
        get length() {
          return this.keySegments().flat().length;
        }
        compileInstructions(instructions) {
          const U8_MAX = 255;
          if (this.length > U8_MAX + 1) {
            throw new Error("Account index overflow encountered during compilation");
          }
          const keyIndexMap = /* @__PURE__ */ new Map();
          this.keySegments().flat().forEach((key, index) => {
            keyIndexMap.set(key.toBase58(), index);
          });
          const findKeyIndex = (key) => {
            const keyIndex = keyIndexMap.get(key.toBase58());
            if (keyIndex === void 0) throw new Error("Encountered an unknown instruction account key during compilation");
            return keyIndex;
          };
          return instructions.map((instruction) => {
            return {
              programIdIndex: findKeyIndex(instruction.programId),
              accountKeyIndexes: instruction.keys.map((meta) => findKeyIndex(meta.pubkey)),
              data: instruction.data
            };
          });
        }
      };
      publicKey = (property = "publicKey") => {
        return BufferLayout.blob(32, property);
      };
      signature = (property = "signature") => {
        return BufferLayout.blob(64, property);
      };
      rustString = (property = "string") => {
        const rsl = BufferLayout.struct([BufferLayout.u32("length"), BufferLayout.u32("lengthPadding"), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), "chars")], property);
        const _decode2 = rsl.decode.bind(rsl);
        const _encode2 = rsl.encode.bind(rsl);
        const rslShim = rsl;
        rslShim.decode = (b2, offset2) => {
          const data = _decode2(b2, offset2);
          return data["chars"].toString();
        };
        rslShim.encode = (str, b2, offset2) => {
          const data = {
            chars: import_buffer3.Buffer.from(str, "utf8")
          };
          return _encode2(data, b2, offset2);
        };
        rslShim.alloc = (str) => {
          return BufferLayout.u32().span + BufferLayout.u32().span + import_buffer3.Buffer.from(str, "utf8").length;
        };
        return rslShim;
      };
      authorized = (property = "authorized") => {
        return BufferLayout.struct([publicKey("staker"), publicKey("withdrawer")], property);
      };
      lockup = (property = "lockup") => {
        return BufferLayout.struct([BufferLayout.ns64("unixTimestamp"), BufferLayout.ns64("epoch"), publicKey("custodian")], property);
      };
      voteInit = (property = "voteInit") => {
        return BufferLayout.struct([publicKey("nodePubkey"), publicKey("authorizedVoter"), publicKey("authorizedWithdrawer"), BufferLayout.u8("commission")], property);
      };
      voteAuthorizeWithSeedArgs = (property = "voteAuthorizeWithSeedArgs") => {
        return BufferLayout.struct([BufferLayout.u32("voteAuthorizationType"), publicKey("currentAuthorityDerivedKeyOwnerPubkey"), rustString("currentAuthorityDerivedKeySeed"), publicKey("newAuthorized")], property);
      };
      CompiledKeys = class _CompiledKeys {
        constructor(payer, keyMetaMap) {
          this.payer = void 0;
          this.keyMetaMap = void 0;
          this.payer = payer;
          this.keyMetaMap = keyMetaMap;
        }
        static compile(instructions, payer) {
          const keyMetaMap = /* @__PURE__ */ new Map();
          const getOrInsertDefault = (pubkey) => {
            const address = pubkey.toBase58();
            let keyMeta = keyMetaMap.get(address);
            if (keyMeta === void 0) {
              keyMeta = {
                isSigner: false,
                isWritable: false,
                isInvoked: false
              };
              keyMetaMap.set(address, keyMeta);
            }
            return keyMeta;
          };
          const payerKeyMeta = getOrInsertDefault(payer);
          payerKeyMeta.isSigner = true;
          payerKeyMeta.isWritable = true;
          for (const ix of instructions) {
            getOrInsertDefault(ix.programId).isInvoked = true;
            for (const accountMeta of ix.keys) {
              const keyMeta = getOrInsertDefault(accountMeta.pubkey);
              keyMeta.isSigner || (keyMeta.isSigner = accountMeta.isSigner);
              keyMeta.isWritable || (keyMeta.isWritable = accountMeta.isWritable);
            }
          }
          return new _CompiledKeys(payer, keyMetaMap);
        }
        getMessageComponents() {
          const mapEntries = [...this.keyMetaMap.entries()];
          assert3(mapEntries.length <= 256, "Max static account keys length exceeded");
          const writableSigners = mapEntries.filter(([, meta]) => meta.isSigner && meta.isWritable);
          const readonlySigners = mapEntries.filter(([, meta]) => meta.isSigner && !meta.isWritable);
          const writableNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && meta.isWritable);
          const readonlyNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && !meta.isWritable);
          const header = {
            numRequiredSignatures: writableSigners.length + readonlySigners.length,
            numReadonlySignedAccounts: readonlySigners.length,
            numReadonlyUnsignedAccounts: readonlyNonSigners.length
          };
          {
            assert3(writableSigners.length > 0, "Expected at least one writable signer key");
            const [payerAddress] = writableSigners[0];
            assert3(payerAddress === this.payer.toBase58(), "Expected first writable signer key to be the fee payer");
          }
          const staticAccountKeys = [...writableSigners.map(([address]) => new PublicKey(address)), ...readonlySigners.map(([address]) => new PublicKey(address)), ...writableNonSigners.map(([address]) => new PublicKey(address)), ...readonlyNonSigners.map(([address]) => new PublicKey(address))];
          return [header, staticAccountKeys];
        }
        extractTableLookup(lookupTable) {
          const [writableIndexes, drainedWritableKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, (keyMeta) => !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable);
          const [readonlyIndexes, drainedReadonlyKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, (keyMeta) => !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable);
          if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {
            return;
          }
          return [{
            accountKey: lookupTable.key,
            writableIndexes,
            readonlyIndexes
          }, {
            writable: drainedWritableKeys,
            readonly: drainedReadonlyKeys
          }];
        }
        /** @internal */
        drainKeysFoundInLookupTable(lookupTableEntries, keyMetaFilter) {
          const lookupTableIndexes = new Array();
          const drainedKeys = new Array();
          for (const [address, keyMeta] of this.keyMetaMap.entries()) {
            if (keyMetaFilter(keyMeta)) {
              const key = new PublicKey(address);
              const lookupTableIndex = lookupTableEntries.findIndex((entry) => entry.equals(key));
              if (lookupTableIndex >= 0) {
                assert3(lookupTableIndex < 256, "Max lookup table index exceeded");
                lookupTableIndexes.push(lookupTableIndex);
                drainedKeys.push(key);
                this.keyMetaMap.delete(address);
              }
            }
          }
          return [lookupTableIndexes, drainedKeys];
        }
      };
      END_OF_BUFFER_ERROR_MESSAGE = "Reached end of buffer unexpectedly";
      Message = class _Message {
        constructor(args) {
          this.header = void 0;
          this.accountKeys = void 0;
          this.recentBlockhash = void 0;
          this.instructions = void 0;
          this.indexToProgramIds = /* @__PURE__ */ new Map();
          this.header = args.header;
          this.accountKeys = args.accountKeys.map((account) => new PublicKey(account));
          this.recentBlockhash = args.recentBlockhash;
          this.instructions = args.instructions;
          this.instructions.forEach((ix) => this.indexToProgramIds.set(ix.programIdIndex, this.accountKeys[ix.programIdIndex]));
        }
        get version() {
          return "legacy";
        }
        get staticAccountKeys() {
          return this.accountKeys;
        }
        get compiledInstructions() {
          return this.instructions.map((ix) => ({
            programIdIndex: ix.programIdIndex,
            accountKeyIndexes: ix.accounts,
            data: import_bs58.default.decode(ix.data)
          }));
        }
        get addressTableLookups() {
          return [];
        }
        getAccountKeys() {
          return new MessageAccountKeys(this.staticAccountKeys);
        }
        static compile(args) {
          const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);
          const [header, staticAccountKeys] = compiledKeys.getMessageComponents();
          const accountKeys = new MessageAccountKeys(staticAccountKeys);
          const instructions = accountKeys.compileInstructions(args.instructions).map((ix) => ({
            programIdIndex: ix.programIdIndex,
            accounts: ix.accountKeyIndexes,
            data: import_bs58.default.encode(ix.data)
          }));
          return new _Message({
            header,
            accountKeys: staticAccountKeys,
            recentBlockhash: args.recentBlockhash,
            instructions
          });
        }
        isAccountSigner(index) {
          return index < this.header.numRequiredSignatures;
        }
        isAccountWritable(index) {
          const numSignedAccounts = this.header.numRequiredSignatures;
          if (index >= this.header.numRequiredSignatures) {
            const unsignedAccountIndex = index - numSignedAccounts;
            const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;
            const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;
            return unsignedAccountIndex < numWritableUnsignedAccounts;
          } else {
            const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;
            return index < numWritableSignedAccounts;
          }
        }
        isProgramId(index) {
          return this.indexToProgramIds.has(index);
        }
        programIds() {
          return [...this.indexToProgramIds.values()];
        }
        nonProgramIds() {
          return this.accountKeys.filter((_, index) => !this.isProgramId(index));
        }
        serialize() {
          const numKeys = this.accountKeys.length;
          let keyCount = [];
          encodeLength(keyCount, numKeys);
          const instructions = this.instructions.map((instruction) => {
            const {
              accounts,
              programIdIndex
            } = instruction;
            const data = Array.from(import_bs58.default.decode(instruction.data));
            let keyIndicesCount = [];
            encodeLength(keyIndicesCount, accounts.length);
            let dataCount = [];
            encodeLength(dataCount, data.length);
            return {
              programIdIndex,
              keyIndicesCount: import_buffer3.Buffer.from(keyIndicesCount),
              keyIndices: accounts,
              dataLength: import_buffer3.Buffer.from(dataCount),
              data
            };
          });
          let instructionCount = [];
          encodeLength(instructionCount, instructions.length);
          let instructionBuffer = import_buffer3.Buffer.alloc(PACKET_DATA_SIZE);
          import_buffer3.Buffer.from(instructionCount).copy(instructionBuffer);
          let instructionBufferLength = instructionCount.length;
          instructions.forEach((instruction) => {
            const instructionLayout = BufferLayout.struct([BufferLayout.u8("programIdIndex"), BufferLayout.blob(instruction.keyIndicesCount.length, "keyIndicesCount"), BufferLayout.seq(BufferLayout.u8("keyIndex"), instruction.keyIndices.length, "keyIndices"), BufferLayout.blob(instruction.dataLength.length, "dataLength"), BufferLayout.seq(BufferLayout.u8("userdatum"), instruction.data.length, "data")]);
            const length2 = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);
            instructionBufferLength += length2;
          });
          instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);
          const signDataLayout = BufferLayout.struct([BufferLayout.blob(1, "numRequiredSignatures"), BufferLayout.blob(1, "numReadonlySignedAccounts"), BufferLayout.blob(1, "numReadonlyUnsignedAccounts"), BufferLayout.blob(keyCount.length, "keyCount"), BufferLayout.seq(publicKey("key"), numKeys, "keys"), publicKey("recentBlockhash")]);
          const transaction = {
            numRequiredSignatures: import_buffer3.Buffer.from([this.header.numRequiredSignatures]),
            numReadonlySignedAccounts: import_buffer3.Buffer.from([this.header.numReadonlySignedAccounts]),
            numReadonlyUnsignedAccounts: import_buffer3.Buffer.from([this.header.numReadonlyUnsignedAccounts]),
            keyCount: import_buffer3.Buffer.from(keyCount),
            keys: this.accountKeys.map((key) => toBuffer(key.toBytes())),
            recentBlockhash: import_bs58.default.decode(this.recentBlockhash)
          };
          let signData = import_buffer3.Buffer.alloc(2048);
          const length = signDataLayout.encode(transaction, signData);
          instructionBuffer.copy(signData, length);
          return signData.slice(0, length + instructionBuffer.length);
        }
        /**
         * Decode a compiled message into a Message object.
         */
        static from(buffer) {
          let byteArray = [...buffer];
          const numRequiredSignatures = guardedShift(byteArray);
          if (numRequiredSignatures !== (numRequiredSignatures & VERSION_PREFIX_MASK)) {
            throw new Error("Versioned messages must be deserialized with VersionedMessage.deserialize()");
          }
          const numReadonlySignedAccounts = guardedShift(byteArray);
          const numReadonlyUnsignedAccounts = guardedShift(byteArray);
          const accountCount = decodeLength(byteArray);
          let accountKeys = [];
          for (let i = 0; i < accountCount; i++) {
            const account = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);
            accountKeys.push(new PublicKey(import_buffer3.Buffer.from(account)));
          }
          const recentBlockhash = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);
          const instructionCount = decodeLength(byteArray);
          let instructions = [];
          for (let i = 0; i < instructionCount; i++) {
            const programIdIndex = guardedShift(byteArray);
            const accountCount2 = decodeLength(byteArray);
            const accounts = guardedSplice(byteArray, 0, accountCount2);
            const dataLength2 = decodeLength(byteArray);
            const dataSlice2 = guardedSplice(byteArray, 0, dataLength2);
            const data = import_bs58.default.encode(import_buffer3.Buffer.from(dataSlice2));
            instructions.push({
              programIdIndex,
              accounts,
              data
            });
          }
          const messageArgs = {
            header: {
              numRequiredSignatures,
              numReadonlySignedAccounts,
              numReadonlyUnsignedAccounts
            },
            recentBlockhash: import_bs58.default.encode(import_buffer3.Buffer.from(recentBlockhash)),
            accountKeys,
            instructions
          };
          return new _Message(messageArgs);
        }
      };
      MessageV0 = class _MessageV0 {
        constructor(args) {
          this.header = void 0;
          this.staticAccountKeys = void 0;
          this.recentBlockhash = void 0;
          this.compiledInstructions = void 0;
          this.addressTableLookups = void 0;
          this.header = args.header;
          this.staticAccountKeys = args.staticAccountKeys;
          this.recentBlockhash = args.recentBlockhash;
          this.compiledInstructions = args.compiledInstructions;
          this.addressTableLookups = args.addressTableLookups;
        }
        get version() {
          return 0;
        }
        get numAccountKeysFromLookups() {
          let count = 0;
          for (const lookup of this.addressTableLookups) {
            count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;
          }
          return count;
        }
        getAccountKeys(args) {
          let accountKeysFromLookups;
          if (args && "accountKeysFromLookups" in args && args.accountKeysFromLookups) {
            if (this.numAccountKeysFromLookups != args.accountKeysFromLookups.writable.length + args.accountKeysFromLookups.readonly.length) {
              throw new Error("Failed to get account keys because of a mismatch in the number of account keys from lookups");
            }
            accountKeysFromLookups = args.accountKeysFromLookups;
          } else if (args && "addressLookupTableAccounts" in args && args.addressLookupTableAccounts) {
            accountKeysFromLookups = this.resolveAddressTableLookups(args.addressLookupTableAccounts);
          } else if (this.addressTableLookups.length > 0) {
            throw new Error("Failed to get account keys because address table lookups were not resolved");
          }
          return new MessageAccountKeys(this.staticAccountKeys, accountKeysFromLookups);
        }
        isAccountSigner(index) {
          return index < this.header.numRequiredSignatures;
        }
        isAccountWritable(index) {
          const numSignedAccounts = this.header.numRequiredSignatures;
          const numStaticAccountKeys = this.staticAccountKeys.length;
          if (index >= numStaticAccountKeys) {
            const lookupAccountKeysIndex = index - numStaticAccountKeys;
            const numWritableLookupAccountKeys = this.addressTableLookups.reduce((count, lookup) => count + lookup.writableIndexes.length, 0);
            return lookupAccountKeysIndex < numWritableLookupAccountKeys;
          } else if (index >= this.header.numRequiredSignatures) {
            const unsignedAccountIndex = index - numSignedAccounts;
            const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;
            const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;
            return unsignedAccountIndex < numWritableUnsignedAccounts;
          } else {
            const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;
            return index < numWritableSignedAccounts;
          }
        }
        resolveAddressTableLookups(addressLookupTableAccounts) {
          const accountKeysFromLookups = {
            writable: [],
            readonly: []
          };
          for (const tableLookup of this.addressTableLookups) {
            const tableAccount = addressLookupTableAccounts.find((account) => account.key.equals(tableLookup.accountKey));
            if (!tableAccount) {
              throw new Error(`Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`);
            }
            for (const index of tableLookup.writableIndexes) {
              if (index < tableAccount.state.addresses.length) {
                accountKeysFromLookups.writable.push(tableAccount.state.addresses[index]);
              } else {
                throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);
              }
            }
            for (const index of tableLookup.readonlyIndexes) {
              if (index < tableAccount.state.addresses.length) {
                accountKeysFromLookups.readonly.push(tableAccount.state.addresses[index]);
              } else {
                throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);
              }
            }
          }
          return accountKeysFromLookups;
        }
        static compile(args) {
          const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);
          const addressTableLookups = new Array();
          const accountKeysFromLookups = {
            writable: new Array(),
            readonly: new Array()
          };
          const lookupTableAccounts = args.addressLookupTableAccounts || [];
          for (const lookupTable of lookupTableAccounts) {
            const extractResult = compiledKeys.extractTableLookup(lookupTable);
            if (extractResult !== void 0) {
              const [addressTableLookup, {
                writable,
                readonly
              }] = extractResult;
              addressTableLookups.push(addressTableLookup);
              accountKeysFromLookups.writable.push(...writable);
              accountKeysFromLookups.readonly.push(...readonly);
            }
          }
          const [header, staticAccountKeys] = compiledKeys.getMessageComponents();
          const accountKeys = new MessageAccountKeys(staticAccountKeys, accountKeysFromLookups);
          const compiledInstructions = accountKeys.compileInstructions(args.instructions);
          return new _MessageV0({
            header,
            staticAccountKeys,
            recentBlockhash: args.recentBlockhash,
            compiledInstructions,
            addressTableLookups
          });
        }
        serialize() {
          const encodedStaticAccountKeysLength = Array();
          encodeLength(encodedStaticAccountKeysLength, this.staticAccountKeys.length);
          const serializedInstructions = this.serializeInstructions();
          const encodedInstructionsLength = Array();
          encodeLength(encodedInstructionsLength, this.compiledInstructions.length);
          const serializedAddressTableLookups = this.serializeAddressTableLookups();
          const encodedAddressTableLookupsLength = Array();
          encodeLength(encodedAddressTableLookupsLength, this.addressTableLookups.length);
          const messageLayout = BufferLayout.struct([BufferLayout.u8("prefix"), BufferLayout.struct([BufferLayout.u8("numRequiredSignatures"), BufferLayout.u8("numReadonlySignedAccounts"), BufferLayout.u8("numReadonlyUnsignedAccounts")], "header"), BufferLayout.blob(encodedStaticAccountKeysLength.length, "staticAccountKeysLength"), BufferLayout.seq(publicKey(), this.staticAccountKeys.length, "staticAccountKeys"), publicKey("recentBlockhash"), BufferLayout.blob(encodedInstructionsLength.length, "instructionsLength"), BufferLayout.blob(serializedInstructions.length, "serializedInstructions"), BufferLayout.blob(encodedAddressTableLookupsLength.length, "addressTableLookupsLength"), BufferLayout.blob(serializedAddressTableLookups.length, "serializedAddressTableLookups")]);
          const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);
          const MESSAGE_VERSION_0_PREFIX = 1 << 7;
          const serializedMessageLength = messageLayout.encode({
            prefix: MESSAGE_VERSION_0_PREFIX,
            header: this.header,
            staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),
            staticAccountKeys: this.staticAccountKeys.map((key) => key.toBytes()),
            recentBlockhash: import_bs58.default.decode(this.recentBlockhash),
            instructionsLength: new Uint8Array(encodedInstructionsLength),
            serializedInstructions,
            addressTableLookupsLength: new Uint8Array(encodedAddressTableLookupsLength),
            serializedAddressTableLookups
          }, serializedMessage);
          return serializedMessage.slice(0, serializedMessageLength);
        }
        serializeInstructions() {
          let serializedLength = 0;
          const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);
          for (const instruction of this.compiledInstructions) {
            const encodedAccountKeyIndexesLength = Array();
            encodeLength(encodedAccountKeyIndexesLength, instruction.accountKeyIndexes.length);
            const encodedDataLength = Array();
            encodeLength(encodedDataLength, instruction.data.length);
            const instructionLayout = BufferLayout.struct([BufferLayout.u8("programIdIndex"), BufferLayout.blob(encodedAccountKeyIndexesLength.length, "encodedAccountKeyIndexesLength"), BufferLayout.seq(BufferLayout.u8(), instruction.accountKeyIndexes.length, "accountKeyIndexes"), BufferLayout.blob(encodedDataLength.length, "encodedDataLength"), BufferLayout.blob(instruction.data.length, "data")]);
            serializedLength += instructionLayout.encode({
              programIdIndex: instruction.programIdIndex,
              encodedAccountKeyIndexesLength: new Uint8Array(encodedAccountKeyIndexesLength),
              accountKeyIndexes: instruction.accountKeyIndexes,
              encodedDataLength: new Uint8Array(encodedDataLength),
              data: instruction.data
            }, serializedInstructions, serializedLength);
          }
          return serializedInstructions.slice(0, serializedLength);
        }
        serializeAddressTableLookups() {
          let serializedLength = 0;
          const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);
          for (const lookup of this.addressTableLookups) {
            const encodedWritableIndexesLength = Array();
            encodeLength(encodedWritableIndexesLength, lookup.writableIndexes.length);
            const encodedReadonlyIndexesLength = Array();
            encodeLength(encodedReadonlyIndexesLength, lookup.readonlyIndexes.length);
            const addressTableLookupLayout = BufferLayout.struct([publicKey("accountKey"), BufferLayout.blob(encodedWritableIndexesLength.length, "encodedWritableIndexesLength"), BufferLayout.seq(BufferLayout.u8(), lookup.writableIndexes.length, "writableIndexes"), BufferLayout.blob(encodedReadonlyIndexesLength.length, "encodedReadonlyIndexesLength"), BufferLayout.seq(BufferLayout.u8(), lookup.readonlyIndexes.length, "readonlyIndexes")]);
            serializedLength += addressTableLookupLayout.encode({
              accountKey: lookup.accountKey.toBytes(),
              encodedWritableIndexesLength: new Uint8Array(encodedWritableIndexesLength),
              writableIndexes: lookup.writableIndexes,
              encodedReadonlyIndexesLength: new Uint8Array(encodedReadonlyIndexesLength),
              readonlyIndexes: lookup.readonlyIndexes
            }, serializedAddressTableLookups, serializedLength);
          }
          return serializedAddressTableLookups.slice(0, serializedLength);
        }
        static deserialize(serializedMessage) {
          let byteArray = [...serializedMessage];
          const prefix = guardedShift(byteArray);
          const maskedPrefix = prefix & VERSION_PREFIX_MASK;
          assert3(prefix !== maskedPrefix, `Expected versioned message but received legacy message`);
          const version3 = maskedPrefix;
          assert3(version3 === 0, `Expected versioned message with version 0 but found version ${version3}`);
          const header = {
            numRequiredSignatures: guardedShift(byteArray),
            numReadonlySignedAccounts: guardedShift(byteArray),
            numReadonlyUnsignedAccounts: guardedShift(byteArray)
          };
          const staticAccountKeys = [];
          const staticAccountKeysLength = decodeLength(byteArray);
          for (let i = 0; i < staticAccountKeysLength; i++) {
            staticAccountKeys.push(new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH)));
          }
          const recentBlockhash = import_bs58.default.encode(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));
          const instructionCount = decodeLength(byteArray);
          const compiledInstructions = [];
          for (let i = 0; i < instructionCount; i++) {
            const programIdIndex = guardedShift(byteArray);
            const accountKeyIndexesLength = decodeLength(byteArray);
            const accountKeyIndexes = guardedSplice(byteArray, 0, accountKeyIndexesLength);
            const dataLength2 = decodeLength(byteArray);
            const data = new Uint8Array(guardedSplice(byteArray, 0, dataLength2));
            compiledInstructions.push({
              programIdIndex,
              accountKeyIndexes,
              data
            });
          }
          const addressTableLookupsCount = decodeLength(byteArray);
          const addressTableLookups = [];
          for (let i = 0; i < addressTableLookupsCount; i++) {
            const accountKey = new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));
            const writableIndexesLength = decodeLength(byteArray);
            const writableIndexes = guardedSplice(byteArray, 0, writableIndexesLength);
            const readonlyIndexesLength = decodeLength(byteArray);
            const readonlyIndexes = guardedSplice(byteArray, 0, readonlyIndexesLength);
            addressTableLookups.push({
              accountKey,
              writableIndexes,
              readonlyIndexes
            });
          }
          return new _MessageV0({
            header,
            staticAccountKeys,
            recentBlockhash,
            compiledInstructions,
            addressTableLookups
          });
        }
      };
      VersionedMessage = {
        deserializeMessageVersion(serializedMessage) {
          const prefix = serializedMessage[0];
          const maskedPrefix = prefix & VERSION_PREFIX_MASK;
          if (maskedPrefix === prefix) {
            return "legacy";
          }
          return maskedPrefix;
        },
        deserialize: (serializedMessage) => {
          const version3 = VersionedMessage.deserializeMessageVersion(serializedMessage);
          if (version3 === "legacy") {
            return Message.from(serializedMessage);
          }
          if (version3 === 0) {
            return MessageV0.deserialize(serializedMessage);
          } else {
            throw new Error(`Transaction message version ${version3} deserialization is not supported`);
          }
        }
      };
      DEFAULT_SIGNATURE = import_buffer3.Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);
      TransactionInstruction = class {
        constructor(opts) {
          this.keys = void 0;
          this.programId = void 0;
          this.data = import_buffer3.Buffer.alloc(0);
          this.programId = opts.programId;
          this.keys = opts.keys;
          if (opts.data) {
            this.data = opts.data;
          }
        }
        /**
         * @internal
         */
        toJSON() {
          return {
            keys: this.keys.map(({
              pubkey,
              isSigner,
              isWritable
            }) => ({
              pubkey: pubkey.toJSON(),
              isSigner,
              isWritable
            })),
            programId: this.programId.toJSON(),
            data: [...this.data]
          };
        }
      };
      Transaction2 = class _Transaction2 {
        /**
         * The first (payer) Transaction signature
         *
         * @returns {Buffer | null} Buffer of payer's signature
         */
        get signature() {
          if (this.signatures.length > 0) {
            return this.signatures[0].signature;
          }
          return null;
        }
        /**
         * The transaction fee payer
         */
        // Construct a transaction with a blockhash and lastValidBlockHeight
        // Construct a transaction using a durable nonce
        /**
         * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.
         * Please supply a `TransactionBlockhashCtor` instead.
         */
        /**
         * Construct an empty Transaction
         */
        constructor(opts) {
          this.signatures = [];
          this.feePayer = void 0;
          this.instructions = [];
          this.recentBlockhash = void 0;
          this.lastValidBlockHeight = void 0;
          this.nonceInfo = void 0;
          this.minNonceContextSlot = void 0;
          this._message = void 0;
          this._json = void 0;
          if (!opts) {
            return;
          }
          if (opts.feePayer) {
            this.feePayer = opts.feePayer;
          }
          if (opts.signatures) {
            this.signatures = opts.signatures;
          }
          if (Object.prototype.hasOwnProperty.call(opts, "nonceInfo")) {
            const {
              minContextSlot,
              nonceInfo
            } = opts;
            this.minNonceContextSlot = minContextSlot;
            this.nonceInfo = nonceInfo;
          } else if (Object.prototype.hasOwnProperty.call(opts, "lastValidBlockHeight")) {
            const {
              blockhash,
              lastValidBlockHeight
            } = opts;
            this.recentBlockhash = blockhash;
            this.lastValidBlockHeight = lastValidBlockHeight;
          } else {
            const {
              recentBlockhash,
              nonceInfo
            } = opts;
            if (nonceInfo) {
              this.nonceInfo = nonceInfo;
            }
            this.recentBlockhash = recentBlockhash;
          }
        }
        /**
         * @internal
         */
        toJSON() {
          return {
            recentBlockhash: this.recentBlockhash || null,
            feePayer: this.feePayer ? this.feePayer.toJSON() : null,
            nonceInfo: this.nonceInfo ? {
              nonce: this.nonceInfo.nonce,
              nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()
            } : null,
            instructions: this.instructions.map((instruction) => instruction.toJSON()),
            signers: this.signatures.map(({
              publicKey: publicKey2
            }) => {
              return publicKey2.toJSON();
            })
          };
        }
        /**
         * Add one or more instructions to this Transaction
         *
         * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction
         */
        add(...items) {
          if (items.length === 0) {
            throw new Error("No instructions");
          }
          items.forEach((item) => {
            if ("instructions" in item) {
              this.instructions = this.instructions.concat(item.instructions);
            } else if ("data" in item && "programId" in item && "keys" in item) {
              this.instructions.push(item);
            } else {
              this.instructions.push(new TransactionInstruction(item));
            }
          });
          return this;
        }
        /**
         * Compile transaction data
         */
        compileMessage() {
          if (this._message && JSON.stringify(this.toJSON()) === JSON.stringify(this._json)) {
            return this._message;
          }
          let recentBlockhash;
          let instructions;
          if (this.nonceInfo) {
            recentBlockhash = this.nonceInfo.nonce;
            if (this.instructions[0] != this.nonceInfo.nonceInstruction) {
              instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];
            } else {
              instructions = this.instructions;
            }
          } else {
            recentBlockhash = this.recentBlockhash;
            instructions = this.instructions;
          }
          if (!recentBlockhash) {
            throw new Error("Transaction recentBlockhash required");
          }
          if (instructions.length < 1) {
            console.warn("No instructions provided");
          }
          let feePayer;
          if (this.feePayer) {
            feePayer = this.feePayer;
          } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {
            feePayer = this.signatures[0].publicKey;
          } else {
            throw new Error("Transaction fee payer required");
          }
          for (let i = 0; i < instructions.length; i++) {
            if (instructions[i].programId === void 0) {
              throw new Error(`Transaction instruction index ${i} has undefined program id`);
            }
          }
          const programIds = [];
          const accountMetas = [];
          instructions.forEach((instruction) => {
            instruction.keys.forEach((accountMeta) => {
              accountMetas.push({
                ...accountMeta
              });
            });
            const programId = instruction.programId.toString();
            if (!programIds.includes(programId)) {
              programIds.push(programId);
            }
          });
          programIds.forEach((programId) => {
            accountMetas.push({
              pubkey: new PublicKey(programId),
              isSigner: false,
              isWritable: false
            });
          });
          const uniqueMetas = [];
          accountMetas.forEach((accountMeta) => {
            const pubkeyString = accountMeta.pubkey.toString();
            const uniqueIndex = uniqueMetas.findIndex((x) => {
              return x.pubkey.toString() === pubkeyString;
            });
            if (uniqueIndex > -1) {
              uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;
              uniqueMetas[uniqueIndex].isSigner = uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;
            } else {
              uniqueMetas.push(accountMeta);
            }
          });
          uniqueMetas.sort(function(x, y) {
            if (x.isSigner !== y.isSigner) {
              return x.isSigner ? -1 : 1;
            }
            if (x.isWritable !== y.isWritable) {
              return x.isWritable ? -1 : 1;
            }
            const options = {
              localeMatcher: "best fit",
              usage: "sort",
              sensitivity: "variant",
              ignorePunctuation: false,
              numeric: false,
              caseFirst: "lower"
            };
            return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58(), "en", options);
          });
          const feePayerIndex = uniqueMetas.findIndex((x) => {
            return x.pubkey.equals(feePayer);
          });
          if (feePayerIndex > -1) {
            const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);
            payerMeta.isSigner = true;
            payerMeta.isWritable = true;
            uniqueMetas.unshift(payerMeta);
          } else {
            uniqueMetas.unshift({
              pubkey: feePayer,
              isSigner: true,
              isWritable: true
            });
          }
          for (const signature2 of this.signatures) {
            const uniqueIndex = uniqueMetas.findIndex((x) => {
              return x.pubkey.equals(signature2.publicKey);
            });
            if (uniqueIndex > -1) {
              if (!uniqueMetas[uniqueIndex].isSigner) {
                uniqueMetas[uniqueIndex].isSigner = true;
                console.warn("Transaction references a signature that is unnecessary, only the fee payer and instruction signer accounts should sign a transaction. This behavior is deprecated and will throw an error in the next major version release.");
              }
            } else {
              throw new Error(`unknown signer: ${signature2.publicKey.toString()}`);
            }
          }
          let numRequiredSignatures = 0;
          let numReadonlySignedAccounts = 0;
          let numReadonlyUnsignedAccounts = 0;
          const signedKeys = [];
          const unsignedKeys = [];
          uniqueMetas.forEach(({
            pubkey,
            isSigner,
            isWritable
          }) => {
            if (isSigner) {
              signedKeys.push(pubkey.toString());
              numRequiredSignatures += 1;
              if (!isWritable) {
                numReadonlySignedAccounts += 1;
              }
            } else {
              unsignedKeys.push(pubkey.toString());
              if (!isWritable) {
                numReadonlyUnsignedAccounts += 1;
              }
            }
          });
          const accountKeys = signedKeys.concat(unsignedKeys);
          const compiledInstructions = instructions.map((instruction) => {
            const {
              data,
              programId
            } = instruction;
            return {
              programIdIndex: accountKeys.indexOf(programId.toString()),
              accounts: instruction.keys.map((meta) => accountKeys.indexOf(meta.pubkey.toString())),
              data: import_bs58.default.encode(data)
            };
          });
          compiledInstructions.forEach((instruction) => {
            assert3(instruction.programIdIndex >= 0);
            instruction.accounts.forEach((keyIndex) => assert3(keyIndex >= 0));
          });
          return new Message({
            header: {
              numRequiredSignatures,
              numReadonlySignedAccounts,
              numReadonlyUnsignedAccounts
            },
            accountKeys,
            recentBlockhash,
            instructions: compiledInstructions
          });
        }
        /**
         * @internal
         */
        _compile() {
          const message = this.compileMessage();
          const signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);
          if (this.signatures.length === signedKeys.length) {
            const valid = this.signatures.every((pair, index) => {
              return signedKeys[index].equals(pair.publicKey);
            });
            if (valid) return message;
          }
          this.signatures = signedKeys.map((publicKey2) => ({
            signature: null,
            publicKey: publicKey2
          }));
          return message;
        }
        /**
         * Get a buffer of the Transaction data that need to be covered by signatures
         */
        serializeMessage() {
          return this._compile().serialize();
        }
        /**
         * Get the estimated fee associated with a transaction
         *
         * @param {Connection} connection Connection to RPC Endpoint.
         *
         * @returns {Promise<number | null>} The estimated fee for the transaction
         */
        async getEstimatedFee(connection) {
          return (await connection.getFeeForMessage(this.compileMessage())).value;
        }
        /**
         * Specify the public keys which will be used to sign the Transaction.
         * The first signer will be used as the transaction fee payer account.
         *
         * Signatures can be added with either `partialSign` or `addSignature`
         *
         * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be
         * specified and it can be set in the Transaction constructor or with the
         * `feePayer` property.
         */
        setSigners(...signers) {
          if (signers.length === 0) {
            throw new Error("No signers");
          }
          const seen = /* @__PURE__ */ new Set();
          this.signatures = signers.filter((publicKey2) => {
            const key = publicKey2.toString();
            if (seen.has(key)) {
              return false;
            } else {
              seen.add(key);
              return true;
            }
          }).map((publicKey2) => ({
            signature: null,
            publicKey: publicKey2
          }));
        }
        /**
         * Sign the Transaction with the specified signers. Multiple signatures may
         * be applied to a Transaction. The first signature is considered "primary"
         * and is used identify and confirm transactions.
         *
         * If the Transaction `feePayer` is not set, the first signer will be used
         * as the transaction fee payer account.
         *
         * Transaction fields should not be modified after the first call to `sign`,
         * as doing so may invalidate the signature and cause the Transaction to be
         * rejected.
         *
         * The Transaction must be assigned a valid `recentBlockhash` before invoking this method
         *
         * @param {Array<Signer>} signers Array of signers that will sign the transaction
         */
        sign(...signers) {
          if (signers.length === 0) {
            throw new Error("No signers");
          }
          const seen = /* @__PURE__ */ new Set();
          const uniqueSigners = [];
          for (const signer of signers) {
            const key = signer.publicKey.toString();
            if (seen.has(key)) {
              continue;
            } else {
              seen.add(key);
              uniqueSigners.push(signer);
            }
          }
          this.signatures = uniqueSigners.map((signer) => ({
            signature: null,
            publicKey: signer.publicKey
          }));
          const message = this._compile();
          this._partialSign(message, ...uniqueSigners);
        }
        /**
         * Partially sign a transaction with the specified accounts. All accounts must
         * correspond to either the fee payer or a signer account in the transaction
         * instructions.
         *
         * All the caveats from the `sign` method apply to `partialSign`
         *
         * @param {Array<Signer>} signers Array of signers that will sign the transaction
         */
        partialSign(...signers) {
          if (signers.length === 0) {
            throw new Error("No signers");
          }
          const seen = /* @__PURE__ */ new Set();
          const uniqueSigners = [];
          for (const signer of signers) {
            const key = signer.publicKey.toString();
            if (seen.has(key)) {
              continue;
            } else {
              seen.add(key);
              uniqueSigners.push(signer);
            }
          }
          const message = this._compile();
          this._partialSign(message, ...uniqueSigners);
        }
        /**
         * @internal
         */
        _partialSign(message, ...signers) {
          const signData = message.serialize();
          signers.forEach((signer) => {
            const signature2 = sign(signData, signer.secretKey);
            this._addSignature(signer.publicKey, toBuffer(signature2));
          });
        }
        /**
         * Add an externally created signature to a transaction. The public key
         * must correspond to either the fee payer or a signer account in the transaction
         * instructions.
         *
         * @param {PublicKey} pubkey Public key that will be added to the transaction.
         * @param {Buffer} signature An externally created signature to add to the transaction.
         */
        addSignature(pubkey, signature2) {
          this._compile();
          this._addSignature(pubkey, signature2);
        }
        /**
         * @internal
         */
        _addSignature(pubkey, signature2) {
          assert3(signature2.length === 64);
          const index = this.signatures.findIndex((sigpair) => pubkey.equals(sigpair.publicKey));
          if (index < 0) {
            throw new Error(`unknown signer: ${pubkey.toString()}`);
          }
          this.signatures[index].signature = import_buffer3.Buffer.from(signature2);
        }
        /**
         * Verify signatures of a Transaction
         * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.
         * If no boolean is provided, we expect a fully signed Transaction by default.
         *
         * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction
         */
        verifySignatures(requireAllSignatures = true) {
          const signatureErrors = this._getMessageSignednessErrors(this.serializeMessage(), requireAllSignatures);
          return !signatureErrors;
        }
        /**
         * @internal
         */
        _getMessageSignednessErrors(message, requireAllSignatures) {
          const errors = {};
          for (const {
            signature: signature2,
            publicKey: publicKey2
          } of this.signatures) {
            if (signature2 === null) {
              if (requireAllSignatures) {
                (errors.missing || (errors.missing = [])).push(publicKey2);
              }
            } else {
              if (!verify(signature2, message, publicKey2.toBytes())) {
                (errors.invalid || (errors.invalid = [])).push(publicKey2);
              }
            }
          }
          return errors.invalid || errors.missing ? errors : void 0;
        }
        /**
         * Serialize the Transaction in the wire format.
         *
         * @param {Buffer} [config] Config of transaction.
         *
         * @returns {Buffer} Signature of transaction in wire format.
         */
        serialize(config) {
          const {
            requireAllSignatures,
            verifySignatures
          } = Object.assign({
            requireAllSignatures: true,
            verifySignatures: true
          }, config);
          const signData = this.serializeMessage();
          if (verifySignatures) {
            const sigErrors = this._getMessageSignednessErrors(signData, requireAllSignatures);
            if (sigErrors) {
              let errorMessage = "Signature verification failed.";
              if (sigErrors.invalid) {
                errorMessage += `
Invalid signature for public key${sigErrors.invalid.length === 1 ? "" : "(s)"} [\`${sigErrors.invalid.map((p) => p.toBase58()).join("`, `")}\`].`;
              }
              if (sigErrors.missing) {
                errorMessage += `
Missing signature for public key${sigErrors.missing.length === 1 ? "" : "(s)"} [\`${sigErrors.missing.map((p) => p.toBase58()).join("`, `")}\`].`;
              }
              throw new Error(errorMessage);
            }
          }
          return this._serialize(signData);
        }
        /**
         * @internal
         */
        _serialize(signData) {
          const {
            signatures
          } = this;
          const signatureCount = [];
          encodeLength(signatureCount, signatures.length);
          const transactionLength = signatureCount.length + signatures.length * 64 + signData.length;
          const wireTransaction = import_buffer3.Buffer.alloc(transactionLength);
          assert3(signatures.length < 256);
          import_buffer3.Buffer.from(signatureCount).copy(wireTransaction, 0);
          signatures.forEach(({
            signature: signature2
          }, index) => {
            if (signature2 !== null) {
              assert3(signature2.length === 64, `signature has invalid length`);
              import_buffer3.Buffer.from(signature2).copy(wireTransaction, signatureCount.length + index * 64);
            }
          });
          signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);
          assert3(wireTransaction.length <= PACKET_DATA_SIZE, `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`);
          return wireTransaction;
        }
        /**
         * Deprecated method
         * @internal
         */
        get keys() {
          assert3(this.instructions.length === 1);
          return this.instructions[0].keys.map((keyObj) => keyObj.pubkey);
        }
        /**
         * Deprecated method
         * @internal
         */
        get programId() {
          assert3(this.instructions.length === 1);
          return this.instructions[0].programId;
        }
        /**
         * Deprecated method
         * @internal
         */
        get data() {
          assert3(this.instructions.length === 1);
          return this.instructions[0].data;
        }
        /**
         * Parse a wire transaction into a Transaction object.
         *
         * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction
         *
         * @returns {Transaction} Transaction associated with the signature
         */
        static from(buffer) {
          let byteArray = [...buffer];
          const signatureCount = decodeLength(byteArray);
          let signatures = [];
          for (let i = 0; i < signatureCount; i++) {
            const signature2 = guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES);
            signatures.push(import_bs58.default.encode(import_buffer3.Buffer.from(signature2)));
          }
          return _Transaction2.populate(Message.from(byteArray), signatures);
        }
        /**
         * Populate Transaction object from message and signatures
         *
         * @param {Message} message Message of transaction
         * @param {Array<string>} signatures List of signatures to assign to the transaction
         *
         * @returns {Transaction} The populated Transaction
         */
        static populate(message, signatures = []) {
          const transaction = new _Transaction2();
          transaction.recentBlockhash = message.recentBlockhash;
          if (message.header.numRequiredSignatures > 0) {
            transaction.feePayer = message.accountKeys[0];
          }
          signatures.forEach((signature2, index) => {
            const sigPubkeyPair = {
              signature: signature2 == import_bs58.default.encode(DEFAULT_SIGNATURE) ? null : import_bs58.default.decode(signature2),
              publicKey: message.accountKeys[index]
            };
            transaction.signatures.push(sigPubkeyPair);
          });
          message.instructions.forEach((instruction) => {
            const keys = instruction.accounts.map((account) => {
              const pubkey = message.accountKeys[account];
              return {
                pubkey,
                isSigner: transaction.signatures.some((keyObj) => keyObj.publicKey.toString() === pubkey.toString()) || message.isAccountSigner(account),
                isWritable: message.isAccountWritable(account)
              };
            });
            transaction.instructions.push(new TransactionInstruction({
              keys,
              programId: message.accountKeys[instruction.programIdIndex],
              data: import_bs58.default.decode(instruction.data)
            }));
          });
          transaction._message = message;
          transaction._json = transaction.toJSON();
          return transaction;
        }
      };
      TransactionMessage = class _TransactionMessage {
        constructor(args) {
          this.payerKey = void 0;
          this.instructions = void 0;
          this.recentBlockhash = void 0;
          this.payerKey = args.payerKey;
          this.instructions = args.instructions;
          this.recentBlockhash = args.recentBlockhash;
        }
        static decompile(message, args) {
          const {
            header,
            compiledInstructions,
            recentBlockhash
          } = message;
          const {
            numRequiredSignatures,
            numReadonlySignedAccounts,
            numReadonlyUnsignedAccounts
          } = header;
          const numWritableSignedAccounts = numRequiredSignatures - numReadonlySignedAccounts;
          assert3(numWritableSignedAccounts > 0, "Message header is invalid");
          const numWritableUnsignedAccounts = message.staticAccountKeys.length - numRequiredSignatures - numReadonlyUnsignedAccounts;
          assert3(numWritableUnsignedAccounts >= 0, "Message header is invalid");
          const accountKeys = message.getAccountKeys(args);
          const payerKey = accountKeys.get(0);
          if (payerKey === void 0) {
            throw new Error("Failed to decompile message because no account keys were found");
          }
          const instructions = [];
          for (const compiledIx of compiledInstructions) {
            const keys = [];
            for (const keyIndex of compiledIx.accountKeyIndexes) {
              const pubkey = accountKeys.get(keyIndex);
              if (pubkey === void 0) {
                throw new Error(`Failed to find key for account key index ${keyIndex}`);
              }
              const isSigner = keyIndex < numRequiredSignatures;
              let isWritable;
              if (isSigner) {
                isWritable = keyIndex < numWritableSignedAccounts;
              } else if (keyIndex < accountKeys.staticAccountKeys.length) {
                isWritable = keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;
              } else {
                isWritable = keyIndex - accountKeys.staticAccountKeys.length < // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above
                accountKeys.accountKeysFromLookups.writable.length;
              }
              keys.push({
                pubkey,
                isSigner: keyIndex < header.numRequiredSignatures,
                isWritable
              });
            }
            const programId = accountKeys.get(compiledIx.programIdIndex);
            if (programId === void 0) {
              throw new Error(`Failed to find program id for program id index ${compiledIx.programIdIndex}`);
            }
            instructions.push(new TransactionInstruction({
              programId,
              data: toBuffer(compiledIx.data),
              keys
            }));
          }
          return new _TransactionMessage({
            payerKey,
            instructions,
            recentBlockhash
          });
        }
        compileToLegacyMessage() {
          return Message.compile({
            payerKey: this.payerKey,
            recentBlockhash: this.recentBlockhash,
            instructions: this.instructions
          });
        }
        compileToV0Message(addressLookupTableAccounts) {
          return MessageV0.compile({
            payerKey: this.payerKey,
            recentBlockhash: this.recentBlockhash,
            instructions: this.instructions,
            addressLookupTableAccounts
          });
        }
      };
      VersionedTransaction = class _VersionedTransaction {
        get version() {
          return this.message.version;
        }
        constructor(message, signatures) {
          this.signatures = void 0;
          this.message = void 0;
          if (signatures !== void 0) {
            assert3(signatures.length === message.header.numRequiredSignatures, "Expected signatures length to be equal to the number of required signatures");
            this.signatures = signatures;
          } else {
            const defaultSignatures = [];
            for (let i = 0; i < message.header.numRequiredSignatures; i++) {
              defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));
            }
            this.signatures = defaultSignatures;
          }
          this.message = message;
        }
        serialize() {
          const serializedMessage = this.message.serialize();
          const encodedSignaturesLength = Array();
          encodeLength(encodedSignaturesLength, this.signatures.length);
          const transactionLayout = BufferLayout.struct([BufferLayout.blob(encodedSignaturesLength.length, "encodedSignaturesLength"), BufferLayout.seq(signature(), this.signatures.length, "signatures"), BufferLayout.blob(serializedMessage.length, "serializedMessage")]);
          const serializedTransaction = new Uint8Array(2048);
          const serializedTransactionLength = transactionLayout.encode({
            encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),
            signatures: this.signatures,
            serializedMessage
          }, serializedTransaction);
          return serializedTransaction.slice(0, serializedTransactionLength);
        }
        static deserialize(serializedTransaction) {
          let byteArray = [...serializedTransaction];
          const signatures = [];
          const signaturesLength = decodeLength(byteArray);
          for (let i = 0; i < signaturesLength; i++) {
            signatures.push(new Uint8Array(guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES)));
          }
          const message = VersionedMessage.deserialize(new Uint8Array(byteArray));
          return new _VersionedTransaction(message, signatures);
        }
        sign(signers) {
          const messageData = this.message.serialize();
          const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);
          for (const signer of signers) {
            const signerIndex = signerPubkeys.findIndex((pubkey) => pubkey.equals(signer.publicKey));
            assert3(signerIndex >= 0, `Cannot sign with non signer key ${signer.publicKey.toBase58()}`);
            this.signatures[signerIndex] = sign(messageData, signer.secretKey);
          }
        }
        addSignature(publicKey2, signature2) {
          assert3(signature2.byteLength === 64, "Signature must be 64 bytes long");
          const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);
          const signerIndex = signerPubkeys.findIndex((pubkey) => pubkey.equals(publicKey2));
          assert3(signerIndex >= 0, `Can not add signature; \`${publicKey2.toBase58()}\` is not required to sign this transaction`);
          this.signatures[signerIndex] = signature2;
        }
      };
      NUM_TICKS_PER_SECOND = 160;
      DEFAULT_TICKS_PER_SLOT = 64;
      NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;
      MS_PER_SLOT = 1e3 / NUM_SLOTS_PER_SECOND;
      SYSVAR_CLOCK_PUBKEY = new PublicKey("SysvarC1ock11111111111111111111111111111111");
      SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey("SysvarEpochSchedu1e111111111111111111111111");
      SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey("Sysvar1nstructions1111111111111111111111111");
      SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey("SysvarRecentB1ockHashes11111111111111111111");
      SYSVAR_RENT_PUBKEY = new PublicKey("SysvarRent111111111111111111111111111111111");
      SYSVAR_REWARDS_PUBKEY = new PublicKey("SysvarRewards111111111111111111111111111111");
      SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey("SysvarS1otHashes111111111111111111111111111");
      SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey("SysvarS1otHistory11111111111111111111111111");
      SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey("SysvarStakeHistory1111111111111111111111111");
      SendTransactionError = class extends Error {
        constructor({
          action,
          signature: signature2,
          transactionMessage,
          logs
        }) {
          const maybeLogsOutput = logs ? `Logs: 
${JSON.stringify(logs.slice(-10), null, 2)}. ` : "";
          const guideText = "\nCatch the `SendTransactionError` and call `getLogs()` on it for full details.";
          let message;
          switch (action) {
            case "send":
              message = `Transaction ${signature2} resulted in an error. 
${transactionMessage}. ` + maybeLogsOutput + guideText;
              break;
            case "simulate":
              message = `Simulation failed. 
Message: ${transactionMessage}. 
` + maybeLogsOutput + guideText;
              break;
            default: {
              message = `Unknown action '${/* @__PURE__ */ ((a) => a)(action)}'`;
            }
          }
          super(message);
          this.signature = void 0;
          this.transactionMessage = void 0;
          this.transactionLogs = void 0;
          this.signature = signature2;
          this.transactionMessage = transactionMessage;
          this.transactionLogs = logs ? logs : void 0;
        }
        get transactionError() {
          return {
            message: this.transactionMessage,
            logs: Array.isArray(this.transactionLogs) ? this.transactionLogs : void 0
          };
        }
        /* @deprecated Use `await getLogs()` instead */
        get logs() {
          const cachedLogs = this.transactionLogs;
          if (cachedLogs != null && typeof cachedLogs === "object" && "then" in cachedLogs) {
            return void 0;
          }
          return cachedLogs;
        }
        async getLogs(connection) {
          if (!Array.isArray(this.transactionLogs)) {
            this.transactionLogs = new Promise((resolve, reject) => {
              connection.getTransaction(this.signature).then((tx) => {
                if (tx && tx.meta && tx.meta.logMessages) {
                  const logs = tx.meta.logMessages;
                  this.transactionLogs = logs;
                  resolve(logs);
                } else {
                  reject(new Error("Log messages not found"));
                }
              }).catch(reject);
            });
          }
          return await this.transactionLogs;
        }
      };
      FeeCalculatorLayout = BufferLayout.nu64("lamportsPerSignature");
      NonceAccountLayout = BufferLayout.struct([BufferLayout.u32("version"), BufferLayout.u32("state"), publicKey("authorizedPubkey"), publicKey("nonce"), BufferLayout.struct([FeeCalculatorLayout], "feeCalculator")]);
      NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;
      encodeDecode = (layout) => {
        const decode2 = layout.decode.bind(layout);
        const encode = layout.encode.bind(layout);
        return {
          decode: decode2,
          encode
        };
      };
      bigInt = (length) => (property) => {
        const layout = (0, import_buffer_layout.blob)(length, property);
        const {
          encode,
          decode: decode2
        } = encodeDecode(layout);
        const bigIntLayout = layout;
        bigIntLayout.decode = (buffer, offset2) => {
          const src = decode2(buffer, offset2);
          return toBigIntLE(import_buffer3.Buffer.from(src));
        };
        bigIntLayout.encode = (bigInt2, buffer, offset2) => {
          const src = toBufferLE(bigInt2, length);
          return encode(src, buffer, offset2);
        };
        return bigIntLayout;
      };
      u642 = bigInt(8);
      SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({
        Create: {
          index: 0,
          layout: BufferLayout.struct([BufferLayout.u32("instruction"), BufferLayout.ns64("lamports"), BufferLayout.ns64("space"), publicKey("programId")])
        },
        Assign: {
          index: 1,
          layout: BufferLayout.struct([BufferLayout.u32("instruction"), publicKey("programId")])
        },
        Transfer: {
          index: 2,
          layout: BufferLayout.struct([BufferLayout.u32("instruction"), u642("lamports")])
        },
        CreateWithSeed: {
          index: 3,
          layout: BufferLayout.struct([BufferLayout.u32("instruction"), publicKey("base"), rustString("seed"), BufferLayout.ns64("lamports"), BufferLayout.ns64("space"), publicKey("programId")])
        },
        AdvanceNonceAccount: {
          index: 4,
          layout: BufferLayout.struct([BufferLayout.u32("instruction")])
        },
        WithdrawNonceAccount: {
          index: 5,
          layout: BufferLayout.struct([BufferLayout.u32("instruction"), BufferLayout.ns64("lamports")])
        },
        InitializeNonceAccount: {
          index: 6,
          layout: BufferLayout.struct([BufferLayout.u32("instruction"), publicKey("authorized")])
        },
        AuthorizeNonceAccount: {
          index: 7,
          layout: BufferLayout.struct([BufferLayout.u32("instruction"), publicKey("authorized")])
        },
        Allocate: {
          index: 8,
          layout: BufferLayout.struct([BufferLayout.u32("instruction"), BufferLayout.ns64("space")])
        },
        AllocateWithSeed: {
          index: 9,
          layout: BufferLayout.struct([BufferLayout.u32("instruction"), publicKey("base"), rustString("seed"), BufferLayout.ns64("space"), publicKey("programId")])
        },
        AssignWithSeed: {
          index: 10,
          layout: BufferLayout.struct([BufferLayout.u32("instruction"), publicKey("base"), rustString("seed"), publicKey("programId")])
        },
        TransferWithSeed: {
          index: 11,
          layout: BufferLayout.struct([BufferLayout.u32("instruction"), u642("lamports"), rustString("seed"), publicKey("programId")])
        },
        UpgradeNonceAccount: {
          index: 12,
          layout: BufferLayout.struct([BufferLayout.u32("instruction")])
        }
      });
      SystemProgram = class _SystemProgram {
        /**
         * @internal
         */
        constructor() {
        }
        /**
         * Public key that identifies the System program
         */
        /**
         * Generate a transaction instruction that creates a new account
         */
        static createAccount(params) {
          const type2 = SYSTEM_INSTRUCTION_LAYOUTS.Create;
          const data = encodeData(type2, {
            lamports: params.lamports,
            space: params.space,
            programId: toBuffer(params.programId.toBuffer())
          });
          return new TransactionInstruction({
            keys: [{
              pubkey: params.fromPubkey,
              isSigner: true,
              isWritable: true
            }, {
              pubkey: params.newAccountPubkey,
              isSigner: true,
              isWritable: true
            }],
            programId: this.programId,
            data
          });
        }
        /**
         * Generate a transaction instruction that transfers lamports from one account to another
         */
        static transfer(params) {
          let data;
          let keys;
          if ("basePubkey" in params) {
            const type2 = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;
            data = encodeData(type2, {
              lamports: BigInt(params.lamports),
              seed: params.seed,
              programId: toBuffer(params.programId.toBuffer())
            });
            keys = [{
              pubkey: params.fromPubkey,
              isSigner: false,
              isWritable: true
            }, {
              pubkey: params.basePubkey,
              isSigner: true,
              isWritable: false
            }, {
              pubkey: params.toPubkey,
              isSigner: false,
              isWritable: true
            }];
          } else {
            const type2 = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;
            data = encodeData(type2, {
              lamports: BigInt(params.lamports)
            });
            keys = [{
              pubkey: params.fromPubkey,
              isSigner: true,
              isWritable: true
            }, {
              pubkey: params.toPubkey,
              isSigner: false,
              isWritable: true
            }];
          }
          return new TransactionInstruction({
            keys,
            programId: this.programId,
            data
          });
        }
        /**
         * Generate a transaction instruction that assigns an account to a program
         */
        static assign(params) {
          let data;
          let keys;
          if ("basePubkey" in params) {
            const type2 = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;
            data = encodeData(type2, {
              base: toBuffer(params.basePubkey.toBuffer()),
              seed: params.seed,
              programId: toBuffer(params.programId.toBuffer())
            });
            keys = [{
              pubkey: params.accountPubkey,
              isSigner: false,
              isWritable: true
            }, {
              pubkey: params.basePubkey,
              isSigner: true,
              isWritable: false
            }];
          } else {
            const type2 = SYSTEM_INSTRUCTION_LAYOUTS.Assign;
            data = encodeData(type2, {
              programId: toBuffer(params.programId.toBuffer())
            });
            keys = [{
              pubkey: params.accountPubkey,
              isSigner: true,
              isWritable: true
            }];
          }
          return new TransactionInstruction({
            keys,
            programId: this.programId,
            data
          });
        }
        /**
         * Generate a transaction instruction that creates a new account at
         *   an address generated with `from`, a seed, and programId
         */
        static createAccountWithSeed(params) {
          const type2 = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;
          const data = encodeData(type2, {
            base: toBuffer(params.basePubkey.toBuffer()),
            seed: params.seed,
            lamports: params.lamports,
            space: params.space,
            programId: toBuffer(params.programId.toBuffer())
          });
          let keys = [{
            pubkey: params.fromPubkey,
            isSigner: true,
            isWritable: true
          }, {
            pubkey: params.newAccountPubkey,
            isSigner: false,
            isWritable: true
          }];
          if (!params.basePubkey.equals(params.fromPubkey)) {
            keys.push({
              pubkey: params.basePubkey,
              isSigner: true,
              isWritable: false
            });
          }
          return new TransactionInstruction({
            keys,
            programId: this.programId,
            data
          });
        }
        /**
         * Generate a transaction that creates a new Nonce account
         */
        static createNonceAccount(params) {
          const transaction = new Transaction2();
          if ("basePubkey" in params && "seed" in params) {
            transaction.add(_SystemProgram.createAccountWithSeed({
              fromPubkey: params.fromPubkey,
              newAccountPubkey: params.noncePubkey,
              basePubkey: params.basePubkey,
              seed: params.seed,
              lamports: params.lamports,
              space: NONCE_ACCOUNT_LENGTH,
              programId: this.programId
            }));
          } else {
            transaction.add(_SystemProgram.createAccount({
              fromPubkey: params.fromPubkey,
              newAccountPubkey: params.noncePubkey,
              lamports: params.lamports,
              space: NONCE_ACCOUNT_LENGTH,
              programId: this.programId
            }));
          }
          const initParams = {
            noncePubkey: params.noncePubkey,
            authorizedPubkey: params.authorizedPubkey
          };
          transaction.add(this.nonceInitialize(initParams));
          return transaction;
        }
        /**
         * Generate an instruction to initialize a Nonce account
         */
        static nonceInitialize(params) {
          const type2 = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;
          const data = encodeData(type2, {
            authorized: toBuffer(params.authorizedPubkey.toBuffer())
          });
          const instructionData = {
            keys: [{
              pubkey: params.noncePubkey,
              isSigner: false,
              isWritable: true
            }, {
              pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,
              isSigner: false,
              isWritable: false
            }, {
              pubkey: SYSVAR_RENT_PUBKEY,
              isSigner: false,
              isWritable: false
            }],
            programId: this.programId,
            data
          };
          return new TransactionInstruction(instructionData);
        }
        /**
         * Generate an instruction to advance the nonce in a Nonce account
         */
        static nonceAdvance(params) {
          const type2 = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;
          const data = encodeData(type2);
          const instructionData = {
            keys: [{
              pubkey: params.noncePubkey,
              isSigner: false,
              isWritable: true
            }, {
              pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,
              isSigner: false,
              isWritable: false
            }, {
              pubkey: params.authorizedPubkey,
              isSigner: true,
              isWritable: false
            }],
            programId: this.programId,
            data
          };
          return new TransactionInstruction(instructionData);
        }
        /**
         * Generate a transaction instruction that withdraws lamports from a Nonce account
         */
        static nonceWithdraw(params) {
          const type2 = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;
          const data = encodeData(type2, {
            lamports: params.lamports
          });
          return new TransactionInstruction({
            keys: [{
              pubkey: params.noncePubkey,
              isSigner: false,
              isWritable: true
            }, {
              pubkey: params.toPubkey,
              isSigner: false,
              isWritable: true
            }, {
              pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,
              isSigner: false,
              isWritable: false
            }, {
              pubkey: SYSVAR_RENT_PUBKEY,
              isSigner: false,
              isWritable: false
            }, {
              pubkey: params.authorizedPubkey,
              isSigner: true,
              isWritable: false
            }],
            programId: this.programId,
            data
          });
        }
        /**
         * Generate a transaction instruction that authorizes a new PublicKey as the authority
         * on a Nonce account.
         */
        static nonceAuthorize(params) {
          const type2 = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;
          const data = encodeData(type2, {
            authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())
          });
          return new TransactionInstruction({
            keys: [{
              pubkey: params.noncePubkey,
              isSigner: false,
              isWritable: true
            }, {
              pubkey: params.authorizedPubkey,
              isSigner: true,
              isWritable: false
            }],
            programId: this.programId,
            data
          });
        }
        /**
         * Generate a transaction instruction that allocates space in an account without funding
         */
        static allocate(params) {
          let data;
          let keys;
          if ("basePubkey" in params) {
            const type2 = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;
            data = encodeData(type2, {
              base: toBuffer(params.basePubkey.toBuffer()),
              seed: params.seed,
              space: params.space,
              programId: toBuffer(params.programId.toBuffer())
            });
            keys = [{
              pubkey: params.accountPubkey,
              isSigner: false,
              isWritable: true
            }, {
              pubkey: params.basePubkey,
              isSigner: true,
              isWritable: false
            }];
          } else {
            const type2 = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;
            data = encodeData(type2, {
              space: params.space
            });
            keys = [{
              pubkey: params.accountPubkey,
              isSigner: true,
              isWritable: true
            }];
          }
          return new TransactionInstruction({
            keys,
            programId: this.programId,
            data
          });
        }
      };
      SystemProgram.programId = new PublicKey("11111111111111111111111111111111");
      CHUNK_SIZE = PACKET_DATA_SIZE - 300;
      Loader = class _Loader {
        /**
         * @internal
         */
        constructor() {
        }
        /**
         * Amount of program data placed in each load Transaction
         */
        /**
         * Minimum number of signatures required to load a program not including
         * retries
         *
         * Can be used to calculate transaction fees
         */
        static getMinNumSignatures(dataLength2) {
          return 2 * // Every transaction requires two signatures (payer + program)
          (Math.ceil(dataLength2 / _Loader.chunkSize) + 1 + // Add one for Create transaction
          1);
        }
        /**
         * Loads a generic program
         *
         * @param connection The connection to use
         * @param payer System account that pays to load the program
         * @param program Account to load the program into
         * @param programId Public key that identifies the loader
         * @param data Program octets
         * @return true if program was loaded successfully, false if program was already loaded
         */
        static async load(connection, payer, program, programId, data) {
          {
            const balanceNeeded = await connection.getMinimumBalanceForRentExemption(data.length);
            const programInfo = await connection.getAccountInfo(program.publicKey, "confirmed");
            let transaction = null;
            if (programInfo !== null) {
              if (programInfo.executable) {
                console.error("Program load failed, account is already executable");
                return false;
              }
              if (programInfo.data.length !== data.length) {
                transaction = transaction || new Transaction2();
                transaction.add(SystemProgram.allocate({
                  accountPubkey: program.publicKey,
                  space: data.length
                }));
              }
              if (!programInfo.owner.equals(programId)) {
                transaction = transaction || new Transaction2();
                transaction.add(SystemProgram.assign({
                  accountPubkey: program.publicKey,
                  programId
                }));
              }
              if (programInfo.lamports < balanceNeeded) {
                transaction = transaction || new Transaction2();
                transaction.add(SystemProgram.transfer({
                  fromPubkey: payer.publicKey,
                  toPubkey: program.publicKey,
                  lamports: balanceNeeded - programInfo.lamports
                }));
              }
            } else {
              transaction = new Transaction2().add(SystemProgram.createAccount({
                fromPubkey: payer.publicKey,
                newAccountPubkey: program.publicKey,
                lamports: balanceNeeded > 0 ? balanceNeeded : 1,
                space: data.length,
                programId
              }));
            }
            if (transaction !== null) {
              await sendAndConfirmTransaction(connection, transaction, [payer, program], {
                commitment: "confirmed"
              });
            }
          }
          const dataLayout = BufferLayout.struct([BufferLayout.u32("instruction"), BufferLayout.u32("offset"), BufferLayout.u32("bytesLength"), BufferLayout.u32("bytesLengthPadding"), BufferLayout.seq(BufferLayout.u8("byte"), BufferLayout.offset(BufferLayout.u32(), -8), "bytes")]);
          const chunkSize = _Loader.chunkSize;
          let offset2 = 0;
          let array2 = data;
          let transactions = [];
          while (array2.length > 0) {
            const bytes2 = array2.slice(0, chunkSize);
            const data2 = import_buffer3.Buffer.alloc(chunkSize + 16);
            dataLayout.encode({
              instruction: 0,
              // Load instruction
              offset: offset2,
              bytes: bytes2,
              bytesLength: 0,
              bytesLengthPadding: 0
            }, data2);
            const transaction = new Transaction2().add({
              keys: [{
                pubkey: program.publicKey,
                isSigner: true,
                isWritable: true
              }],
              programId,
              data: data2
            });
            transactions.push(sendAndConfirmTransaction(connection, transaction, [payer, program], {
              commitment: "confirmed"
            }));
            if (connection._rpcEndpoint.includes("solana.com")) {
              const REQUESTS_PER_SECOND = 4;
              await sleep(1e3 / REQUESTS_PER_SECOND);
            }
            offset2 += chunkSize;
            array2 = array2.slice(chunkSize);
          }
          await Promise.all(transactions);
          {
            const dataLayout2 = BufferLayout.struct([BufferLayout.u32("instruction")]);
            const data2 = import_buffer3.Buffer.alloc(dataLayout2.span);
            dataLayout2.encode({
              instruction: 1
              // Finalize instruction
            }, data2);
            const transaction = new Transaction2().add({
              keys: [{
                pubkey: program.publicKey,
                isSigner: true,
                isWritable: true
              }, {
                pubkey: SYSVAR_RENT_PUBKEY,
                isSigner: false,
                isWritable: false
              }],
              programId,
              data: data2
            });
            const deployCommitment = "processed";
            const finalizeSignature = await connection.sendTransaction(transaction, [payer, program], {
              preflightCommitment: deployCommitment
            });
            const {
              context,
              value
            } = await connection.confirmTransaction({
              signature: finalizeSignature,
              lastValidBlockHeight: transaction.lastValidBlockHeight,
              blockhash: transaction.recentBlockhash
            }, deployCommitment);
            if (value.err) {
              throw new Error(`Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`);
            }
            while (true) {
              try {
                const currentSlot = await connection.getSlot({
                  commitment: deployCommitment
                });
                if (currentSlot > context.slot) {
                  break;
                }
              } catch (e) {
              }
              await new Promise((resolve) => setTimeout(resolve, Math.round(MS_PER_SLOT / 2)));
            }
          }
          return true;
        }
      };
      Loader.chunkSize = CHUNK_SIZE;
      BPF_LOADER_PROGRAM_ID = new PublicKey("BPFLoader2111111111111111111111111111111111");
      fetchImpl = globalThis.fetch;
      LookupTableMetaLayout = {
        index: 1,
        layout: BufferLayout.struct([
          BufferLayout.u32("typeIndex"),
          u642("deactivationSlot"),
          BufferLayout.nu64("lastExtendedSlot"),
          BufferLayout.u8("lastExtendedStartIndex"),
          BufferLayout.u8(),
          // option
          BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u8(), -1), "authority")
        ])
      };
      PublicKeyFromString = coerce(instance(PublicKey), string(), (value) => new PublicKey(value));
      RawAccountDataResult = tuple([string(), literal("base64")]);
      BufferFromRawAccountData = coerce(instance(import_buffer3.Buffer), RawAccountDataResult, (value) => import_buffer3.Buffer.from(value[0], "base64"));
      BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1e3;
      UnknownRpcResult = createRpcResult(unknown());
      GetInflationGovernorResult = type({
        foundation: number2(),
        foundationTerm: number2(),
        initial: number2(),
        taper: number2(),
        terminal: number2()
      });
      GetInflationRewardResult = jsonRpcResult(array(nullable(type({
        epoch: number2(),
        effectiveSlot: number2(),
        amount: number2(),
        postBalance: number2(),
        commission: optional(nullable(number2()))
      }))));
      GetRecentPrioritizationFeesResult = array(type({
        slot: number2(),
        prioritizationFee: number2()
      }));
      GetInflationRateResult = type({
        total: number2(),
        validator: number2(),
        foundation: number2(),
        epoch: number2()
      });
      GetEpochInfoResult = type({
        epoch: number2(),
        slotIndex: number2(),
        slotsInEpoch: number2(),
        absoluteSlot: number2(),
        blockHeight: optional(number2()),
        transactionCount: optional(number2())
      });
      GetEpochScheduleResult = type({
        slotsPerEpoch: number2(),
        leaderScheduleSlotOffset: number2(),
        warmup: boolean(),
        firstNormalEpoch: number2(),
        firstNormalSlot: number2()
      });
      GetLeaderScheduleResult = record(string(), array(number2()));
      TransactionErrorResult = nullable(union([type({}), string()]));
      SignatureStatusResult = type({
        err: TransactionErrorResult
      });
      SignatureReceivedResult = literal("receivedSignature");
      VersionResult = type({
        "solana-core": string(),
        "feature-set": optional(number2())
      });
      ParsedInstructionStruct = type({
        program: string(),
        programId: PublicKeyFromString,
        parsed: unknown()
      });
      PartiallyDecodedInstructionStruct = type({
        programId: PublicKeyFromString,
        accounts: array(PublicKeyFromString),
        data: string()
      });
      SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({
        err: nullable(union([type({}), string()])),
        logs: nullable(array(string())),
        accounts: optional(nullable(array(nullable(type({
          executable: boolean(),
          owner: string(),
          lamports: number2(),
          data: array(string()),
          rentEpoch: optional(number2())
        }))))),
        unitsConsumed: optional(number2()),
        returnData: optional(nullable(type({
          programId: string(),
          data: tuple([string(), literal("base64")])
        }))),
        innerInstructions: optional(nullable(array(type({
          index: number2(),
          instructions: array(union([ParsedInstructionStruct, PartiallyDecodedInstructionStruct]))
        }))))
      }));
      BlockProductionResponseStruct = jsonRpcResultAndContext(type({
        byIdentity: record(string(), array(number2())),
        range: type({
          firstSlot: number2(),
          lastSlot: number2()
        })
      }));
      GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);
      GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);
      GetRecentPrioritizationFeesRpcResult = jsonRpcResult(GetRecentPrioritizationFeesResult);
      GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);
      GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);
      GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);
      SlotRpcResult = jsonRpcResult(number2());
      GetSupplyRpcResult = jsonRpcResultAndContext(type({
        total: number2(),
        circulating: number2(),
        nonCirculating: number2(),
        nonCirculatingAccounts: array(PublicKeyFromString)
      }));
      TokenAmountResult = type({
        amount: string(),
        uiAmount: nullable(number2()),
        decimals: number2(),
        uiAmountString: optional(string())
      });
      GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({
        address: PublicKeyFromString,
        amount: string(),
        uiAmount: nullable(number2()),
        decimals: number2(),
        uiAmountString: optional(string())
      })));
      GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({
        pubkey: PublicKeyFromString,
        account: type({
          executable: boolean(),
          owner: PublicKeyFromString,
          lamports: number2(),
          data: BufferFromRawAccountData,
          rentEpoch: number2()
        })
      })));
      ParsedAccountDataResult = type({
        program: string(),
        parsed: unknown(),
        space: number2()
      });
      GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({
        pubkey: PublicKeyFromString,
        account: type({
          executable: boolean(),
          owner: PublicKeyFromString,
          lamports: number2(),
          data: ParsedAccountDataResult,
          rentEpoch: number2()
        })
      })));
      GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({
        lamports: number2(),
        address: PublicKeyFromString
      })));
      AccountInfoResult = type({
        executable: boolean(),
        owner: PublicKeyFromString,
        lamports: number2(),
        data: BufferFromRawAccountData,
        rentEpoch: number2()
      });
      KeyedAccountInfoResult = type({
        pubkey: PublicKeyFromString,
        account: AccountInfoResult
      });
      ParsedOrRawAccountData = coerce(union([instance(import_buffer3.Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), (value) => {
        if (Array.isArray(value)) {
          return create(value, BufferFromRawAccountData);
        } else {
          return value;
        }
      });
      ParsedAccountInfoResult = type({
        executable: boolean(),
        owner: PublicKeyFromString,
        lamports: number2(),
        data: ParsedOrRawAccountData,
        rentEpoch: number2()
      });
      KeyedParsedAccountInfoResult = type({
        pubkey: PublicKeyFromString,
        account: ParsedAccountInfoResult
      });
      StakeActivationResult = type({
        state: union([literal("active"), literal("inactive"), literal("activating"), literal("deactivating")]),
        active: number2(),
        inactive: number2()
      });
      GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({
        signature: string(),
        slot: number2(),
        err: TransactionErrorResult,
        memo: nullable(string()),
        blockTime: optional(nullable(number2()))
      })));
      GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({
        signature: string(),
        slot: number2(),
        err: TransactionErrorResult,
        memo: nullable(string()),
        blockTime: optional(nullable(number2()))
      })));
      AccountNotificationResult = type({
        subscription: number2(),
        result: notificationResultAndContext(AccountInfoResult)
      });
      ProgramAccountInfoResult = type({
        pubkey: PublicKeyFromString,
        account: AccountInfoResult
      });
      ProgramAccountNotificationResult = type({
        subscription: number2(),
        result: notificationResultAndContext(ProgramAccountInfoResult)
      });
      SlotInfoResult = type({
        parent: number2(),
        slot: number2(),
        root: number2()
      });
      SlotNotificationResult = type({
        subscription: number2(),
        result: SlotInfoResult
      });
      SlotUpdateResult = union([type({
        type: union([literal("firstShredReceived"), literal("completed"), literal("optimisticConfirmation"), literal("root")]),
        slot: number2(),
        timestamp: number2()
      }), type({
        type: literal("createdBank"),
        parent: number2(),
        slot: number2(),
        timestamp: number2()
      }), type({
        type: literal("frozen"),
        slot: number2(),
        timestamp: number2(),
        stats: type({
          numTransactionEntries: number2(),
          numSuccessfulTransactions: number2(),
          numFailedTransactions: number2(),
          maxTransactionsPerEntry: number2()
        })
      }), type({
        type: literal("dead"),
        slot: number2(),
        timestamp: number2(),
        err: string()
      })]);
      SlotUpdateNotificationResult = type({
        subscription: number2(),
        result: SlotUpdateResult
      });
      SignatureNotificationResult = type({
        subscription: number2(),
        result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))
      });
      RootNotificationResult = type({
        subscription: number2(),
        result: number2()
      });
      ContactInfoResult = type({
        pubkey: string(),
        gossip: nullable(string()),
        tpu: nullable(string()),
        rpc: nullable(string()),
        version: nullable(string())
      });
      VoteAccountInfoResult = type({
        votePubkey: string(),
        nodePubkey: string(),
        activatedStake: number2(),
        epochVoteAccount: boolean(),
        epochCredits: array(tuple([number2(), number2(), number2()])),
        commission: number2(),
        lastVote: number2(),
        rootSlot: nullable(number2())
      });
      GetVoteAccounts = jsonRpcResult(type({
        current: array(VoteAccountInfoResult),
        delinquent: array(VoteAccountInfoResult)
      }));
      ConfirmationStatus = union([literal("processed"), literal("confirmed"), literal("finalized")]);
      SignatureStatusResponse = type({
        slot: number2(),
        confirmations: nullable(number2()),
        err: TransactionErrorResult,
        confirmationStatus: optional(ConfirmationStatus)
      });
      GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));
      GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number2());
      AddressTableLookupStruct = type({
        accountKey: PublicKeyFromString,
        writableIndexes: array(number2()),
        readonlyIndexes: array(number2())
      });
      ConfirmedTransactionResult = type({
        signatures: array(string()),
        message: type({
          accountKeys: array(string()),
          header: type({
            numRequiredSignatures: number2(),
            numReadonlySignedAccounts: number2(),
            numReadonlyUnsignedAccounts: number2()
          }),
          instructions: array(type({
            accounts: array(number2()),
            data: string(),
            programIdIndex: number2()
          })),
          recentBlockhash: string(),
          addressTableLookups: optional(array(AddressTableLookupStruct))
        })
      });
      AnnotatedAccountKey = type({
        pubkey: PublicKeyFromString,
        signer: boolean(),
        writable: boolean(),
        source: optional(union([literal("transaction"), literal("lookupTable")]))
      });
      ConfirmedTransactionAccountsModeResult = type({
        accountKeys: array(AnnotatedAccountKey),
        signatures: array(string())
      });
      ParsedInstructionResult = type({
        parsed: unknown(),
        program: string(),
        programId: PublicKeyFromString
      });
      RawInstructionResult = type({
        accounts: array(PublicKeyFromString),
        data: string(),
        programId: PublicKeyFromString
      });
      InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);
      UnknownInstructionResult = union([type({
        parsed: unknown(),
        program: string(),
        programId: string()
      }), type({
        accounts: array(string()),
        data: string(),
        programId: string()
      })]);
      ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, (value) => {
        if ("accounts" in value) {
          return create(value, RawInstructionResult);
        } else {
          return create(value, ParsedInstructionResult);
        }
      });
      ParsedConfirmedTransactionResult = type({
        signatures: array(string()),
        message: type({
          accountKeys: array(AnnotatedAccountKey),
          instructions: array(ParsedOrRawInstruction),
          recentBlockhash: string(),
          addressTableLookups: optional(nullable(array(AddressTableLookupStruct)))
        })
      });
      TokenBalanceResult = type({
        accountIndex: number2(),
        mint: string(),
        owner: optional(string()),
        programId: optional(string()),
        uiTokenAmount: TokenAmountResult
      });
      LoadedAddressesResult = type({
        writable: array(PublicKeyFromString),
        readonly: array(PublicKeyFromString)
      });
      ConfirmedTransactionMetaResult = type({
        err: TransactionErrorResult,
        fee: number2(),
        innerInstructions: optional(nullable(array(type({
          index: number2(),
          instructions: array(type({
            accounts: array(number2()),
            data: string(),
            programIdIndex: number2()
          }))
        })))),
        preBalances: array(number2()),
        postBalances: array(number2()),
        logMessages: optional(nullable(array(string()))),
        preTokenBalances: optional(nullable(array(TokenBalanceResult))),
        postTokenBalances: optional(nullable(array(TokenBalanceResult))),
        loadedAddresses: optional(LoadedAddressesResult),
        computeUnitsConsumed: optional(number2())
      });
      ParsedConfirmedTransactionMetaResult = type({
        err: TransactionErrorResult,
        fee: number2(),
        innerInstructions: optional(nullable(array(type({
          index: number2(),
          instructions: array(ParsedOrRawInstruction)
        })))),
        preBalances: array(number2()),
        postBalances: array(number2()),
        logMessages: optional(nullable(array(string()))),
        preTokenBalances: optional(nullable(array(TokenBalanceResult))),
        postTokenBalances: optional(nullable(array(TokenBalanceResult))),
        loadedAddresses: optional(LoadedAddressesResult),
        computeUnitsConsumed: optional(number2())
      });
      TransactionVersionStruct = union([literal(0), literal("legacy")]);
      RewardsResult = type({
        pubkey: string(),
        lamports: number2(),
        postBalance: nullable(number2()),
        rewardType: nullable(string()),
        commission: optional(nullable(number2()))
      });
      GetBlockRpcResult = jsonRpcResult(nullable(type({
        blockhash: string(),
        previousBlockhash: string(),
        parentSlot: number2(),
        transactions: array(type({
          transaction: ConfirmedTransactionResult,
          meta: nullable(ConfirmedTransactionMetaResult),
          version: optional(TransactionVersionStruct)
        })),
        rewards: optional(array(RewardsResult)),
        blockTime: nullable(number2()),
        blockHeight: nullable(number2())
      })));
      GetNoneModeBlockRpcResult = jsonRpcResult(nullable(type({
        blockhash: string(),
        previousBlockhash: string(),
        parentSlot: number2(),
        rewards: optional(array(RewardsResult)),
        blockTime: nullable(number2()),
        blockHeight: nullable(number2())
      })));
      GetAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({
        blockhash: string(),
        previousBlockhash: string(),
        parentSlot: number2(),
        transactions: array(type({
          transaction: ConfirmedTransactionAccountsModeResult,
          meta: nullable(ConfirmedTransactionMetaResult),
          version: optional(TransactionVersionStruct)
        })),
        rewards: optional(array(RewardsResult)),
        blockTime: nullable(number2()),
        blockHeight: nullable(number2())
      })));
      GetParsedBlockRpcResult = jsonRpcResult(nullable(type({
        blockhash: string(),
        previousBlockhash: string(),
        parentSlot: number2(),
        transactions: array(type({
          transaction: ParsedConfirmedTransactionResult,
          meta: nullable(ParsedConfirmedTransactionMetaResult),
          version: optional(TransactionVersionStruct)
        })),
        rewards: optional(array(RewardsResult)),
        blockTime: nullable(number2()),
        blockHeight: nullable(number2())
      })));
      GetParsedAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({
        blockhash: string(),
        previousBlockhash: string(),
        parentSlot: number2(),
        transactions: array(type({
          transaction: ConfirmedTransactionAccountsModeResult,
          meta: nullable(ParsedConfirmedTransactionMetaResult),
          version: optional(TransactionVersionStruct)
        })),
        rewards: optional(array(RewardsResult)),
        blockTime: nullable(number2()),
        blockHeight: nullable(number2())
      })));
      GetParsedNoneModeBlockRpcResult = jsonRpcResult(nullable(type({
        blockhash: string(),
        previousBlockhash: string(),
        parentSlot: number2(),
        rewards: optional(array(RewardsResult)),
        blockTime: nullable(number2()),
        blockHeight: nullable(number2())
      })));
      GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({
        blockhash: string(),
        previousBlockhash: string(),
        parentSlot: number2(),
        transactions: array(type({
          transaction: ConfirmedTransactionResult,
          meta: nullable(ConfirmedTransactionMetaResult)
        })),
        rewards: optional(array(RewardsResult)),
        blockTime: nullable(number2())
      })));
      GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({
        blockhash: string(),
        previousBlockhash: string(),
        parentSlot: number2(),
        signatures: array(string()),
        blockTime: nullable(number2())
      })));
      GetTransactionRpcResult = jsonRpcResult(nullable(type({
        slot: number2(),
        meta: nullable(ConfirmedTransactionMetaResult),
        blockTime: optional(nullable(number2())),
        transaction: ConfirmedTransactionResult,
        version: optional(TransactionVersionStruct)
      })));
      GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({
        slot: number2(),
        transaction: ParsedConfirmedTransactionResult,
        meta: nullable(ParsedConfirmedTransactionMetaResult),
        blockTime: optional(nullable(number2())),
        version: optional(TransactionVersionStruct)
      })));
      GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({
        blockhash: string(),
        lastValidBlockHeight: number2()
      }));
      IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());
      PerfSampleResult = type({
        slot: number2(),
        numTransactions: number2(),
        numSlots: number2(),
        samplePeriodSecs: number2()
      });
      GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));
      GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({
        feeCalculator: type({
          lamportsPerSignature: number2()
        })
      })));
      RequestAirdropRpcResult = jsonRpcResult(string());
      SendTransactionRpcResult = jsonRpcResult(string());
      LogsResult = type({
        err: TransactionErrorResult,
        logs: array(string()),
        signature: string()
      });
      LogsNotificationResult = type({
        result: notificationResultAndContext(LogsResult),
        subscription: number2()
      });
      Keypair = class _Keypair {
        /**
         * Create a new keypair instance.
         * Generate random keypair if no {@link Ed25519Keypair} is provided.
         *
         * @param {Ed25519Keypair} keypair ed25519 keypair
         */
        constructor(keypair) {
          this._keypair = void 0;
          this._keypair = keypair != null ? keypair : generateKeypair();
        }
        /**
         * Generate a new random keypair
         *
         * @returns {Keypair} Keypair
         */
        static generate() {
          return new _Keypair(generateKeypair());
        }
        /**
         * Create a keypair from a raw secret key byte array.
         *
         * This method should only be used to recreate a keypair from a previously
         * generated secret key. Generating keypairs from a random seed should be done
         * with the {@link Keypair.fromSeed} method.
         *
         * @throws error if the provided secret key is invalid and validation is not skipped.
         *
         * @param secretKey secret key byte array
         * @param options skip secret key validation
         *
         * @returns {Keypair} Keypair
         */
        static fromSecretKey(secretKey, options) {
          if (secretKey.byteLength !== 64) {
            throw new Error("bad secret key size");
          }
          const publicKey2 = secretKey.slice(32, 64);
          if (!options || !options.skipValidation) {
            const privateScalar = secretKey.slice(0, 32);
            const computedPublicKey = getPublicKey(privateScalar);
            for (let ii = 0; ii < 32; ii++) {
              if (publicKey2[ii] !== computedPublicKey[ii]) {
                throw new Error("provided secretKey is invalid");
              }
            }
          }
          return new _Keypair({
            publicKey: publicKey2,
            secretKey
          });
        }
        /**
         * Generate a keypair from a 32 byte seed.
         *
         * @param seed seed byte array
         *
         * @returns {Keypair} Keypair
         */
        static fromSeed(seed) {
          const publicKey2 = getPublicKey(seed);
          const secretKey = new Uint8Array(64);
          secretKey.set(seed);
          secretKey.set(publicKey2, 32);
          return new _Keypair({
            publicKey: publicKey2,
            secretKey
          });
        }
        /**
         * The public key for this keypair
         *
         * @returns {PublicKey} PublicKey
         */
        get publicKey() {
          return new PublicKey(this._keypair.publicKey);
        }
        /**
         * The raw secret key for this keypair
         * @returns {Uint8Array} Secret key in an array of Uint8 bytes
         */
        get secretKey() {
          return new Uint8Array(this._keypair.secretKey);
        }
      };
      LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({
        CreateLookupTable: {
          index: 0,
          layout: BufferLayout.struct([BufferLayout.u32("instruction"), u642("recentSlot"), BufferLayout.u8("bumpSeed")])
        },
        FreezeLookupTable: {
          index: 1,
          layout: BufferLayout.struct([BufferLayout.u32("instruction")])
        },
        ExtendLookupTable: {
          index: 2,
          layout: BufferLayout.struct([BufferLayout.u32("instruction"), u642(), BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u32(), -8), "addresses")])
        },
        DeactivateLookupTable: {
          index: 3,
          layout: BufferLayout.struct([BufferLayout.u32("instruction")])
        },
        CloseLookupTable: {
          index: 4,
          layout: BufferLayout.struct([BufferLayout.u32("instruction")])
        }
      });
      AddressLookupTableProgram = class {
        /**
         * @internal
         */
        constructor() {
        }
        static createLookupTable(params) {
          const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync([params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)], this.programId);
          const type2 = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;
          const data = encodeData(type2, {
            recentSlot: BigInt(params.recentSlot),
            bumpSeed
          });
          const keys = [{
            pubkey: lookupTableAddress,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: params.authority,
            isSigner: true,
            isWritable: false
          }, {
            pubkey: params.payer,
            isSigner: true,
            isWritable: true
          }, {
            pubkey: SystemProgram.programId,
            isSigner: false,
            isWritable: false
          }];
          return [new TransactionInstruction({
            programId: this.programId,
            keys,
            data
          }), lookupTableAddress];
        }
        static freezeLookupTable(params) {
          const type2 = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;
          const data = encodeData(type2);
          const keys = [{
            pubkey: params.lookupTable,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: params.authority,
            isSigner: true,
            isWritable: false
          }];
          return new TransactionInstruction({
            programId: this.programId,
            keys,
            data
          });
        }
        static extendLookupTable(params) {
          const type2 = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;
          const data = encodeData(type2, {
            addresses: params.addresses.map((addr) => addr.toBytes())
          });
          const keys = [{
            pubkey: params.lookupTable,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: params.authority,
            isSigner: true,
            isWritable: false
          }];
          if (params.payer) {
            keys.push({
              pubkey: params.payer,
              isSigner: true,
              isWritable: true
            }, {
              pubkey: SystemProgram.programId,
              isSigner: false,
              isWritable: false
            });
          }
          return new TransactionInstruction({
            programId: this.programId,
            keys,
            data
          });
        }
        static deactivateLookupTable(params) {
          const type2 = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;
          const data = encodeData(type2);
          const keys = [{
            pubkey: params.lookupTable,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: params.authority,
            isSigner: true,
            isWritable: false
          }];
          return new TransactionInstruction({
            programId: this.programId,
            keys,
            data
          });
        }
        static closeLookupTable(params) {
          const type2 = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;
          const data = encodeData(type2);
          const keys = [{
            pubkey: params.lookupTable,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: params.authority,
            isSigner: true,
            isWritable: false
          }, {
            pubkey: params.recipient,
            isSigner: false,
            isWritable: true
          }];
          return new TransactionInstruction({
            programId: this.programId,
            keys,
            data
          });
        }
      };
      AddressLookupTableProgram.programId = new PublicKey("AddressLookupTab1e1111111111111111111111111");
      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze({
        RequestUnits: {
          index: 0,
          layout: BufferLayout.struct([BufferLayout.u8("instruction"), BufferLayout.u32("units"), BufferLayout.u32("additionalFee")])
        },
        RequestHeapFrame: {
          index: 1,
          layout: BufferLayout.struct([BufferLayout.u8("instruction"), BufferLayout.u32("bytes")])
        },
        SetComputeUnitLimit: {
          index: 2,
          layout: BufferLayout.struct([BufferLayout.u8("instruction"), BufferLayout.u32("units")])
        },
        SetComputeUnitPrice: {
          index: 3,
          layout: BufferLayout.struct([BufferLayout.u8("instruction"), u642("microLamports")])
        }
      });
      ComputeBudgetProgram = class {
        /**
         * @internal
         */
        constructor() {
        }
        /**
         * Public key that identifies the Compute Budget program
         */
        /**
         * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}
         */
        static requestUnits(params) {
          const type2 = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;
          const data = encodeData(type2, params);
          return new TransactionInstruction({
            keys: [],
            programId: this.programId,
            data
          });
        }
        static requestHeapFrame(params) {
          const type2 = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;
          const data = encodeData(type2, params);
          return new TransactionInstruction({
            keys: [],
            programId: this.programId,
            data
          });
        }
        static setComputeUnitLimit(params) {
          const type2 = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;
          const data = encodeData(type2, params);
          return new TransactionInstruction({
            keys: [],
            programId: this.programId,
            data
          });
        }
        static setComputeUnitPrice(params) {
          const type2 = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;
          const data = encodeData(type2, {
            microLamports: BigInt(params.microLamports)
          });
          return new TransactionInstruction({
            keys: [],
            programId: this.programId,
            data
          });
        }
      };
      ComputeBudgetProgram.programId = new PublicKey("ComputeBudget111111111111111111111111111111");
      PRIVATE_KEY_BYTES$1 = 64;
      PUBLIC_KEY_BYTES$1 = 32;
      SIGNATURE_BYTES = 64;
      ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8("numSignatures"), BufferLayout.u8("padding"), BufferLayout.u16("signatureOffset"), BufferLayout.u16("signatureInstructionIndex"), BufferLayout.u16("publicKeyOffset"), BufferLayout.u16("publicKeyInstructionIndex"), BufferLayout.u16("messageDataOffset"), BufferLayout.u16("messageDataSize"), BufferLayout.u16("messageInstructionIndex")]);
      Ed25519Program = class _Ed25519Program {
        /**
         * @internal
         */
        constructor() {
        }
        /**
         * Public key that identifies the ed25519 program
         */
        /**
         * Create an ed25519 instruction with a public key and signature. The
         * public key must be a buffer that is 32 bytes long, and the signature
         * must be a buffer of 64 bytes.
         */
        static createInstructionWithPublicKey(params) {
          const {
            publicKey: publicKey2,
            message,
            signature: signature2,
            instructionIndex
          } = params;
          assert3(publicKey2.length === PUBLIC_KEY_BYTES$1, `Public Key must be ${PUBLIC_KEY_BYTES$1} bytes but received ${publicKey2.length} bytes`);
          assert3(signature2.length === SIGNATURE_BYTES, `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature2.length} bytes`);
          const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;
          const signatureOffset = publicKeyOffset + publicKey2.length;
          const messageDataOffset = signatureOffset + signature2.length;
          const numSignatures = 1;
          const instructionData = import_buffer3.Buffer.alloc(messageDataOffset + message.length);
          const index = instructionIndex == null ? 65535 : instructionIndex;
          ED25519_INSTRUCTION_LAYOUT.encode({
            numSignatures,
            padding: 0,
            signatureOffset,
            signatureInstructionIndex: index,
            publicKeyOffset,
            publicKeyInstructionIndex: index,
            messageDataOffset,
            messageDataSize: message.length,
            messageInstructionIndex: index
          }, instructionData);
          instructionData.fill(publicKey2, publicKeyOffset);
          instructionData.fill(signature2, signatureOffset);
          instructionData.fill(message, messageDataOffset);
          return new TransactionInstruction({
            keys: [],
            programId: _Ed25519Program.programId,
            data: instructionData
          });
        }
        /**
         * Create an ed25519 instruction with a private key. The private key
         * must be a buffer that is 64 bytes long.
         */
        static createInstructionWithPrivateKey(params) {
          const {
            privateKey,
            message,
            instructionIndex
          } = params;
          assert3(privateKey.length === PRIVATE_KEY_BYTES$1, `Private key must be ${PRIVATE_KEY_BYTES$1} bytes but received ${privateKey.length} bytes`);
          try {
            const keypair = Keypair.fromSecretKey(privateKey);
            const publicKey2 = keypair.publicKey.toBytes();
            const signature2 = sign(message, keypair.secretKey);
            return this.createInstructionWithPublicKey({
              publicKey: publicKey2,
              message,
              signature: signature2,
              instructionIndex
            });
          } catch (error) {
            throw new Error(`Error creating instruction; ${error}`);
          }
        }
      };
      Ed25519Program.programId = new PublicKey("Ed25519SigVerify111111111111111111111111111");
      ecdsaSign = (msgHash, privKey) => {
        const signature2 = secp256k12.sign(msgHash, privKey);
        return [signature2.toCompactRawBytes(), signature2.recovery];
      };
      secp256k12.utils.isValidPrivateKey;
      publicKeyCreate = secp256k12.getPublicKey;
      PRIVATE_KEY_BYTES = 32;
      ETHEREUM_ADDRESS_BYTES = 20;
      PUBLIC_KEY_BYTES = 64;
      SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;
      SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8("numSignatures"), BufferLayout.u16("signatureOffset"), BufferLayout.u8("signatureInstructionIndex"), BufferLayout.u16("ethAddressOffset"), BufferLayout.u8("ethAddressInstructionIndex"), BufferLayout.u16("messageDataOffset"), BufferLayout.u16("messageDataSize"), BufferLayout.u8("messageInstructionIndex"), BufferLayout.blob(20, "ethAddress"), BufferLayout.blob(64, "signature"), BufferLayout.u8("recoveryId")]);
      Secp256k1Program = class _Secp256k1Program {
        /**
         * @internal
         */
        constructor() {
        }
        /**
         * Public key that identifies the secp256k1 program
         */
        /**
         * Construct an Ethereum address from a secp256k1 public key buffer.
         * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer
         */
        static publicKeyToEthAddress(publicKey2) {
          assert3(publicKey2.length === PUBLIC_KEY_BYTES, `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey2.length} bytes`);
          try {
            return import_buffer3.Buffer.from(keccak_2562(toBuffer(publicKey2))).slice(-ETHEREUM_ADDRESS_BYTES);
          } catch (error) {
            throw new Error(`Error constructing Ethereum address: ${error}`);
          }
        }
        /**
         * Create an secp256k1 instruction with a public key. The public key
         * must be a buffer that is 64 bytes long.
         */
        static createInstructionWithPublicKey(params) {
          const {
            publicKey: publicKey2,
            message,
            signature: signature2,
            recoveryId,
            instructionIndex
          } = params;
          return _Secp256k1Program.createInstructionWithEthAddress({
            ethAddress: _Secp256k1Program.publicKeyToEthAddress(publicKey2),
            message,
            signature: signature2,
            recoveryId,
            instructionIndex
          });
        }
        /**
         * Create an secp256k1 instruction with an Ethereum address. The address
         * must be a hex string or a buffer that is 20 bytes long.
         */
        static createInstructionWithEthAddress(params) {
          const {
            ethAddress: rawAddress,
            message,
            signature: signature2,
            recoveryId,
            instructionIndex = 0
          } = params;
          let ethAddress;
          if (typeof rawAddress === "string") {
            if (rawAddress.startsWith("0x")) {
              ethAddress = import_buffer3.Buffer.from(rawAddress.substr(2), "hex");
            } else {
              ethAddress = import_buffer3.Buffer.from(rawAddress, "hex");
            }
          } else {
            ethAddress = rawAddress;
          }
          assert3(ethAddress.length === ETHEREUM_ADDRESS_BYTES, `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`);
          const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;
          const ethAddressOffset = dataStart;
          const signatureOffset = dataStart + ethAddress.length;
          const messageDataOffset = signatureOffset + signature2.length + 1;
          const numSignatures = 1;
          const instructionData = import_buffer3.Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);
          SECP256K1_INSTRUCTION_LAYOUT.encode({
            numSignatures,
            signatureOffset,
            signatureInstructionIndex: instructionIndex,
            ethAddressOffset,
            ethAddressInstructionIndex: instructionIndex,
            messageDataOffset,
            messageDataSize: message.length,
            messageInstructionIndex: instructionIndex,
            signature: toBuffer(signature2),
            ethAddress: toBuffer(ethAddress),
            recoveryId
          }, instructionData);
          instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);
          return new TransactionInstruction({
            keys: [],
            programId: _Secp256k1Program.programId,
            data: instructionData
          });
        }
        /**
         * Create an secp256k1 instruction with a private key. The private key
         * must be a buffer that is 32 bytes long.
         */
        static createInstructionWithPrivateKey(params) {
          const {
            privateKey: pkey,
            message,
            instructionIndex
          } = params;
          assert3(pkey.length === PRIVATE_KEY_BYTES, `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`);
          try {
            const privateKey = toBuffer(pkey);
            const publicKey2 = publicKeyCreate(
              privateKey,
              false
              /* isCompressed */
            ).slice(1);
            const messageHash = import_buffer3.Buffer.from(keccak_2562(toBuffer(message)));
            const [signature2, recoveryId] = ecdsaSign(messageHash, privateKey);
            return this.createInstructionWithPublicKey({
              publicKey: publicKey2,
              message,
              signature: signature2,
              recoveryId,
              instructionIndex
            });
          } catch (error) {
            throw new Error(`Error creating instruction; ${error}`);
          }
        }
      };
      Secp256k1Program.programId = new PublicKey("KeccakSecp256k11111111111111111111111111111");
      STAKE_CONFIG_ID = new PublicKey("StakeConfig11111111111111111111111111111111");
      Lockup = class {
        /**
         * Create a new Lockup object
         */
        constructor(unixTimestamp, epoch, custodian) {
          this.unixTimestamp = void 0;
          this.epoch = void 0;
          this.custodian = void 0;
          this.unixTimestamp = unixTimestamp;
          this.epoch = epoch;
          this.custodian = custodian;
        }
        /**
         * Default, inactive Lockup value
         */
      };
      _Lockup = Lockup;
      Lockup.default = new _Lockup(0, 0, PublicKey.default);
      STAKE_INSTRUCTION_LAYOUTS = Object.freeze({
        Initialize: {
          index: 0,
          layout: BufferLayout.struct([BufferLayout.u32("instruction"), authorized(), lockup()])
        },
        Authorize: {
          index: 1,
          layout: BufferLayout.struct([BufferLayout.u32("instruction"), publicKey("newAuthorized"), BufferLayout.u32("stakeAuthorizationType")])
        },
        Delegate: {
          index: 2,
          layout: BufferLayout.struct([BufferLayout.u32("instruction")])
        },
        Split: {
          index: 3,
          layout: BufferLayout.struct([BufferLayout.u32("instruction"), BufferLayout.ns64("lamports")])
        },
        Withdraw: {
          index: 4,
          layout: BufferLayout.struct([BufferLayout.u32("instruction"), BufferLayout.ns64("lamports")])
        },
        Deactivate: {
          index: 5,
          layout: BufferLayout.struct([BufferLayout.u32("instruction")])
        },
        Merge: {
          index: 7,
          layout: BufferLayout.struct([BufferLayout.u32("instruction")])
        },
        AuthorizeWithSeed: {
          index: 8,
          layout: BufferLayout.struct([BufferLayout.u32("instruction"), publicKey("newAuthorized"), BufferLayout.u32("stakeAuthorizationType"), rustString("authoritySeed"), publicKey("authorityOwner")])
        }
      });
      StakeAuthorizationLayout = Object.freeze({
        Staker: {
          index: 0
        },
        Withdrawer: {
          index: 1
        }
      });
      StakeProgram = class {
        /**
         * @internal
         */
        constructor() {
        }
        /**
         * Public key that identifies the Stake program
         */
        /**
         * Generate an Initialize instruction to add to a Stake Create transaction
         */
        static initialize(params) {
          const {
            stakePubkey,
            authorized: authorized2,
            lockup: maybeLockup
          } = params;
          const lockup2 = maybeLockup || Lockup.default;
          const type2 = STAKE_INSTRUCTION_LAYOUTS.Initialize;
          const data = encodeData(type2, {
            authorized: {
              staker: toBuffer(authorized2.staker.toBuffer()),
              withdrawer: toBuffer(authorized2.withdrawer.toBuffer())
            },
            lockup: {
              unixTimestamp: lockup2.unixTimestamp,
              epoch: lockup2.epoch,
              custodian: toBuffer(lockup2.custodian.toBuffer())
            }
          });
          const instructionData = {
            keys: [{
              pubkey: stakePubkey,
              isSigner: false,
              isWritable: true
            }, {
              pubkey: SYSVAR_RENT_PUBKEY,
              isSigner: false,
              isWritable: false
            }],
            programId: this.programId,
            data
          };
          return new TransactionInstruction(instructionData);
        }
        /**
         * Generate a Transaction that creates a new Stake account at
         *   an address generated with `from`, a seed, and the Stake programId
         */
        static createAccountWithSeed(params) {
          const transaction = new Transaction2();
          transaction.add(SystemProgram.createAccountWithSeed({
            fromPubkey: params.fromPubkey,
            newAccountPubkey: params.stakePubkey,
            basePubkey: params.basePubkey,
            seed: params.seed,
            lamports: params.lamports,
            space: this.space,
            programId: this.programId
          }));
          const {
            stakePubkey,
            authorized: authorized2,
            lockup: lockup2
          } = params;
          return transaction.add(this.initialize({
            stakePubkey,
            authorized: authorized2,
            lockup: lockup2
          }));
        }
        /**
         * Generate a Transaction that creates a new Stake account
         */
        static createAccount(params) {
          const transaction = new Transaction2();
          transaction.add(SystemProgram.createAccount({
            fromPubkey: params.fromPubkey,
            newAccountPubkey: params.stakePubkey,
            lamports: params.lamports,
            space: this.space,
            programId: this.programId
          }));
          const {
            stakePubkey,
            authorized: authorized2,
            lockup: lockup2
          } = params;
          return transaction.add(this.initialize({
            stakePubkey,
            authorized: authorized2,
            lockup: lockup2
          }));
        }
        /**
         * Generate a Transaction that delegates Stake tokens to a validator
         * Vote PublicKey. This transaction can also be used to redelegate Stake
         * to a new validator Vote PublicKey.
         */
        static delegate(params) {
          const {
            stakePubkey,
            authorizedPubkey,
            votePubkey
          } = params;
          const type2 = STAKE_INSTRUCTION_LAYOUTS.Delegate;
          const data = encodeData(type2);
          return new Transaction2().add({
            keys: [{
              pubkey: stakePubkey,
              isSigner: false,
              isWritable: true
            }, {
              pubkey: votePubkey,
              isSigner: false,
              isWritable: false
            }, {
              pubkey: SYSVAR_CLOCK_PUBKEY,
              isSigner: false,
              isWritable: false
            }, {
              pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,
              isSigner: false,
              isWritable: false
            }, {
              pubkey: STAKE_CONFIG_ID,
              isSigner: false,
              isWritable: false
            }, {
              pubkey: authorizedPubkey,
              isSigner: true,
              isWritable: false
            }],
            programId: this.programId,
            data
          });
        }
        /**
         * Generate a Transaction that authorizes a new PublicKey as Staker
         * or Withdrawer on the Stake account.
         */
        static authorize(params) {
          const {
            stakePubkey,
            authorizedPubkey,
            newAuthorizedPubkey,
            stakeAuthorizationType,
            custodianPubkey
          } = params;
          const type2 = STAKE_INSTRUCTION_LAYOUTS.Authorize;
          const data = encodeData(type2, {
            newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),
            stakeAuthorizationType: stakeAuthorizationType.index
          });
          const keys = [{
            pubkey: stakePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: SYSVAR_CLOCK_PUBKEY,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: authorizedPubkey,
            isSigner: true,
            isWritable: false
          }];
          if (custodianPubkey) {
            keys.push({
              pubkey: custodianPubkey,
              isSigner: true,
              isWritable: false
            });
          }
          return new Transaction2().add({
            keys,
            programId: this.programId,
            data
          });
        }
        /**
         * Generate a Transaction that authorizes a new PublicKey as Staker
         * or Withdrawer on the Stake account.
         */
        static authorizeWithSeed(params) {
          const {
            stakePubkey,
            authorityBase,
            authoritySeed,
            authorityOwner,
            newAuthorizedPubkey,
            stakeAuthorizationType,
            custodianPubkey
          } = params;
          const type2 = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;
          const data = encodeData(type2, {
            newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),
            stakeAuthorizationType: stakeAuthorizationType.index,
            authoritySeed,
            authorityOwner: toBuffer(authorityOwner.toBuffer())
          });
          const keys = [{
            pubkey: stakePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: authorityBase,
            isSigner: true,
            isWritable: false
          }, {
            pubkey: SYSVAR_CLOCK_PUBKEY,
            isSigner: false,
            isWritable: false
          }];
          if (custodianPubkey) {
            keys.push({
              pubkey: custodianPubkey,
              isSigner: true,
              isWritable: false
            });
          }
          return new Transaction2().add({
            keys,
            programId: this.programId,
            data
          });
        }
        /**
         * @internal
         */
        static splitInstruction(params) {
          const {
            stakePubkey,
            authorizedPubkey,
            splitStakePubkey,
            lamports
          } = params;
          const type2 = STAKE_INSTRUCTION_LAYOUTS.Split;
          const data = encodeData(type2, {
            lamports
          });
          return new TransactionInstruction({
            keys: [{
              pubkey: stakePubkey,
              isSigner: false,
              isWritable: true
            }, {
              pubkey: splitStakePubkey,
              isSigner: false,
              isWritable: true
            }, {
              pubkey: authorizedPubkey,
              isSigner: true,
              isWritable: false
            }],
            programId: this.programId,
            data
          });
        }
        /**
         * Generate a Transaction that splits Stake tokens into another stake account
         */
        static split(params, rentExemptReserve) {
          const transaction = new Transaction2();
          transaction.add(SystemProgram.createAccount({
            fromPubkey: params.authorizedPubkey,
            newAccountPubkey: params.splitStakePubkey,
            lamports: rentExemptReserve,
            space: this.space,
            programId: this.programId
          }));
          return transaction.add(this.splitInstruction(params));
        }
        /**
         * Generate a Transaction that splits Stake tokens into another account
         * derived from a base public key and seed
         */
        static splitWithSeed(params, rentExemptReserve) {
          const {
            stakePubkey,
            authorizedPubkey,
            splitStakePubkey,
            basePubkey,
            seed,
            lamports
          } = params;
          const transaction = new Transaction2();
          transaction.add(SystemProgram.allocate({
            accountPubkey: splitStakePubkey,
            basePubkey,
            seed,
            space: this.space,
            programId: this.programId
          }));
          if (rentExemptReserve && rentExemptReserve > 0) {
            transaction.add(SystemProgram.transfer({
              fromPubkey: params.authorizedPubkey,
              toPubkey: splitStakePubkey,
              lamports: rentExemptReserve
            }));
          }
          return transaction.add(this.splitInstruction({
            stakePubkey,
            authorizedPubkey,
            splitStakePubkey,
            lamports
          }));
        }
        /**
         * Generate a Transaction that merges Stake accounts.
         */
        static merge(params) {
          const {
            stakePubkey,
            sourceStakePubKey,
            authorizedPubkey
          } = params;
          const type2 = STAKE_INSTRUCTION_LAYOUTS.Merge;
          const data = encodeData(type2);
          return new Transaction2().add({
            keys: [{
              pubkey: stakePubkey,
              isSigner: false,
              isWritable: true
            }, {
              pubkey: sourceStakePubKey,
              isSigner: false,
              isWritable: true
            }, {
              pubkey: SYSVAR_CLOCK_PUBKEY,
              isSigner: false,
              isWritable: false
            }, {
              pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,
              isSigner: false,
              isWritable: false
            }, {
              pubkey: authorizedPubkey,
              isSigner: true,
              isWritable: false
            }],
            programId: this.programId,
            data
          });
        }
        /**
         * Generate a Transaction that withdraws deactivated Stake tokens.
         */
        static withdraw(params) {
          const {
            stakePubkey,
            authorizedPubkey,
            toPubkey,
            lamports,
            custodianPubkey
          } = params;
          const type2 = STAKE_INSTRUCTION_LAYOUTS.Withdraw;
          const data = encodeData(type2, {
            lamports
          });
          const keys = [{
            pubkey: stakePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: toPubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: SYSVAR_CLOCK_PUBKEY,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: authorizedPubkey,
            isSigner: true,
            isWritable: false
          }];
          if (custodianPubkey) {
            keys.push({
              pubkey: custodianPubkey,
              isSigner: true,
              isWritable: false
            });
          }
          return new Transaction2().add({
            keys,
            programId: this.programId,
            data
          });
        }
        /**
         * Generate a Transaction that deactivates Stake tokens.
         */
        static deactivate(params) {
          const {
            stakePubkey,
            authorizedPubkey
          } = params;
          const type2 = STAKE_INSTRUCTION_LAYOUTS.Deactivate;
          const data = encodeData(type2);
          return new Transaction2().add({
            keys: [{
              pubkey: stakePubkey,
              isSigner: false,
              isWritable: true
            }, {
              pubkey: SYSVAR_CLOCK_PUBKEY,
              isSigner: false,
              isWritable: false
            }, {
              pubkey: authorizedPubkey,
              isSigner: true,
              isWritable: false
            }],
            programId: this.programId,
            data
          });
        }
      };
      StakeProgram.programId = new PublicKey("Stake11111111111111111111111111111111111111");
      StakeProgram.space = 200;
      VOTE_INSTRUCTION_LAYOUTS = Object.freeze({
        InitializeAccount: {
          index: 0,
          layout: BufferLayout.struct([BufferLayout.u32("instruction"), voteInit()])
        },
        Authorize: {
          index: 1,
          layout: BufferLayout.struct([BufferLayout.u32("instruction"), publicKey("newAuthorized"), BufferLayout.u32("voteAuthorizationType")])
        },
        Withdraw: {
          index: 3,
          layout: BufferLayout.struct([BufferLayout.u32("instruction"), BufferLayout.ns64("lamports")])
        },
        UpdateValidatorIdentity: {
          index: 4,
          layout: BufferLayout.struct([BufferLayout.u32("instruction")])
        },
        AuthorizeWithSeed: {
          index: 10,
          layout: BufferLayout.struct([BufferLayout.u32("instruction"), voteAuthorizeWithSeedArgs()])
        }
      });
      VoteAuthorizationLayout = Object.freeze({
        Voter: {
          index: 0
        },
        Withdrawer: {
          index: 1
        }
      });
      VoteProgram = class _VoteProgram {
        /**
         * @internal
         */
        constructor() {
        }
        /**
         * Public key that identifies the Vote program
         */
        /**
         * Generate an Initialize instruction.
         */
        static initializeAccount(params) {
          const {
            votePubkey,
            nodePubkey,
            voteInit: voteInit2
          } = params;
          const type2 = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;
          const data = encodeData(type2, {
            voteInit: {
              nodePubkey: toBuffer(voteInit2.nodePubkey.toBuffer()),
              authorizedVoter: toBuffer(voteInit2.authorizedVoter.toBuffer()),
              authorizedWithdrawer: toBuffer(voteInit2.authorizedWithdrawer.toBuffer()),
              commission: voteInit2.commission
            }
          });
          const instructionData = {
            keys: [{
              pubkey: votePubkey,
              isSigner: false,
              isWritable: true
            }, {
              pubkey: SYSVAR_RENT_PUBKEY,
              isSigner: false,
              isWritable: false
            }, {
              pubkey: SYSVAR_CLOCK_PUBKEY,
              isSigner: false,
              isWritable: false
            }, {
              pubkey: nodePubkey,
              isSigner: true,
              isWritable: false
            }],
            programId: this.programId,
            data
          };
          return new TransactionInstruction(instructionData);
        }
        /**
         * Generate a transaction that creates a new Vote account.
         */
        static createAccount(params) {
          const transaction = new Transaction2();
          transaction.add(SystemProgram.createAccount({
            fromPubkey: params.fromPubkey,
            newAccountPubkey: params.votePubkey,
            lamports: params.lamports,
            space: this.space,
            programId: this.programId
          }));
          return transaction.add(this.initializeAccount({
            votePubkey: params.votePubkey,
            nodePubkey: params.voteInit.nodePubkey,
            voteInit: params.voteInit
          }));
        }
        /**
         * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.
         */
        static authorize(params) {
          const {
            votePubkey,
            authorizedPubkey,
            newAuthorizedPubkey,
            voteAuthorizationType
          } = params;
          const type2 = VOTE_INSTRUCTION_LAYOUTS.Authorize;
          const data = encodeData(type2, {
            newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),
            voteAuthorizationType: voteAuthorizationType.index
          });
          const keys = [{
            pubkey: votePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: SYSVAR_CLOCK_PUBKEY,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: authorizedPubkey,
            isSigner: true,
            isWritable: false
          }];
          return new Transaction2().add({
            keys,
            programId: this.programId,
            data
          });
        }
        /**
         * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account
         * where the current Voter or Withdrawer authority is a derived key.
         */
        static authorizeWithSeed(params) {
          const {
            currentAuthorityDerivedKeyBasePubkey,
            currentAuthorityDerivedKeyOwnerPubkey,
            currentAuthorityDerivedKeySeed,
            newAuthorizedPubkey,
            voteAuthorizationType,
            votePubkey
          } = params;
          const type2 = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;
          const data = encodeData(type2, {
            voteAuthorizeWithSeedArgs: {
              currentAuthorityDerivedKeyOwnerPubkey: toBuffer(currentAuthorityDerivedKeyOwnerPubkey.toBuffer()),
              currentAuthorityDerivedKeySeed,
              newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),
              voteAuthorizationType: voteAuthorizationType.index
            }
          });
          const keys = [{
            pubkey: votePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: SYSVAR_CLOCK_PUBKEY,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: currentAuthorityDerivedKeyBasePubkey,
            isSigner: true,
            isWritable: false
          }];
          return new Transaction2().add({
            keys,
            programId: this.programId,
            data
          });
        }
        /**
         * Generate a transaction to withdraw from a Vote account.
         */
        static withdraw(params) {
          const {
            votePubkey,
            authorizedWithdrawerPubkey,
            lamports,
            toPubkey
          } = params;
          const type2 = VOTE_INSTRUCTION_LAYOUTS.Withdraw;
          const data = encodeData(type2, {
            lamports
          });
          const keys = [{
            pubkey: votePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: toPubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: authorizedWithdrawerPubkey,
            isSigner: true,
            isWritable: false
          }];
          return new Transaction2().add({
            keys,
            programId: this.programId,
            data
          });
        }
        /**
         * Generate a transaction to withdraw safely from a Vote account.
         *
         * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`
         * checks that the withdraw amount will not exceed the specified balance while leaving enough left
         * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the
         * `withdraw` method directly.
         */
        static safeWithdraw(params, currentVoteAccountBalance, rentExemptMinimum) {
          if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {
            throw new Error("Withdraw will leave vote account with insufficient funds.");
          }
          return _VoteProgram.withdraw(params);
        }
        /**
         * Generate a transaction to update the validator identity (node pubkey) of a Vote account.
         */
        static updateValidatorIdentity(params) {
          const {
            votePubkey,
            authorizedWithdrawerPubkey,
            nodePubkey
          } = params;
          const type2 = VOTE_INSTRUCTION_LAYOUTS.UpdateValidatorIdentity;
          const data = encodeData(type2);
          const keys = [{
            pubkey: votePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: nodePubkey,
            isSigner: true,
            isWritable: false
          }, {
            pubkey: authorizedWithdrawerPubkey,
            isSigner: true,
            isWritable: false
          }];
          return new Transaction2().add({
            keys,
            programId: this.programId,
            data
          });
        }
      };
      VoteProgram.programId = new PublicKey("Vote111111111111111111111111111111111111111");
      VoteProgram.space = 3762;
      VALIDATOR_INFO_KEY = new PublicKey("Va1idator1nfo111111111111111111111111111111");
      InfoString = type({
        name: string(),
        website: optional(string()),
        details: optional(string()),
        iconUrl: optional(string()),
        keybaseUsername: optional(string())
      });
      VOTE_PROGRAM_ID = new PublicKey("Vote111111111111111111111111111111111111111");
      VoteAccountLayout = BufferLayout.struct([
        publicKey("nodePubkey"),
        publicKey("authorizedWithdrawer"),
        BufferLayout.u8("commission"),
        BufferLayout.nu64(),
        // votes.length
        BufferLayout.seq(BufferLayout.struct([BufferLayout.nu64("slot"), BufferLayout.u32("confirmationCount")]), BufferLayout.offset(BufferLayout.u32(), -8), "votes"),
        BufferLayout.u8("rootSlotValid"),
        BufferLayout.nu64("rootSlot"),
        BufferLayout.nu64(),
        // authorizedVoters.length
        BufferLayout.seq(BufferLayout.struct([BufferLayout.nu64("epoch"), publicKey("authorizedVoter")]), BufferLayout.offset(BufferLayout.u32(), -8), "authorizedVoters"),
        BufferLayout.struct([BufferLayout.seq(BufferLayout.struct([publicKey("authorizedPubkey"), BufferLayout.nu64("epochOfLastAuthorizedSwitch"), BufferLayout.nu64("targetEpoch")]), 32, "buf"), BufferLayout.nu64("idx"), BufferLayout.u8("isEmpty")], "priorVoters"),
        BufferLayout.nu64(),
        // epochCredits.length
        BufferLayout.seq(BufferLayout.struct([BufferLayout.nu64("epoch"), BufferLayout.nu64("credits"), BufferLayout.nu64("prevCredits")]), BufferLayout.offset(BufferLayout.u32(), -8), "epochCredits"),
        BufferLayout.struct([BufferLayout.nu64("slot"), BufferLayout.nu64("timestamp")], "lastTimestamp")
      ]);
    }
  });

  // node_modules/@meshconnect/web-link-sdk/utils/connectors/solana/transaction.js
  function getAssociatedTokenAddress(mint, owner) {
    return __awaiter7(this, void 0, void 0, function() {
      var address;
      return __generator7(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            return [4, PublicKey.findProgramAddress([owner.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()], ASSOCIATED_TOKEN_PROGRAM_ID)];
          case 1:
            address = _a2.sent()[0];
            return [2, address];
        }
      });
    });
  }
  function createSPLTransferInstruction(_a2) {
    var fromTokenAccount = _a2.fromTokenAccount, toTokenAccount = _a2.toTokenAccount, owner = _a2.owner, amount = _a2.amount;
    var data = Buffer.alloc(9);
    data[0] = 3;
    data.writeBigUInt64LE(amount, 1);
    return new TransactionInstruction({
      keys: [
        { pubkey: fromTokenAccount, isSigner: false, isWritable: true },
        { pubkey: toTokenAccount, isSigner: false, isWritable: true },
        { pubkey: owner, isSigner: true, isWritable: false }
      ],
      programId: TOKEN_PROGRAM_ID,
      data
    });
  }
  function createTransferTransaction(config) {
    return __awaiter7(this, void 0, void 0, function() {
      var fromPubkey, toPubkey, instruction, tokenMintPubkey, fromTokenAccount, toTokenAccount, messageV0;
      return __generator7(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            fromPubkey = new PublicKey(config.fromAddress);
            toPubkey = new PublicKey(config.toAddress);
            if (!!config.tokenMint) return [3, 1];
            instruction = SystemProgram.transfer({
              fromPubkey,
              toPubkey,
              lamports: Number(config.amount)
            });
            return [3, 4];
          case 1:
            tokenMintPubkey = new PublicKey(config.tokenMint);
            return [4, getAssociatedTokenAddress(tokenMintPubkey, fromPubkey)];
          case 2:
            fromTokenAccount = _a2.sent();
            return [4, getAssociatedTokenAddress(tokenMintPubkey, toPubkey)];
          case 3:
            toTokenAccount = _a2.sent();
            instruction = createSPLTransferInstruction({
              fromTokenAccount,
              toTokenAccount,
              owner: fromPubkey,
              amount: BigInt(config.amount)
            });
            _a2.label = 4;
          case 4:
            messageV0 = new TransactionMessage({
              payerKey: fromPubkey,
              recentBlockhash: config.blockhash,
              instructions: [instruction]
            }).compileToV0Message();
            return [2, new VersionedTransaction(messageV0)];
        }
      });
    });
  }
  function handleManualSignAndSend(transaction, provider) {
    return __awaiter7(this, void 0, void 0, function() {
      var signature2, signedTransaction, signature2, error_1;
      var _a2;
      return __generator7(this, function(_b) {
        switch (_b.label) {
          case 0:
            _b.trys.push([0, 6, , 7]);
            if (!provider.signAndSendTransaction) return [3, 2];
            return [4, provider.signAndSendTransaction(transaction)];
          case 1:
            signature2 = _b.sent().signature;
            return [2, signature2];
          case 2:
            return [4, provider.signTransaction(transaction)];
          case 3:
            signedTransaction = _b.sent();
            if (!provider.sendTransaction) {
              throw new Error("Provider does not support sendTransaction");
            }
            return [4, provider.sendTransaction(signedTransaction)];
          case 4:
            signature2 = _b.sent();
            return [2, signature2];
          case 5:
            return [3, 7];
          case 6:
            error_1 = _b.sent();
            console.error("Error in handleManualSignAndSend:", error_1);
            if (error_1 instanceof Error && ((_a2 = error_1.message) === null || _a2 === void 0 ? void 0 : _a2.includes("User rejected"))) {
              throw new Error("Transaction was rejected by user");
            }
            throw error_1;
          case 7:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }
  var __awaiter7, __generator7, TOKEN_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID, isUserRejection3, sendSOLTransaction;
  var init_transaction3 = __esm({
    "node_modules/@meshconnect/web-link-sdk/utils/connectors/solana/transaction.js"() {
      init_index_browser_esm();
      init_providerDiscovery();
      __awaiter7 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator7 = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1) throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f3, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
        return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n2) {
          return function(v) {
            return step([n2, v]);
          };
        }
        function step(op) {
          if (f3) throw new TypeError("Generator is already executing.");
          while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f3 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2]) _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f3 = t = 0;
          }
          if (op[0] & 5) throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      TOKEN_PROGRAM_ID = new PublicKey("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA");
      ASSOCIATED_TOKEN_PROGRAM_ID = new PublicKey("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL");
      isUserRejection3 = function(error) {
        if (!error || typeof error !== "object")
          return false;
        var err = error;
        var message = (err.message || "").toLowerCase();
        return message.includes("user rejected") || message.includes("declined") || message.includes("cancelled") || message.includes("denied") || err.code === 4001;
      };
      sendSOLTransaction = function(config) {
        return __awaiter7(void 0, void 0, void 0, function() {
          var provider, transaction, isManualWallet, signature2, error_2, error_3;
          return __generator7(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                _a2.trys.push([0, 8, , 9]);
                provider = getSolanaProvider(config.walletName);
                return [4, createTransferTransaction(config)];
              case 1:
                transaction = _a2.sent();
                isManualWallet = provider.isTrust || provider.isTrustWallet || config.walletName.toLowerCase().includes("trust");
                if (!isManualWallet) return [3, 3];
                return [4, handleManualSignAndSend(transaction, provider)];
              case 2:
                return [2, _a2.sent()];
              case 3:
                if (!provider.signAndSendTransaction) return [3, 7];
                _a2.label = 4;
              case 4:
                _a2.trys.push([4, 6, , 7]);
                return [4, provider.signAndSendTransaction(transaction)];
              case 5:
                signature2 = _a2.sent().signature;
                return [2, signature2];
              case 6:
                error_2 = _a2.sent();
                if (isUserRejection3(error_2)) {
                  throw new Error("Transaction was rejected by user");
                }
                return [2, handleManualSignAndSend(transaction, provider)];
              case 7:
                return [2, handleManualSignAndSend(transaction, provider)];
              case 8:
                error_3 = _a2.sent();
                if (isUserRejection3(error_3)) {
                  throw new Error("Transaction was rejected by user");
                }
                throw error_3 instanceof Error ? error_3 : new Error("Failed to send SOL transaction with ".concat(config.walletName, " wallet"));
              case 9:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
    }
  });

  // node_modules/base-x/src/index.js
  var require_src3 = __commonJS({
    "node_modules/base-x/src/index.js"(exports, module) {
      "use strict";
      function base(ALPHABET) {
        if (ALPHABET.length >= 255) {
          throw new TypeError("Alphabet too long");
        }
        var BASE_MAP = new Uint8Array(256);
        for (var j = 0; j < BASE_MAP.length; j++) {
          BASE_MAP[j] = 255;
        }
        for (var i = 0; i < ALPHABET.length; i++) {
          var x = ALPHABET.charAt(i);
          var xc = x.charCodeAt(0);
          if (BASE_MAP[xc] !== 255) {
            throw new TypeError(x + " is ambiguous");
          }
          BASE_MAP[xc] = i;
        }
        var BASE = ALPHABET.length;
        var LEADER = ALPHABET.charAt(0);
        var FACTOR = Math.log(BASE) / Math.log(256);
        var iFACTOR = Math.log(256) / Math.log(BASE);
        function encode(source) {
          if (source instanceof Uint8Array) {
          } else if (ArrayBuffer.isView(source)) {
            source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
          } else if (Array.isArray(source)) {
            source = Uint8Array.from(source);
          }
          if (!(source instanceof Uint8Array)) {
            throw new TypeError("Expected Uint8Array");
          }
          if (source.length === 0) {
            return "";
          }
          var zeroes = 0;
          var length = 0;
          var pbegin = 0;
          var pend = source.length;
          while (pbegin !== pend && source[pbegin] === 0) {
            pbegin++;
            zeroes++;
          }
          var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
          var b58 = new Uint8Array(size);
          while (pbegin !== pend) {
            var carry = source[pbegin];
            var i2 = 0;
            for (var it1 = size - 1; (carry !== 0 || i2 < length) && it1 !== -1; it1--, i2++) {
              carry += 256 * b58[it1] >>> 0;
              b58[it1] = carry % BASE >>> 0;
              carry = carry / BASE >>> 0;
            }
            if (carry !== 0) {
              throw new Error("Non-zero carry");
            }
            length = i2;
            pbegin++;
          }
          var it2 = size - length;
          while (it2 !== size && b58[it2] === 0) {
            it2++;
          }
          var str = LEADER.repeat(zeroes);
          for (; it2 < size; ++it2) {
            str += ALPHABET.charAt(b58[it2]);
          }
          return str;
        }
        function decodeUnsafe(source) {
          if (typeof source !== "string") {
            throw new TypeError("Expected String");
          }
          if (source.length === 0) {
            return new Uint8Array();
          }
          var psz = 0;
          var zeroes = 0;
          var length = 0;
          while (source[psz] === LEADER) {
            zeroes++;
            psz++;
          }
          var size = (source.length - psz) * FACTOR + 1 >>> 0;
          var b256 = new Uint8Array(size);
          while (source[psz]) {
            var charCode = source.charCodeAt(psz);
            if (charCode > 255) {
              return;
            }
            var carry = BASE_MAP[charCode];
            if (carry === 255) {
              return;
            }
            var i2 = 0;
            for (var it3 = size - 1; (carry !== 0 || i2 < length) && it3 !== -1; it3--, i2++) {
              carry += BASE * b256[it3] >>> 0;
              b256[it3] = carry % 256 >>> 0;
              carry = carry / 256 >>> 0;
            }
            if (carry !== 0) {
              throw new Error("Non-zero carry");
            }
            length = i2;
            psz++;
          }
          var it4 = size - length;
          while (it4 !== size && b256[it4] === 0) {
            it4++;
          }
          var vch = new Uint8Array(zeroes + (size - it4));
          var j2 = zeroes;
          while (it4 !== size) {
            vch[j2++] = b256[it4++];
          }
          return vch;
        }
        function decode2(string2) {
          var buffer = decodeUnsafe(string2);
          if (buffer) {
            return buffer;
          }
          throw new Error("Non-base" + BASE + " character");
        }
        return {
          encode,
          decodeUnsafe,
          decode: decode2
        };
      }
      module.exports = base;
    }
  });

  // node_modules/bs58/index.js
  var require_bs583 = __commonJS({
    "node_modules/bs58/index.js"(exports, module) {
      var basex = require_src3();
      var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
      module.exports = basex(ALPHABET);
    }
  });

  // node_modules/@meshconnect/web-link-sdk/utils/connectors/solana/signing.js
  var import_bs582, __awaiter8, __generator8, signSolanaMessage;
  var init_signing2 = __esm({
    "node_modules/@meshconnect/web-link-sdk/utils/connectors/solana/signing.js"() {
      import_bs582 = __toESM(require_bs583());
      init_providerDiscovery();
      __awaiter8 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator8 = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1) throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f3, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
        return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n2) {
          return function(v) {
            return step([n2, v]);
          };
        }
        function step(op) {
          if (f3) throw new TypeError("Generator is already executing.");
          while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f3 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2]) _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f3 = t = 0;
          }
          if (op[0] & 5) throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      signSolanaMessage = function(walletName, message) {
        return __awaiter8(void 0, void 0, void 0, function() {
          var provider, messageBytes, signedMessage, error_1;
          return __generator8(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                _a2.trys.push([0, 2, , 3]);
                provider = getSolanaProvider(walletName);
                messageBytes = new TextEncoder().encode(message);
                return [4, provider.signMessage(messageBytes)];
              case 1:
                signedMessage = _a2.sent();
                return [2, import_bs582.default.encode(signedMessage.signature)];
              case 2:
                error_1 = _a2.sent();
                return [2, error_1 instanceof Error ? error_1 : new Error("Failed to sign message with ".concat(walletName, " wallet"))];
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
    }
  });

  // node_modules/@meshconnect/web-link-sdk/utils/connectors/solana/index.js
  var init_solana = __esm({
    "node_modules/@meshconnect/web-link-sdk/utils/connectors/solana/index.js"() {
      init_types3();
      init_providerDiscovery();
      init_connection();
      init_transaction3();
      init_signing2();
    }
  });

  // node_modules/@meshconnect/web-link-sdk/utils/wallet/SolanaWalletStrategy.js
  var __extends2, __awaiter9, __generator9, SolanaWalletStrategy;
  var init_SolanaWalletStrategy = __esm({
    "node_modules/@meshconnect/web-link-sdk/utils/wallet/SolanaWalletStrategy.js"() {
      init_WalletStrategy();
      init_solana();
      __extends2 = /* @__PURE__ */ function() {
        var extendStatics = function(d, b2) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b3) {
            d2.__proto__ = b3;
          } || function(d2, b3) {
            for (var p in b3) if (Object.prototype.hasOwnProperty.call(b3, p)) d2[p] = b3[p];
          };
          return extendStatics(d, b2);
        };
        return function(d, b2) {
          if (typeof b2 !== "function" && b2 !== null)
            throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
          extendStatics(d, b2);
          function __() {
            this.constructor = d;
          }
          d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
      }();
      __awaiter9 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator9 = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1) throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f3, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
        return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n2) {
          return function(v) {
            return step([n2, v]);
          };
        }
        function step(op) {
          if (f3) throw new TypeError("Generator is already executing.");
          while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f3 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2]) _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f3 = t = 0;
          }
          if (op[0] & 5) throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      SolanaWalletStrategy = /** @class */
      function(_super) {
        __extends2(SolanaWalletStrategy2, _super);
        function SolanaWalletStrategy2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        SolanaWalletStrategy2.prototype.connect = function(payload) {
          return __awaiter9(this, void 0, void 0, function() {
            var result, error_1;
            return __generator9(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  _a2.trys.push([0, 2, , 3]);
                  return [4, connectToSolanaWallet(payload.integrationName)];
                case 1:
                  result = _a2.sent();
                  if (result instanceof Error) {
                    throw result;
                  }
                  return [2, {
                    accounts: result.accounts,
                    chainId: result.chainId,
                    isConnected: result.isConnected
                  }];
                case 2:
                  error_1 = _a2.sent();
                  throw this.handleError(error_1, "connect to Solana wallet");
                case 3:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        SolanaWalletStrategy2.prototype.disconnect = function(payload) {
          return __awaiter9(this, void 0, void 0, function() {
            var result, error_2;
            return __generator9(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  _a2.trys.push([0, 2, , 3]);
                  return [4, disconnectFromSolanaWallet(payload.walletName || "Unknown Wallet")];
                case 1:
                  result = _a2.sent();
                  if (result instanceof Error) {
                    throw result;
                  }
                  return [3, 3];
                case 2:
                  error_2 = _a2.sent();
                  throw this.handleError(error_2, "disconnect from Solana wallet");
                case 3:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        SolanaWalletStrategy2.prototype.signMessage = function(payload) {
          return __awaiter9(this, void 0, void 0, function() {
            var result, error_3;
            return __generator9(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  _a2.trys.push([0, 2, , 3]);
                  return [4, signSolanaMessage(payload.walletName || "Unknown Wallet", payload.message)];
                case 1:
                  result = _a2.sent();
                  if (result instanceof Error) {
                    throw result;
                  }
                  return [2, result];
                case 2:
                  error_3 = _a2.sent();
                  throw this.handleError(error_3, "sign Solana message");
                case 3:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        SolanaWalletStrategy2.prototype.switchChain = function(_payload) {
          return __awaiter9(this, void 0, void 0, function() {
            return __generator9(this, function(_a2) {
              return [2, {
                chainId: "101",
                accounts: []
              }];
            });
          });
        };
        SolanaWalletStrategy2.prototype.sendNativeTransfer = function(payload) {
          return __awaiter9(this, void 0, void 0, function() {
            var result, error_4;
            return __generator9(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  _a2.trys.push([0, 2, , 3]);
                  return [4, sendSOLTransaction({
                    toAddress: payload.toAddress,
                    amount: BigInt(payload.amount * Math.pow(10, payload.decimalPlaces)),
                    fromAddress: payload.account,
                    blockhash: payload.blockhash || "",
                    walletName: payload.walletName || ""
                  })];
                case 1:
                  result = _a2.sent();
                  if (typeof result === "string") {
                    return [2, result];
                  }
                  throw result;
                case 2:
                  error_4 = _a2.sent();
                  throw this.handleError(error_4, "send Solana native transfer");
                case 3:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        SolanaWalletStrategy2.prototype.sendSmartContractInteraction = function(payload) {
          return __awaiter9(this, void 0, void 0, function() {
            var provider, senderAddress, _a2, decimals, rawAmount, scaledAmount;
            var _b;
            return __generator9(this, function(_c) {
              switch (_c.label) {
                case 0:
                  provider = getSolanaProvider(payload.walletName || "");
                  _a2 = payload.account;
                  if (_a2) return [3, 2];
                  return [4, (_b = provider.publicKey) === null || _b === void 0 ? void 0 : _b.toString()];
                case 1:
                  _a2 = _c.sent();
                  _c.label = 2;
                case 2:
                  senderAddress = _a2;
                  if (!senderAddress) {
                    throw new Error("Sender account address is required");
                  }
                  decimals = payload.args[2] || 6;
                  rawAmount = payload.args[1];
                  scaledAmount = rawAmount;
                  if (!payload.blockhash) {
                    throw new Error("Blockhash is required for Solana transactions");
                  }
                  return [4, sendSOLTransaction({
                    toAddress: payload.args[0],
                    amount: scaledAmount,
                    fromAddress: senderAddress,
                    blockhash: payload.blockhash,
                    walletName: payload.walletName || "",
                    tokenMint: payload.address,
                    tokenDecimals: decimals
                  })];
                case 3:
                  return [2, _c.sent()];
              }
            });
          });
        };
        SolanaWalletStrategy2.prototype.getProviders = function() {
          var solanaProviderMap = findAvailableSolanaProviders();
          return Object.keys(solanaProviderMap).map(function(id2) {
            return {
              id: id2,
              type: "solana"
            };
          });
        };
        return SolanaWalletStrategy2;
      }(BaseWalletStrategy);
    }
  });

  // node_modules/@meshconnect/web-link-sdk/utils/wallet/WalletStrategyFactory.js
  var WalletStrategyFactory;
  var init_WalletStrategyFactory = __esm({
    "node_modules/@meshconnect/web-link-sdk/utils/wallet/WalletStrategyFactory.js"() {
      init_EVMWalletStrategy();
      init_SolanaWalletStrategy();
      WalletStrategyFactory = /** @class */
      function() {
        function WalletStrategyFactory2() {
          this.strategies = /* @__PURE__ */ new Map();
          this.strategies.set("evm", new EVMWalletStrategy());
          this.strategies.set("solana", new SolanaWalletStrategy());
        }
        WalletStrategyFactory2.getInstance = function() {
          if (!WalletStrategyFactory2.instance) {
            WalletStrategyFactory2.instance = new WalletStrategyFactory2();
          }
          return WalletStrategyFactory2.instance;
        };
        WalletStrategyFactory2.prototype.getStrategy = function(networkType) {
          var strategy = this.strategies.get(networkType);
          if (!strategy) {
            throw new Error("No strategy found for network type: ".concat(networkType));
          }
          return strategy;
        };
        WalletStrategyFactory2.prototype.getAllProviders = function() {
          var allProviders = [];
          this.strategies.forEach(function(strategy) {
            allProviders.push.apply(allProviders, strategy.getProviders());
          });
          return allProviders;
        };
        return WalletStrategyFactory2;
      }();
    }
  });

  // node_modules/@meshconnect/web-link-sdk/utils/wallet/index.js
  var init_wallet3 = __esm({
    "node_modules/@meshconnect/web-link-sdk/utils/wallet/index.js"() {
      init_WalletStrategy();
      init_EVMWalletStrategy();
      init_SolanaWalletStrategy();
      init_WalletStrategyFactory();
    }
  });

  // node_modules/@meshconnect/web-link-sdk/Link.js
  function sendMessageToIframe(message) {
    var _a2;
    var iframe = iframeElement();
    if (!iframe) {
      console.warn("Mesh SDK: Failed to deliver ".concat(message.type, " message to the iframe - no iframe element found"));
      return;
    }
    if (!linkTokenOrigin) {
      console.warn("Mesh SDK: Failed to deliver ".concat(message.type, " message to the iframe - no link token origin found"));
      return;
    }
    try {
      (_a2 = iframe.contentWindow) === null || _a2 === void 0 ? void 0 : _a2.postMessage(message, linkTokenOrigin);
    } catch (e) {
      console.error("Mesh SDK: Failed to deliver ".concat(message.type, " message to the iframe"));
      console.error(e);
    }
  }
  function handleLinkEvent(event) {
    return __awaiter10(this, void 0, void 0, function() {
      var payload, payload, payload, payload, walletFactory, allProviders;
      var _a2, _b, _c, _d, _e, _f, _g, _h, _j, _k;
      return __generator10(this, function(_l) {
        switch (event.data.type) {
          case "brokerageAccountAccessToken": {
            payload = {
              accessToken: event.data.payload
            };
            (_a2 = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.onEvent) === null || _a2 === void 0 ? void 0 : _a2.call(currentOptions, {
              type: "integrationConnected",
              payload
            });
            (_b = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.onIntegrationConnected) === null || _b === void 0 ? void 0 : _b.call(currentOptions, payload);
            break;
          }
          case "delayedAuthentication": {
            payload = {
              delayedAuth: event.data.payload
            };
            (_c = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.onEvent) === null || _c === void 0 ? void 0 : _c.call(currentOptions, {
              type: "integrationConnected",
              payload
            });
            (_d = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.onIntegrationConnected) === null || _d === void 0 ? void 0 : _d.call(currentOptions, payload);
            break;
          }
          case "transferFinished": {
            payload = event.data.payload;
            (_e = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.onEvent) === null || _e === void 0 ? void 0 : _e.call(currentOptions, {
              type: "transferCompleted",
              payload
            });
            (_f = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.onTransferFinished) === null || _f === void 0 ? void 0 : _f.call(currentOptions, payload);
            break;
          }
          case "close":
          case "done": {
            payload = (_g = event.data) === null || _g === void 0 ? void 0 : _g.payload;
            (_h = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.onExit) === null || _h === void 0 ? void 0 : _h.call(currentOptions, payload === null || payload === void 0 ? void 0 : payload.errorMessage, payload);
            removePopup();
            break;
          }
          case "loaded": {
            sendMessageToIframe({
              type: "meshSDKSpecs",
              payload: __assign({}, sdkSpecs)
            });
            walletFactory = WalletStrategyFactory.getInstance();
            allProviders = walletFactory.getAllProviders();
            sendMessageToIframe({
              type: "SDKinjectedWalletProviders",
              payload: allProviders
            });
            if (currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.accessTokens) {
              sendMessageToIframe({
                type: "frontAccessTokens",
                payload: currentOptions.accessTokens
              });
            }
            if (currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.transferDestinationTokens) {
              sendMessageToIframe({
                type: "frontTransferDestinationTokens",
                payload: currentOptions.transferDestinationTokens
              });
            }
            (_j = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.onEvent) === null || _j === void 0 ? void 0 : _j.call(currentOptions, { type: "pageLoaded" });
            break;
          }
          default: {
            if (isLinkEventTypeKey(event.data.type)) {
              (_k = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.onEvent) === null || _k === void 0 ? void 0 : _k.call(currentOptions, event.data);
            }
            break;
          }
        }
        return [
          2
          /*return*/
        ];
      });
    });
  }
  function handleWalletBrowserEvent(event) {
    return __awaiter10(this, void 0, void 0, function() {
      var walletFactory, _a2, payload, networkType, strategy, result, error_1, payload, networkType, strategy, result, error_2, payload, networkType, strategy, result, error_3, payload, networkType, strategy, result, error_4, payload, getResponseType, networkType, strategy, result, responseType, error_5, errorType, payload, networkType, strategy, error_6;
      var _b;
      return __generator10(this, function(_c) {
        switch (_c.label) {
          case 0:
            walletFactory = WalletStrategyFactory.getInstance();
            _a2 = event.data.type;
            switch (_a2) {
              case "walletBrowserInjectedWalletSelected":
                return [3, 1];
              case "walletBrowserSignRequest":
                return [3, 6];
              case "walletBrowserChainSwitchRequest":
                return [3, 11];
              case "walletBrowserNativeTransferRequest":
                return [3, 16];
              case "walletBrowserNonNativeTransferRequest":
                return [3, 21];
              case "walletBrowserNativeSmartDeposit":
                return [3, 21];
              case "walletBrowserNonNativeSmartDeposit":
                return [3, 21];
              case "walletBrowserDisconnect":
                return [3, 26];
            }
            return [3, 34];
          case 1:
            payload = event.data.payload;
            _c.label = 2;
          case 2:
            _c.trys.push([2, 4, , 5]);
            networkType = ((_b = payload.networkType) === null || _b === void 0 ? void 0 : _b.includes("solana")) ? "solana" : "evm";
            strategy = walletFactory.getStrategy(networkType);
            return [4, strategy.connect(payload)];
          case 3:
            result = _c.sent();
            sendMessageToIframe({
              type: "SDKinjectedConnectionCompleted",
              payload: {
                accounts: result.accounts,
                chainId: result.chainId,
                networkType
              }
            });
            return [3, 5];
          case 4:
            error_1 = _c.sent();
            console.error("Connection error:", error_1);
            handleErrorAndSendMessage(error_1, "SDKinjectedConnectionCompleted");
            return [3, 5];
          case 5:
            return [3, 34];
          case 6:
            payload = event.data.payload;
            _c.label = 7;
          case 7:
            _c.trys.push([7, 9, , 10]);
            networkType = !payload.address.startsWith("0x") ? "solana" : "evm";
            strategy = walletFactory.getStrategy(networkType);
            return [4, strategy.signMessage(payload)];
          case 8:
            result = _c.sent();
            sendMessageToIframe({
              type: "SDKsignRequestCompleted",
              payload: result
            });
            return [3, 10];
          case 9:
            error_2 = _c.sent();
            handleErrorAndSendMessage(error_2, "SDKsignRequestCompleted");
            return [3, 10];
          case 10:
            return [3, 34];
          case 11:
            payload = event.data.payload;
            _c.label = 12;
          case 12:
            _c.trys.push([12, 14, , 15]);
            networkType = payload.networkType === "solana" ? "solana" : "evm";
            strategy = walletFactory.getStrategy(networkType);
            return [4, strategy.switchChain(payload)];
          case 13:
            result = _c.sent();
            sendMessageToIframe({
              type: "SDKswitchChainCompleted",
              payload: {
                chainId: result.chainId,
                accounts: result.accounts,
                networkType
              }
            });
            return [3, 15];
          case 14:
            error_3 = _c.sent();
            console.error("Chain switch failed:", error_3);
            handleErrorAndSendMessage(error_3, "SDKswitchChainCompleted");
            return [3, 15];
          case 15:
            return [3, 34];
          case 16:
            payload = event.data.payload;
            _c.label = 17;
          case 17:
            _c.trys.push([17, 19, , 20]);
            networkType = payload.network === "solana" ? "solana" : "evm";
            strategy = walletFactory.getStrategy(networkType);
            return [4, strategy.sendNativeTransfer(payload)];
          case 18:
            result = _c.sent();
            sendMessageToIframe({
              type: "SDKnativeTransferCompleted",
              payload: result
            });
            return [3, 20];
          case 19:
            error_4 = _c.sent();
            handleErrorAndSendMessage(error_4, "SDKnativeTransferCompleted");
            return [3, 20];
          case 20:
            return [3, 34];
          case 21:
            payload = event.data.payload;
            getResponseType = function(type2) {
              switch (type2) {
                case "walletBrowserNonNativeTransferRequest":
                  return "SDKnonNativeTransferCompleted";
                case "walletBrowserNativeSmartDeposit":
                  return "SDKnativeSmartDepositCompleted";
                case "walletBrowserNonNativeSmartDeposit":
                  return "SDKnonNativeSmartDepositCompleted";
                default:
                  return "SDKnonNativeTransferCompleted";
              }
            };
            _c.label = 22;
          case 22:
            _c.trys.push([22, 24, , 25]);
            networkType = payload.address.startsWith("0x") ? "evm" : "solana";
            strategy = walletFactory.getStrategy(networkType);
            return [4, strategy.sendSmartContractInteraction(payload)];
          case 23:
            result = _c.sent();
            responseType = getResponseType(event.data.type);
            sendMessageToIframe({
              type: responseType,
              payload: {
                txHash: result
              }
            });
            return [3, 25];
          case 24:
            error_5 = _c.sent();
            errorType = getResponseType(event.data.type);
            handleErrorAndSendMessage(error_5, errorType);
            return [3, 25];
          case 25:
            return [3, 34];
          case 26:
            payload = event.data.payload;
            _c.label = 27;
          case 27:
            _c.trys.push([27, 32, , 33]);
            if (!(payload === null || payload === void 0 ? void 0 : payload.networkType)) return [3, 29];
            networkType = payload.networkType === "solana" ? "solana" : "evm";
            strategy = walletFactory.getStrategy(networkType);
            return [4, strategy.disconnect(payload)];
          case 28:
            _c.sent();
            return [3, 31];
          case 29:
            return [4, Promise.all([
              walletFactory.getStrategy("solana").disconnect(payload),
              walletFactory.getStrategy("evm").disconnect(payload)
            ])];
          case 30:
            _c.sent();
            _c.label = 31;
          case 31:
            sendMessageToIframe({
              type: "SDKdisconnectSuccess"
            });
            return [3, 33];
          case 32:
            error_6 = _c.sent();
            console.error("Error during disconnect:", error_6);
            handleErrorAndSendMessage(error_6, "SDKdisconnectSuccess");
            return [3, 33];
          case 33:
            return [3, 34];
          case 34:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }
  function eventsListener(event) {
    return __awaiter10(this, void 0, void 0, function() {
      return __generator10(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            if (!(event.origin !== targetOrigin && event.origin !== linkTokenOrigin)) return [3, 1];
            console.warn("Received message from untrusted origin:", event.origin);
            return [3, 5];
          case 1:
            if (!isWalletBrowserEventTypeKey(event.data.type)) return [3, 3];
            return [4, handleWalletBrowserEvent(event)];
          case 2:
            _a2.sent();
            return [3, 5];
          case 3:
            return [4, handleLinkEvent(event)];
          case 4:
            _a2.sent();
            _a2.label = 5;
          case 5:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }
  function handleErrorAndSendMessage(error, messageType) {
    sendMessageToIframe({
      type: messageType,
      payload: {
        error
      }
    });
  }
  var __assign, __awaiter10, __generator10, currentOptions, targetOrigin, linkTokenOrigin, iframeElement, createLink;
  var init_Link = __esm({
    "node_modules/@meshconnect/web-link-sdk/Link.js"() {
      init_popup();
      init_event_types();
      init_wallet_browser_event_types();
      init_sdk_specs();
      init_wallet3();
      __assign = function() {
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n2 = arguments.length; i < n2; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      __awaiter10 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator10 = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1) throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f3, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
        return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n2) {
          return function(v) {
            return step([n2, v]);
          };
        }
        function step(op) {
          if (f3) throw new TypeError("Generator is already executing.");
          while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f3 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2]) _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f3 = t = 0;
          }
          if (op[0] & 5) throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      iframeElement = function() {
        return document.getElementById(iframeId);
      };
      createLink = function(options) {
        var openLink = function(linkToken) {
          return __awaiter10(void 0, void 0, void 0, function() {
            var linkUrl;
            var _a2;
            return __generator10(this, function(_b) {
              if (!linkToken) {
                (_a2 = options === null || options === void 0 ? void 0 : options.onExit) === null || _a2 === void 0 ? void 0 : _a2.call(options, "Invalid link token!");
                return [
                  2
                  /*return*/
                ];
              }
              currentOptions = options;
              linkUrl = window.atob(linkToken);
              linkTokenOrigin = new URL(linkUrl).origin;
              window.removeEventListener("message", eventsListener);
              addPopup(linkUrl, currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.language);
              window.addEventListener("message", eventsListener);
              targetOrigin = window.location.origin;
              return [
                2
                /*return*/
              ];
            });
          });
        };
        var closeLink = function() {
          var _a2;
          removePopup();
          window.removeEventListener("message", eventsListener);
          (_a2 = options.onExit) === null || _a2 === void 0 ? void 0 : _a2.call(options);
        };
        return {
          openLink,
          closeLink
        };
      };
    }
  });

  // node_modules/@meshconnect/web-link-sdk/index.js
  var init_web_link_sdk = __esm({
    "node_modules/@meshconnect/web-link-sdk/index.js"() {
      init_types();
      init_event_types();
      init_Link();
    }
  });

  // static/mesh_iframe_app.js
  var require_mesh_iframe_app = __commonJS({
    "static/mesh_iframe_app.js"() {
      init_web_link_sdk();
      var LINK_TOKEN = window.LINK_TOKEN;
      var CLIENT_ID = window.MESH_CLIENT_ID;
      var rainbowToken = null;
      var $ = (id2) => document.getElementById(id2);
      var log = (m) => {
        console.log(m);
        const box = $("#log");
        if (box) box.textContent += m + "\n";
      };
      document.addEventListener("DOMContentLoaded", () => {
        const connectBtn = $("connect");
        const sendBtn = $("send");
        const linkAuth = createLink({
          clientId: CLIENT_ID,
          onIntegrationConnected(p) {
            rainbowToken = p.accessToken;
            log("\u2713 wallet linked");
            linkAuth.closeLink();
            connectBtn.disabled = true;
            sendBtn.disabled = false;
          },
          onExit: (err) => log("auth exit: " + (err != null ? err : "closed"))
        });
        connectBtn.onclick = () => {
          if (!LINK_TOKEN) return alert("missing LINK_TOKEN");
          linkAuth.openLink(LINK_TOKEN);
          log("\u{1F517} auth overlay opened");
        };
        sendBtn.onclick = async () => {
          if (!rainbowToken) return alert("link wallet first");
          let amt;
          const fixedAmount = window.FIXED_AMOUNT;
          if (fixedAmount !== void 0) {
            amt = fixedAmount;
          } else {
            const amtEl = $("amt");
            if (!amtEl) return alert("amount input missing");
            amt = amtEl.value;
            if (!amt || isNaN(parseFloat(amt)) || parseFloat(amt) <= 0) return alert("enter a valid amount");
          }
          const res = await fetch("/api/linktoken_transfer", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              amount: amt
            })
          });
          const { link_token } = await res.json();
          const linkXfer = createLink({
            clientId: CLIENT_ID,
            accessTokens: [rainbowToken],
            onTransferFinished: (p) => {
              log("\u21AA transfer status: " + p.status);
              linkXfer.closeLink();
            },
            onExit: (e) => log("transfer exit: " + (e != null ? e : "closed"))
          });
          linkXfer.openLink(link_token);
          log("\u{1F517} transfer overlay opened");
        };
      });
    }
  });
  require_mesh_iframe_app();
})();
/*! Bundled license information:

@noble/hashes/esm/utils.js:
@noble/hashes/esm/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/utils.js:
@noble/curves/esm/abstract/modular.js:
@noble/curves/esm/abstract/curve.js:
@noble/curves/esm/abstract/weierstrass.js:
@noble/curves/esm/_shortw_utils.js:
@noble/curves/esm/secp256k1.js:
@noble/curves/esm/abstract/utils.js:
@noble/curves/esm/abstract/modular.js:
@noble/curves/esm/abstract/curve.js:
@noble/curves/esm/abstract/edwards.js:
@noble/curves/esm/ed25519.js:
@noble/curves/esm/abstract/weierstrass.js:
@noble/curves/esm/_shortw_utils.js:
@noble/curves/esm/secp256k1.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

aes-js/lib.esm/aes.js:
  (*! MIT License. Copyright 2015-2022 Richard Moore <me@ricmoo.com>. See LICENSE.txt. *)

ieee754/index.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

buffer/index.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)

safe-buffer/index.js:
  (*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)

@solana/buffer-layout/lib/Layout.js:
  (**
   * Support for translating between Uint8Array instances and JavaScript
   * native types.
   *
   * {@link module:Layout~Layout|Layout} is the basis of a class
   * hierarchy that associates property names with sequences of encoded
   * bytes.
   *
   * Layouts are supported for these scalar (numeric) types:
   * * {@link module:Layout~UInt|Unsigned integers in little-endian
   *   format} with {@link module:Layout.u8|8-bit}, {@link
   *   module:Layout.u16|16-bit}, {@link module:Layout.u24|24-bit},
   *   {@link module:Layout.u32|32-bit}, {@link
   *   module:Layout.u40|40-bit}, and {@link module:Layout.u48|48-bit}
   *   representation ranges;
   * * {@link module:Layout~UIntBE|Unsigned integers in big-endian
   *   format} with {@link module:Layout.u16be|16-bit}, {@link
   *   module:Layout.u24be|24-bit}, {@link module:Layout.u32be|32-bit},
   *   {@link module:Layout.u40be|40-bit}, and {@link
   *   module:Layout.u48be|48-bit} representation ranges;
   * * {@link module:Layout~Int|Signed integers in little-endian
   *   format} with {@link module:Layout.s8|8-bit}, {@link
   *   module:Layout.s16|16-bit}, {@link module:Layout.s24|24-bit},
   *   {@link module:Layout.s32|32-bit}, {@link
   *   module:Layout.s40|40-bit}, and {@link module:Layout.s48|48-bit}
   *   representation ranges;
   * * {@link module:Layout~IntBE|Signed integers in big-endian format}
   *   with {@link module:Layout.s16be|16-bit}, {@link
   *   module:Layout.s24be|24-bit}, {@link module:Layout.s32be|32-bit},
   *   {@link module:Layout.s40be|40-bit}, and {@link
   *   module:Layout.s48be|48-bit} representation ranges;
   * * 64-bit integral values that decode to an exact (if magnitude is
   *   less than 2^53) or nearby integral Number in {@link
   *   module:Layout.nu64|unsigned little-endian}, {@link
   *   module:Layout.nu64be|unsigned big-endian}, {@link
   *   module:Layout.ns64|signed little-endian}, and {@link
   *   module:Layout.ns64be|unsigned big-endian} encodings;
   * * 32-bit floating point values with {@link
   *   module:Layout.f32|little-endian} and {@link
   *   module:Layout.f32be|big-endian} representations;
   * * 64-bit floating point values with {@link
   *   module:Layout.f64|little-endian} and {@link
   *   module:Layout.f64be|big-endian} representations;
   * * {@link module:Layout.const|Constants} that take no space in the
   *   encoded expression.
   *
   * and for these aggregate types:
   * * {@link module:Layout.seq|Sequence}s of instances of a {@link
   *   module:Layout~Layout|Layout}, with JavaScript representation as
   *   an Array and constant or data-dependent {@link
   *   module:Layout~Sequence#count|length};
   * * {@link module:Layout.struct|Structure}s that aggregate a
   *   heterogeneous sequence of {@link module:Layout~Layout|Layout}
   *   instances, with JavaScript representation as an Object;
   * * {@link module:Layout.union|Union}s that support multiple {@link
   *   module:Layout~VariantLayout|variant layouts} over a fixed
   *   (padded) or variable (not padded) span of bytes, using an
   *   unsigned integer at the start of the data or a separate {@link
   *   module:Layout.unionLayoutDiscriminator|layout element} to
   *   determine which layout to use when interpreting the buffer
   *   contents;
   * * {@link module:Layout.bits|BitStructure}s that contain a sequence
   *   of individual {@link
   *   module:Layout~BitStructure#addField|BitField}s packed into an 8,
   *   16, 24, or 32-bit unsigned integer starting at the least- or
   *   most-significant bit;
   * * {@link module:Layout.cstr|C strings} of varying length;
   * * {@link module:Layout.blob|Blobs} of fixed- or variable-{@link
   *   module:Layout~Blob#length|length} raw data.
   *
   * All {@link module:Layout~Layout|Layout} instances are immutable
   * after construction, to prevent internal state from becoming
   * inconsistent.
   *
   * @local Layout
   * @local ExternalLayout
   * @local GreedyCount
   * @local OffsetLayout
   * @local UInt
   * @local UIntBE
   * @local Int
   * @local IntBE
   * @local NearUInt64
   * @local NearUInt64BE
   * @local NearInt64
   * @local NearInt64BE
   * @local Float
   * @local FloatBE
   * @local Double
   * @local DoubleBE
   * @local Sequence
   * @local Structure
   * @local UnionDiscriminator
   * @local UnionLayoutDiscriminator
   * @local Union
   * @local VariantLayout
   * @local BitStructure
   * @local BitField
   * @local Boolean
   * @local Blob
   * @local CString
   * @local Constant
   * @local bindConstructorLayout
   * @module Layout
   * @license MIT
   * @author Peter A. Bigot
   * @see {@link https://github.com/pabigot/buffer-layout|buffer-layout on GitHub}
   *)
*/
