var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { addPopup, iframeId, removePopup } from './utils/popup';
import { isLinkEventTypeKey } from './utils/event-types';
import { isWalletBrowserEventTypeKey } from './utils/wallet-browser-event-types';
import { sdkSpecs } from './utils/sdk-specs';
import { WalletStrategyFactory } from './utils/wallet';
var currentOptions;
var targetOrigin;
var linkTokenOrigin;
var iframeElement = function () {
    return document.getElementById(iframeId);
};
function sendMessageToIframe(message) {
    var _a;
    var iframe = iframeElement();
    if (!iframe) {
        console.warn("Mesh SDK: Failed to deliver ".concat(message.type, " message to the iframe - no iframe element found"));
        return;
    }
    if (!linkTokenOrigin) {
        console.warn("Mesh SDK: Failed to deliver ".concat(message.type, " message to the iframe - no link token origin found"));
        return;
    }
    try {
        (_a = iframe.contentWindow) === null || _a === void 0 ? void 0 : _a.postMessage(message, linkTokenOrigin);
    }
    catch (e) {
        console.error("Mesh SDK: Failed to deliver ".concat(message.type, " message to the iframe"));
        console.error(e);
    }
}
function handleLinkEvent(event) {
    return __awaiter(this, void 0, void 0, function () {
        var payload, payload, payload, payload, walletFactory, allProviders;
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        return __generator(this, function (_l) {
            switch (event.data.type) {
                case 'brokerageAccountAccessToken': {
                    payload = {
                        accessToken: event.data.payload
                    };
                    (_a = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.onEvent) === null || _a === void 0 ? void 0 : _a.call(currentOptions, {
                        type: 'integrationConnected',
                        payload: payload
                    });
                    (_b = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.onIntegrationConnected) === null || _b === void 0 ? void 0 : _b.call(currentOptions, payload);
                    break;
                }
                case 'delayedAuthentication': {
                    payload = {
                        delayedAuth: event.data.payload
                    };
                    (_c = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.onEvent) === null || _c === void 0 ? void 0 : _c.call(currentOptions, {
                        type: 'integrationConnected',
                        payload: payload
                    });
                    (_d = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.onIntegrationConnected) === null || _d === void 0 ? void 0 : _d.call(currentOptions, payload);
                    break;
                }
                case 'transferFinished': {
                    payload = event.data.payload;
                    (_e = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.onEvent) === null || _e === void 0 ? void 0 : _e.call(currentOptions, {
                        type: 'transferCompleted',
                        payload: payload
                    });
                    (_f = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.onTransferFinished) === null || _f === void 0 ? void 0 : _f.call(currentOptions, payload);
                    break;
                }
                case 'close':
                case 'done': {
                    payload = (_g = event.data) === null || _g === void 0 ? void 0 : _g.payload;
                    (_h = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.onExit) === null || _h === void 0 ? void 0 : _h.call(currentOptions, payload === null || payload === void 0 ? void 0 : payload.errorMessage, payload);
                    removePopup();
                    break;
                }
                case 'loaded': {
                    sendMessageToIframe({
                        type: 'meshSDKSpecs',
                        payload: __assign({}, sdkSpecs)
                    });
                    walletFactory = WalletStrategyFactory.getInstance();
                    allProviders = walletFactory.getAllProviders();
                    sendMessageToIframe({
                        type: 'SDKinjectedWalletProviders',
                        payload: allProviders
                    });
                    if (currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.accessTokens) {
                        sendMessageToIframe({
                            type: 'frontAccessTokens',
                            payload: currentOptions.accessTokens
                        });
                    }
                    if (currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.transferDestinationTokens) {
                        sendMessageToIframe({
                            type: 'frontTransferDestinationTokens',
                            payload: currentOptions.transferDestinationTokens
                        });
                    }
                    (_j = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.onEvent) === null || _j === void 0 ? void 0 : _j.call(currentOptions, { type: 'pageLoaded' });
                    break;
                }
                default: {
                    if (isLinkEventTypeKey(event.data.type)) {
                        (_k = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.onEvent) === null || _k === void 0 ? void 0 : _k.call(currentOptions, event.data);
                    }
                    break;
                }
            }
            return [2 /*return*/];
        });
    });
}
function handleWalletBrowserEvent(event) {
    return __awaiter(this, void 0, void 0, function () {
        var walletFactory, _a, payload, networkType, strategy, result, error_1, payload, networkType, strategy, result, error_2, payload, networkType, strategy, result, error_3, payload, networkType, strategy, result, error_4, payload, getResponseType, networkType, strategy, result, responseType, error_5, errorType, payload, networkType, strategy, error_6;
        var _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    walletFactory = WalletStrategyFactory.getInstance();
                    _a = event.data.type;
                    switch (_a) {
                        case 'walletBrowserInjectedWalletSelected': return [3 /*break*/, 1];
                        case 'walletBrowserSignRequest': return [3 /*break*/, 6];
                        case 'walletBrowserChainSwitchRequest': return [3 /*break*/, 11];
                        case 'walletBrowserNativeTransferRequest': return [3 /*break*/, 16];
                        case 'walletBrowserNonNativeTransferRequest': return [3 /*break*/, 21];
                        case 'walletBrowserNativeSmartDeposit': return [3 /*break*/, 21];
                        case 'walletBrowserNonNativeSmartDeposit': return [3 /*break*/, 21];
                        case 'walletBrowserDisconnect': return [3 /*break*/, 26];
                    }
                    return [3 /*break*/, 34];
                case 1:
                    payload = event.data.payload;
                    _c.label = 2;
                case 2:
                    _c.trys.push([2, 4, , 5]);
                    networkType = (((_b = payload.networkType) === null || _b === void 0 ? void 0 : _b.includes('solana')) ? 'solana' : 'evm');
                    strategy = walletFactory.getStrategy(networkType);
                    return [4 /*yield*/, strategy.connect(payload)];
                case 3:
                    result = _c.sent();
                    sendMessageToIframe({
                        type: 'SDKinjectedConnectionCompleted',
                        payload: {
                            accounts: result.accounts,
                            chainId: result.chainId,
                            networkType: networkType
                        }
                    });
                    return [3 /*break*/, 5];
                case 4:
                    error_1 = _c.sent();
                    console.error('Connection error:', error_1);
                    handleErrorAndSendMessage(error_1, 'SDKinjectedConnectionCompleted');
                    return [3 /*break*/, 5];
                case 5: return [3 /*break*/, 34];
                case 6:
                    payload = event.data.payload;
                    _c.label = 7;
                case 7:
                    _c.trys.push([7, 9, , 10]);
                    networkType = (!payload.address.startsWith('0x') ? 'solana' : 'evm');
                    strategy = walletFactory.getStrategy(networkType);
                    return [4 /*yield*/, strategy.signMessage(payload)];
                case 8:
                    result = _c.sent();
                    sendMessageToIframe({
                        type: 'SDKsignRequestCompleted',
                        payload: result
                    });
                    return [3 /*break*/, 10];
                case 9:
                    error_2 = _c.sent();
                    handleErrorAndSendMessage(error_2, 'SDKsignRequestCompleted');
                    return [3 /*break*/, 10];
                case 10: return [3 /*break*/, 34];
                case 11:
                    payload = event.data.payload;
                    _c.label = 12;
                case 12:
                    _c.trys.push([12, 14, , 15]);
                    networkType = (payload.networkType === 'solana' ? 'solana' : 'evm');
                    strategy = walletFactory.getStrategy(networkType);
                    return [4 /*yield*/, strategy.switchChain(payload)];
                case 13:
                    result = _c.sent();
                    sendMessageToIframe({
                        type: 'SDKswitchChainCompleted',
                        payload: {
                            chainId: result.chainId,
                            accounts: result.accounts,
                            networkType: networkType
                        }
                    });
                    return [3 /*break*/, 15];
                case 14:
                    error_3 = _c.sent();
                    console.error('Chain switch failed:', error_3);
                    handleErrorAndSendMessage(error_3, 'SDKswitchChainCompleted');
                    return [3 /*break*/, 15];
                case 15: return [3 /*break*/, 34];
                case 16:
                    payload = event.data.payload;
                    _c.label = 17;
                case 17:
                    _c.trys.push([17, 19, , 20]);
                    networkType = (payload.network === 'solana' ? 'solana' : 'evm');
                    strategy = walletFactory.getStrategy(networkType);
                    return [4 /*yield*/, strategy.sendNativeTransfer(payload)];
                case 18:
                    result = _c.sent();
                    sendMessageToIframe({
                        type: 'SDKnativeTransferCompleted',
                        payload: result
                    });
                    return [3 /*break*/, 20];
                case 19:
                    error_4 = _c.sent();
                    handleErrorAndSendMessage(error_4, 'SDKnativeTransferCompleted');
                    return [3 /*break*/, 20];
                case 20: return [3 /*break*/, 34];
                case 21:
                    payload = event.data.payload;
                    getResponseType = function (type) {
                        switch (type) {
                            case 'walletBrowserNonNativeTransferRequest':
                                return 'SDKnonNativeTransferCompleted';
                            case 'walletBrowserNativeSmartDeposit':
                                return 'SDKnativeSmartDepositCompleted';
                            case 'walletBrowserNonNativeSmartDeposit':
                                return 'SDKnonNativeSmartDepositCompleted';
                            default:
                                return 'SDKnonNativeTransferCompleted';
                        }
                    };
                    _c.label = 22;
                case 22:
                    _c.trys.push([22, 24, , 25]);
                    networkType = (payload.address.startsWith('0x') ? 'evm' : 'solana');
                    strategy = walletFactory.getStrategy(networkType);
                    return [4 /*yield*/, strategy.sendSmartContractInteraction(payload)];
                case 23:
                    result = _c.sent();
                    responseType = getResponseType(event.data.type);
                    sendMessageToIframe({
                        type: responseType,
                        payload: {
                            txHash: result
                        }
                    });
                    return [3 /*break*/, 25];
                case 24:
                    error_5 = _c.sent();
                    errorType = getResponseType(event.data.type);
                    handleErrorAndSendMessage(error_5, errorType);
                    return [3 /*break*/, 25];
                case 25: return [3 /*break*/, 34];
                case 26:
                    payload = event.data.payload;
                    _c.label = 27;
                case 27:
                    _c.trys.push([27, 32, , 33]);
                    if (!(payload === null || payload === void 0 ? void 0 : payload.networkType)) return [3 /*break*/, 29];
                    networkType = (payload.networkType === 'solana' ? 'solana' : 'evm');
                    strategy = walletFactory.getStrategy(networkType);
                    return [4 /*yield*/, strategy.disconnect(payload)];
                case 28:
                    _c.sent();
                    return [3 /*break*/, 31];
                case 29: 
                // Disconnect from all if no specific network type
                return [4 /*yield*/, Promise.all([
                        walletFactory.getStrategy('solana').disconnect(payload),
                        walletFactory.getStrategy('evm').disconnect(payload)
                    ])];
                case 30:
                    // Disconnect from all if no specific network type
                    _c.sent();
                    _c.label = 31;
                case 31:
                    sendMessageToIframe({
                        type: 'SDKdisconnectSuccess'
                    });
                    return [3 /*break*/, 33];
                case 32:
                    error_6 = _c.sent();
                    console.error('Error during disconnect:', error_6);
                    handleErrorAndSendMessage(error_6, 'SDKdisconnectSuccess');
                    return [3 /*break*/, 33];
                case 33: return [3 /*break*/, 34];
                case 34: return [2 /*return*/];
            }
        });
    });
}
function eventsListener(event) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!(event.origin !== targetOrigin && event.origin !== linkTokenOrigin)) return [3 /*break*/, 1];
                    console.warn('Received message from untrusted origin:', event.origin);
                    return [3 /*break*/, 5];
                case 1:
                    if (!isWalletBrowserEventTypeKey(event.data.type)) return [3 /*break*/, 3];
                    return [4 /*yield*/, handleWalletBrowserEvent(event)];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 5];
                case 3: return [4 /*yield*/, handleLinkEvent(event)];
                case 4:
                    _a.sent();
                    _a.label = 5;
                case 5: return [2 /*return*/];
            }
        });
    });
}
function handleErrorAndSendMessage(error, messageType) {
    sendMessageToIframe({
        type: messageType,
        payload: {
            error: error
        }
    });
}
export var createLink = function (options) {
    var openLink = function (linkToken) { return __awaiter(void 0, void 0, void 0, function () {
        var linkUrl;
        var _a;
        return __generator(this, function (_b) {
            if (!linkToken) {
                (_a = options === null || options === void 0 ? void 0 : options.onExit) === null || _a === void 0 ? void 0 : _a.call(options, 'Invalid link token!');
                return [2 /*return*/];
            }
            currentOptions = options;
            linkUrl = window.atob(linkToken);
            linkTokenOrigin = new URL(linkUrl).origin;
            window.removeEventListener('message', eventsListener);
            addPopup(linkUrl, currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.language);
            window.addEventListener('message', eventsListener);
            targetOrigin = window.location.origin;
            return [2 /*return*/];
        });
    }); };
    var closeLink = function () {
        var _a;
        removePopup();
        window.removeEventListener('message', eventsListener);
        (_a = options.onExit) === null || _a === void 0 ? void 0 : _a.call(options);
    };
    return {
        openLink: openLink,
        closeLink: closeLink
    };
};
