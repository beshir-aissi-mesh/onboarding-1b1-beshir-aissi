var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { BaseWalletStrategy } from './WalletStrategy';
import { connectToSolanaWallet, disconnectFromSolanaWallet, signSolanaMessage, sendSOLTransaction, findAvailableSolanaProviders, getSolanaProvider } from '../connectors/solana';
var SolanaWalletStrategy = /** @class */ (function (_super) {
    __extends(SolanaWalletStrategy, _super);
    function SolanaWalletStrategy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SolanaWalletStrategy.prototype.connect = function (payload) {
        return __awaiter(this, void 0, void 0, function () {
            var result, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, connectToSolanaWallet(payload.integrationName)];
                    case 1:
                        result = _a.sent();
                        if (result instanceof Error) {
                            throw result;
                        }
                        return [2 /*return*/, {
                                accounts: result.accounts,
                                chainId: result.chainId,
                                isConnected: result.isConnected
                            }];
                    case 2:
                        error_1 = _a.sent();
                        throw this.handleError(error_1, 'connect to Solana wallet');
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    SolanaWalletStrategy.prototype.disconnect = function (payload) {
        return __awaiter(this, void 0, void 0, function () {
            var result, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, disconnectFromSolanaWallet(payload.walletName || 'Unknown Wallet')];
                    case 1:
                        result = _a.sent();
                        if (result instanceof Error) {
                            throw result;
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        error_2 = _a.sent();
                        throw this.handleError(error_2, 'disconnect from Solana wallet');
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    SolanaWalletStrategy.prototype.signMessage = function (payload) {
        return __awaiter(this, void 0, void 0, function () {
            var result, error_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, signSolanaMessage(payload.walletName || 'Unknown Wallet', payload.message)];
                    case 1:
                        result = _a.sent();
                        if (result instanceof Error) {
                            throw result;
                        }
                        return [2 /*return*/, result];
                    case 2:
                        error_3 = _a.sent();
                        throw this.handleError(error_3, 'sign Solana message');
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @note Solana doesn't support chain switching as it's a single-chain network
     * This method is implemented to satisfy the interface but will always return mainnet (101)
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    SolanaWalletStrategy.prototype.switchChain = function (_payload) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, {
                        chainId: '101',
                        accounts: []
                    }];
            });
        });
    };
    SolanaWalletStrategy.prototype.sendNativeTransfer = function (payload) {
        return __awaiter(this, void 0, void 0, function () {
            var result, error_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, sendSOLTransaction({
                                toAddress: payload.toAddress,
                                amount: BigInt(payload.amount * Math.pow(10, payload.decimalPlaces)),
                                fromAddress: payload.account,
                                blockhash: payload.blockhash || '',
                                walletName: payload.walletName || ''
                            })];
                    case 1:
                        result = _a.sent();
                        if (typeof result === 'string') {
                            return [2 /*return*/, result];
                        }
                        throw result;
                    case 2:
                        error_4 = _a.sent();
                        throw this.handleError(error_4, 'send Solana native transfer');
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    SolanaWalletStrategy.prototype.sendSmartContractInteraction = function (payload) {
        return __awaiter(this, void 0, void 0, function () {
            var provider, senderAddress, _a, decimals, rawAmount, scaledAmount;
            var _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        provider = getSolanaProvider(payload.walletName || '');
                        _a = payload.account;
                        if (_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, ((_b = provider.publicKey) === null || _b === void 0 ? void 0 : _b.toString())];
                    case 1:
                        _a = (_c.sent());
                        _c.label = 2;
                    case 2:
                        senderAddress = _a;
                        if (!senderAddress) {
                            throw new Error('Sender account address is required');
                        }
                        decimals = payload.args[2] || 6 // USDC has 6 decimals
                        ;
                        rawAmount = payload.args[1];
                        scaledAmount = rawAmount;
                        if (!payload.blockhash) {
                            throw new Error('Blockhash is required for Solana transactions');
                        }
                        return [4 /*yield*/, sendSOLTransaction({
                                toAddress: payload.args[0],
                                amount: scaledAmount,
                                fromAddress: senderAddress,
                                blockhash: payload.blockhash,
                                walletName: payload.walletName || '',
                                tokenMint: payload.address,
                                tokenDecimals: decimals
                            })];
                    case 3: return [2 /*return*/, _c.sent()];
                }
            });
        });
    };
    SolanaWalletStrategy.prototype.getProviders = function () {
        var solanaProviderMap = findAvailableSolanaProviders();
        return Object.keys(solanaProviderMap).map(function (id) { return ({
            id: id,
            type: 'solana'
        }); });
    };
    return SolanaWalletStrategy;
}(BaseWalletStrategy));
export { SolanaWalletStrategy };
