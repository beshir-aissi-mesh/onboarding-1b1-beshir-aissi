import { BaseWalletStrategy } from './WalletStrategy';
import { WalletBrowserPayload, SignRequestPayload, ChainSwitchPayload, TransferPayload, SmartContractPayload, DisconnectPayload } from '../types';
export declare class SolanaWalletStrategy extends BaseWalletStrategy {
    connect(payload: WalletBrowserPayload): Promise<{
        accounts: string[];
        chainId: string;
        isConnected: boolean;
    }>;
    disconnect(payload: DisconnectPayload): Promise<void>;
    signMessage(payload: SignRequestPayload): Promise<string>;
    /**
     * @note Solana doesn't support chain switching as it's a single-chain network
     * This method is implemented to satisfy the interface but will always return mainnet (101)
     */
    switchChain(_payload: ChainSwitchPayload): Promise<{
        chainId: string;
        accounts: string[];
    }>;
    sendNativeTransfer(payload: TransferPayload): Promise<string>;
    sendSmartContractInteraction(payload: SmartContractPayload): Promise<string>;
    getProviders(): {
        id: string;
        type: string;
    }[];
}
