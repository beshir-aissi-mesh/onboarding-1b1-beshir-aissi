var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { getChainConfiguration } from './chainConfigs';
import { getActiveRawProvider } from './provider';
// Chain switch status tracking
var isChainSwitching = false;
var chainSwitchError = null;
var MAX_RETRY_ATTEMPTS = 3;
var RETRY_DELAY = 1000;
/**
 * Waits for a pending chain switch to complete
 */
var waitForPendingSwitch = function (provider_1, chainIdHex_1) {
    var args_1 = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args_1[_i - 2] = arguments[_i];
    }
    return __awaiter(void 0, __spreadArray([provider_1, chainIdHex_1], args_1, true), void 0, function (provider, chainIdHex, attempt) {
        var currentChainHex, error_1;
        if (attempt === void 0) { attempt = 0; }
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 3, , 6]);
                    return [4 /*yield*/, provider.request({ method: 'eth_chainId' })];
                case 1:
                    currentChainHex = _a.sent();
                    if (currentChainHex === chainIdHex) {
                        return [2 /*return*/]; // Switch completed
                    }
                    if (attempt >= MAX_RETRY_ATTEMPTS) {
                        throw new Error('Chain switch timeout');
                    }
                    // Wait and retry
                    return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, RETRY_DELAY); })];
                case 2:
                    // Wait and retry
                    _a.sent();
                    return [2 /*return*/, waitForPendingSwitch(provider, chainIdHex, attempt + 1)];
                case 3:
                    error_1 = _a.sent();
                    if (!(error_1.code === -32002)) return [3 /*break*/, 5];
                    // Still pending, wait and retry
                    return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, RETRY_DELAY); })];
                case 4:
                    // Still pending, wait and retry
                    _a.sent();
                    return [2 /*return*/, waitForPendingSwitch(provider, chainIdHex, attempt + 1)];
                case 5: throw error_1;
                case 6: return [2 /*return*/];
            }
        });
    });
};
/**
 * Switches the current EVM chain
 */
export var switchEVMChain = function (chainId, provider) { return __awaiter(void 0, void 0, void 0, function () {
    var targetProvider, chainIdHex, switchError_1, accounts, error_2;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 7, , 9]);
                targetProvider = provider || getActiveRawProvider();
                if (!targetProvider) {
                    throw new Error('No active EVM provider');
                }
                chainIdHex = "0x".concat(chainId.toString(16));
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 5]);
                return [4 /*yield*/, switchChain(targetProvider, chainIdHex)];
            case 2:
                _a.sent();
                return [3 /*break*/, 5];
            case 3:
                switchError_1 = _a.sent();
                return [4 /*yield*/, handleSwitchError(switchError_1, targetProvider, chainId, chainIdHex)];
            case 4:
                _a.sent();
                return [3 /*break*/, 5];
            case 5: return [4 /*yield*/, targetProvider.request({ method: 'eth_accounts' })];
            case 6:
                accounts = _a.sent();
                return [2 /*return*/, { chainId: chainId, accounts: accounts }];
            case 7:
                error_2 = _a.sent();
                if (isUserRejection(error_2)) {
                    return [2 /*return*/, new Error('User rejected chain switch')];
                }
                return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 1000); })];
            case 8:
                _a.sent();
                console.error('Chain switch error:', error_2);
                return [2 /*return*/, error_2 instanceof Error ? error_2 : new Error('Failed to switch chain')];
            case 9: return [2 /*return*/];
        }
    });
}); };
/**
 * Attempts to switch to a specific chain
 */
var switchChain = function (provider, chainIdHex) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, provider.request({
                    method: 'wallet_switchEthereumChain',
                    params: [{ chainId: chainIdHex }]
                })];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
/**
 * Handles chain switch errors
 */
var handleSwitchError = function (error, provider, chainId, chainIdHex) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (error.code === 4001) {
                    throw new Error('User rejected chain switch');
                }
                if (!(error.code === -32002)) return [3 /*break*/, 2];
                // Request already pending, wait for it
                return [4 /*yield*/, waitForPendingSwitch(provider, chainIdHex)];
            case 1:
                // Request already pending, wait for it
                _a.sent();
                return [2 /*return*/];
            case 2:
                if (!(error.code === 4902 || error.code === -32603)) return [3 /*break*/, 5];
                return [4 /*yield*/, addChain(provider, chainId, chainIdHex)];
            case 3:
                _a.sent();
                return [4 /*yield*/, switchChain(provider, chainIdHex)];
            case 4:
                _a.sent();
                return [3 /*break*/, 6];
            case 5: throw error;
            case 6: return [2 /*return*/];
        }
    });
}); };
/**
 * Adds a new chain to the wallet
 */
var addChain = function (provider, chainId, chainIdHex) { return __awaiter(void 0, void 0, void 0, function () {
    var chainConfig, addError_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                chainConfig = getChainConfiguration(chainId);
                if (!chainConfig) {
                    throw new Error("No configuration found for chain ".concat(chainId));
                }
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, provider.request({
                        method: 'wallet_addEthereumChain',
                        params: [
                            {
                                chainId: chainIdHex,
                                chainName: chainConfig.name,
                                nativeCurrency: chainConfig.nativeCurrency,
                                rpcUrls: chainConfig.rpcUrls.default.http,
                                blockExplorerUrls: [chainConfig.blockExplorers.default.url]
                            }
                        ]
                    })];
            case 2:
                _a.sent();
                return [3 /*break*/, 4];
            case 3:
                addError_1 = _a.sent();
                if (addError_1.code === 4001) {
                    throw new Error('User rejected chain add');
                }
                throw addError_1;
            case 4: return [2 /*return*/];
        }
    });
}); };
/**
 * Checks if an error is a user rejection
 */
var isUserRejection = function (error) {
    return error instanceof Error && error.message.includes('rejected');
};
/**
 * Gets the current chain switch status
 */
export var getChainSwitchStatus = function () { return ({
    isChainSwitching: isChainSwitching,
    chainSwitchError: chainSwitchError
}); };
