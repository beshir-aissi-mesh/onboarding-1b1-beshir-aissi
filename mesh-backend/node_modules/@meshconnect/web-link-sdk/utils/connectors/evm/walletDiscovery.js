var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var discoveredWallets = [];
/**
 * Initializes EIP-6963 wallet discovery protocol
 * @returns Cleanup function for event listeners
 */
export var initializeWalletDiscovery = function () {
    var handleAnnouncement = function (event) {
        var providerDetail = event.detail;
        discoveredWallets = __spreadArray(__spreadArray([], discoveredWallets, true), [providerDetail], false);
    };
    window.addEventListener('eip6963:announceProvider', handleAnnouncement);
    window.dispatchEvent(new Event('eip6963:requestProvider'));
    return function () {
        window.removeEventListener('eip6963:announceProvider', handleAnnouncement);
    };
};
/**
 * Finds all available EVM providers using EIP-6963
 */
export var findAvailableProviders = function () {
    var providers = [];
    // Initialize wallet discovery if not already done
    if (discoveredWallets.length === 0) {
        initializeWalletDiscovery();
    }
    // Add EIP-6963 discovered wallets
    discoveredWallets.forEach(function (wallet) {
        var injectedData = {
            provider: wallet.provider
        };
        // Copy all boolean properties that start with 'is'
        for (var key in wallet.provider) {
            var provider = wallet.provider;
            if (key.startsWith('is') && typeof provider[key] === 'boolean') {
                injectedData[key] = provider[key];
            }
        }
        providers.push({
            name: wallet.info.name,
            id: wallet.info.uuid,
            icon: wallet.info.icon,
            injectedData: injectedData
        });
    });
    return providers;
};
