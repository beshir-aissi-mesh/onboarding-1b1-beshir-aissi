var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { ethers } from 'ethers';
import { getActiveRawProvider } from './provider';
var isUserRejection = function (error) {
    var _a;
    if (!error)
        return false;
    // Check for various wallet rejection patterns
    var message = ((_a = error.message) === null || _a === void 0 ? void 0 : _a.toLowerCase()) || '';
    return (error.code === 4001 || // Standard EIP-1193 user rejection code
        message.includes('user rejected') ||
        message.includes('user denied') ||
        message.includes('user cancelled') ||
        message.includes('declined'));
};
/**
 * Sends a native EVM transaction
 */
export var sendEVMTransaction = function (toAddress, amount, fromAddress, gasLimit, maxFeePerGas, maxPriorityFeePerGas) { return __awaiter(void 0, void 0, void 0, function () {
    var activeRawProvider, chainIdHex, chainId, provider, signer, network, tx, receipt, txError_1, error_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 9, , 10]);
                activeRawProvider = getActiveRawProvider();
                if (!activeRawProvider) {
                    throw new Error('No active EVM provider');
                }
                return [4 /*yield*/, activeRawProvider.request({
                        method: 'eth_chainId'
                    })];
            case 1:
                chainIdHex = _a.sent();
                chainId = parseInt(chainIdHex, 16);
                provider = new ethers.BrowserProvider(activeRawProvider);
                return [4 /*yield*/, provider.getSigner(fromAddress)
                    // Verify we're still on the same network before proceeding
                ];
            case 2:
                signer = _a.sent();
                return [4 /*yield*/, provider.getNetwork()];
            case 3:
                network = _a.sent();
                if (Number(network.chainId) !== chainId) {
                    throw new Error('Network changed during transaction setup');
                }
                _a.label = 4;
            case 4:
                _a.trys.push([4, 7, , 8]);
                return [4 /*yield*/, signer.sendTransaction({
                        to: toAddress,
                        value: amount,
                        gasLimit: gasLimit ? BigInt(Math.floor(gasLimit)) : undefined,
                        maxFeePerGas: maxFeePerGas
                            ? BigInt(Math.floor(maxFeePerGas))
                            : undefined,
                        maxPriorityFeePerGas: maxPriorityFeePerGas
                            ? BigInt(Math.floor(maxPriorityFeePerGas))
                            : undefined
                    })];
            case 5:
                tx = _a.sent();
                return [4 /*yield*/, tx.wait()];
            case 6:
                receipt = _a.sent();
                return [2 /*return*/, receipt ? receipt.hash : ''];
            case 7:
                txError_1 = _a.sent();
                if (isUserRejection(txError_1)) {
                    return [2 /*return*/, new Error('Transaction was rejected by user')];
                }
                throw txError_1;
            case 8: return [3 /*break*/, 10];
            case 9:
                error_1 = _a.sent();
                console.error('Transaction error:', error_1);
                if (isUserRejection(error_1)) {
                    return [2 /*return*/, new Error('Transaction was rejected by user')];
                }
                if (error_1.code === 'NETWORK_ERROR') {
                    return [2 /*return*/, new Error('Network changed during transaction. Please try again.')];
                }
                return [2 /*return*/, error_1 instanceof Error
                        ? error_1
                        : new Error('Failed to send transaction')];
            case 10: return [2 /*return*/];
        }
    });
}); };
/**
 * Sends an EVM token transaction
 */
export var sendEVMTokenTransaction = function (contractAddress, abi, functionName, args, fromAddress) { return __awaiter(void 0, void 0, void 0, function () {
    var activeRawProvider, chainIdHex, chainId, provider, signer, network, contract, txOptions, gasLimit, maxFeePerGas, maxPriorityFeePerGas, tx, receipt, txError_2, error_2;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 9, , 10]);
                activeRawProvider = getActiveRawProvider();
                if (!activeRawProvider) {
                    throw new Error('No active EVM provider');
                }
                return [4 /*yield*/, activeRawProvider.request({
                        method: 'eth_chainId'
                    })];
            case 1:
                chainIdHex = _a.sent();
                chainId = parseInt(chainIdHex, 16);
                provider = new ethers.BrowserProvider(activeRawProvider);
                return [4 /*yield*/, provider.getSigner(fromAddress)
                    // Verify we're still on the same network before proceeding
                ];
            case 2:
                signer = _a.sent();
                return [4 /*yield*/, provider.getNetwork()];
            case 3:
                network = _a.sent();
                if (Number(network.chainId) !== chainId) {
                    throw new Error('Network changed during transaction setup');
                }
                contract = new ethers.Contract(contractAddress, abi, signer);
                txOptions = {};
                gasLimit = (args === null || args === void 0 ? void 0 : args[2]) !== undefined ? toSafeNumber(args[2], 'gasLimit') : undefined;
                maxFeePerGas = (args === null || args === void 0 ? void 0 : args[3]) !== undefined
                    ? toSafeNumber(args[3], 'maxFeePerGas')
                    : undefined;
                maxPriorityFeePerGas = (args === null || args === void 0 ? void 0 : args[4]) !== undefined
                    ? toSafeNumber(args[4], 'maxPriorityFeePerGas')
                    : undefined;
                txOptions.gasLimit = gasLimit ? BigInt(Math.floor(gasLimit)) : undefined;
                txOptions.maxFeePerGas = maxFeePerGas
                    ? BigInt(Math.floor(maxFeePerGas))
                    : undefined;
                txOptions.maxPriorityFeePerGas = maxPriorityFeePerGas
                    ? BigInt(Math.floor(maxPriorityFeePerGas))
                    : undefined;
                _a.label = 4;
            case 4:
                _a.trys.push([4, 7, , 8]);
                return [4 /*yield*/, contract[functionName](args[0], args[1], txOptions)
                    // Wait for transaction confirmation
                ];
            case 5:
                tx = _a.sent();
                return [4 /*yield*/, tx.wait()];
            case 6:
                receipt = _a.sent();
                return [2 /*return*/, receipt ? receipt.hash : ''];
            case 7:
                txError_2 = _a.sent();
                if (isUserRejection(txError_2)) {
                    return [2 /*return*/, new Error('Transaction was rejected by user')];
                }
                throw txError_2;
            case 8: return [3 /*break*/, 10];
            case 9:
                error_2 = _a.sent();
                console.error('Token transaction error:', error_2);
                if (isUserRejection(error_2)) {
                    return [2 /*return*/, new Error('Transaction was rejected by user')];
                }
                if (error_2.code === 'NETWORK_ERROR') {
                    return [2 /*return*/, new Error('Network changed during transaction. Please try again.')];
                }
                return [2 /*return*/, error_2 instanceof Error
                        ? error_2
                        : new Error('Failed to send token transaction')];
            case 10: return [2 /*return*/];
        }
    });
}); };
function toSafeNumber(value, name) {
    if (typeof value !== 'number' || Number.isNaN(value)) {
        throw new TypeError("Invalid ".concat(name, ": expected a number, got ").concat(typeof value, " (").concat(value, ")"));
    }
    return value;
}
