var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { ethers } from 'ethers';
import { setActiveEVMProvider, getActiveRawProvider, clearActiveProviders } from './provider';
import { switchEVMChain } from './chainSwitching';
import { initializeWalletDiscovery, findAvailableProviders } from './walletDiscovery';
initializeWalletDiscovery();
/**
 * Gets an EVM provider for a specific wallet
 */
export var getEVMProvider = function (walletName, walletDetail) {
    if (walletDetail === null || walletDetail === void 0 ? void 0 : walletDetail.provider) {
        return walletDetail.provider;
    }
    if (!walletName) {
        throw new Error('Wallet name is required');
    }
    var providers = findAvailableProviders();
    var matchingProvider = providers.find(function (p) { return p.name.toLowerCase() === walletName.toLowerCase(); });
    if (matchingProvider) {
        return matchingProvider.injectedData.provider;
    }
    if (window.ethereum) {
        return window.ethereum;
    }
    throw new Error("No provider found for wallet ".concat(walletName, ". Please make sure the wallet is installed and enabled."));
};
/**
 * Connects to an EVM wallet
 */
export var connectToEVMWallet = function (walletName, targetChainId, walletDetail) { return __awaiter(void 0, void 0, void 0, function () {
    var provider, browserProvider, existingAccounts, signer, address, chainId, switchResult, error_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 9, , 10]);
                provider = void 0;
                try {
                    provider = getEVMProvider(walletName, walletDetail);
                }
                catch (error) {
                    throw new Error("No provider found for wallet ".concat(walletName));
                }
                browserProvider = new ethers.BrowserProvider(provider);
                setActiveEVMProvider(browserProvider, provider);
                return [4 /*yield*/, provider.request({ method: 'eth_accounts' })];
            case 1:
                existingAccounts = _a.sent();
                if (!(!existingAccounts || existingAccounts.length === 0)) return [3 /*break*/, 3];
                return [4 /*yield*/, browserProvider.send('eth_requestAccounts', [])];
            case 2:
                _a.sent();
                _a.label = 3;
            case 3: return [4 /*yield*/, browserProvider.getSigner()];
            case 4:
                signer = _a.sent();
                return [4 /*yield*/, signer.getAddress()];
            case 5:
                address = _a.sent();
                return [4 /*yield*/, browserProvider
                        .getNetwork()
                        .then(function (network) { return Number(network.chainId); })];
            case 6:
                chainId = _a.sent();
                if (!(targetChainId && chainId !== targetChainId)) return [3 /*break*/, 8];
                return [4 /*yield*/, switchEVMChain(targetChainId, provider)];
            case 7:
                switchResult = _a.sent();
                if (switchResult instanceof Error) {
                    throw switchResult;
                }
                chainId = switchResult.chainId;
                _a.label = 8;
            case 8: return [2 /*return*/, {
                    accounts: [address],
                    chainId: chainId,
                    isConnected: true
                }];
            case 9:
                error_1 = _a.sent();
                console.error('EVM wallet connection error:', error_1);
                return [2 /*return*/, error_1 instanceof Error
                        ? error_1
                        : new Error("Failed to connect to ".concat(walletName, " wallet"))];
            case 10: return [2 /*return*/];
        }
    });
}); };
/**
 * Disconnects from an EVM wallet
 */
export var disconnectFromEVMWallet = function (walletName) { return __awaiter(void 0, void 0, void 0, function () {
    var provider;
    return __generator(this, function (_a) {
        try {
            provider = getActiveRawProvider();
            if (!provider) {
                return [2 /*return*/];
            }
            if (provider.removeAllListeners) {
                provider.removeAllListeners();
            }
            clearActiveProviders();
        }
        catch (error) {
            console.error('EVM wallet disconnection error:', error);
            return [2 /*return*/, error instanceof Error
                    ? error
                    : new Error("Failed to disconnect from ".concat(walletName, " wallet"))];
        }
        return [2 /*return*/];
    });
}); };
