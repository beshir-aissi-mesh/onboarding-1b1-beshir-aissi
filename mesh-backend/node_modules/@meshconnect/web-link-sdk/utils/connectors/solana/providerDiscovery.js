import { SolanaWalletType } from './types';
var identifyWalletType = function (provider) {
    if (provider.isPhantom)
        return SolanaWalletType.PHANTOM;
    if (provider.isSolflare)
        return SolanaWalletType.SOLFLARE;
    if (provider.isTrust || provider.isTrustWallet)
        return SolanaWalletType.TRUST;
    if (provider.isExodus)
        return SolanaWalletType.EXODUS;
    return SolanaWalletType.UNKNOWN;
};
var getProviderByType = function (type) {
    var _a, _b, _c, _d;
    // First try to get the provider directly using the wallet name
    var dynamicProvider = (_a = window[type]) === null || _a === void 0 ? void 0 : _a.solana;
    if (dynamicProvider) {
        return dynamicProvider;
    }
    // Then check known provider locations
    switch (type) {
        case SolanaWalletType.PHANTOM:
            return (_b = window.phantom) === null || _b === void 0 ? void 0 : _b.solana;
        case SolanaWalletType.SOLFLARE:
            return window.solflare;
        case SolanaWalletType.TRUST:
            return (_c = window.trustwallet) === null || _c === void 0 ? void 0 : _c.solana;
        case SolanaWalletType.EXODUS:
            return (_d = window.exodus) === null || _d === void 0 ? void 0 : _d.solana;
        case SolanaWalletType.UNKNOWN:
            return window.solana;
    }
};
export var findAvailableSolanaProviders = function () {
    var providers = {};
    // Check all known wallet types
    Object.values(SolanaWalletType).forEach(function (type) {
        if (getProviderByType(type)) {
            providers[type] = true;
        }
    });
    // Also check window.solana if not already found
    if (window.solana && !Object.keys(providers).length) {
        var walletType = identifyWalletType(window.solana);
        providers[walletType] = true;
    }
    return providers;
};
export var getSolanaProvider = function (walletName) {
    var _a;
    var normalizedName = walletName
        .toLowerCase()
        .replace(/\s+/g, '');
    var availableProviders = findAvailableSolanaProviders();
    // First check if the requested wallet is available
    if (availableProviders[normalizedName]) {
        var provider = getProviderByType(normalizedName);
        if (provider)
            return provider;
    }
    // If not found and it's a dynamic provider, try direct access
    var dynamicProvider = (_a = window[normalizedName]) === null || _a === void 0 ? void 0 : _a.solana;
    if (dynamicProvider) {
        return dynamicProvider;
    }
    // If still not found, check window.solana as last resort
    if (window.solana) {
        var detectedType = identifyWalletType(window.solana);
        if (detectedType === normalizedName ||
            normalizedName === SolanaWalletType.UNKNOWN) {
            return window.solana;
        }
    }
    throw new Error("Provider not found for wallet: ".concat(walletName));
};
