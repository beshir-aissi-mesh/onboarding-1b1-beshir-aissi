var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { PublicKey, SystemProgram, TransactionMessage, VersionedTransaction, TransactionInstruction } from '@meshconnect/solana-web3.js';
import { getSolanaProvider } from './providerDiscovery';
var TOKEN_PROGRAM_ID = new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
var ASSOCIATED_TOKEN_PROGRAM_ID = new PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');
var isUserRejection = function (error) {
    if (!error || typeof error !== 'object')
        return false;
    var err = error;
    var message = (err.message || '').toLowerCase();
    return (message.includes('user rejected') ||
        message.includes('declined') ||
        message.includes('cancelled') ||
        message.includes('denied') ||
        err.code === 4001);
};
export function getAssociatedTokenAddress(mint, owner) {
    return __awaiter(this, void 0, void 0, function () {
        var address;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, PublicKey.findProgramAddress([owner.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()], ASSOCIATED_TOKEN_PROGRAM_ID)];
                case 1:
                    address = (_a.sent())[0];
                    return [2 /*return*/, address];
            }
        });
    });
}
export function createSPLTransferInstruction(_a) {
    var fromTokenAccount = _a.fromTokenAccount, toTokenAccount = _a.toTokenAccount, owner = _a.owner, amount = _a.amount;
    var data = Buffer.alloc(9);
    data[0] = 3; // Transfer instruction
    data.writeBigUInt64LE(amount, 1);
    return new TransactionInstruction({
        keys: [
            { pubkey: fromTokenAccount, isSigner: false, isWritable: true },
            { pubkey: toTokenAccount, isSigner: false, isWritable: true },
            { pubkey: owner, isSigner: true, isWritable: false }
        ],
        programId: TOKEN_PROGRAM_ID,
        data: data
    });
}
export function createTransferTransaction(config) {
    return __awaiter(this, void 0, void 0, function () {
        var fromPubkey, toPubkey, instruction, tokenMintPubkey, fromTokenAccount, toTokenAccount, messageV0;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    fromPubkey = new PublicKey(config.fromAddress);
                    toPubkey = new PublicKey(config.toAddress);
                    if (!!config.tokenMint) return [3 /*break*/, 1];
                    // Native SOL transfer
                    instruction = SystemProgram.transfer({
                        fromPubkey: fromPubkey,
                        toPubkey: toPubkey,
                        lamports: Number(config.amount)
                    });
                    return [3 /*break*/, 4];
                case 1:
                    tokenMintPubkey = new PublicKey(config.tokenMint);
                    return [4 /*yield*/, getAssociatedTokenAddress(tokenMintPubkey, fromPubkey)];
                case 2:
                    fromTokenAccount = _a.sent();
                    return [4 /*yield*/, getAssociatedTokenAddress(tokenMintPubkey, toPubkey)];
                case 3:
                    toTokenAccount = _a.sent();
                    instruction = createSPLTransferInstruction({
                        fromTokenAccount: fromTokenAccount,
                        toTokenAccount: toTokenAccount,
                        owner: fromPubkey,
                        amount: BigInt(config.amount)
                    });
                    _a.label = 4;
                case 4:
                    messageV0 = new TransactionMessage({
                        payerKey: fromPubkey,
                        recentBlockhash: config.blockhash,
                        instructions: [instruction]
                    }).compileToV0Message();
                    return [2 /*return*/, new VersionedTransaction(messageV0)];
            }
        });
    });
}
export function handleManualSignAndSend(transaction, provider) {
    return __awaiter(this, void 0, void 0, function () {
        var signature, signedTransaction, signature, error_1;
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 6, , 7]);
                    if (!provider.signAndSendTransaction) return [3 /*break*/, 2];
                    return [4 /*yield*/, provider.signAndSendTransaction(transaction)];
                case 1:
                    signature = (_b.sent()).signature;
                    return [2 /*return*/, signature];
                case 2: return [4 /*yield*/, provider.signTransaction(transaction)];
                case 3:
                    signedTransaction = _b.sent();
                    if (!provider.sendTransaction) {
                        throw new Error('Provider does not support sendTransaction');
                    }
                    return [4 /*yield*/, provider.sendTransaction(signedTransaction)];
                case 4:
                    signature = _b.sent();
                    return [2 /*return*/, signature];
                case 5: return [3 /*break*/, 7];
                case 6:
                    error_1 = _b.sent();
                    console.error('Error in handleManualSignAndSend:', error_1);
                    if (error_1 instanceof Error && ((_a = error_1.message) === null || _a === void 0 ? void 0 : _a.includes('User rejected'))) {
                        throw new Error('Transaction was rejected by user');
                    }
                    throw error_1;
                case 7: return [2 /*return*/];
            }
        });
    });
}
export var sendSOLTransaction = function (config) { return __awaiter(void 0, void 0, void 0, function () {
    var provider, transaction, isManualWallet, signature, error_2, error_3;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 8, , 9]);
                provider = getSolanaProvider(config.walletName);
                return [4 /*yield*/, createTransferTransaction(config)];
            case 1:
                transaction = _a.sent();
                isManualWallet = provider.isTrust ||
                    provider.isTrustWallet ||
                    config.walletName.toLowerCase().includes('trust');
                if (!isManualWallet) return [3 /*break*/, 3];
                return [4 /*yield*/, handleManualSignAndSend(transaction, provider)];
            case 2: return [2 /*return*/, _a.sent()];
            case 3:
                if (!provider.signAndSendTransaction) return [3 /*break*/, 7];
                _a.label = 4;
            case 4:
                _a.trys.push([4, 6, , 7]);
                return [4 /*yield*/, provider.signAndSendTransaction(transaction)];
            case 5:
                signature = (_a.sent()).signature;
                return [2 /*return*/, signature];
            case 6:
                error_2 = _a.sent();
                if (isUserRejection(error_2)) {
                    throw new Error('Transaction was rejected by user');
                }
                return [2 /*return*/, handleManualSignAndSend(transaction, provider)];
            case 7: return [2 /*return*/, handleManualSignAndSend(transaction, provider)];
            case 8:
                error_3 = _a.sent();
                if (isUserRejection(error_3)) {
                    throw new Error('Transaction was rejected by user');
                }
                throw error_3 instanceof Error
                    ? error_3
                    : new Error("Failed to send SOL transaction with ".concat(config.walletName, " wallet"));
            case 9: return [2 /*return*/];
        }
    });
}); };
