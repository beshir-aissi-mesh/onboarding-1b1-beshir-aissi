{"version":3,"file":"index.browser.esm.js","sources":["../src/utils/ed25519.ts","../src/utils/to-buffer.ts","../src/utils/borsh-schema.ts","../src/publickey.ts","../src/account.ts","../src/bpf-loader-deprecated.ts","../src/transaction/constants.ts","../src/transaction/expiry-custom-errors.ts","../src/message/account-keys.ts","../src/layout.ts","../src/utils/shortvec-encoding.ts","../src/utils/assert.ts","../src/message/compiled-keys.ts","../src/utils/guarded-array-utils.ts","../src/message/legacy.ts","../src/message/v0.ts","../src/message/versioned.ts","../src/transaction/legacy.ts","../src/transaction/message.ts","../src/transaction/versioned.ts","../src/timing.ts","../src/sysvar.ts","../src/errors.ts","../src/utils/send-and-confirm-transaction.ts","../src/utils/sleep.ts","../src/instruction.ts","../src/fee-calculator.ts","../src/nonce-account.ts","../src/utils/bigint.ts","../src/programs/system.ts","../src/loader.ts","../src/bpf-loader.ts","../../../node_modules/fast-stable-stringify/index.js","../src/epoch-schedule.ts","../src/__forks__/browser/fetch-impl.ts","../src/rpc-websocket.ts","../src/account-data.ts","../src/programs/address-lookup-table/state.ts","../src/utils/makeWebsocketUrl.ts","../src/connection.ts","../src/keypair.ts","../src/programs/address-lookup-table/index.ts","../src/programs/compute-budget.ts","../src/programs/ed25519.ts","../src/utils/secp256k1.ts","../src/programs/secp256k1.ts","../src/programs/stake.ts","../src/programs/vote.ts","../src/validator-info.ts","../src/vote-account.ts","../src/utils/cluster.ts","../src/utils/send-and-confirm-raw-transaction.ts","../src/index.ts"],"sourcesContent":["import {ed25519} from '@noble/curves/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","const END_OF_BUFFER_ERROR_MESSAGE = 'Reached end of buffer unexpectedly';\n\n/**\n * Delegates to `Array#shift`, but throws if the array is zero-length.\n */\nexport function guardedShift<T>(byteArray: T[]): T {\n  if (byteArray.length === 0) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.shift() as T;\n}\n\n/**\n * Delegates to `Array#splice`, but throws if the section being spliced out extends past the end of\n * the array.\n */\nexport function guardedSplice<T>(\n  byteArray: T[],\n  ...args:\n    | [start: number, deleteCount?: number]\n    | [start: number, deleteCount: number, ...items: T[]]\n): T[] {\n  const [start] = args;\n  if (\n    args.length === 2 // Implies that `deleteCount` was supplied\n      ? start + (args[1] ?? 0) > byteArray.length\n      : start >= byteArray.length\n  ) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.splice(\n    ...(args as Parameters<typeof Array.prototype.splice>),\n  );\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\nimport {guardedShift, guardedSplice} from '../utils/guarded-array-utils';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = guardedShift(byteArray);\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = guardedShift(byteArray);\n    const numReadonlyUnsignedAccounts = guardedShift(byteArray);\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = guardedSplice(byteArray, 0, accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = guardedSplice(byteArray, 0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\nimport {guardedShift, guardedSplice} from '../utils/guarded-array-utils';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = guardedShift(byteArray);\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: guardedShift(byteArray),\n      numReadonlySignedAccounts: guardedShift(byteArray),\n      numReadonlyUnsignedAccounts: guardedShift(byteArray),\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(\n      guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n    );\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = guardedSplice(\n        byteArray,\n        0,\n        accountKeyIndexesLength,\n      );\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(guardedSplice(byteArray, 0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(\n        guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n      );\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = guardedSplice(\n        byteArray,\n        0,\n        writableIndexesLength,\n      );\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = guardedSplice(\n        byteArray,\n        0,\n        readonlyIndexesLength,\n      );\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\nimport {guardedSplice} from '../utils/guarded-array-utils';\n\n/** @internal */\ntype MessageSignednessErrors = {\n  invalid?: PublicKey[];\n  missing?: PublicKey[];\n};\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower',\n      } as Intl.CollatorOptions;\n      return x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures: boolean = true): boolean {\n    const signatureErrors = this._getMessageSignednessErrors(\n      this.serializeMessage(),\n      requireAllSignatures,\n    );\n    return !signatureErrors;\n  }\n\n  /**\n   * @internal\n   */\n  _getMessageSignednessErrors(\n    message: Uint8Array,\n    requireAllSignatures: boolean,\n  ): MessageSignednessErrors | undefined {\n    const errors: MessageSignednessErrors = {};\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          (errors.missing ||= []).push(publicKey);\n        }\n      } else {\n        if (!verify(signature, message, publicKey.toBytes())) {\n          (errors.invalid ||= []).push(publicKey);\n        }\n      }\n    }\n    return errors.invalid || errors.missing ? errors : undefined;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (verifySignatures) {\n      const sigErrors = this._getMessageSignednessErrors(\n        signData,\n        requireAllSignatures,\n      );\n      if (sigErrors) {\n        let errorMessage = 'Signature verification failed.';\n        if (sigErrors.invalid) {\n          errorMessage += `\\nInvalid signature for public key${\n            sigErrors.invalid.length === 1 ? '' : '(s)'\n          } [\\`${sigErrors.invalid.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        if (sigErrors.missing) {\n          errorMessage += `\\nMissing signature for public key${\n            sigErrors.missing.length === 1 ? '' : '(s)'\n          } [\\`${sigErrors.missing.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        throw new Error(errorMessage);\n      }\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {AccountKeysFromLookups} from '../message/account-keys';\nimport assert from '../utils/assert';\nimport {toBuffer} from '../utils/to-buffer';\nimport {Blockhash} from '../blockhash';\nimport {Message, MessageV0, VersionedMessage} from '../message';\nimport {PublicKey} from '../publickey';\nimport {AddressLookupTableAccount} from '../programs';\nimport {AccountMeta, TransactionInstruction} from './legacy';\n\nexport type TransactionMessageArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\nexport type DecompileArgs =\n  | {\n      accountKeysFromLookups: AccountKeysFromLookups;\n    }\n  | {\n      addressLookupTableAccounts: AddressLookupTableAccount[];\n    };\n\nexport class TransactionMessage {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n\n  constructor(args: TransactionMessageArgs) {\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n\n  static decompile(\n    message: VersionedMessage,\n    args?: DecompileArgs,\n  ): TransactionMessage {\n    const {header, compiledInstructions, recentBlockhash} = message;\n\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts,\n    } = header;\n\n    const numWritableSignedAccounts =\n      numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n\n    const numWritableUnsignedAccounts =\n      message.staticAccountKeys.length -\n      numRequiredSignatures -\n      numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error(\n        'Failed to decompile message because no account keys were found',\n      );\n    }\n\n    const instructions: TransactionInstruction[] = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys: AccountMeta[] = [];\n\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(\n            `Failed to find key for account key index ${keyIndex}`,\n          );\n        }\n\n        const isSigner = keyIndex < numRequiredSignatures;\n\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable =\n            keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable =\n            keyIndex - accountKeys.staticAccountKeys.length <\n            // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n            accountKeys.accountKeysFromLookups!.writable.length;\n        }\n\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable,\n        });\n      }\n\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(\n          `Failed to find program id for program id index ${compiledIx.programIdIndex}`,\n        );\n      }\n\n      instructions.push(\n        new TransactionInstruction({\n          programId,\n          data: toBuffer(compiledIx.data),\n          keys,\n        }),\n      );\n    }\n\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash,\n    });\n  }\n\n  compileToLegacyMessage(): Message {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n    });\n  }\n\n  compileToV0Message(\n    addressLookupTableAccounts?: AddressLookupTableAccount[],\n  ): MessageV0 {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\nimport {guardedSplice} from '../utils/guarded-array-utils';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from './connection';\nimport {TransactionSignature} from './transaction';\n\nexport class SendTransactionError extends Error {\n  private signature: TransactionSignature;\n  private transactionMessage: string;\n  private transactionLogs: string[] | Promise<string[]> | undefined;\n\n  constructor({\n    action,\n    signature,\n    transactionMessage,\n    logs,\n  }: {\n    action: 'send' | 'simulate';\n    signature: TransactionSignature;\n    transactionMessage: string;\n    logs?: string[];\n  }) {\n    const maybeLogsOutput = logs\n      ? `Logs: \\n${JSON.stringify(logs.slice(-10), null, 2)}. `\n      : '';\n    const guideText =\n      '\\nCatch the `SendTransactionError` and call `getLogs()` on it for full details.';\n    let message: string;\n    switch (action) {\n      case 'send':\n        message =\n          `Transaction ${signature} resulted in an error. \\n` +\n          `${transactionMessage}. ` +\n          maybeLogsOutput +\n          guideText;\n        break;\n      case 'simulate':\n        message =\n          `Simulation failed. \\nMessage: ${transactionMessage}. \\n` +\n          maybeLogsOutput +\n          guideText;\n        break;\n      default: {\n        message = `Unknown action '${((a: never) => a)(action)}'`;\n      }\n    }\n    super(message);\n\n    this.signature = signature;\n    this.transactionMessage = transactionMessage;\n    this.transactionLogs = logs ? logs : undefined;\n  }\n\n  get transactionError(): {message: string; logs?: string[]} {\n    return {\n      message: this.transactionMessage,\n      logs: Array.isArray(this.transactionLogs)\n        ? this.transactionLogs\n        : undefined,\n    };\n  }\n\n  /* @deprecated Use `await getLogs()` instead */\n  get logs(): string[] | undefined {\n    const cachedLogs = this.transactionLogs;\n    if (\n      cachedLogs != null &&\n      typeof cachedLogs === 'object' &&\n      'then' in cachedLogs\n    ) {\n      return undefined;\n    }\n    return cachedLogs;\n  }\n\n  async getLogs(connection: Connection): Promise<string[]> {\n    if (!Array.isArray(this.transactionLogs)) {\n      this.transactionLogs = new Promise((resolve, reject) => {\n        connection\n          .getTransaction(this.signature)\n          .then(tx => {\n            if (tx && tx.meta && tx.meta.logMessages) {\n              const logs = tx.meta.logMessages;\n              this.transactionLogs = logs;\n              resolve(logs);\n            } else {\n              reject(new Error('Log messages not found'));\n            }\n          })\n          .catch(reject);\n      });\n    }\n    return await this.transactionLogs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  (typeof SolanaJSONRPCErrorCode)[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\nimport {SendTransactionError} from '../errors';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    if (signature != null) {\n      throw new SendTransactionError({\n        action: 'send',\n        signature: signature,\n        transactionMessage: `Status: (${JSON.stringify(status)})`,\n      });\n    }\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nexport function toBufferLE(n: bigint, width: number): Buffer {\n  const result = Buffer.alloc(width);\n  let temp = n;\n  for (let i = 0; i < width; i++) {\n    result[i] = Number(temp & 0xffn);\n    temp >>= 8n;\n  }\n  return result;\n}\n\nexport function toBigIntLE(buf: Buffer): bigint {\n  return buf.reduceRight((acc, byte) => (acc << 8n) + BigInt(byte), 0n)\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (!params.basePubkey.equals(params.fromPubkey)) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {MS_PER_SLOT} from './timing';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(\n        transaction,\n        [payer, program],\n        {preflightCommitment: deployCommitment},\n      );\n      const {context, value} = await connection.confirmTransaction(\n        {\n          signature: finalizeSignature,\n          lastValidBlockHeight: transaction.lastValidBlockHeight!,\n          blockhash: transaction.recentBlockhash!,\n        },\n        deployCommitment,\n      );\n      if (value.err) {\n        throw new Error(\n          `Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`,\n        );\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (\n        true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment,\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve =>\n          setTimeout(resolve, Math.round(MS_PER_SLOT / 2)),\n        );\n      }\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\n/**\n * @deprecated Deprecated since Solana v1.17.20.\n */\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n *\n * @deprecated Deprecated since Solana v1.17.20.\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export const Headers: typeof globalThis.Headers = globalThis.Headers;\nexport const Request: typeof globalThis.Request = globalThis.Request;\nexport const Response: typeof globalThis.Response = globalThis.Response;\nexport default globalThis.fetch;\n","import {\n  CommonClient,\n  ICommonWebSocket,\n  IWSClientAdditionalOptions,\n  NodeWebSocketType,\n  NodeWebSocketTypeOptions,\n  WebSocket as createRpc,\n} from 'rpc-websockets';\n\ninterface IHasReadyState {\n  readyState: WebSocket['readyState'];\n}\n\nexport default class RpcWebSocketClient extends CommonClient {\n  private underlyingSocket: IHasReadyState | undefined;\n  constructor(\n    address?: string,\n    options?: IWSClientAdditionalOptions & NodeWebSocketTypeOptions,\n    generate_request_id?: (\n      method: string,\n      params: object | Array<any>,\n    ) => number,\n  ) {\n    const webSocketFactory = (url: string) => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options,\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = rpc.socket as ReturnType<typeof createRpc>;\n      } else {\n        this.underlyingSocket = rpc as NodeWebSocketType;\n      }\n      return rpc as ICommonWebSocket;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n  }\n  call(\n    ...args: Parameters<CommonClient['call']>\n  ): ReturnType<CommonClient['call']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to call a JSON-RPC method `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n  notify(\n    ...args: Parameters<CommonClient['notify']>\n  ): ReturnType<CommonClient['notify']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to send a JSON-RPC notification `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explicitly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to agave-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remarks If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remarks If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction applyDefaultMemcmpEncodingToFilters(\n  filters: GetProgramAccountsFilter[],\n): GetProgramAccountsFilter[] {\n  return filters.map(filter =>\n    'memcmp' in filter\n      ? {\n          ...filter,\n          memcmp: {\n            ...filter.memcmp,\n            encoding: filter.memcmp.encoding ?? 'base58',\n          },\n        }\n      : filter,\n  );\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\nexport type IsBlockhashValidConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type RecentPrioritizationFees = {\n  /** slot in which the fee was observed */\n  slot: number;\n  /** the per-compute-unit fee paid by at least one successfully landed transaction, specified in increments of 0.000001 lamports*/\n  prioritizationFee: number;\n};\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\nexport type GetRecentPrioritizationFeesConfig = {\n  /**\n   * If this parameter is provided, the response will reflect a fee to land a transaction locking\n   * all of the provided accounts as writable.\n   */\n  lockedWritableAccounts?: PublicKey[];\n};\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(\n  pick({\n    slot: number(),\n    prioritizationFee: number(),\n  }),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of base58-encoded account addresses to return post simulation state for */\n  accounts?: {\n    /** The encoding of the returned account's data */\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n  /** Optional parameter used to include inner instructions in the simulation */\n  innerInstructions?: boolean;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n  innerInstructions?: ParsedInnerInstruction[] | null;\n};\nconst ParsedInstructionStruct = pick({\n  program: string(),\n  programId: PublicKeyFromString,\n  parsed: unknown(),\n});\n\nconst PartiallyDecodedInstructionStruct = pick({\n  programId: PublicKeyFromString,\n  accounts: array(PublicKeyFromString),\n  data: string(),\n});\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n    innerInstructions: optional(\n      nullable(\n        array(\n          pick({\n            index: number(),\n            instructions: array(\n              union([\n                ParsedInstructionStruct,\n                PartiallyDecodedInstructionStruct,\n              ]),\n            ),\n          }),\n        ),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  programId?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.error(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(\n  GetRecentPrioritizationFeesResult,\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  programId: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: nullable(ConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n  } & (\n    | {\n        encoding?: 'base58'; // Base-58 is the default when not supplied.\n        /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n        bytes: string;\n      }\n    | {\n        encoding: 'base64';\n        /** data to match, as base-64 encoded string */\n        bytes: string;\n      }\n  );\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** wrap the result in an RpcResponse JSON object */\n  withContext?: boolean;\n};\n\nexport type GetProgramAccountsResponse = readonly Readonly<{\n  account: AccountInfo<Buffer>;\n  /** the account Pubkey as base-58 encoded string */\n  pubkey: PublicKey;\n}>[];\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\nexport type AccountSubscriptionConfig = Readonly<{\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /**\n   * Encoding format for Account data\n   *   - `base58` is slow.\n   *   - `jsonParsed` encoding attempts to use program-specific state parsers to return more\n   *      human-readable and explicit account state data\n   *   - If `jsonParsed` is requested but a parser cannot be found, the field falls back to `base64`\n   *     encoding, detectable when the `data` field is type `string`.\n   */\n  encoding?: 'base58' | 'base64' | 'base64+zstd' | 'jsonParsed';\n}>;\n\nexport type ProgramAccountSubscriptionConfig = Readonly<{\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /**\n   * Encoding format for Account data\n   *   - `base58` is slow.\n   *   - `jsonParsed` encoding attempts to use program-specific state parsers to return more\n   *      human-readable and explicit account state data\n   *   - If `jsonParsed` is requested but a parser cannot be found, the field falls back to `base64`\n   *     encoding, detectable when the `data` field is type `string`.\n   */\n  encoding?: 'base58' | 'base64' | 'base64+zstd' | 'jsonParsed';\n  /**\n   * Filter results using various filter objects\n   * The resultant account must meet ALL filter criteria to be included in the returned results\n   */\n  filters?: GetProgramAccountsFilter[];\n}>;\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   *\n   * @deprecated Deprecated since RPC v1.18; will be removed in a future version.\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment: GetProgramAccountsConfig &\n      Readonly<{withContext: true}>,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<GetProgramAccountsResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<\n    | GetProgramAccountsResponse\n    | RpcResponseAndContext<GetProgramAccountsResponse>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      {\n        ...configWithoutEncoding,\n        ...(configWithoutEncoding.filters\n          ? {\n              filters: applyDefaultMemcmpEncodingToFilters(\n                configWithoutEncoding.filters,\n              ),\n            }\n          : null),\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res =\n      configWithoutEncoding.withContext === true\n        ? create(unsafeRes, jsonRpcResultAndContext(baseSchema))\n        : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since RPC v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const {\n      context,\n      value: {blockhash},\n    } = await this.getLatestBlockhashAndContext(commitment);\n    const feeCalculator = {\n      get lamportsPerSignature(): number {\n        throw new Error(\n          'The capability to fetch `lamportsPerSignature` using the `getRecentBlockhash` API is ' +\n            'no longer offered by the network. Use the `getFeeForMessage` API to obtain the fee ' +\n            'for a given message.',\n        );\n      },\n      toJSON() {\n        return {};\n      },\n    };\n    return {\n      context,\n      value: {\n        blockhash,\n        feeCalculator,\n      },\n    };\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(\n    config?: GetRecentPrioritizationFeesConfig,\n  ): Promise<RecentPrioritizationFees[]> {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = accounts?.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPrioritizationFees',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent prioritization fees',\n      );\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since RPC v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(\n    blockhash: Blockhash,\n    rawConfig?: IsBlockhashValidConfig,\n  ): Promise<RpcResponseAndContext<boolean>> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs(\n      [blockhash],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = create(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to determine if the blockhash `' + blockhash + '`is valid',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  getBlockHeight = (() => {\n    const requestPromises: {[hash: string]: Promise<number>} = {};\n    return async (\n      commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n    ): Promise<number> => {\n      const {commitment, config} =\n        extractCommitmentFromConfig(commitmentOrConfig);\n      const args = this._buildArgs(\n        [],\n        commitment,\n        undefined /* encoding */,\n        config,\n      );\n      const requestHash = fastStableStringify(args);\n      requestPromises[requestHash] =\n        requestPromises[requestHash] ??\n        (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get block height information',\n              );\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n      return await requestPromises[requestHash];\n    };\n  })();\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since RPC v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getSignaturesForAddress} instead.\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      if (\n        configOrSigners &&\n        typeof configOrSigners === 'object' &&\n        'innerInstructions' in configOrSigners\n      ) {\n        config.innerInstructions = configOrSigners.innerInstructions;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash =\n          await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    if (\n      configOrSigners &&\n      typeof configOrSigners === 'object' &&\n      'innerInstructions' in configOrSigners\n    ) {\n      config.innerInstructions = configOrSigners.innerInstructions;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n\n      throw new SendTransactionError({\n        action: 'simulate',\n        signature: '',\n        transactionMessage: res.error.message,\n        logs: logs,\n      });\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash =\n          await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      skipPreflight === true\n        ? 'processed' // FIXME Remove when https://github.com/anza-xyz/agave/pull/483 is deployed.\n        : (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs = undefined;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n\n      throw new SendTransactionError({\n        action: skipPreflight ? 'send' : 'simulate',\n        signature: '',\n        transactionMessage: res.error.message,\n        logs: logs,\n      });\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                console.error(\n                  `Received ${e instanceof Error ? '' : 'JSON-RPC '}error calling \\`${method}\\``,\n                  {\n                    args,\n                    error: e,\n                  },\n                );\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify([subscriptionConfig.method, args]);\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param config\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    config?: AccountSubscriptionConfig,\n  ): ClientSubscriptionId;\n  /** @deprecated Instead, pass in an {@link AccountSubscriptionConfig} */\n  // eslint-disable-next-line no-dupe-class-members\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId;\n  // eslint-disable-next-line no-dupe-class-members\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitmentOrConfig?: Commitment | AccountSubscriptionConfig,\n  ): ClientSubscriptionId {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n      config,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param config\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    config?: ProgramAccountSubscriptionConfig,\n  ): ClientSubscriptionId;\n  /** @deprecated Instead, pass in a {@link ProgramAccountSubscriptionConfig} */\n  // eslint-disable-next-line no-dupe-class-members\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId;\n  // eslint-disable-next-line no-dupe-class-members\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitmentOrConfig?: Commitment | ProgramAccountSubscriptionConfig,\n    maybeFilters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      config\n        ? config\n        : maybeFilters\n          ? {filters: applyDefaultMemcmpEncodingToFilters(maybeFilters)}\n          : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param clientSubscriptionId client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from '../../utils/bigint';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {secp256k1} from '@noble/curves/secp256k1';\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.sign>[0],\n  privKey: Parameters<typeof secp256k1.sign>[1],\n) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery!] as const;\n};\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeStateV2::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeStateV2.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(\n    params: SplitStakeParams,\n    // Compute the cost of allocating the new stake account in lamports\n    rentExemptReserve: number,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: rentExemptReserve,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(\n    params: SplitStakeWithSeedParams,\n    // If this stake account is new, compute the cost of allocating it in lamports\n    rentExemptReserve?: number,\n  ): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    if (rentExemptReserve && rentExemptReserve > 0) {\n      transaction.add(\n        SystemProgram.transfer({\n          fromPubkey: params.authorizedPubkey,\n          toPubkey: splitStakePubkey,\n          lamports: rentExemptReserve,\n        }),\n      );\n    }\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Update validator identity (node pubkey) vote account instruction params.\n */\nexport type UpdateValidatorIdentityParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  nodePubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'InitializeAccount'\n  | 'Withdraw'\n  | 'UpdateValidatorIdentity';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n  UpdateValidatorIdentity: IInstructionInputData;\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  UpdateValidatorIdentity: {\n    index: 4,\n    layout: BufferLayout.struct<\n      VoteInstructionInputData['UpdateValidatorIdentity']\n    >([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   *\n   * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n   */\n  static space: number = 3762;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insufficient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n\n  /**\n   * Generate a transaction to update the validator identity (node pubkey) of a Vote account.\n   */\n  static updateValidatorIdentity(\n    params: UpdateValidatorIdentityParams,\n  ): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, nodePubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.UpdateValidatorIdentity;\n    const data = encodeData(type);\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\nimport {guardedShift, guardedSplice} from './utils/guarded-array-utils';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, validator logo URL */\n  iconUrl?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  iconUrl: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(\n        guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n      );\n      const isSigner = guardedShift(byteArray) === 1;\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n * @param {Cluster} [cluster=\"devnet\"] - The cluster name of the RPC API URL to use. Possible options: 'devnet' | 'testnet' | 'mainnet-beta'\n * @param {boolean} [tls=\"http\"] - Use TLS when connecting to cluster.\n *\n * @returns {string} URL string of the RPC endpoint\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","import type {Buffer} from 'buffer';\n\nimport {\n  BlockheightBasedTransactionConfirmationStrategy,\n  Connection,\n  DurableNonceTransactionConfirmationStrategy,\n  TransactionConfirmationStrategy,\n} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport {SendTransactionError} from '../errors';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategy: TransactionConfirmationStrategy,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategyOrConfirmOptions:\n    | TransactionConfirmationStrategy\n    | ConfirmOptions\n    | undefined,\n  maybeConfirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  let confirmationStrategy: TransactionConfirmationStrategy | undefined;\n  let options: ConfirmOptions | undefined;\n  if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'lastValidBlockHeight',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as BlockheightBasedTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'nonceValue',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as DurableNonceTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions as\n      | ConfirmOptions\n      | undefined;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy\n    ? connection.confirmTransaction(confirmationStrategy, commitment)\n    : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    if (signature != null) {\n      throw new SendTransactionError({\n        action: sendOptions?.skipPreflight ? 'send' : 'simulate',\n        signature: signature,\n        transactionMessage: `Status: (${JSON.stringify(status)})`,\n      });\n    }\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './errors';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './programs';\nexport * from './publickey';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './utils';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"],"names":["generatePrivateKey","ed25519","utils","randomPrivateKey","generateKeypair","privateScalar","publicKey","getPublicKey","secretKey","Uint8Array","set","isOnCurve","ExtendedPoint","fromHex","sign","message","slice","verify","toBuffer","arr","Buffer","isBuffer","from","buffer","byteOffset","byteLength","Struct","constructor","properties","Object","assign","encode","serialize","SOLANA_SCHEMA","decode","data","deserialize","decodeUnchecked","deserializeUnchecked","Enum","enum","keys","length","Error","map","key","Map","MAX_SEED_LENGTH","PUBLIC_KEY_LENGTH","isPublicKeyData","value","_bn","undefined","uniquePublicKeyCounter","PublicKey","decoded","bs58","BN","unique","equals","eq","toBase58","toBytes","toJSON","buf","b","toArrayLike","zeroPad","alloc","copy","Symbol","toStringTag","toString","createWithSeed","fromPublicKey","seed","programId","concat","publicKeyBytes","sha256","createProgramAddressSync","seeds","forEach","TypeError","createProgramAddress","findProgramAddressSync","nonce","address","seedsWithNonce","err","findProgramAddress","pubkeyData","pubkey","_PublicKey","default","kind","fields","Account","_publicKey","_secretKey","secretKeyBuffer","BPF_LOADER_DEPRECATED_PROGRAM_ID","PACKET_DATA_SIZE","VERSION_PREFIX_MASK","SIGNATURE_LENGTH_IN_BYTES","TransactionExpiredBlockheightExceededError","signature","defineProperty","prototype","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","push","writable","readonly","get","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","property","BufferLayout","blob","rustString","rsl","struct","u32","offset","_decode","bind","_encode","rslShim","str","chars","span","authorized","lockup","ns64","voteInit","u8","voteAuthorizeWithSeedArgs","getAlloc","type","getItemAlloc","item","field","Array","isArray","elementLayout","layout","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","condition","CompiledKeys","payer","keyMetaMap","compile","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","entries","assert","writableSigners","filter","readonlySigners","writableNonSigners","readonlyNonSigners","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","state","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","delete","END_OF_BUFFER_ERROR_MESSAGE","guardedShift","byteArray","guardedSplice","args","start","splice","Message","accountKeys","recentBlockhash","indexToProgramIds","account","version","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","unsignedAccountIndex","numUnsignedAccounts","numWritableUnsignedAccounts","numWritableSignedAccounts","isProgramId","has","programIds","values","nonProgramIds","_","numKeys","keyCount","shortvec","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","seq","signDataLayout","Layout","transaction","signData","accountCount","i","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","count","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","lookupAccountKeysIndex","numWritableLookupAccountKeys","reduce","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","MESSAGE_VERSION_0_PREFIX","serializedMessageLength","prefix","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","addressTableLookupLayout","maskedPrefix","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","hasOwnProperty","call","minContextSlot","blockhash","nonceInstruction","signers","add","items","compileMessage","JSON","stringify","console","warn","accountMetas","includes","uniqueMetas","pubkeyString","uniqueIndex","x","sort","y","options","localeMatcher","usage","sensitivity","ignorePunctuation","numeric","caseFirst","localeCompare","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","indexOf","invariant","_compile","valid","every","pair","serializeMessage","getEstimatedFee","connection","getFeeForMessage","setSigners","seen","Set","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","signatureErrors","_getMessageSignednessErrors","errors","missing","invalid","config","sigErrors","errorMessage","p","join","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","TransactionMessage","decompile","compiledIx","compileToLegacyMessage","compileToV0Message","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","signaturesLength","messageData","signerPubkeys","signerIndex","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","SendTransactionError","action","transactionMessage","logs","maybeLogsOutput","guideText","a","transactionLogs","transactionError","cachedLogs","getLogs","Promise","resolve","reject","getTransaction","then","tx","logMessages","catch","SolanaJSONRPCErrorCode","JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP","JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE","JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY","JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_NO_SNAPSHOT","JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX","JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE","JSON_RPC_SCAN_ERROR","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH","JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET","JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION","JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED","SolanaJSONRPCError","code","customMessage","name","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","abortSignal","nonceAccountPubkey","nonceValue","sleep","ms","setTimeout","encodeData","allocLength","layoutFields","decodeData","FeeCalculatorLayout","nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","toBufferLE","n","width","result","temp","Number","toBigIntLE","reduceRight","acc","byte","BigInt","encodeDecode","bigInt","bigIntLayout","src","u64","SystemInstruction","decodeInstructionType","checkProgramId","instructionTypeLayout","typeIndex","ixType","SYSTEM_INSTRUCTION_LAYOUTS","decodeCreateAccount","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","decodeTransfer","Transfer","toPubkey","decodeTransferWithSeed","TransferWithSeed","basePubkey","decodeAllocate","Allocate","accountPubkey","decodeAllocateWithSeed","base","AllocateWithSeed","decodeAssign","Assign","decodeAssignWithSeed","AssignWithSeed","decodeCreateWithSeed","CreateWithSeed","decodeNonceInitialize","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","WithdrawNonceAccount","decodeNonceAuthorize","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","UpgradeNonceAccount","createAccount","params","transfer","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","getMinNumSignatures","Math","ceil","chunkSize","load","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","error","owner","dataLayout","array","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","deployCommitment","finalizeSignature","context","currentSlot","getSlot","slot","round","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","fastStableStringify","MINIMUM_SLOT_PER_EPOCH","trailingZeros","nextPowerOfTwo","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","globalThis","fetch","RpcWebSocketClient","CommonClient","generate_request_id","webSocketFactory","url","rpc","createRpc","autoconnect","max_reconnects","reconnect","reconnect_interval","underlyingSocket","socket","readyState","notify","LOOKUP_TABLE_META_SIZE","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","makeWebsocketUrl","endpoint","matches","match","hostish","portWithColon","rest","protocol","startsWith","startPort","parseInt","websocketPort","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","assertEndpointUrl","putativeUrl","test","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","applyDefaultMemcmpEncodingToFilters","filters","memcmp","encoding","createRpcResult","union","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","create","jsonRpcResultAndContext","number","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","commission","GetRecentPrioritizationFeesResult","prioritizationFee","GetInflationRateResult","total","validator","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","ParsedInstructionStruct","parsed","PartiallyDecodedInstructionStruct","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","innerInstructions","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","createRpcClient","httpHeaders","customFetch","fetchMiddleware","disableRetryOnRateLimit","httpAgent","fetchImpl","agent","fetchWithMiddleware","info","init","modifiedFetchArgs","modifiedInfo","modifiedInit","clientBrowser","RpcClient","request","callback","method","body","headers","COMMON_HTTP_HEADERS","too_many_requests_retries","res","waitTime","statusText","text","ok","createRpcRequest","client","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetRecentPrioritizationFeesRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","preBalances","postBalances","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetLatestBlockhashRpcResult","IsBlockhashValidRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","lamportsPerSignature","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","process","Connection","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","getBlockHeight","requestPromises","_buildArgs","requestHash","unsafeRes","wsEndpoint","confirmTransactionInitialTimeout","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","getBalance","e","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleParsedAccounts","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configOrCommitment","configWithoutEncoding","baseSchema","withContext","getParsedProgramAccounts","strategy","rawSignature","aborted","reason","decodedSignature","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","getCancellationPromise","signal","addEventListener","getTransactionConfirmationPromise","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","done","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","getSignatureStatus","abortConfirmation","removeSignatureListener","expiryPromise","checkBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","cancellationPromise","outcome","race","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","getNonceAndContext","NONCE_INVALID","slotInWhichNonceDidAdvance","signatureStatus","commitmentForStatus","timeoutId","timeoutMs","TIMED_OUT","clearTimeout","getClusterNodes","getVoteAccounts","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","getInflationRate","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getLatestBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","wireMessage","getRecentPrioritizationFees","lockedWritableAccounts","getRecentBlockhash","getLatestBlockhash","isBlockhashValid","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","transactionDetails","getParsedBlock","getBlockProduction","extra","c","getParsedTransaction","getParsedTransactions","getTransactions","getConfirmedBlock","block","getBlocks","endSlot","getBlockSignatures","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","until","highestConfirmedRoot","before","confirmedSignatureInfo","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getAddressLookupTable","accountInfo","getNonce","requestAirdrop","to","_blockhashWithExpiryBlockHeight","disableCache","timeSinceFetch","Date","now","expired","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getStakeMinimumDelegation","simulateTransaction","transactionOrMessage","configOrSigners","includeAccounts","versionedTx","encodedTransaction","originalTx","sigVerify","traceIndent","logTrace","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","_updateSubscriptions","MAX_SAFE_INTEGER","clearInterval","hash","_setSubscription","nextSubscription","prevState","stateChangeCallbacks","cb","clientSubscriptionId","close","log","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","notification","_makeSubscription","subscriptionConfig","existingSubscription","onAccountChange","removeAccountChangeListener","_unsubscribeClientSubscription","accountId","onProgramAccountChange","maybeFilters","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","removeRootChangeListener","Keypair","keypair","_keypair","generate","fromSecretKey","skipValidation","computedPublicKey","ii","fromSeed","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","bigintLayout","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableInstruction","layoutType","decodeCreateLookupTable","checkKeysLength","recentSlot","decodeExtendLookupTable","decodeCloseLookupTable","recipient","decodeFreezeLookupTable","decodeDeactivateLookupTable","AddressLookupTableProgram","createLookupTable","lookupTableAddress","bumpSeed","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","ComputeBudgetInstruction","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","decodeRequestUnits","units","additionalFee","RequestUnits","decodeRequestHeapFrame","RequestHeapFrame","decodeSetComputeUnitLimit","SetComputeUnitLimit","decodeSetComputeUnitPrice","microLamports","SetComputeUnitPrice","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","PRIVATE_KEY_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","u16","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","ecdsaSign","msgHash","privKey","secp256k1","toCompactRawBytes","recovery","isValidPrivateKey","publicKeyCreate","ETHEREUM_ADDRESS_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","_Lockup","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","decodeInitialize","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","decodeAuthorizeWithSeed","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","decodeSplit","Split","splitStakePubkey","decodeMerge","Merge","sourceStakePubKey","decodeWithdraw","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","authorizeWithSeed","splitInstruction","split","rentExemptReserve","splitWithSeed","merge","withdraw","deactivate","VoteInit","authorizedVoter","authorizedWithdrawer","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","decodeInitializeAccount","InitializeAccount","voteAuthorizationType","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","currentAuthorityDerivedKeyBasePubkey","authorizedWithdrawerPubkey","VoteProgram","UpdateValidatorIdentity","VoteAuthorizationLayout","Voter","initializeAccount","safeWithdraw","currentVoteAccountBalance","rentExemptMinimum","updateValidatorIdentity","VALIDATOR_INFO_KEY","InfoString","website","details","iconUrl","keybaseUsername","ValidatorInfo","fromConfigData","configKeyCount","configKeys","rawInfo","parse","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","votes","authorizedVoters","priorVoters","lastTimestamp","versionOffset","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","idx","isEmpty","http","devnet","testnet","https","clusterApiUrl","cluster","tls","sendAndConfirmRawTransaction","confirmationStrategyOrConfirmOptions","maybeConfirmOptions","confirmationStrategy","LAMPORTS_PER_SOL"],"mappings":"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","x_google_ignoreList":[32]}