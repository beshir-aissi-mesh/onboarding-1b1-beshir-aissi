"use strict";
/* eslint-disable */
/* tslint:disable */
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FrontApi = exports.HttpClient = exports.ContentType = void 0;
var axios_1 = __importDefault(require("axios"));
var ContentType;
(function (ContentType) {
    ContentType["Json"] = "application/json";
    ContentType["FormData"] = "multipart/form-data";
    ContentType["UrlEncoded"] = "application/x-www-form-urlencoded";
    ContentType["Text"] = "text/plain";
})(ContentType = exports.ContentType || (exports.ContentType = {}));
var HttpClient = /** @class */ (function () {
    function HttpClient(_a) {
        if (_a === void 0) { _a = {}; }
        var _this = this;
        var securityWorker = _a.securityWorker, secure = _a.secure, format = _a.format, axiosConfig = __rest(_a, ["securityWorker", "secure", "format"]);
        this.securityData = null;
        this.setSecurityData = function (data) {
            _this.securityData = data;
        };
        this.request = function (_a) { return __awaiter(_this, void 0, void 0, function () {
            var secureParams, _b, requestParams, responseFormat;
            var secure = _a.secure, path = _a.path, type = _a.type, query = _a.query, format = _a.format, body = _a.body, params = __rest(_a, ["secure", "path", "type", "query", "format", "body"]);
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _b = (typeof secure === 'boolean' ? secure : this.secure) &&
                            this.securityWorker;
                        if (!_b) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.securityWorker(this.securityData)];
                    case 1:
                        _b = (_c.sent());
                        _c.label = 2;
                    case 2:
                        secureParams = (_b) ||
                            {};
                        requestParams = this.mergeRequestParams(params, secureParams);
                        responseFormat = format || this.format || undefined;
                        if (type === ContentType.FormData && body && body !== null && typeof body === 'object') {
                            body = this.createFormData(body);
                        }
                        if (type === ContentType.Text && body && body !== null && typeof body !== 'string') {
                            body = JSON.stringify(body);
                        }
                        return [2 /*return*/, this.instance.request(__assign(__assign({}, requestParams), { headers: __assign(__assign({}, (requestParams.headers || {})), (type && type !== ContentType.FormData ? { 'Content-Type': type } : {})), params: query, responseType: responseFormat, data: body, url: path }))];
                }
            });
        }); };
        this.instance = axios_1.default.create(__assign(__assign({}, axiosConfig), { baseURL: axiosConfig.baseURL || 'https://integration-api.meshconnect.com' }));
        this.secure = secure;
        this.format = format;
        this.securityWorker = securityWorker;
    }
    HttpClient.prototype.mergeRequestParams = function (params1, params2) {
        var method = params1.method || (params2 && params2.method);
        return __assign(__assign(__assign(__assign({}, this.instance.defaults), params1), (params2 || {})), { headers: __assign(__assign(__assign({}, ((method && this.instance.defaults.headers[method.toLowerCase()]) || {})), (params1.headers || {})), ((params2 && params2.headers) || {})) });
    };
    HttpClient.prototype.stringifyFormItem = function (formItem) {
        if (typeof formItem === 'object' && formItem !== null) {
            return JSON.stringify(formItem);
        }
        else {
            return "".concat(formItem);
        }
    };
    HttpClient.prototype.createFormData = function (input) {
        var _this = this;
        return Object.keys(input || {}).reduce(function (formData, key) {
            var property = input[key];
            var propertyContent = property instanceof Array ? property : [property];
            for (var _i = 0, propertyContent_1 = propertyContent; _i < propertyContent_1.length; _i++) {
                var formItem = propertyContent_1[_i];
                var isFileType = formItem instanceof Blob || formItem instanceof File;
                formData.append(key, isFileType ? formItem : _this.stringifyFormItem(formItem));
            }
            return formData;
        }, new FormData());
    };
    return HttpClient;
}());
exports.HttpClient = HttpClient;
/**
 * @title Mesh Connect Integration API
 * @version 1.0
 * @baseUrl https://integration-api.meshconnect.com
 *
 *
 * Mesh allows users to connect accounts of financial institutions,
 * crypto exchanges, and self-custody wallets. Mesh handles credential
 * validation, MFA, and error handling for each integration. After
 * an account is connected, Mesh allows client applications to read holdings,
 * transaction history and balances and execute crypto transfers (with user approval).
 */
var FrontApi = /** @class */ (function (_super) {
    __extends(FrontApi, _super);
    function FrontApi() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.integrationsAccountInformation = {
            /**
             * @description Return KYC details of the user.
             *
             * @tags Integrations account information
             * @name V1AccountVerifyCreate
             * @summary Verify account identity. Replaced by exchange/verify endpoint.
             * @request POST:/api/v1/account/verify
             * @deprecated
             * @secure
             * @response `200` `B2BBrokerAccountDetailsResponseApiResult` Successfully returns account details.
             * @response `400` `ApiResult` Request to retrieve account details is not correct.
             * @response `401` `any` Unauthorized: Client Id or Client Secret are not correct or missing.
             * @response `403` `any` Forbidden
             */
            v1AccountVerifyCreate: function (data, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/account/verify", method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
            },
            /**
             * @description Returns basic profile data of the user's exchange account. Available data varies by exchange and linked account.
             *
             * @tags Integrations account information
             * @name V1ExchangeVerifyCreate
             * @summary Verify account identity.
             * @request POST:/api/v1/exchange/verify
             * @secure
             * @response `200` `B2BBrokerAccountDetailsResponseApiResult` Successfully returns account details.
             * @response `400` `ApiResult` Request to retrieve account details is not correct.
             * @response `401` `any` Unauthorized: Client Id or Client Secret are not correct or missing.
             * @response `403` `any` Forbidden
             */
            v1ExchangeVerifyCreate: function (data, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/exchange/verify", method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
            }
        };
        _this.assets = {
            /**
             * No description
             *
             * @tags Assets
             * @name V1AssetsDetail
             * @summary Get available assets
             * @request GET:/api/v1/assets/{assetType}
             * @secure
             * @response `200` `AssetPaginationResponseApiResult` OK
             * @response `400` `ApiResult` Bad Request
             * @response `401` `any` Unauthorized
             */
            v1AssetsDetail: function (assetType, query, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/assets/".concat(assetType), method: 'GET', query: query, secure: true, format: 'json' }, params));
            }
        };
        _this.balance = {
            /**
             * @description Get real-time account fiat balances.
             *
             * @tags Balance
             * @name V1BalanceGetCreate
             * @summary Get account balance
             * @request POST:/api/v1/balance/get
             * @secure
             * @response `200` `B2BBrokerAccountBalanceModelApiResult` OK
             * @response `400` `ApiResult` Bad Request
             * @response `401` `any` Unauthorized
             * @response `403` `any` The API key used does not have read permission to call this Mesh endpoint.
             */
            v1BalanceGetCreate: function (data, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/balance/get", method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
            },
            /**
             * @description Get cached aggregated fiat balances from all connected integrations.
             *
             * @tags Balance
             * @name V1BalancePortfolioList
             * @summary Get aggregated portfolio fiat balances
             * @request GET:/api/v1/balance/portfolio
             * @secure
             * @response `200` `B2BFiatPortfolioModelApiResult` OK
             * @response `400` `ApiResult` Bad Request
             * @response `401` `any` Unauthorized
             * @response `403` `any` The API key used does not have read permission to call this Mesh endpoint.
             */
            v1BalancePortfolioList: function (query, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/balance/portfolio", method: 'GET', query: query, secure: true, format: 'json' }, params));
            }
        };
        _this.managedAccountAuthentication = {
            /**
             * @description Get personalized catalog link for client
             *
             * @tags Managed Account Authentication
             * @name V1CataloglinkList
             * @summary Get catalog link
             * @request GET:/api/v1/cataloglink
             * @deprecated
             * @secure
             * @response `200` `CatalogLinkApiResult` Catalog link created.
             * @response `400` `ApiResult` BadRequest can happen in following cases: <list type="number"><item><description>userId parameter not specified</description></item><item><description>Callback url parameter is invalid</description></item><item><description>Client does not have callback url specified</description></item></list>
             * @response `401` `any` Unauthorized: Client Id or Client Secret are not correct or missing.
             * @response `404` `ApiResult` API Client not found.
             */
            v1CataloglinkList: function (query, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/cataloglink", method: 'GET', query: query, secure: true, format: 'json' }, params));
            },
            /**
             * @description Get personalized catalog link for client supplying parameters for Link actions, such as transfers
             *
             * @tags Managed Account Authentication
             * @name V1CataloglinkCreate
             * @summary Get catalog link with parameters
             * @request POST:/api/v1/cataloglink
             * @deprecated
             * @secure
             * @response `200` `CatalogLinkApiResult` Catalog link created.
             * @response `400` `ApiResult` BadRequest can happen in following cases: <list type="number"><item><description>userId parameter not specified</description></item><item><description>Callback url parameter is invalid</description></item><item><description>Client does not have callback url specified</description></item></list>
             * @response `401` `any` Unauthorized: Client Id or Client Secret are not correct or missing.
             * @response `404` `ApiResult` API Client not found.
             */
            v1CataloglinkCreate: function (query, data, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/cataloglink", method: 'POST', query: query, body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
            },
            /**
             * @description Get a short lived, one-time use token for initializing a Link session using the client-side SDKs
             *
             * @tags Managed Account Authentication
             * @name V1LinktokenCreate
             * @summary Get Link token with parameters
             * @request POST:/api/v1/linktoken
             * @secure
             * @response `200` `LinkTokenModelApiResult` Link token created.
             * @response `400` `ApiResult` BadRequest can happen in following cases: <list type="number"><item><description>userId parameter not specified</description></item><item><description>Network not supported by the selected DeFi wallet.</description></item></list>
             * @response `401` `any` Unauthorized: Client Id or Client Secret are not correct or missing.
             * @response `404` `ApiResult` API Client not found.
             */
            v1LinktokenCreate: function (data, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/linktoken", method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
            },
            /**
             * @description Refresh auth token of the connected institution. Some institutions do not require tokens to be refreshed. The following institutions require custom flows: WeBull: AuthToken should be provided along with the RefreshToken Vanguard: security settings may activate MFA, requiring user action. If MFA is triggered, a second refresh request should be sent. Second request should contain MFA code and access token obtained from initial response
             *
             * @tags Managed Account Authentication
             * @name V1TokenRefreshCreate
             * @summary Refresh auth token
             * @request POST:/api/v1/token/refresh
             * @secure
             * @response `200` `B2BBrokerRefreshTokenResponseApiResult` OK
             * @response `400` `ApiResult` Bad Request
             * @response `401` `any` Unauthorized
             */
            v1TokenRefreshCreate: function (data, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/token/refresh", method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
            },
            /**
             * @description Remove connection to the financial institution and erase all related data completely.
             *
             * @tags Managed Account Authentication
             * @name V1AccountDelete
             * @summary Remove connection
             * @request DELETE:/api/v1/account
             * @secure
             * @response `200` `ApiResult` OK
             * @response `400` `ApiResult` Bad Request
             * @response `401` `any` Unauthorized
             */
            v1AccountDelete: function (data, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/account", method: 'DELETE', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
            },
            /**
             * @description Get the list of supported institutions and their health statuses.
             *
             * @tags Managed Account Authentication
             * @name V1StatusList
             * @summary Get health status
             * @request GET:/api/v1/status
             * @secure
             * @response `200` `B2BBrokersHealthStatusListApiResult` OK
             * @response `401` `any` Unauthorized
             */
            v1StatusList: function (params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/status", method: 'GET', secure: true, format: 'json' }, params));
            },
            /**
             * @description Returns a list of integrations with details including the integration ID, name, type, DeFi wallet provider ID, and categories.
             *
             * @tags Managed Account Authentication
             * @name V1IntegrationsList
             * @summary Retrieve the list of all available integrations.
             * @request GET:/api/v1/integrations
             * @secure
             * @response `200` `IntegrationsResponseApiResult` OK
             */
            v1IntegrationsList: function (params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/integrations", method: 'GET', secure: true, format: 'json' }, params));
            }
        };
        _this.selfManagedAccountAuthentication = {
            /**
             * @description Get authentication schemes of available integrations to perform authentication programmatically (not using the Web Catalog UI).
             *
             * @tags Self Managed Account Authentication
             * @name V1AuthenticationSchemesList
             * @summary Get authentication schemes
             * @request GET:/api/v1/authenticationSchemes
             * @secure
             * @response `200` `BrokerAuthenticationSchemeIReadOnlyCollectionApiResult` OK
             * @response `401` `any` Unauthorized
             */
            v1AuthenticationSchemesList: function (params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/authenticationSchemes", method: 'GET', secure: true, format: 'json' }, params));
            },
            /**
             * @description Authenticate user's brokerage/exchange account programmatically (not using the Web Catalog UI)
             *
             * @tags Self Managed Account Authentication
             * @name V1AuthenticateCreate
             * @summary Authenticate user's account
             * @request POST:/api/v1/authenticate
             * @secure
             * @response `200` `B2BBrokerAuthResponseApiResult` OK
             * @response `400` `ProblemDetails` Bad Request
             * @response `500` `void` Internal Server Error
             * @response `503` `void` Service Unavailable
             */
            v1AuthenticateCreate: function (query, data, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/authenticate", method: 'POST', query: query, body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
            },
            /**
             * @description Get OAuth link for the integrations with `OAuth` AuthenticationSchemeType
             *
             * @tags Self Managed Account Authentication
             * @name V1AuthenticateDetail
             * @summary Get OAuth authentication link
             * @request GET:/api/v1/authenticate/{brokerType}
             * @secure
             * @response `200` `B2BBrokerAuthPromptResponseApiResult` OK
             * @response `400` `ProblemDetails` Bad Request
             */
            v1AuthenticateDetail: function (brokerType, query, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/authenticate/".concat(brokerType), method: 'GET', query: query, secure: true, format: 'json' }, params));
            }
        };
        _this.managedTransfers = {
            /**
             * @description **Get supported networks list.** --- Get the list of all networks supported by Mesh to perform transfers, including which tokens and integrations are supported.
             *
             * @tags Managed Transfers
             * @name V1TransfersManagedNetworksList
             * @summary Get networks
             * @request GET:/api/v1/transfers/managed/networks
             * @secure
             * @response `200` `NetworkModelResponseApiResult` OK
             * @response `401` `any` Unauthorized
             */
            v1TransfersManagedNetworksList: function (params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/transfers/managed/networks", method: 'GET', secure: true, format: 'json' }, params));
            },
            /**
             * @description **Get supported integrations list.** --- Get the list of all integrations supported by Mesh to perform transfers, including which tokens and networks are supported.
             *
             * @tags Managed Transfers
             * @name V1TransfersManagedIntegrationsList
             * @summary Get integrations
             * @request GET:/api/v1/transfers/managed/integrations
             * @secure
             * @response `200` `IntegrationNetworkResponseApiResult` OK
             * @response `401` `any` Unauthorized
             */
            v1TransfersManagedIntegrationsList: function (params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/transfers/managed/integrations", method: 'GET', secure: true, format: 'json' }, params));
            },
            /**
             * @description Get the list of all tokens supported by Mesh to perform transfers, including which networks and integrations are supported.
             *
             * @tags Managed Transfers
             * @name V1TransfersManagedTokensList
             * @summary Get supported tokens list
             * @request GET:/api/v1/transfers/managed/tokens
             * @secure
             * @response `200` `TokenNetworksResponseApiResult` OK
             */
            v1TransfersManagedTokensList: function (params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/transfers/managed/tokens", method: 'GET', secure: true, format: 'json' }, params));
            },
            /**
             * @description Checks if the combination of integration ID, network ID, token is correct for transfer. Checks if the target address is in the correct format.
             *
             * @tags Managed Transfers
             * @name V1TransfersManagedVerifyList
             * @summary Verify the transfer request without authenticating the integration accounts
             * @request GET:/api/v1/transfers/managed/verify
             * @secure
             * @response `200` `TransferVerificationResponseApiResult` OK
             * @response `400` `ApiResult` Bad Request
             * @response `401` `any` Unauthorized
             */
            v1TransfersManagedVerifyList: function (data, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/transfers/managed/verify", method: 'GET', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
            },
            /**
             * @description **Get the list of networks and tokens eligible for a transfer, based on the provided request data.** --- Transfers can be configured either from one connected account to another connected account, or from a connected account to any arbitrary address or addresses. * **From one connected account to another connected account:** The API client provides `FromAuthToken` that is representing the source account and `ToAuthToken` that is representing the target account. Front API maps networks and tokens supported by both accounts and returns all tokens and networks eligible for a transfer as the result. * **From a connected account to any arbitrary address:** The API client provides `FromAuthToken` that is representing the source account and the list of target addresses using the `ToAddresses` field. Front API verifies the addresses and returns the list of tokens, eligible to be transferred as the result of the operation. Returns the list of holdings on the account that can be used to perform the transfer. Each holdings item contains the list of supported networks that can be used to transfer the corresponding asset. Each network contains details such as gas fees and the amount eligible to be transferred.
             *
             * @tags Managed Transfers
             * @name V1TransfersManagedConfigureCreate
             * @summary Configure transfer
             * @request POST:/api/v1/transfers/managed/configure
             * @secure
             * @response `200` `ConfigureTransferResponseApiResult` OK
             * @response `400` `ApiResult` Bad Request
             * @response `401` `any` Unauthorized
             * @response `403` `any` The API key used does not have write permission to call this Mesh endpoint.
             */
            v1TransfersManagedConfigureCreate: function (data, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/transfers/managed/configure", method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
            },
            /**
             * @description **Validate and preview the transfer.** --- Validates the transfer, calculates the relevant amount in crypto if requested amount was in fiat and updates the current network fee values. This endpoint uses the `NetworkId` field to specify which network will be used to perform the transfer. The target `NetworkId` should be selected after configuring the transfer using `/configure` endpoint. Returns the `PreviewId` value that can be used to commit the transfer.
             *
             * @tags Managed Transfers
             * @name V1TransfersManagedPreviewCreate
             * @summary Preview transfer
             * @request POST:/api/v1/transfers/managed/preview
             * @secure
             * @response `200` `PreviewTransferResponseApiResult` OK
             * @response `400` `ApiResult` Bad Request
             * @response `401` `any` Unauthorized
             * @response `403` `any` The API key used does not have write permission to call this Mesh endpoint.
             */
            v1TransfersManagedPreviewCreate: function (data, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/transfers/managed/preview", method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
            },
            /**
             * @description **Commit the previously previewed transfer.** --- Previews the transfer, using the `PreviewId` value. Handles multi-factor authentication codes if the account is configured to use them for additional security. Returns the status of the transfer and the details of the transfer if it was initiated successfully.
             *
             * @tags Managed Transfers
             * @name V1TransfersManagedExecuteCreate
             * @summary Execute transfer
             * @request POST:/api/v1/transfers/managed/execute
             * @secure
             * @response `200` `ExecuteTransferResponseApiResult` OK
             * @response `400` `ApiResult` Bad Request
             * @response `401` `any` Unauthorized
             * @response `403` `any` The API key used does not have write permission to call this Mesh endpoint.
             */
            v1TransfersManagedExecuteCreate: function (data, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/transfers/managed/execute", method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
            },
            /**
             * @description Get or generate a cryptocurrency deposit address that can be used to transfer assets to the financial institution
             *
             * @tags Managed Transfers
             * @name V1TransfersManagedAddressGetCreate
             * @summary Get deposit address
             * @request POST:/api/v1/transfers/managed/address/get
             * @secure
             * @response `200` `B2BBrokerCryptocurrencyDepositAddressResponseApiResult` Address successfully obtained or generation initiated.
             * @response `400` `ApiResult` Request details are not correct.
             * @response `401` `any` Unauthorized: Client Id or Client Secret are not correct or missing.
             * @response `404` `ApiResult` Address for the required symbol is not found.
             */
            v1TransfersManagedAddressGetCreate: function (data, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/transfers/managed/address/get", method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
            },
            /**
             * @description Get a quote for transferring a fiat amount from a brokerage account in a given cryptocurrency over a specified network. Returns min and max fees and amounts to account for different funding sources (existing crypto balance, cash balance or ACH/debit deposit). Currently only supported for Coinbase.
             *
             * @tags Managed Transfers
             * @name V1TransfersManagedQuoteCreate
             * @summary Quote transfer
             * @request POST:/api/v1/transfers/managed/quote
             * @secure
             * @response `200` `QuoteTransferResponseApiResult` Quote obtained.
             * @response `400` `ApiResult` Request details are not correct.
             * @response `401` `any` Unauthorized: Client Id or Client Secret are not correct or missing.
             */
            v1TransfersManagedQuoteCreate: function (data, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/transfers/managed/quote", method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
            },
            /**
             * @description Get cryptocurrency transfers initiated by Mesh on exchanges or self-custody wallets.
             *
             * @tags Managed Transfers
             * @name V1TransfersManagedMeshList
             * @summary Get transfers initiated by Mesh
             * @request GET:/api/v1/transfers/managed/mesh
             * @secure
             * @response `200` `TransferModelPaginationResponseApiResult` Transfers obtained.
             * @response `400` `ApiResult` Bad Request
             * @response `401` `any` Unauthorized: Client Id or Client Secret are not correct or missing.
             */
            v1TransfersManagedMeshList: function (query, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/transfers/managed/mesh", method: 'GET', query: query, secure: true, format: 'json' }, params));
            },
            /**
             * @description **Updates the previously executed transfer.** --- Updates the transfer status, using the `TransactionId` value. Returns the status of the transfer and the details of the transfer.
             *
             * @tags Managed Transfers
             * @name V1TransfersManagedUpdateCreate
             * @summary Update transfer status
             * @request POST:/api/v1/transfers/managed/update
             * @secure
             * @response `200` `UpdateTransferResponseApiResult` OK
             * @response `400` `ApiResult` Bad Request
             * @response `401` `any` Unauthorized
             * @response `403` `any` The API key used does not have write permission to call this Mesh endpoint.
             */
            v1TransfersManagedUpdateCreate: function (data, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/transfers/managed/update", method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
            }
        };
        _this.portfolio = {
            /**
             * @description Obtain assets from the connected investment account. Performs realtime API call to the underlying integration.
             *
             * @tags Portfolio
             * @name V1HoldingsGetCreate
             * @summary Get holdings.
             * @request POST:/api/v1/holdings/get
             * @secure
             * @response `200` `HoldingsModelApiResult` Holdings obtained
             * @response `400` `ApiResult` Bad Request
             * @response `401` `any` Unauthorized: Client Id or Client Secret are not correct or missing.
             * @response `403` `any` The API key used does not have read permission to call this Mesh endpoint.
             */
            v1HoldingsGetCreate: function (data, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/holdings/get", method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
            },
            /**
             * @description Obtain assets from the connected investment account and return total value and performance. Performs realtime API call to the underlying integration.
             *
             * @tags Portfolio
             * @name V1HoldingsValueCreate
             * @summary Get holdings values.
             * @request POST:/api/v1/holdings/value
             * @secure
             * @response `200` `BrokerPortfolioValueModelApiResult` Market values of assets
             * @response `400` `ApiResult` Bad Request
             * @response `401` `any` Unauthorized: Client Id or Client Secret are not correct or missing.
             * @response `403` `any` The API key used does not have read permission to call this Mesh endpoint.
             */
            v1HoldingsValueCreate: function (data, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/holdings/value", method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
            },
            /**
             * @description Get the aggregated portfolio of the user containing market values.
             *
             * @tags Portfolio
             * @name V1HoldingsPortfolioList
             * @summary Get aggregated portfolio
             * @request GET:/api/v1/holdings/portfolio
             * @secure
             * @response `200` `B2BPortfolioModelApiResult` Portfolio obtained
             * @response `400` `ApiResult` Bad Request
             * @response `401` `any` Unauthorized: Client Id or Client Secret are not correct or missing.
             * @response `403` `any` The API key used does not have read permission to call this Mesh endpoint.
             */
            v1HoldingsPortfolioList: function (query, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/holdings/portfolio", method: 'GET', query: query, secure: true, format: 'json' }, params));
            }
        };
        _this.quickNode = {
            /**
             * No description
             *
             * @tags QuickNode
             * @name V1CatalogSolanaGetLatestBlockhashCreate
             * @request POST:/api/v1/catalog/solana/getLatestBlockhash
             * @secure
             * @response `200` `StringApiResult` OK
             * @response `400` `ProblemDetails` Bad Request
             * @response `500` `void` Internal Server Error
             */
            v1CatalogSolanaGetLatestBlockhashCreate: function (params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/catalog/solana/getLatestBlockhash", method: 'POST', secure: true, format: 'json' }, params));
            }
        };
        _this.transactions = {
            /**
             * @description Get transactions on the account - the paginated history of the executed orders along with the pending orders.
             *
             * @tags Transactions
             * @name V1TransactionsListCreate
             * @summary Get transactions
             * @request POST:/api/v1/transactions/list
             * @secure
             * @response `200` `B2BBrokerOrderListResponseApiResult` Transactions obtained.
             * @response `401` `any` Unauthorized: Client Id or Client Secret are not correct or provided integration token is not correct.
             * @response `403` `any` The API key used does not have read permission to call this Mesh endpoint.
             */
            v1TransactionsListCreate: function (data, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/transactions/list", method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
            },
            /**
             * @description Get details of an executed order. Typically used to poll the status of the previously executed order.
             *
             * @tags Transactions
             * @name V1TransactionsDetailsCreate
             * @summary Get transaction details
             * @request POST:/api/v1/transactions/details
             * @secure
             * @response `200` `B2BBrokerOrderApiResult` Transactions obtained.
             * @response `400` `ProblemDetails` Bad Request
             * @response `401` `any` Unauthorized: Client Id or Client Secret are not correct or provided integration token is not correct.
             * @response `403` `any` The API key used does not have read permission to call this Mesh endpoint.
             * @response `404` `ProblemDetails` Transaction is not found.
             */
            v1TransactionsDetailsCreate: function (data, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/transactions/details", method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
            },
            /**
             * @description Get supported features for trading for a particular financial institution. Different institutions support different features (e.g. different `OrderType` or different sets of `TimeInForce` values), so this endpoint is used to describe such features for provided financial institution.
             *
             * @tags Transactions
             * @name V1TransactionsFeatureListCreate
             * @summary Get supported order features for institution
             * @request POST:/api/v1/transactions/featureList
             * @secure
             * @response `200` `B2BBrokerTradingFeatureInfoApiResult` Feature list obtained.
             * @response `400` `ProblemDetails` Bad Request
             * @response `401` `any` Unauthorized: Client Id or Client Secret are not correct or provided integration token is not correct.
             */
            v1TransactionsFeatureListCreate: function (data, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/transactions/featureList", method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
            },
            /**
             * @description Validates the order information (such as necessary balance availability), and returns additional information, such as expected order fee. Does not execute the order.
             *
             * @tags Transactions
             * @name V1TransactionsPreviewCreate
             * @summary Preview order execution
             * @request POST:/api/v1/transactions/preview/{side}
             * @secure
             * @response `200` `B2BBrokerPreviewOrderResultApiResult` Order preview obtained.
             * @response `400` `ProblemDetails` Request details are not correct.
             * @response `401` `any` Unauthorized: Client Id or Client Secret are not correct or provided integration token is not correct.
             * @response `403` `any` The API key used does not have write permission to call this Mesh endpoint.
             */
            v1TransactionsPreviewCreate: function (side, data, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/transactions/preview/".concat(side), method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
            },
            /**
             * @description Validates the order information and then calls institution's API to execute an order. It's recommended to call this endpoint after calling the `preview` endpoint to make sure that the order execution request is correct.
             *
             * @tags Transactions
             * @name V1TransactionsCreate
             * @summary Execute order
             * @request POST:/api/v1/transactions/{side}
             * @secure
             * @response `200` `B2BBrokerCreateOrderResultApiResult` Order executed.
             * @response `400` `ProblemDetails` Request details are not correct.
             * @response `401` `any` Unauthorized: Client Id or Client Secret are not correct or provided integration token is not correct.
             * @response `403` `any` The API key used does not have write permission to call this Mesh endpoint.
             */
            v1TransactionsCreate: function (side, data, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/transactions/".concat(side), method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
            },
            /**
             * @description Cancels a pending order (an order with `InProgress` status). `SymbolPair` is required to be provided for `Binance`, `BinanceInternational`, `Okx` and `BitFlyer` institutions. This value
             *
             * @tags Transactions
             * @name V1TransactionsCancelCreate
             * @summary Cancel order execution
             * @request POST:/api/v1/transactions/cancel
             * @secure
             * @response `200` `ApiResult` Order canceled.
             * @response `400` `ProblemDetails` Request details are not correct.
             * @response `401` `any` Unauthorized: Client Id or Client Secret are not correct or provided integration token is not correct.
             * @response `403` `any` The API key used does not have write permission to call this Mesh endpoint.
             * @response `404` `ProblemDetails` Not Found
             */
            v1TransactionsCancelCreate: function (data, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/transactions/cancel", method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
            },
            /**
             * @description Returns information on trading allowance for a provided symbol. For example - some institutions allow fractional trading for some symbols, but do not allow it for others. So before placing an order the API client can check if the required symbol can be traded fractionally with the provided institution.
             *
             * @tags Transactions
             * @name V1TransactionsSymbolinfoCreate
             * @summary Get symbol information
             * @request POST:/api/v1/transactions/symbolinfo
             * @secure
             * @response `200` `B2BBrokerOrderSymbolInfoApiResult` Information for symbol obtained.
             * @response `400` `ProblemDetails` Request details are not correct.
             * @response `401` `any` Unauthorized: Client Id or Client Secret are not correct.
             */
            v1TransactionsSymbolinfoCreate: function (data, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/transactions/symbolinfo", method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
            }
        };
        _this.transfers = {
            /**
             * @description Get entire history of cryptocurrency transfers (withdrawals or deposits) executed from an exchange. Only supports Exchange integrations.
             *
             * @tags Transfers
             * @name V1TransfersListCreate
             * @summary Get transfer history
             * @request POST:/api/v1/transfers/list
             * @secure
             * @response `200` `B2BBrokerTransactionsListModelApiResult` Transfers obtained.
             * @response `400` `ApiResult` Bad Request
             * @response `401` `any` Unauthorized: Client Id or Client Secret are not correct or missing.
             * @response `403` `any` The API key used does not have read permission to call this Mesh endpoint.
             */
            v1TransfersListCreate: function (data, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/transfers/list", method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
            },
            /**
             * @description Get details of a specific transfer (withdrawals or deposits) executed from an exchange. Only supports Exchange integrations.
             *
             * @tags Transfers
             * @name V1TransfersDetailsCreate
             * @summary Get transfer details
             * @request POST:/api/v1/transfers/details
             * @secure
             * @response `200` `B2BBrokerCryptocurrencyTransactionApiResult` Transfer details obtained.
             * @response `400` `ApiResult` Transfer details are not correct.
             * @response `401` `any` Unauthorized: Client Id or Client Secret are not correct or missing.
             * @response `403` `any` The API key used does not have read permission to call this Mesh endpoint.
             * @response `404` `ApiResult` Transfer with provided id was not found.
             */
            v1TransfersDetailsCreate: function (data, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/transfers/details", method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
            },
            /**
             * @description Initiate a new cryptocurrency transfer on a blockchain, cryptocurrency broker or cryptocurrency exchange. Obsolete endpoint, please use POST /transfers/managed/execute endpoint instead.
             *
             * @tags Transfers
             * @name V1TransfersCreate
             * @summary Initiate a transfer
             * @request POST:/api/v1/transfers
             * @deprecated
             * @secure
             * @response `200` `B2BBrokerCreateCryptocurrencyTransactionResponseApiResult` Transfer successfully initiated.
             * @response `400` `ApiResult` Transfer details are not correct.
             * @response `401` `any` Unauthorized: Client Id or Client Secret are not correct or missing.
             * @response `403` `any` The API key used does not have write permission to call this Mesh endpoint.
             */
            v1TransfersCreate: function (data, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/transfers", method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
            },
            /**
             * @description Get or generate a cryptocurrency deposit address that can be used to transfer assets to the financial institution
             *
             * @tags Transfers
             * @name V1TransfersAddressGetCreate
             * @summary Get deposit address
             * @request POST:/api/v1/transfers/address/get
             * @secure
             * @response `200` `B2BBrokerCryptocurrencyDepositAddressResponseApiResult` Address successfully obtained or generation initiated.
             * @response `400` `ApiResult` Request details are not correct.
             * @response `401` `any` Unauthorized: Client Id or Client Secret are not correct or missing.
             * @response `404` `ApiResult` Address for the required symbol is not found.
             */
            v1TransfersAddressGetCreate: function (data, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/transfers/address/get", method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
            },
            /**
             * @description Get details of the asset for deposit or withdrawal. For example, several exchanges support same tokens over multiple blockchains, and thus require the name of chain to be supplied for transfers. This endpoint allows getting such details.
             *
             * @tags Transfers
             * @name V1TransfersSymbolDetailsCreate
             * @summary Get details of asset
             * @request POST:/api/v1/transfers/symbol/details
             * @secure
             * @response `200` `B2BBrokerCryptocurrencySymbolDetailsResponseApiResult` Address successfully obtained or generation initiated.
             * @response `400` `ApiResult` Request details are not correct.
             * @response `401` `any` Unauthorized: Client Id or Client Secret are not correct or missing.
             * @response `404` `ApiResult` Asset details for provided symbol are not found.
             */
            v1TransfersSymbolDetailsCreate: function (data, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/transfers/symbol/details", method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
            }
        };
        _this.wallets = {
            /**
             * No description
             *
             * @tags Wallets
             * @name V1WalletsVerifyList
             * @summary Get wallet verifications for user and address.
             * @request GET:/api/v1/wallets/verify
             * @secure
             * @response `200` `DeFiWalletVerificationResponseApiResult` Verifications obtained.
             * @response `400` `ApiResult` Bad Request
             * @response `401` `any` Unauthorized: Client Id or Client Secret are not correct or missing.
             */
            v1WalletsVerifyList: function (query, params) {
                if (params === void 0) { params = {}; }
                return _this.request(__assign({ path: "/api/v1/wallets/verify", method: 'GET', query: query, secure: true, format: 'json' }, params));
            }
        };
        return _this;
    }
    return FrontApi;
}(HttpClient));
exports.FrontApi = FrontApi;
